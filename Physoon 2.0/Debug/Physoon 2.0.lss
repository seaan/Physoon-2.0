
Physoon 2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000063f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000184  00802000  000063f6  0000648a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000706  00802184  00802184  0000660e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000660e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000666c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000890  00000000  00000000  000066b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ef32  00000000  00000000  00006f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000260a  00000000  00000000  00015e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000bf6e  00000000  00000000  0001847c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002810  00000000  00000000  000243ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d51d  00000000  00000000  00026bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000057f6  00000000  00000000  00054119  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000738  00000000  00000000  00059910  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c525  00000000  00000000  0005a048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3e c1       	rjmp	.+636    	; 0x27e <__ctors_end>
       2:	00 00       	nop
       4:	59 c1       	rjmp	.+690    	; 0x2b8 <__bad_interrupt>
       6:	00 00       	nop
       8:	57 c1       	rjmp	.+686    	; 0x2b8 <__bad_interrupt>
       a:	00 00       	nop
       c:	55 c1       	rjmp	.+682    	; 0x2b8 <__bad_interrupt>
       e:	00 00       	nop
      10:	53 c1       	rjmp	.+678    	; 0x2b8 <__bad_interrupt>
      12:	00 00       	nop
      14:	51 c1       	rjmp	.+674    	; 0x2b8 <__bad_interrupt>
      16:	00 00       	nop
      18:	4f c1       	rjmp	.+670    	; 0x2b8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4d c1       	rjmp	.+666    	; 0x2b8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4b c1       	rjmp	.+662    	; 0x2b8 <__bad_interrupt>
      22:	00 00       	nop
      24:	49 c1       	rjmp	.+658    	; 0x2b8 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <__vector_10>
      2c:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__vector_11>
      30:	43 c1       	rjmp	.+646    	; 0x2b8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 48 1d 	jmp	0x3a90	; 0x3a90 <__vector_13>
      38:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__vector_14>
      3c:	3e c1       	rjmp	.+636    	; 0x2ba <__vector_15>
      3e:	00 00       	nop
      40:	72 c1       	rjmp	.+740    	; 0x326 <__vector_16>
      42:	00 00       	nop
      44:	a6 c1       	rjmp	.+844    	; 0x392 <__vector_17>
      46:	00 00       	nop
      48:	da c1       	rjmp	.+948    	; 0x3fe <__vector_18>
      4a:	00 00       	nop
      4c:	0e c2       	rjmp	.+1052   	; 0x46a <__vector_19>
      4e:	00 00       	nop
      50:	42 c2       	rjmp	.+1156   	; 0x4d6 <__vector_20>
      52:	00 00       	nop
      54:	76 c2       	rjmp	.+1260   	; 0x542 <__vector_21>
      56:	00 00       	nop
      58:	aa c2       	rjmp	.+1364   	; 0x5ae <__vector_22>
      5a:	00 00       	nop
      5c:	de c2       	rjmp	.+1468   	; 0x61a <__vector_23>
      5e:	00 00       	nop
      60:	2b c1       	rjmp	.+598    	; 0x2b8 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__vector_25>
      68:	27 c1       	rjmp	.+590    	; 0x2b8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	25 c1       	rjmp	.+586    	; 0x2b8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	23 c1       	rjmp	.+582    	; 0x2b8 <__bad_interrupt>
      72:	00 00       	nop
      74:	21 c1       	rjmp	.+578    	; 0x2b8 <__bad_interrupt>
      76:	00 00       	nop
      78:	1f c1       	rjmp	.+574    	; 0x2b8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1d c1       	rjmp	.+570    	; 0x2b8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	1b c1       	rjmp	.+566    	; 0x2b8 <__bad_interrupt>
      82:	00 00       	nop
      84:	19 c1       	rjmp	.+562    	; 0x2b8 <__bad_interrupt>
      86:	00 00       	nop
      88:	17 c1       	rjmp	.+558    	; 0x2b8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	15 c1       	rjmp	.+554    	; 0x2b8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	13 c1       	rjmp	.+550    	; 0x2b8 <__bad_interrupt>
      92:	00 00       	nop
      94:	11 c1       	rjmp	.+546    	; 0x2b8 <__bad_interrupt>
      96:	00 00       	nop
      98:	0f c1       	rjmp	.+542    	; 0x2b8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0d c1       	rjmp	.+538    	; 0x2b8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	0b c1       	rjmp	.+534    	; 0x2b8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	09 c1       	rjmp	.+530    	; 0x2b8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	07 c1       	rjmp	.+526    	; 0x2b8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	05 c1       	rjmp	.+522    	; 0x2b8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	03 c1       	rjmp	.+518    	; 0x2b8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	01 c1       	rjmp	.+514    	; 0x2b8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <__vector_46>
      bc:	fd c0       	rjmp	.+506    	; 0x2b8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	fe c4       	rjmp	.+2556   	; 0xabe <__vector_48>
      c2:	00 00       	nop
      c4:	32 c5       	rjmp	.+2660   	; 0xb2a <__vector_49>
      c6:	00 00       	nop
      c8:	66 c5       	rjmp	.+2764   	; 0xb96 <__vector_50>
      ca:	00 00       	nop
      cc:	9a c5       	rjmp	.+2868   	; 0xc02 <__vector_51>
      ce:	00 00       	nop
      d0:	ce c5       	rjmp	.+2972   	; 0xc6e <__vector_52>
      d2:	00 00       	nop
      d4:	f1 c0       	rjmp	.+482    	; 0x2b8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ef c0       	rjmp	.+478    	; 0x2b8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ed c0       	rjmp	.+474    	; 0x2b8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	eb c0       	rjmp	.+470    	; 0x2b8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e9 c0       	rjmp	.+466    	; 0x2b8 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	e7 c0       	rjmp	.+462    	; 0x2b8 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	e5 c0       	rjmp	.+458    	; 0x2b8 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	e3 c0       	rjmp	.+454    	; 0x2b8 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	e1 c0       	rjmp	.+450    	; 0x2b8 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	df c0       	rjmp	.+446    	; 0x2b8 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	dd c0       	rjmp	.+442    	; 0x2b8 <__bad_interrupt>
      fe:	00 00       	nop
     100:	db c0       	rjmp	.+438    	; 0x2b8 <__bad_interrupt>
     102:	00 00       	nop
     104:	d9 c0       	rjmp	.+434    	; 0x2b8 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__vector_66>
     10c:	0c 94 28 18 	jmp	0x3050	; 0x3050 <__vector_67>
     110:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__vector_68>
     114:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__vector_69>
     118:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__vector_70>
     11c:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__vector_71>
     120:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__vector_72>
     124:	0c 94 a4 1b 	jmp	0x3748	; 0x3748 <__vector_73>
     128:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__vector_74>
     12c:	c5 c0       	rjmp	.+394    	; 0x2b8 <__bad_interrupt>
     12e:	00 00       	nop
     130:	c3 c0       	rjmp	.+390    	; 0x2b8 <__bad_interrupt>
     132:	00 00       	nop
     134:	a8 c2       	rjmp	.+1360   	; 0x686 <__vector_77>
     136:	00 00       	nop
     138:	dc c2       	rjmp	.+1464   	; 0x6f2 <__vector_78>
     13a:	00 00       	nop
     13c:	10 c3       	rjmp	.+1568   	; 0x75e <__vector_79>
     13e:	00 00       	nop
     140:	44 c3       	rjmp	.+1672   	; 0x7ca <__vector_80>
     142:	00 00       	nop
     144:	78 c3       	rjmp	.+1776   	; 0x836 <__vector_81>
     146:	00 00       	nop
     148:	ac c3       	rjmp	.+1880   	; 0x8a2 <__vector_82>
     14a:	00 00       	nop
     14c:	e0 c3       	rjmp	.+1984   	; 0x90e <__vector_83>
     14e:	00 00       	nop
     150:	14 c4       	rjmp	.+2088   	; 0x97a <__vector_84>
     152:	00 00       	nop
     154:	48 c4       	rjmp	.+2192   	; 0x9e6 <__vector_85>
     156:	00 00       	nop
     158:	7c c4       	rjmp	.+2296   	; 0xa52 <__vector_86>
     15a:	00 00       	nop
     15c:	ad c0       	rjmp	.+346    	; 0x2b8 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ab c0       	rjmp	.+342    	; 0x2b8 <__bad_interrupt>
     162:	00 00       	nop
     164:	a9 c0       	rjmp	.+338    	; 0x2b8 <__bad_interrupt>
     166:	00 00       	nop
     168:	a7 c0       	rjmp	.+334    	; 0x2b8 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	a5 c0       	rjmp	.+330    	; 0x2b8 <__bad_interrupt>
     16e:	00 00       	nop
     170:	a3 c0       	rjmp	.+326    	; 0x2b8 <__bad_interrupt>
     172:	00 00       	nop
     174:	a1 c0       	rjmp	.+322    	; 0x2b8 <__bad_interrupt>
     176:	00 00       	nop
     178:	9f c0       	rjmp	.+318    	; 0x2b8 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	9d c0       	rjmp	.+314    	; 0x2b8 <__bad_interrupt>
     17e:	00 00       	nop
     180:	9b c0       	rjmp	.+310    	; 0x2b8 <__bad_interrupt>
     182:	00 00       	nop
     184:	99 c0       	rjmp	.+306    	; 0x2b8 <__bad_interrupt>
     186:	00 00       	nop
     188:	97 c0       	rjmp	.+302    	; 0x2b8 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	95 c0       	rjmp	.+298    	; 0x2b8 <__bad_interrupt>
     18e:	00 00       	nop
     190:	93 c0       	rjmp	.+294    	; 0x2b8 <__bad_interrupt>
     192:	00 00       	nop
     194:	91 c0       	rjmp	.+290    	; 0x2b8 <__bad_interrupt>
     196:	00 00       	nop
     198:	8f c0       	rjmp	.+286    	; 0x2b8 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	8d c0       	rjmp	.+282    	; 0x2b8 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	8b c0       	rjmp	.+278    	; 0x2b8 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	89 c0       	rjmp	.+274    	; 0x2b8 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	87 c0       	rjmp	.+270    	; 0x2b8 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	85 c0       	rjmp	.+266    	; 0x2b8 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	83 c0       	rjmp	.+262    	; 0x2b8 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	81 c0       	rjmp	.+258    	; 0x2b8 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	7f c0       	rjmp	.+254    	; 0x2b8 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	7d c0       	rjmp	.+250    	; 0x2b8 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	7b c0       	rjmp	.+246    	; 0x2b8 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	79 c0       	rjmp	.+242    	; 0x2b8 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	77 c0       	rjmp	.+238    	; 0x2b8 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	75 c0       	rjmp	.+234    	; 0x2b8 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	73 c0       	rjmp	.+230    	; 0x2b8 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	71 c0       	rjmp	.+226    	; 0x2b8 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	6f c0       	rjmp	.+222    	; 0x2b8 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	6d c0       	rjmp	.+218    	; 0x2b8 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	6b c0       	rjmp	.+214    	; 0x2b8 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	69 c0       	rjmp	.+210    	; 0x2b8 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	67 c0       	rjmp	.+206    	; 0x2b8 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	65 c0       	rjmp	.+202    	; 0x2b8 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	63 c0       	rjmp	.+198    	; 0x2b8 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	61 c0       	rjmp	.+194    	; 0x2b8 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	5f c0       	rjmp	.+190    	; 0x2b8 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <__vector_85+0x6a>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
     254:	00 00       	nop
     256:	07 63       	ori	r16, 0x37	; 55
     258:	42 36       	cpi	r20, 0x62	; 98
     25a:	b7 9b       	sbis	0x16, 7	; 22
     25c:	d8 a7       	std	Y+40, r29	; 0x28
     25e:	1a 39       	cpi	r17, 0x9A	; 154
     260:	68 56       	subi	r22, 0x68	; 104
     262:	18 ae       	std	Y+56, r1	; 0x38
     264:	ba ab       	std	Y+50, r27	; 0x32
     266:	55 8c       	ldd	r5, Z+29	; 0x1d
     268:	1d 3c       	cpi	r17, 0xCD	; 205
     26a:	b7 cc       	rjmp	.-1682   	; 0xfffffbda <__eeprom_end+0xff7efbda>
     26c:	57 63       	ori	r21, 0x37	; 55
     26e:	bd 6d       	ori	r27, 0xDD	; 221
     270:	ed fd       	.word	0xfded	; ????
     272:	75 3e       	cpi	r23, 0xE5	; 229
     274:	f6 17       	cp	r31, r22
     276:	72 31       	cpi	r23, 0x12	; 18
     278:	bf 00       	.word	0x00bf	; ????
     27a:	00 00       	nop
     27c:	80 3f       	cpi	r24, 0xF0	; 240

0000027e <__ctors_end>:
     27e:	11 24       	eor	r1, r1
     280:	1f be       	out	0x3f, r1	; 63
     282:	cf ef       	ldi	r28, 0xFF	; 255
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df e2       	ldi	r29, 0x2F	; 47
     288:	de bf       	out	0x3e, r29	; 62

0000028a <__do_copy_data>:
     28a:	11 e2       	ldi	r17, 0x21	; 33
     28c:	a0 e0       	ldi	r26, 0x00	; 0
     28e:	b0 e2       	ldi	r27, 0x20	; 32
     290:	e6 ef       	ldi	r30, 0xF6	; 246
     292:	f3 e6       	ldi	r31, 0x63	; 99
     294:	02 c0       	rjmp	.+4      	; 0x29a <__do_copy_data+0x10>
     296:	05 90       	lpm	r0, Z+
     298:	0d 92       	st	X+, r0
     29a:	a4 38       	cpi	r26, 0x84	; 132
     29c:	b1 07       	cpc	r27, r17
     29e:	d9 f7       	brne	.-10     	; 0x296 <__do_copy_data+0xc>

000002a0 <__do_clear_bss>:
     2a0:	28 e2       	ldi	r18, 0x28	; 40
     2a2:	a4 e8       	ldi	r26, 0x84	; 132
     2a4:	b1 e2       	ldi	r27, 0x21	; 33
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <.do_clear_bss_start>

000002a8 <.do_clear_bss_loop>:
     2a8:	1d 92       	st	X+, r1

000002aa <.do_clear_bss_start>:
     2aa:	aa 38       	cpi	r26, 0x8A	; 138
     2ac:	b2 07       	cpc	r27, r18
     2ae:	e1 f7       	brne	.-8      	; 0x2a8 <.do_clear_bss_loop>
     2b0:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <main>
     2b4:	0c 94 f9 31 	jmp	0x63f2	; 0x63f2 <_exit>

000002b8 <__bad_interrupt>:
     2b8:	a3 ce       	rjmp	.-698    	; 0x0 <__vectors>

000002ba <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	00 90 3f 00 	lds	r0, 0x003F
     2c2:	0f 92       	push	r0
     2c4:	11 24       	eor	r1, r1
     2c6:	2f 93       	push	r18
     2c8:	3f 93       	push	r19
     2ca:	4f 93       	push	r20
     2cc:	5f 93       	push	r21
     2ce:	6f 93       	push	r22
     2d0:	7f 93       	push	r23
     2d2:	8f 93       	push	r24
     2d4:	9f 93       	push	r25
     2d6:	af 93       	push	r26
     2d8:	bf 93       	push	r27
     2da:	ef 93       	push	r30
     2dc:	ff 93       	push	r31
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_err_callback) {
     2e6:	80 91 84 21 	lds	r24, 0x2184
     2ea:	90 91 85 21 	lds	r25, 0x2185
     2ee:	89 2b       	or	r24, r25
     2f0:	31 f0       	breq	.+12     	; 0x2fe <__vector_15+0x44>
		tc_tcc0_err_callback();
     2f2:	80 91 84 21 	lds	r24, 0x2184
     2f6:	90 91 85 21 	lds	r25, 0x2185
     2fa:	fc 01       	movw	r30, r24
     2fc:	09 95       	icall
	}
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	ff 91       	pop	r31
     304:	ef 91       	pop	r30
     306:	bf 91       	pop	r27
     308:	af 91       	pop	r26
     30a:	9f 91       	pop	r25
     30c:	8f 91       	pop	r24
     30e:	7f 91       	pop	r23
     310:	6f 91       	pop	r22
     312:	5f 91       	pop	r21
     314:	4f 91       	pop	r20
     316:	3f 91       	pop	r19
     318:	2f 91       	pop	r18
     31a:	0f 90       	pop	r0
     31c:	00 92 3f 00 	sts	0x003F, r0
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     326:	1f 92       	push	r1
     328:	0f 92       	push	r0
     32a:	00 90 3f 00 	lds	r0, 0x003F
     32e:	0f 92       	push	r0
     330:	11 24       	eor	r1, r1
     332:	2f 93       	push	r18
     334:	3f 93       	push	r19
     336:	4f 93       	push	r20
     338:	5f 93       	push	r21
     33a:	6f 93       	push	r22
     33c:	7f 93       	push	r23
     33e:	8f 93       	push	r24
     340:	9f 93       	push	r25
     342:	af 93       	push	r26
     344:	bf 93       	push	r27
     346:	ef 93       	push	r30
     348:	ff 93       	push	r31
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_cca_callback) {
     352:	80 91 86 21 	lds	r24, 0x2186
     356:	90 91 87 21 	lds	r25, 0x2187
     35a:	89 2b       	or	r24, r25
     35c:	31 f0       	breq	.+12     	; 0x36a <__vector_16+0x44>
		tc_tcc0_cca_callback();
     35e:	80 91 86 21 	lds	r24, 0x2186
     362:	90 91 87 21 	lds	r25, 0x2187
     366:	fc 01       	movw	r30, r24
     368:	09 95       	icall
	}
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	ff 91       	pop	r31
     370:	ef 91       	pop	r30
     372:	bf 91       	pop	r27
     374:	af 91       	pop	r26
     376:	9f 91       	pop	r25
     378:	8f 91       	pop	r24
     37a:	7f 91       	pop	r23
     37c:	6f 91       	pop	r22
     37e:	5f 91       	pop	r21
     380:	4f 91       	pop	r20
     382:	3f 91       	pop	r19
     384:	2f 91       	pop	r18
     386:	0f 90       	pop	r0
     388:	00 92 3f 00 	sts	0x003F, r0
     38c:	0f 90       	pop	r0
     38e:	1f 90       	pop	r1
     390:	18 95       	reti

00000392 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	00 90 3f 00 	lds	r0, 0x003F
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	2f 93       	push	r18
     3a0:	3f 93       	push	r19
     3a2:	4f 93       	push	r20
     3a4:	5f 93       	push	r21
     3a6:	6f 93       	push	r22
     3a8:	7f 93       	push	r23
     3aa:	8f 93       	push	r24
     3ac:	9f 93       	push	r25
     3ae:	af 93       	push	r26
     3b0:	bf 93       	push	r27
     3b2:	ef 93       	push	r30
     3b4:	ff 93       	push	r31
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccb_callback) {
     3be:	80 91 88 21 	lds	r24, 0x2188
     3c2:	90 91 89 21 	lds	r25, 0x2189
     3c6:	89 2b       	or	r24, r25
     3c8:	31 f0       	breq	.+12     	; 0x3d6 <__vector_17+0x44>
		tc_tcc0_ccb_callback();
     3ca:	80 91 88 21 	lds	r24, 0x2188
     3ce:	90 91 89 21 	lds	r25, 0x2189
     3d2:	fc 01       	movw	r30, r24
     3d4:	09 95       	icall
	}
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	ff 91       	pop	r31
     3dc:	ef 91       	pop	r30
     3de:	bf 91       	pop	r27
     3e0:	af 91       	pop	r26
     3e2:	9f 91       	pop	r25
     3e4:	8f 91       	pop	r24
     3e6:	7f 91       	pop	r23
     3e8:	6f 91       	pop	r22
     3ea:	5f 91       	pop	r21
     3ec:	4f 91       	pop	r20
     3ee:	3f 91       	pop	r19
     3f0:	2f 91       	pop	r18
     3f2:	0f 90       	pop	r0
     3f4:	00 92 3f 00 	sts	0x003F, r0
     3f8:	0f 90       	pop	r0
     3fa:	1f 90       	pop	r1
     3fc:	18 95       	reti

000003fe <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     3fe:	1f 92       	push	r1
     400:	0f 92       	push	r0
     402:	00 90 3f 00 	lds	r0, 0x003F
     406:	0f 92       	push	r0
     408:	11 24       	eor	r1, r1
     40a:	2f 93       	push	r18
     40c:	3f 93       	push	r19
     40e:	4f 93       	push	r20
     410:	5f 93       	push	r21
     412:	6f 93       	push	r22
     414:	7f 93       	push	r23
     416:	8f 93       	push	r24
     418:	9f 93       	push	r25
     41a:	af 93       	push	r26
     41c:	bf 93       	push	r27
     41e:	ef 93       	push	r30
     420:	ff 93       	push	r31
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccc_callback) {
     42a:	80 91 8a 21 	lds	r24, 0x218A
     42e:	90 91 8b 21 	lds	r25, 0x218B
     432:	89 2b       	or	r24, r25
     434:	31 f0       	breq	.+12     	; 0x442 <__vector_18+0x44>
		tc_tcc0_ccc_callback();
     436:	80 91 8a 21 	lds	r24, 0x218A
     43a:	90 91 8b 21 	lds	r25, 0x218B
     43e:	fc 01       	movw	r30, r24
     440:	09 95       	icall
	}
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	ff 91       	pop	r31
     448:	ef 91       	pop	r30
     44a:	bf 91       	pop	r27
     44c:	af 91       	pop	r26
     44e:	9f 91       	pop	r25
     450:	8f 91       	pop	r24
     452:	7f 91       	pop	r23
     454:	6f 91       	pop	r22
     456:	5f 91       	pop	r21
     458:	4f 91       	pop	r20
     45a:	3f 91       	pop	r19
     45c:	2f 91       	pop	r18
     45e:	0f 90       	pop	r0
     460:	00 92 3f 00 	sts	0x003F, r0
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     46a:	1f 92       	push	r1
     46c:	0f 92       	push	r0
     46e:	00 90 3f 00 	lds	r0, 0x003F
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	2f 93       	push	r18
     478:	3f 93       	push	r19
     47a:	4f 93       	push	r20
     47c:	5f 93       	push	r21
     47e:	6f 93       	push	r22
     480:	7f 93       	push	r23
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	af 93       	push	r26
     488:	bf 93       	push	r27
     48a:	ef 93       	push	r30
     48c:	ff 93       	push	r31
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc0_ccd_callback) {
     496:	80 91 8c 21 	lds	r24, 0x218C
     49a:	90 91 8d 21 	lds	r25, 0x218D
     49e:	89 2b       	or	r24, r25
     4a0:	31 f0       	breq	.+12     	; 0x4ae <__vector_19+0x44>
		tc_tcc0_ccd_callback();
     4a2:	80 91 8c 21 	lds	r24, 0x218C
     4a6:	90 91 8d 21 	lds	r25, 0x218D
     4aa:	fc 01       	movw	r30, r24
     4ac:	09 95       	icall
	}
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	bf 91       	pop	r27
     4b8:	af 91       	pop	r26
     4ba:	9f 91       	pop	r25
     4bc:	8f 91       	pop	r24
     4be:	7f 91       	pop	r23
     4c0:	6f 91       	pop	r22
     4c2:	5f 91       	pop	r21
     4c4:	4f 91       	pop	r20
     4c6:	3f 91       	pop	r19
     4c8:	2f 91       	pop	r18
     4ca:	0f 90       	pop	r0
     4cc:	00 92 3f 00 	sts	0x003F, r0
     4d0:	0f 90       	pop	r0
     4d2:	1f 90       	pop	r1
     4d4:	18 95       	reti

000004d6 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     4d6:	1f 92       	push	r1
     4d8:	0f 92       	push	r0
     4da:	00 90 3f 00 	lds	r0, 0x003F
     4de:	0f 92       	push	r0
     4e0:	11 24       	eor	r1, r1
     4e2:	2f 93       	push	r18
     4e4:	3f 93       	push	r19
     4e6:	4f 93       	push	r20
     4e8:	5f 93       	push	r21
     4ea:	6f 93       	push	r22
     4ec:	7f 93       	push	r23
     4ee:	8f 93       	push	r24
     4f0:	9f 93       	push	r25
     4f2:	af 93       	push	r26
     4f4:	bf 93       	push	r27
     4f6:	ef 93       	push	r30
     4f8:	ff 93       	push	r31
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ovf_callback) {
     502:	80 91 8e 21 	lds	r24, 0x218E
     506:	90 91 8f 21 	lds	r25, 0x218F
     50a:	89 2b       	or	r24, r25
     50c:	31 f0       	breq	.+12     	; 0x51a <__vector_20+0x44>
		tc_tcc1_ovf_callback();
     50e:	80 91 8e 21 	lds	r24, 0x218E
     512:	90 91 8f 21 	lds	r25, 0x218F
     516:	fc 01       	movw	r30, r24
     518:	09 95       	icall
	}
}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	ff 91       	pop	r31
     520:	ef 91       	pop	r30
     522:	bf 91       	pop	r27
     524:	af 91       	pop	r26
     526:	9f 91       	pop	r25
     528:	8f 91       	pop	r24
     52a:	7f 91       	pop	r23
     52c:	6f 91       	pop	r22
     52e:	5f 91       	pop	r21
     530:	4f 91       	pop	r20
     532:	3f 91       	pop	r19
     534:	2f 91       	pop	r18
     536:	0f 90       	pop	r0
     538:	00 92 3f 00 	sts	0x003F, r0
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	00 90 3f 00 	lds	r0, 0x003F
     54a:	0f 92       	push	r0
     54c:	11 24       	eor	r1, r1
     54e:	2f 93       	push	r18
     550:	3f 93       	push	r19
     552:	4f 93       	push	r20
     554:	5f 93       	push	r21
     556:	6f 93       	push	r22
     558:	7f 93       	push	r23
     55a:	8f 93       	push	r24
     55c:	9f 93       	push	r25
     55e:	af 93       	push	r26
     560:	bf 93       	push	r27
     562:	ef 93       	push	r30
     564:	ff 93       	push	r31
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_err_callback) {
     56e:	80 91 90 21 	lds	r24, 0x2190
     572:	90 91 91 21 	lds	r25, 0x2191
     576:	89 2b       	or	r24, r25
     578:	31 f0       	breq	.+12     	; 0x586 <__vector_21+0x44>
		tc_tcc1_err_callback();
     57a:	80 91 90 21 	lds	r24, 0x2190
     57e:	90 91 91 21 	lds	r25, 0x2191
     582:	fc 01       	movw	r30, r24
     584:	09 95       	icall
	}
}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	ff 91       	pop	r31
     58c:	ef 91       	pop	r30
     58e:	bf 91       	pop	r27
     590:	af 91       	pop	r26
     592:	9f 91       	pop	r25
     594:	8f 91       	pop	r24
     596:	7f 91       	pop	r23
     598:	6f 91       	pop	r22
     59a:	5f 91       	pop	r21
     59c:	4f 91       	pop	r20
     59e:	3f 91       	pop	r19
     5a0:	2f 91       	pop	r18
     5a2:	0f 90       	pop	r0
     5a4:	00 92 3f 00 	sts	0x003F, r0
     5a8:	0f 90       	pop	r0
     5aa:	1f 90       	pop	r1
     5ac:	18 95       	reti

000005ae <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     5ae:	1f 92       	push	r1
     5b0:	0f 92       	push	r0
     5b2:	00 90 3f 00 	lds	r0, 0x003F
     5b6:	0f 92       	push	r0
     5b8:	11 24       	eor	r1, r1
     5ba:	2f 93       	push	r18
     5bc:	3f 93       	push	r19
     5be:	4f 93       	push	r20
     5c0:	5f 93       	push	r21
     5c2:	6f 93       	push	r22
     5c4:	7f 93       	push	r23
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	af 93       	push	r26
     5cc:	bf 93       	push	r27
     5ce:	ef 93       	push	r30
     5d0:	ff 93       	push	r31
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_cca_callback) {
     5da:	80 91 92 21 	lds	r24, 0x2192
     5de:	90 91 93 21 	lds	r25, 0x2193
     5e2:	89 2b       	or	r24, r25
     5e4:	31 f0       	breq	.+12     	; 0x5f2 <__vector_22+0x44>
		tc_tcc1_cca_callback();
     5e6:	80 91 92 21 	lds	r24, 0x2192
     5ea:	90 91 93 21 	lds	r25, 0x2193
     5ee:	fc 01       	movw	r30, r24
     5f0:	09 95       	icall
	}
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	ff 91       	pop	r31
     5f8:	ef 91       	pop	r30
     5fa:	bf 91       	pop	r27
     5fc:	af 91       	pop	r26
     5fe:	9f 91       	pop	r25
     600:	8f 91       	pop	r24
     602:	7f 91       	pop	r23
     604:	6f 91       	pop	r22
     606:	5f 91       	pop	r21
     608:	4f 91       	pop	r20
     60a:	3f 91       	pop	r19
     60c:	2f 91       	pop	r18
     60e:	0f 90       	pop	r0
     610:	00 92 3f 00 	sts	0x003F, r0
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     61a:	1f 92       	push	r1
     61c:	0f 92       	push	r0
     61e:	00 90 3f 00 	lds	r0, 0x003F
     622:	0f 92       	push	r0
     624:	11 24       	eor	r1, r1
     626:	2f 93       	push	r18
     628:	3f 93       	push	r19
     62a:	4f 93       	push	r20
     62c:	5f 93       	push	r21
     62e:	6f 93       	push	r22
     630:	7f 93       	push	r23
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	ef 93       	push	r30
     63c:	ff 93       	push	r31
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcc1_ccb_callback) {
     646:	80 91 94 21 	lds	r24, 0x2194
     64a:	90 91 95 21 	lds	r25, 0x2195
     64e:	89 2b       	or	r24, r25
     650:	31 f0       	breq	.+12     	; 0x65e <__vector_23+0x44>
		tc_tcc1_ccb_callback();
     652:	80 91 94 21 	lds	r24, 0x2194
     656:	90 91 95 21 	lds	r25, 0x2195
     65a:	fc 01       	movw	r30, r24
     65c:	09 95       	icall
	}
}
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	ff 91       	pop	r31
     664:	ef 91       	pop	r30
     666:	bf 91       	pop	r27
     668:	af 91       	pop	r26
     66a:	9f 91       	pop	r25
     66c:	8f 91       	pop	r24
     66e:	7f 91       	pop	r23
     670:	6f 91       	pop	r22
     672:	5f 91       	pop	r21
     674:	4f 91       	pop	r20
     676:	3f 91       	pop	r19
     678:	2f 91       	pop	r18
     67a:	0f 90       	pop	r0
     67c:	00 92 3f 00 	sts	0x003F, r0
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti

00000686 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	00 90 3f 00 	lds	r0, 0x003F
     68e:	0f 92       	push	r0
     690:	11 24       	eor	r1, r1
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	ef 93       	push	r30
     6a8:	ff 93       	push	r31
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ovf_callback) {
     6b2:	80 91 96 21 	lds	r24, 0x2196
     6b6:	90 91 97 21 	lds	r25, 0x2197
     6ba:	89 2b       	or	r24, r25
     6bc:	31 f0       	breq	.+12     	; 0x6ca <__vector_77+0x44>
		tc_tcd0_ovf_callback();
     6be:	80 91 96 21 	lds	r24, 0x2196
     6c2:	90 91 97 21 	lds	r25, 0x2197
     6c6:	fc 01       	movw	r30, r24
     6c8:	09 95       	icall
	}
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	ff 91       	pop	r31
     6d0:	ef 91       	pop	r30
     6d2:	bf 91       	pop	r27
     6d4:	af 91       	pop	r26
     6d6:	9f 91       	pop	r25
     6d8:	8f 91       	pop	r24
     6da:	7f 91       	pop	r23
     6dc:	6f 91       	pop	r22
     6de:	5f 91       	pop	r21
     6e0:	4f 91       	pop	r20
     6e2:	3f 91       	pop	r19
     6e4:	2f 91       	pop	r18
     6e6:	0f 90       	pop	r0
     6e8:	00 92 3f 00 	sts	0x003F, r0
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     6f2:	1f 92       	push	r1
     6f4:	0f 92       	push	r0
     6f6:	00 90 3f 00 	lds	r0, 0x003F
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	2f 93       	push	r18
     700:	3f 93       	push	r19
     702:	4f 93       	push	r20
     704:	5f 93       	push	r21
     706:	6f 93       	push	r22
     708:	7f 93       	push	r23
     70a:	8f 93       	push	r24
     70c:	9f 93       	push	r25
     70e:	af 93       	push	r26
     710:	bf 93       	push	r27
     712:	ef 93       	push	r30
     714:	ff 93       	push	r31
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_err_callback) {
     71e:	80 91 98 21 	lds	r24, 0x2198
     722:	90 91 99 21 	lds	r25, 0x2199
     726:	89 2b       	or	r24, r25
     728:	31 f0       	breq	.+12     	; 0x736 <__vector_78+0x44>
		tc_tcd0_err_callback();
     72a:	80 91 98 21 	lds	r24, 0x2198
     72e:	90 91 99 21 	lds	r25, 0x2199
     732:	fc 01       	movw	r30, r24
     734:	09 95       	icall
	}
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	ff 91       	pop	r31
     73c:	ef 91       	pop	r30
     73e:	bf 91       	pop	r27
     740:	af 91       	pop	r26
     742:	9f 91       	pop	r25
     744:	8f 91       	pop	r24
     746:	7f 91       	pop	r23
     748:	6f 91       	pop	r22
     74a:	5f 91       	pop	r21
     74c:	4f 91       	pop	r20
     74e:	3f 91       	pop	r19
     750:	2f 91       	pop	r18
     752:	0f 90       	pop	r0
     754:	00 92 3f 00 	sts	0x003F, r0
     758:	0f 90       	pop	r0
     75a:	1f 90       	pop	r1
     75c:	18 95       	reti

0000075e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     75e:	1f 92       	push	r1
     760:	0f 92       	push	r0
     762:	00 90 3f 00 	lds	r0, 0x003F
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_cca_callback) {
     78a:	80 91 9a 21 	lds	r24, 0x219A
     78e:	90 91 9b 21 	lds	r25, 0x219B
     792:	89 2b       	or	r24, r25
     794:	31 f0       	breq	.+12     	; 0x7a2 <__vector_79+0x44>
		tc_tcd0_cca_callback();
     796:	80 91 9a 21 	lds	r24, 0x219A
     79a:	90 91 9b 21 	lds	r25, 0x219B
     79e:	fc 01       	movw	r30, r24
     7a0:	09 95       	icall
	}
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	0f 90       	pop	r0
     7c0:	00 92 3f 00 	sts	0x003F, r0
     7c4:	0f 90       	pop	r0
     7c6:	1f 90       	pop	r1
     7c8:	18 95       	reti

000007ca <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     7ca:	1f 92       	push	r1
     7cc:	0f 92       	push	r0
     7ce:	00 90 3f 00 	lds	r0, 0x003F
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccb_callback) {
     7f6:	80 91 9c 21 	lds	r24, 0x219C
     7fa:	90 91 9d 21 	lds	r25, 0x219D
     7fe:	89 2b       	or	r24, r25
     800:	31 f0       	breq	.+12     	; 0x80e <__vector_80+0x44>
		tc_tcd0_ccb_callback();
     802:	80 91 9c 21 	lds	r24, 0x219C
     806:	90 91 9d 21 	lds	r25, 0x219D
     80a:	fc 01       	movw	r30, r24
     80c:	09 95       	icall
	}
}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	ff 91       	pop	r31
     814:	ef 91       	pop	r30
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	00 92 3f 00 	sts	0x003F, r0
     830:	0f 90       	pop	r0
     832:	1f 90       	pop	r1
     834:	18 95       	reti

00000836 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     836:	1f 92       	push	r1
     838:	0f 92       	push	r0
     83a:	00 90 3f 00 	lds	r0, 0x003F
     83e:	0f 92       	push	r0
     840:	11 24       	eor	r1, r1
     842:	2f 93       	push	r18
     844:	3f 93       	push	r19
     846:	4f 93       	push	r20
     848:	5f 93       	push	r21
     84a:	6f 93       	push	r22
     84c:	7f 93       	push	r23
     84e:	8f 93       	push	r24
     850:	9f 93       	push	r25
     852:	af 93       	push	r26
     854:	bf 93       	push	r27
     856:	ef 93       	push	r30
     858:	ff 93       	push	r31
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccc_callback) {
     862:	80 91 9e 21 	lds	r24, 0x219E
     866:	90 91 9f 21 	lds	r25, 0x219F
     86a:	89 2b       	or	r24, r25
     86c:	31 f0       	breq	.+12     	; 0x87a <__vector_81+0x44>
		tc_tcd0_ccc_callback();
     86e:	80 91 9e 21 	lds	r24, 0x219E
     872:	90 91 9f 21 	lds	r25, 0x219F
     876:	fc 01       	movw	r30, r24
     878:	09 95       	icall
	}
}
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	00 92 3f 00 	sts	0x003F, r0
     89c:	0f 90       	pop	r0
     89e:	1f 90       	pop	r1
     8a0:	18 95       	reti

000008a2 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     8a2:	1f 92       	push	r1
     8a4:	0f 92       	push	r0
     8a6:	00 90 3f 00 	lds	r0, 0x003F
     8aa:	0f 92       	push	r0
     8ac:	11 24       	eor	r1, r1
     8ae:	2f 93       	push	r18
     8b0:	3f 93       	push	r19
     8b2:	4f 93       	push	r20
     8b4:	5f 93       	push	r21
     8b6:	6f 93       	push	r22
     8b8:	7f 93       	push	r23
     8ba:	8f 93       	push	r24
     8bc:	9f 93       	push	r25
     8be:	af 93       	push	r26
     8c0:	bf 93       	push	r27
     8c2:	ef 93       	push	r30
     8c4:	ff 93       	push	r31
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd0_ccd_callback) {
     8ce:	80 91 a0 21 	lds	r24, 0x21A0
     8d2:	90 91 a1 21 	lds	r25, 0x21A1
     8d6:	89 2b       	or	r24, r25
     8d8:	31 f0       	breq	.+12     	; 0x8e6 <__vector_82+0x44>
		tc_tcd0_ccd_callback();
     8da:	80 91 a0 21 	lds	r24, 0x21A0
     8de:	90 91 a1 21 	lds	r25, 0x21A1
     8e2:	fc 01       	movw	r30, r24
     8e4:	09 95       	icall
	}
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	00 92 3f 00 	sts	0x003F, r0
     908:	0f 90       	pop	r0
     90a:	1f 90       	pop	r1
     90c:	18 95       	reti

0000090e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     90e:	1f 92       	push	r1
     910:	0f 92       	push	r0
     912:	00 90 3f 00 	lds	r0, 0x003F
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ovf_callback) {
     93a:	80 91 a2 21 	lds	r24, 0x21A2
     93e:	90 91 a3 21 	lds	r25, 0x21A3
     942:	89 2b       	or	r24, r25
     944:	31 f0       	breq	.+12     	; 0x952 <__vector_83+0x44>
		tc_tcd1_ovf_callback();
     946:	80 91 a2 21 	lds	r24, 0x21A2
     94a:	90 91 a3 21 	lds	r25, 0x21A3
     94e:	fc 01       	movw	r30, r24
     950:	09 95       	icall
	}
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	ff 91       	pop	r31
     958:	ef 91       	pop	r30
     95a:	bf 91       	pop	r27
     95c:	af 91       	pop	r26
     95e:	9f 91       	pop	r25
     960:	8f 91       	pop	r24
     962:	7f 91       	pop	r23
     964:	6f 91       	pop	r22
     966:	5f 91       	pop	r21
     968:	4f 91       	pop	r20
     96a:	3f 91       	pop	r19
     96c:	2f 91       	pop	r18
     96e:	0f 90       	pop	r0
     970:	00 92 3f 00 	sts	0x003F, r0
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti

0000097a <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	00 90 3f 00 	lds	r0, 0x003F
     982:	0f 92       	push	r0
     984:	11 24       	eor	r1, r1
     986:	2f 93       	push	r18
     988:	3f 93       	push	r19
     98a:	4f 93       	push	r20
     98c:	5f 93       	push	r21
     98e:	6f 93       	push	r22
     990:	7f 93       	push	r23
     992:	8f 93       	push	r24
     994:	9f 93       	push	r25
     996:	af 93       	push	r26
     998:	bf 93       	push	r27
     99a:	ef 93       	push	r30
     99c:	ff 93       	push	r31
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_err_callback) {
     9a6:	80 91 a4 21 	lds	r24, 0x21A4
     9aa:	90 91 a5 21 	lds	r25, 0x21A5
     9ae:	89 2b       	or	r24, r25
     9b0:	31 f0       	breq	.+12     	; 0x9be <__vector_84+0x44>
		tc_tcd1_err_callback();
     9b2:	80 91 a4 21 	lds	r24, 0x21A4
     9b6:	90 91 a5 21 	lds	r25, 0x21A5
     9ba:	fc 01       	movw	r30, r24
     9bc:	09 95       	icall
	}
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	ff 91       	pop	r31
     9c4:	ef 91       	pop	r30
     9c6:	bf 91       	pop	r27
     9c8:	af 91       	pop	r26
     9ca:	9f 91       	pop	r25
     9cc:	8f 91       	pop	r24
     9ce:	7f 91       	pop	r23
     9d0:	6f 91       	pop	r22
     9d2:	5f 91       	pop	r21
     9d4:	4f 91       	pop	r20
     9d6:	3f 91       	pop	r19
     9d8:	2f 91       	pop	r18
     9da:	0f 90       	pop	r0
     9dc:	00 92 3f 00 	sts	0x003F, r0
     9e0:	0f 90       	pop	r0
     9e2:	1f 90       	pop	r1
     9e4:	18 95       	reti

000009e6 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     9e6:	1f 92       	push	r1
     9e8:	0f 92       	push	r0
     9ea:	00 90 3f 00 	lds	r0, 0x003F
     9ee:	0f 92       	push	r0
     9f0:	11 24       	eor	r1, r1
     9f2:	2f 93       	push	r18
     9f4:	3f 93       	push	r19
     9f6:	4f 93       	push	r20
     9f8:	5f 93       	push	r21
     9fa:	6f 93       	push	r22
     9fc:	7f 93       	push	r23
     9fe:	8f 93       	push	r24
     a00:	9f 93       	push	r25
     a02:	af 93       	push	r26
     a04:	bf 93       	push	r27
     a06:	ef 93       	push	r30
     a08:	ff 93       	push	r31
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_cca_callback) {
     a12:	80 91 a6 21 	lds	r24, 0x21A6
     a16:	90 91 a7 21 	lds	r25, 0x21A7
     a1a:	89 2b       	or	r24, r25
     a1c:	31 f0       	breq	.+12     	; 0xa2a <__vector_85+0x44>
		tc_tcd1_cca_callback();
     a1e:	80 91 a6 21 	lds	r24, 0x21A6
     a22:	90 91 a7 21 	lds	r25, 0x21A7
     a26:	fc 01       	movw	r30, r24
     a28:	09 95       	icall
	}
}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	bf 91       	pop	r27
     a34:	af 91       	pop	r26
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	7f 91       	pop	r23
     a3c:	6f 91       	pop	r22
     a3e:	5f 91       	pop	r21
     a40:	4f 91       	pop	r20
     a42:	3f 91       	pop	r19
     a44:	2f 91       	pop	r18
     a46:	0f 90       	pop	r0
     a48:	00 92 3f 00 	sts	0x003F, r0
     a4c:	0f 90       	pop	r0
     a4e:	1f 90       	pop	r1
     a50:	18 95       	reti

00000a52 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	00 90 3f 00 	lds	r0, 0x003F
     a5a:	0f 92       	push	r0
     a5c:	11 24       	eor	r1, r1
     a5e:	2f 93       	push	r18
     a60:	3f 93       	push	r19
     a62:	4f 93       	push	r20
     a64:	5f 93       	push	r21
     a66:	6f 93       	push	r22
     a68:	7f 93       	push	r23
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	af 93       	push	r26
     a70:	bf 93       	push	r27
     a72:	ef 93       	push	r30
     a74:	ff 93       	push	r31
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tcd1_ccb_callback) {
     a7e:	80 91 a8 21 	lds	r24, 0x21A8
     a82:	90 91 a9 21 	lds	r25, 0x21A9
     a86:	89 2b       	or	r24, r25
     a88:	31 f0       	breq	.+12     	; 0xa96 <__vector_86+0x44>
		tc_tcd1_ccb_callback();
     a8a:	80 91 a8 21 	lds	r24, 0x21A8
     a8e:	90 91 a9 21 	lds	r25, 0x21A9
     a92:	fc 01       	movw	r30, r24
     a94:	09 95       	icall
	}
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	ff 91       	pop	r31
     a9c:	ef 91       	pop	r30
     a9e:	bf 91       	pop	r27
     aa0:	af 91       	pop	r26
     aa2:	9f 91       	pop	r25
     aa4:	8f 91       	pop	r24
     aa6:	7f 91       	pop	r23
     aa8:	6f 91       	pop	r22
     aaa:	5f 91       	pop	r21
     aac:	4f 91       	pop	r20
     aae:	3f 91       	pop	r19
     ab0:	2f 91       	pop	r18
     ab2:	0f 90       	pop	r0
     ab4:	00 92 3f 00 	sts	0x003F, r0
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	00 90 3f 00 	lds	r0, 0x003F
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	2f 93       	push	r18
     acc:	3f 93       	push	r19
     ace:	4f 93       	push	r20
     ad0:	5f 93       	push	r21
     ad2:	6f 93       	push	r22
     ad4:	7f 93       	push	r23
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	af 93       	push	r26
     adc:	bf 93       	push	r27
     ade:	ef 93       	push	r30
     ae0:	ff 93       	push	r31
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_err_callback) {
     aea:	80 91 aa 21 	lds	r24, 0x21AA
     aee:	90 91 ab 21 	lds	r25, 0x21AB
     af2:	89 2b       	or	r24, r25
     af4:	31 f0       	breq	.+12     	; 0xb02 <__vector_48+0x44>
		tc_tce0_err_callback();
     af6:	80 91 aa 21 	lds	r24, 0x21AA
     afa:	90 91 ab 21 	lds	r25, 0x21AB
     afe:	fc 01       	movw	r30, r24
     b00:	09 95       	icall
	}
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	ff 91       	pop	r31
     b08:	ef 91       	pop	r30
     b0a:	bf 91       	pop	r27
     b0c:	af 91       	pop	r26
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	7f 91       	pop	r23
     b14:	6f 91       	pop	r22
     b16:	5f 91       	pop	r21
     b18:	4f 91       	pop	r20
     b1a:	3f 91       	pop	r19
     b1c:	2f 91       	pop	r18
     b1e:	0f 90       	pop	r0
     b20:	00 92 3f 00 	sts	0x003F, r0
     b24:	0f 90       	pop	r0
     b26:	1f 90       	pop	r1
     b28:	18 95       	reti

00000b2a <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     b2a:	1f 92       	push	r1
     b2c:	0f 92       	push	r0
     b2e:	00 90 3f 00 	lds	r0, 0x003F
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	2f 93       	push	r18
     b38:	3f 93       	push	r19
     b3a:	4f 93       	push	r20
     b3c:	5f 93       	push	r21
     b3e:	6f 93       	push	r22
     b40:	7f 93       	push	r23
     b42:	8f 93       	push	r24
     b44:	9f 93       	push	r25
     b46:	af 93       	push	r26
     b48:	bf 93       	push	r27
     b4a:	ef 93       	push	r30
     b4c:	ff 93       	push	r31
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_cca_callback) {
     b56:	80 91 ac 21 	lds	r24, 0x21AC
     b5a:	90 91 ad 21 	lds	r25, 0x21AD
     b5e:	89 2b       	or	r24, r25
     b60:	31 f0       	breq	.+12     	; 0xb6e <__vector_49+0x44>
		tc_tce0_cca_callback();
     b62:	80 91 ac 21 	lds	r24, 0x21AC
     b66:	90 91 ad 21 	lds	r25, 0x21AD
     b6a:	fc 01       	movw	r30, r24
     b6c:	09 95       	icall
	}
}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	ff 91       	pop	r31
     b74:	ef 91       	pop	r30
     b76:	bf 91       	pop	r27
     b78:	af 91       	pop	r26
     b7a:	9f 91       	pop	r25
     b7c:	8f 91       	pop	r24
     b7e:	7f 91       	pop	r23
     b80:	6f 91       	pop	r22
     b82:	5f 91       	pop	r21
     b84:	4f 91       	pop	r20
     b86:	3f 91       	pop	r19
     b88:	2f 91       	pop	r18
     b8a:	0f 90       	pop	r0
     b8c:	00 92 3f 00 	sts	0x003F, r0
     b90:	0f 90       	pop	r0
     b92:	1f 90       	pop	r1
     b94:	18 95       	reti

00000b96 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     b96:	1f 92       	push	r1
     b98:	0f 92       	push	r0
     b9a:	00 90 3f 00 	lds	r0, 0x003F
     b9e:	0f 92       	push	r0
     ba0:	11 24       	eor	r1, r1
     ba2:	2f 93       	push	r18
     ba4:	3f 93       	push	r19
     ba6:	4f 93       	push	r20
     ba8:	5f 93       	push	r21
     baa:	6f 93       	push	r22
     bac:	7f 93       	push	r23
     bae:	8f 93       	push	r24
     bb0:	9f 93       	push	r25
     bb2:	af 93       	push	r26
     bb4:	bf 93       	push	r27
     bb6:	ef 93       	push	r30
     bb8:	ff 93       	push	r31
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccb_callback) {
     bc2:	80 91 ae 21 	lds	r24, 0x21AE
     bc6:	90 91 af 21 	lds	r25, 0x21AF
     bca:	89 2b       	or	r24, r25
     bcc:	31 f0       	breq	.+12     	; 0xbda <__vector_50+0x44>
		tc_tce0_ccb_callback();
     bce:	80 91 ae 21 	lds	r24, 0x21AE
     bd2:	90 91 af 21 	lds	r25, 0x21AF
     bd6:	fc 01       	movw	r30, r24
     bd8:	09 95       	icall
	}
}
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	ff 91       	pop	r31
     be0:	ef 91       	pop	r30
     be2:	bf 91       	pop	r27
     be4:	af 91       	pop	r26
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	7f 91       	pop	r23
     bec:	6f 91       	pop	r22
     bee:	5f 91       	pop	r21
     bf0:	4f 91       	pop	r20
     bf2:	3f 91       	pop	r19
     bf4:	2f 91       	pop	r18
     bf6:	0f 90       	pop	r0
     bf8:	00 92 3f 00 	sts	0x003F, r0
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	00 90 3f 00 	lds	r0, 0x003F
     c0a:	0f 92       	push	r0
     c0c:	11 24       	eor	r1, r1
     c0e:	2f 93       	push	r18
     c10:	3f 93       	push	r19
     c12:	4f 93       	push	r20
     c14:	5f 93       	push	r21
     c16:	6f 93       	push	r22
     c18:	7f 93       	push	r23
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
     c1e:	af 93       	push	r26
     c20:	bf 93       	push	r27
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccc_callback) {
     c2e:	80 91 b0 21 	lds	r24, 0x21B0
     c32:	90 91 b1 21 	lds	r25, 0x21B1
     c36:	89 2b       	or	r24, r25
     c38:	31 f0       	breq	.+12     	; 0xc46 <__vector_51+0x44>
		tc_tce0_ccc_callback();
     c3a:	80 91 b0 21 	lds	r24, 0x21B0
     c3e:	90 91 b1 21 	lds	r25, 0x21B1
     c42:	fc 01       	movw	r30, r24
     c44:	09 95       	icall
	}
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	ff 91       	pop	r31
     c4c:	ef 91       	pop	r30
     c4e:	bf 91       	pop	r27
     c50:	af 91       	pop	r26
     c52:	9f 91       	pop	r25
     c54:	8f 91       	pop	r24
     c56:	7f 91       	pop	r23
     c58:	6f 91       	pop	r22
     c5a:	5f 91       	pop	r21
     c5c:	4f 91       	pop	r20
     c5e:	3f 91       	pop	r19
     c60:	2f 91       	pop	r18
     c62:	0f 90       	pop	r0
     c64:	00 92 3f 00 	sts	0x003F, r0
     c68:	0f 90       	pop	r0
     c6a:	1f 90       	pop	r1
     c6c:	18 95       	reti

00000c6e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     c6e:	1f 92       	push	r1
     c70:	0f 92       	push	r0
     c72:	00 90 3f 00 	lds	r0, 0x003F
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	2f 93       	push	r18
     c7c:	3f 93       	push	r19
     c7e:	4f 93       	push	r20
     c80:	5f 93       	push	r21
     c82:	6f 93       	push	r22
     c84:	7f 93       	push	r23
     c86:	8f 93       	push	r24
     c88:	9f 93       	push	r25
     c8a:	af 93       	push	r26
     c8c:	bf 93       	push	r27
     c8e:	ef 93       	push	r30
     c90:	ff 93       	push	r31
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	if (tc_tce0_ccd_callback) {
     c9a:	80 91 b2 21 	lds	r24, 0x21B2
     c9e:	90 91 b3 21 	lds	r25, 0x21B3
     ca2:	89 2b       	or	r24, r25
     ca4:	31 f0       	breq	.+12     	; 0xcb2 <__vector_52+0x44>
		tc_tce0_ccd_callback();
     ca6:	80 91 b2 21 	lds	r24, 0x21B2
     caa:	90 91 b3 21 	lds	r25, 0x21B3
     cae:	fc 01       	movw	r30, r24
     cb0:	09 95       	icall
	}
}
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	ff 91       	pop	r31
     cb8:	ef 91       	pop	r30
     cba:	bf 91       	pop	r27
     cbc:	af 91       	pop	r26
     cbe:	9f 91       	pop	r25
     cc0:	8f 91       	pop	r24
     cc2:	7f 91       	pop	r23
     cc4:	6f 91       	pop	r22
     cc6:	5f 91       	pop	r21
     cc8:	4f 91       	pop	r20
     cca:	3f 91       	pop	r19
     ccc:	2f 91       	pop	r18
     cce:	0f 90       	pop	r0
     cd0:	00 92 3f 00 	sts	0x003F, r0
     cd4:	0f 90       	pop	r0
     cd6:	1f 90       	pop	r1
     cd8:	18 95       	reti

00000cda <StringRingPushHead>:

// Checks to see if the beginning of the string is not a null terminator
bool IsStringRingReadyForParse(StringRing * const sr)
{
	return (*(sr->readTail) != '\0');
}
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	00 d0       	rcall	.+0      	; 0xce0 <StringRingPushHead+0x6>
     ce0:	1f 92       	push	r1
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	9a 83       	std	Y+2, r25	; 0x02
     cea:	6b 83       	std	Y+3, r22	; 0x03
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	88 23       	and	r24, r24
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <StringRingPushHead+0x1a>
     cf2:	5d c0       	rjmp	.+186    	; 0xdae <StringRingPushHead+0xd4>
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	fc 01       	movw	r30, r24
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	88 23       	and	r24, r24
     cfe:	09 f4       	brne	.+2      	; 0xd02 <StringRingPushHead+0x28>
     d00:	40 c0       	rjmp	.+128    	; 0xd82 <StringRingPushHead+0xa8>
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	9a 81       	ldd	r25, Y+2	; 0x02
     d06:	fc 01       	movw	r30, r24
     d08:	25 81       	ldd	r18, Z+5	; 0x05
     d0a:	36 81       	ldd	r19, Z+6	; 0x06
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	fc 01       	movw	r30, r24
     d12:	83 81       	ldd	r24, Z+3	; 0x03
     d14:	88 2f       	mov	r24, r24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	91 95       	neg	r25
     d1a:	81 95       	neg	r24
     d1c:	91 09       	sbc	r25, r1
     d1e:	28 0f       	add	r18, r24
     d20:	39 1f       	adc	r19, r25
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	fc 01       	movw	r30, r24
     d28:	87 81       	ldd	r24, Z+7	; 0x07
     d2a:	90 85       	ldd	r25, Z+8	; 0x08
     d2c:	28 17       	cp	r18, r24
     d2e:	39 07       	cpc	r19, r25
     d30:	58 f0       	brcs	.+22     	; 0xd48 <StringRingPushHead+0x6e>
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	9c 01       	movw	r18, r24
     d38:	27 5f       	subi	r18, 0xF7	; 247
     d3a:	3f 4f       	sbci	r19, 0xFF	; 255
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	fc 01       	movw	r30, r24
     d42:	25 83       	std	Z+5, r18	; 0x05
     d44:	36 83       	std	Z+6, r19	; 0x06
     d46:	72 c0       	rjmp	.+228    	; 0xe2c <StringRingPushHead+0x152>
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	fc 01       	movw	r30, r24
     d4e:	25 81       	ldd	r18, Z+5	; 0x05
     d50:	36 81       	ldd	r19, Z+6	; 0x06
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	fc 01       	movw	r30, r24
     d58:	84 81       	ldd	r24, Z+4	; 0x04
     d5a:	48 2f       	mov	r20, r24
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	fc 01       	movw	r30, r24
     d64:	83 81       	ldd	r24, Z+3	; 0x03
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	ba 01       	movw	r22, r20
     d6c:	68 1b       	sub	r22, r24
     d6e:	79 0b       	sbc	r23, r25
     d70:	cb 01       	movw	r24, r22
     d72:	28 0f       	add	r18, r24
     d74:	39 1f       	adc	r19, r25
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	fc 01       	movw	r30, r24
     d7c:	25 83       	std	Z+5, r18	; 0x05
     d7e:	36 83       	std	Z+6, r19	; 0x06
     d80:	55 c0       	rjmp	.+170    	; 0xe2c <StringRingPushHead+0x152>
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	fc 01       	movw	r30, r24
     d88:	25 81       	ldd	r18, Z+5	; 0x05
     d8a:	36 81       	ldd	r19, Z+6	; 0x06
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	fc 01       	movw	r30, r24
     d92:	83 81       	ldd	r24, Z+3	; 0x03
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	91 95       	neg	r25
     d9a:	81 95       	neg	r24
     d9c:	91 09       	sbc	r25, r1
     d9e:	28 0f       	add	r18, r24
     da0:	39 1f       	adc	r19, r25
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	fc 01       	movw	r30, r24
     da8:	25 83       	std	Z+5, r18	; 0x05
     daa:	36 83       	std	Z+6, r19	; 0x06
     dac:	3f c0       	rjmp	.+126    	; 0xe2c <StringRingPushHead+0x152>
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	fc 01       	movw	r30, r24
     db4:	25 81       	ldd	r18, Z+5	; 0x05
     db6:	36 81       	ldd	r19, Z+6	; 0x06
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	fc 01       	movw	r30, r24
     dbe:	83 81       	ldd	r24, Z+3	; 0x03
     dc0:	88 2f       	mov	r24, r24
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	91 95       	neg	r25
     dc6:	81 95       	neg	r24
     dc8:	91 09       	sbc	r25, r1
     dca:	28 0f       	add	r18, r24
     dcc:	39 1f       	adc	r19, r25
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	fc 01       	movw	r30, r24
     dd4:	87 81       	ldd	r24, Z+7	; 0x07
     dd6:	90 85       	ldd	r25, Z+8	; 0x08
     dd8:	28 17       	cp	r18, r24
     dda:	39 07       	cpc	r19, r25
     ddc:	58 f0       	brcs	.+22     	; 0xdf4 <StringRingPushHead+0x11a>
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	9c 01       	movw	r18, r24
     de4:	27 5f       	subi	r18, 0xF7	; 247
     de6:	3f 4f       	sbci	r19, 0xFF	; 255
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	fc 01       	movw	r30, r24
     dee:	25 83       	std	Z+5, r18	; 0x05
     df0:	36 83       	std	Z+6, r19	; 0x06
     df2:	1c c0       	rjmp	.+56     	; 0xe2c <StringRingPushHead+0x152>
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
     df8:	fc 01       	movw	r30, r24
     dfa:	25 81       	ldd	r18, Z+5	; 0x05
     dfc:	36 81       	ldd	r19, Z+6	; 0x06
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	fc 01       	movw	r30, r24
     e04:	84 81       	ldd	r24, Z+4	; 0x04
     e06:	48 2f       	mov	r20, r24
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	9a 81       	ldd	r25, Y+2	; 0x02
     e0e:	fc 01       	movw	r30, r24
     e10:	83 81       	ldd	r24, Z+3	; 0x03
     e12:	88 2f       	mov	r24, r24
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	ba 01       	movw	r22, r20
     e18:	68 1b       	sub	r22, r24
     e1a:	79 0b       	sbc	r23, r25
     e1c:	cb 01       	movw	r24, r22
     e1e:	28 0f       	add	r18, r24
     e20:	39 1f       	adc	r19, r25
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	fc 01       	movw	r30, r24
     e28:	25 83       	std	Z+5, r18	; 0x05
     e2a:	36 83       	std	Z+6, r19	; 0x06
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	fc 01       	movw	r30, r24
     e32:	13 82       	std	Z+3, r1	; 0x03
     e34:	23 96       	adiw	r28, 0x03	; 3
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <StringRingMoveHeadToNextString>:
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	00 d0       	rcall	.+0      	; 0xe46 <StringRingMoveHeadToNextString+0x6>
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	fc 01       	movw	r30, r24
     e54:	85 81       	ldd	r24, Z+5	; 0x05
     e56:	96 81       	ldd	r25, Z+6	; 0x06
     e58:	fc 01       	movw	r30, r24
     e5a:	10 82       	st	Z, r1
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	fc 01       	movw	r30, r24
     e62:	25 81       	ldd	r18, Z+5	; 0x05
     e64:	36 81       	ldd	r19, Z+6	; 0x06
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	fc 01       	movw	r30, r24
     e6c:	84 81       	ldd	r24, Z+4	; 0x04
     e6e:	48 2f       	mov	r20, r24
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	fc 01       	movw	r30, r24
     e78:	83 81       	ldd	r24, Z+3	; 0x03
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	ba 01       	movw	r22, r20
     e80:	68 1b       	sub	r22, r24
     e82:	79 0b       	sbc	r23, r25
     e84:	cb 01       	movw	r24, r22
     e86:	28 0f       	add	r18, r24
     e88:	39 1f       	adc	r19, r25
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	fc 01       	movw	r30, r24
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	28 17       	cp	r18, r24
     e96:	39 07       	cpc	r19, r25
     e98:	19 f1       	breq	.+70     	; 0xee0 <StringRingMoveHeadToNextString+0xa0>
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	fc 01       	movw	r30, r24
     ea0:	20 81       	ld	r18, Z
     ea2:	31 81       	ldd	r19, Z+1	; 0x01
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	9a 81       	ldd	r25, Y+2	; 0x02
     ea8:	09 96       	adiw	r24, 0x09	; 9
     eaa:	28 17       	cp	r18, r24
     eac:	39 07       	cpc	r19, r25
     eae:	69 f5       	brne	.+90     	; 0xf0a <StringRingMoveHeadToNextString+0xca>
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	fc 01       	movw	r30, r24
     eb6:	25 81       	ldd	r18, Z+5	; 0x05
     eb8:	36 81       	ldd	r19, Z+6	; 0x06
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	fc 01       	movw	r30, r24
     ec0:	83 81       	ldd	r24, Z+3	; 0x03
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	91 95       	neg	r25
     ec8:	81 95       	neg	r24
     eca:	91 09       	sbc	r25, r1
     ecc:	28 0f       	add	r18, r24
     ece:	39 1f       	adc	r19, r25
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	9a 81       	ldd	r25, Y+2	; 0x02
     ed4:	fc 01       	movw	r30, r24
     ed6:	87 81       	ldd	r24, Z+7	; 0x07
     ed8:	90 85       	ldd	r25, Z+8	; 0x08
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	a9 f4       	brne	.+42     	; 0xf0a <StringRingMoveHeadToNextString+0xca>
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	fc 01       	movw	r30, r24
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	88 23       	and	r24, r24
     eea:	49 f0       	breq	.+18     	; 0xefe <StringRingMoveHeadToNextString+0xbe>
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	a2 d0       	rcall	.+324    	; 0x1036 <StringRingSeekNextReadableString>
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	f0 de       	rcall	.-544    	; 0xcda <StringRingPushHead>
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	0b c0       	rjmp	.+22     	; 0xf14 <StringRingMoveHeadToNextString+0xd4>
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	ea de       	rcall	.-556    	; 0xcda <StringRingPushHead>
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <StringRingMoveHeadToNextString+0xd4>
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	e4 de       	rcall	.-568    	; 0xcda <StringRingPushHead>
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <StringRingIncrementHead>:
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	00 d0       	rcall	.+0      	; 0xf24 <StringRingIncrementHead+0x6>
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	9a 83       	std	Y+2, r25	; 0x02
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	fc 01       	movw	r30, r24
     f32:	83 81       	ldd	r24, Z+3	; 0x03
     f34:	21 e0       	ldi	r18, 0x01	; 1
     f36:	28 0f       	add	r18, r24
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	fc 01       	movw	r30, r24
     f3e:	23 83       	std	Z+3, r18	; 0x03
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
     f44:	fc 01       	movw	r30, r24
     f46:	85 81       	ldd	r24, Z+5	; 0x05
     f48:	96 81       	ldd	r25, Z+6	; 0x06
     f4a:	9c 01       	movw	r18, r24
     f4c:	2f 5f       	subi	r18, 0xFF	; 255
     f4e:	3f 4f       	sbci	r19, 0xFF	; 255
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	fc 01       	movw	r30, r24
     f56:	25 83       	std	Z+5, r18	; 0x05
     f58:	36 83       	std	Z+6, r19	; 0x06
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	08 95       	ret

00000f64 <StringRingIncrementTail>:
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	00 d0       	rcall	.+0      	; 0xf6a <StringRingIncrementTail+0x6>
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	fc 01       	movw	r30, r24
     f78:	20 81       	ld	r18, Z
     f7a:	31 81       	ldd	r19, Z+1	; 0x01
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	fc 01       	movw	r30, r24
     f82:	87 81       	ldd	r24, Z+7	; 0x07
     f84:	90 85       	ldd	r25, Z+8	; 0x08
     f86:	28 17       	cp	r18, r24
     f88:	39 07       	cpc	r19, r25
     f8a:	59 f4       	brne	.+22     	; 0xfa2 <StringRingIncrementTail+0x3e>
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	9c 01       	movw	r18, r24
     f92:	27 5f       	subi	r18, 0xF7	; 247
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	fc 01       	movw	r30, r24
     f9c:	20 83       	st	Z, r18
     f9e:	31 83       	std	Z+1, r19	; 0x01
     fa0:	12 c0       	rjmp	.+36     	; 0xfc6 <StringRingIncrementTail+0x62>
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	fc 01       	movw	r30, r24
     fa8:	20 81       	ld	r18, Z
     faa:	31 81       	ldd	r19, Z+1	; 0x01
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	fc 01       	movw	r30, r24
     fb2:	84 81       	ldd	r24, Z+4	; 0x04
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	28 0f       	add	r18, r24
     fba:	39 1f       	adc	r19, r25
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	fc 01       	movw	r30, r24
     fc2:	20 83       	st	Z, r18
     fc4:	31 83       	std	Z+1, r19	; 0x01
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	08 95       	ret

00000fd0 <StringRingPush>:
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <StringRingPush+0x6>
     fd6:	1f 92       	push	r1
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	9a 83       	std	Y+2, r25	; 0x02
     fe0:	6b 83       	std	Y+3, r22	; 0x03
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	fc 01       	movw	r30, r24
     fe8:	85 81       	ldd	r24, Z+5	; 0x05
     fea:	96 81       	ldd	r25, Z+6	; 0x06
     fec:	2b 81       	ldd	r18, Y+3	; 0x03
     fee:	fc 01       	movw	r30, r24
     ff0:	20 83       	st	Z, r18
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	93 df       	rcall	.-218    	; 0xf1e <StringRingIncrementHead>
     ff8:	23 96       	adiw	r28, 0x03	; 3
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <StringRingWrite>:
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	00 d0       	rcall	.+0      	; 0x100a <StringRingWrite+0x6>
    100a:	1f 92       	push	r1
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	6b 83       	std	Y+3, r22	; 0x03
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	6b 81       	ldd	r22, Y+3	; 0x03
    101c:	d9 df       	rcall	.-78     	; 0xfd0 <StringRingPush>
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	8a 30       	cpi	r24, 0x0A	; 10
    1022:	19 f4       	brne	.+6      	; 0x102a <StringRingWrite+0x26>
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	0b df       	rcall	.-490    	; 0xe40 <StringRingMoveHeadToNextString>
    102a:	23 96       	adiw	r28, 0x03	; 3
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	08 95       	ret

00001036 <StringRingSeekNextReadableString>:

// Makes current string fail the IsStringRingReadyForParse function, like marking an email as having been read
// Moves the tail to the next string if possible; returns whether or not it was successful
bool StringRingSeekNextReadableString(StringRing * const sr)
{
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	00 d0       	rcall	.+0      	; 0x103c <StringRingSeekNextReadableString+0x6>
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	9a 83       	std	Y+2, r25	; 0x02
	*(sr->readTail) = '\0';
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	fc 01       	movw	r30, r24
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	fc 01       	movw	r30, r24
    1050:	10 82       	st	Z, r1
	
	// explicitly deny this; where you can start reading a string that hasn't been finalized
	// if this happens enough you can probably lower the buffer size
	if(SR_TAIL_WILL_POINT_TO_HEAD)
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	fc 01       	movw	r30, r24
    1058:	20 81       	ld	r18, Z
    105a:	31 81       	ldd	r19, Z+1	; 0x01
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	fc 01       	movw	r30, r24
    1062:	84 81       	ldd	r24, Z+4	; 0x04
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	28 0f       	add	r18, r24
    106a:	39 1f       	adc	r19, r25
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	9a 81       	ldd	r25, Y+2	; 0x02
    1070:	fc 01       	movw	r30, r24
    1072:	45 81       	ldd	r20, Z+5	; 0x05
    1074:	56 81       	ldd	r21, Z+6	; 0x06
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	fc 01       	movw	r30, r24
    107c:	83 81       	ldd	r24, Z+3	; 0x03
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	91 95       	neg	r25
    1084:	81 95       	neg	r24
    1086:	91 09       	sbc	r25, r1
    1088:	84 0f       	add	r24, r20
    108a:	95 1f       	adc	r25, r21
    108c:	28 17       	cp	r18, r24
    108e:	39 07       	cpc	r19, r25
    1090:	19 f1       	breq	.+70     	; 0x10d8 <StringRingSeekNextReadableString+0xa2>
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	fc 01       	movw	r30, r24
    1098:	20 81       	ld	r18, Z
    109a:	31 81       	ldd	r19, Z+1	; 0x01
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	fc 01       	movw	r30, r24
    10a2:	87 81       	ldd	r24, Z+7	; 0x07
    10a4:	90 85       	ldd	r25, Z+8	; 0x08
    10a6:	28 17       	cp	r18, r24
    10a8:	39 07       	cpc	r19, r25
    10aa:	c1 f4       	brne	.+48     	; 0x10dc <StringRingSeekNextReadableString+0xa6>
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	fc 01       	movw	r30, r24
    10b2:	25 81       	ldd	r18, Z+5	; 0x05
    10b4:	36 81       	ldd	r19, Z+6	; 0x06
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	fc 01       	movw	r30, r24
    10bc:	83 81       	ldd	r24, Z+3	; 0x03
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	91 95       	neg	r25
    10c4:	81 95       	neg	r24
    10c6:	91 09       	sbc	r25, r1
    10c8:	28 0f       	add	r18, r24
    10ca:	39 1f       	adc	r19, r25
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	09 96       	adiw	r24, 0x09	; 9
    10d2:	28 17       	cp	r18, r24
    10d4:	39 07       	cpc	r19, r25
    10d6:	11 f4       	brne	.+4      	; 0x10dc <StringRingSeekNextReadableString+0xa6>
	{
		return false;
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <StringRingSeekNextReadableString+0xae>
	}
	
	StringRingIncrementTail(sr);
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	9a 81       	ldd	r25, Y+2	; 0x02
    10e0:	41 df       	rcall	.-382    	; 0xf64 <StringRingIncrementTail>
	return true;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	08 95       	ret

000010ee <__vector_25>:
		readAlt[0]=48;
	}
 }

ISR(USARTC0_RXC_vect)//Interrupt
{
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	00 90 3f 00 	lds	r0, 0x003F
    10f6:	0f 92       	push	r0
    10f8:	11 24       	eor	r1, r1
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
	StringRingWrite(gps, USARTC0.DATA);
    111a:	80 ea       	ldi	r24, 0xA0	; 160
    111c:	98 e0       	ldi	r25, 0x08	; 8
    111e:	fc 01       	movw	r30, r24
    1120:	80 81       	ld	r24, Z
    1122:	28 2f       	mov	r18, r24
    1124:	80 91 b8 21 	lds	r24, 0x21B8
    1128:	90 91 b9 21 	lds	r25, 0x21B9
    112c:	62 2f       	mov	r22, r18
    112e:	6a df       	rcall	.-300    	; 0x1004 <StringRingWrite>
	printf("%u",USARTC0.DATA);
    1130:	80 ea       	ldi	r24, 0xA0	; 160
    1132:	98 e0       	ldi	r25, 0x08	; 8
    1134:	fc 01       	movw	r30, r24
    1136:	80 81       	ld	r24, Z
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	29 2f       	mov	r18, r25
    113e:	2f 93       	push	r18
    1140:	8f 93       	push	r24
    1142:	8e e1       	ldi	r24, 0x1E	; 30
    1144:	90 e2       	ldi	r25, 0x20	; 32
    1146:	89 2f       	mov	r24, r25
    1148:	8f 93       	push	r24
    114a:	8e e1       	ldi	r24, 0x1E	; 30
    114c:	90 e2       	ldi	r25, 0x20	; 32
    114e:	8f 93       	push	r24
    1150:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <printf>
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
    1164:	bf 91       	pop	r27
    1166:	af 91       	pop	r26
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	7f 91       	pop	r23
    116e:	6f 91       	pop	r22
    1170:	5f 91       	pop	r21
    1172:	4f 91       	pop	r20
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	0f 90       	pop	r0
    117a:	00 92 3f 00 	sts	0x003F, r0
    117e:	0f 90       	pop	r0
    1180:	1f 90       	pop	r1
    1182:	18 95       	reti

00001184 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	98 e4       	ldi	r25, 0x48	; 72
    1190:	a8 ee       	ldi	r26, 0xE8	; 232
    1192:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	1f 92       	push	r1
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    11a8:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    11aa:	ec df       	rcall	.-40     	; 0x1184 <sysclk_get_main_hz>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	29 81       	ldd	r18, Y+1	; 0x01
    11b2:	22 2f       	mov	r18, r18
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	04 c0       	rjmp	.+8      	; 0x11c0 <sysclk_get_per4_hz+0x22>
    11b8:	b6 95       	lsr	r27
    11ba:	a7 95       	ror	r26
    11bc:	97 95       	ror	r25
    11be:	87 95       	ror	r24
    11c0:	2a 95       	dec	r18
    11c2:	d2 f7       	brpl	.-12     	; 0x11b8 <sysclk_get_per4_hz+0x1a>
}
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	0f 90       	pop	r0
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    11d8:	e2 df       	rcall	.-60     	; 0x119e <sysclk_get_per4_hz>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    11de:	bc 01       	movw	r22, r24
    11e0:	cd 01       	movw	r24, r26
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    11f0:	ef df       	rcall	.-34     	; 0x11d0 <sysclk_get_per2_hz>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
}
    11f6:	bc 01       	movw	r22, r24
    11f8:	cd 01       	movw	r24, r26
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    1208:	ef df       	rcall	.-34     	; 0x11e8 <sysclk_get_per_hz>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
}
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1218:	61 50       	subi	r22, 0x01	; 1
    121a:	71 09       	sbc	r23, r1
    121c:	81 09       	sbc	r24, r1
    121e:	91 09       	sbc	r25, r1
    1220:	d9 f7       	brne	.-10     	; 0x1218 <__portable_avr_delay_cycles>
}
    1222:	08 95       	ret

00001224 <read16>:
#include <math.h>

char altSmooth [10];

uint16_t read16(SPI_t* targetspi)
{
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	00 d0       	rcall	.+0      	; 0x122a <read16+0x6>
    122a:	00 d0       	rcall	.+0      	; 0x122c <read16+0x8>
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	8b 83       	std	Y+3, r24	; 0x03
    1232:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t result = ((uint16_t)spi_read(targetspi)) << 8;
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	0e 94 68 13 	call	0x26d0	; 0x26d0 <spi_read>
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	98 2f       	mov	r25, r24
    1242:	88 27       	eor	r24, r24
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	9a 83       	std	Y+2, r25	; 0x02
	result += (uint16_t)spi_read(targetspi);
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <spi_read>
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	29 81       	ldd	r18, Y+1	; 0x01
    1256:	3a 81       	ldd	r19, Y+2	; 0x02
    1258:	82 0f       	add	r24, r18
    125a:	93 1f       	adc	r25, r19
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	9a 83       	std	Y+2, r25	; 0x02
	return (uint16_t)result;
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1264:	24 96       	adiw	r28, 0x04	; 4
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <read24>:

uint32_t read24(SPI_t* targetspi)
{
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	26 97       	sbiw	r28, 0x06	; 6
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	8d 83       	std	Y+5, r24	; 0x05
    1280:	9e 83       	std	Y+6, r25	; 0x06
	uint32_t result = ((uint32_t)spi_read(targetspi)) << 16;
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	0e 94 68 13 	call	0x26d0	; 0x26d0 <spi_read>
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a0 e0       	ldi	r26, 0x00	; 0
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	dc 01       	movw	r26, r24
    1294:	99 27       	eor	r25, r25
    1296:	88 27       	eor	r24, r24
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	ab 83       	std	Y+3, r26	; 0x03
    129e:	bc 83       	std	Y+4, r27	; 0x04
	result += (uint32_t)spi_read(targetspi) << 8;
    12a0:	8d 81       	ldd	r24, Y+5	; 0x05
    12a2:	9e 81       	ldd	r25, Y+6	; 0x06
    12a4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <spi_read>
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	a0 e0       	ldi	r26, 0x00	; 0
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ba 2f       	mov	r27, r26
    12b2:	a9 2f       	mov	r26, r25
    12b4:	98 2f       	mov	r25, r24
    12b6:	88 27       	eor	r24, r24
    12b8:	29 81       	ldd	r18, Y+1	; 0x01
    12ba:	3a 81       	ldd	r19, Y+2	; 0x02
    12bc:	4b 81       	ldd	r20, Y+3	; 0x03
    12be:	5c 81       	ldd	r21, Y+4	; 0x04
    12c0:	82 0f       	add	r24, r18
    12c2:	93 1f       	adc	r25, r19
    12c4:	a4 1f       	adc	r26, r20
    12c6:	b5 1f       	adc	r27, r21
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	ab 83       	std	Y+3, r26	; 0x03
    12ce:	bc 83       	std	Y+4, r27	; 0x04
	result += (uint32_t)spi_read(targetspi);
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <spi_read>
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a0 e0       	ldi	r26, 0x00	; 0
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	29 81       	ldd	r18, Y+1	; 0x01
    12e2:	3a 81       	ldd	r19, Y+2	; 0x02
    12e4:	4b 81       	ldd	r20, Y+3	; 0x03
    12e6:	5c 81       	ldd	r21, Y+4	; 0x04
    12e8:	82 0f       	add	r24, r18
    12ea:	93 1f       	adc	r25, r19
    12ec:	a4 1f       	adc	r26, r20
    12ee:	b5 1f       	adc	r27, r21
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	ab 83       	std	Y+3, r26	; 0x03
    12f6:	bc 83       	std	Y+4, r27	; 0x04
	return (uint32_t)result;
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	9a 81       	ldd	r25, Y+2	; 0x02
    12fc:	ab 81       	ldd	r26, Y+3	; 0x03
    12fe:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1300:	bc 01       	movw	r22, r24
    1302:	cd 01       	movw	r24, r26
    1304:	26 96       	adiw	r28, 0x06	; 6
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

00001310 <pressure_reset>:

void pressure_reset(MS5607* sensor)
{
    1310:	2f 92       	push	r2
    1312:	3f 92       	push	r3
    1314:	4f 92       	push	r4
    1316:	5f 92       	push	r5
    1318:	6f 92       	push	r6
    131a:	7f 92       	push	r7
    131c:	8f 92       	push	r8
    131e:	9f 92       	push	r9
    1320:	af 92       	push	r10
    1322:	bf 92       	push	r11
    1324:	cf 92       	push	r12
    1326:	df 92       	push	r13
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	2a 97       	sbiw	r28, 0x0a	; 10
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	9a 83       	std	Y+2, r25	; 0x02
	spi_select(sensor->ss_pin);
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	fc 01       	movw	r30, r24
    1348:	80 81       	ld	r24, Z
    134a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <spi_select>
	spi_write(MS5607_SPI, 0x1E);
    134e:	6e e1       	ldi	r22, 0x1E	; 30
    1350:	80 ec       	ldi	r24, 0xC0	; 192
    1352:	98 e0       	ldi	r25, 0x08	; 8
    1354:	0e 94 22 14 	call	0x2844	; 0x2844 <spi_write>
	spi_deselect(sensor->ss_pin);
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	fc 01       	movw	r30, r24
    135e:	80 81       	ld	r24, Z
    1360:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <spi_deselect>
	delay_ms(5);
    1364:	4d df       	rcall	.-358    	; 0x1200 <sysclk_get_cpu_hz>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	1c 01       	movw	r2, r24
    136c:	2d 01       	movw	r4, r26
    136e:	61 2c       	mov	r6, r1
    1370:	71 2c       	mov	r7, r1
    1372:	43 01       	movw	r8, r6
    1374:	a2 2c       	mov	r10, r2
    1376:	b3 2c       	mov	r11, r3
    1378:	c4 2c       	mov	r12, r4
    137a:	d5 2c       	mov	r13, r5
    137c:	e6 2c       	mov	r14, r6
    137e:	f7 2c       	mov	r15, r7
    1380:	08 2d       	mov	r16, r8
    1382:	19 2d       	mov	r17, r9
    1384:	2a 2d       	mov	r18, r10
    1386:	3b 2d       	mov	r19, r11
    1388:	4c 2d       	mov	r20, r12
    138a:	5d 2d       	mov	r21, r13
    138c:	6e 2d       	mov	r22, r14
    138e:	7f 2d       	mov	r23, r15
    1390:	80 2f       	mov	r24, r16
    1392:	91 2f       	mov	r25, r17
    1394:	02 e0       	ldi	r16, 0x02	; 2
    1396:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <__ashldi3>
    139a:	2b 83       	std	Y+3, r18	; 0x03
    139c:	3c 83       	std	Y+4, r19	; 0x04
    139e:	4d 83       	std	Y+5, r20	; 0x05
    13a0:	5e 83       	std	Y+6, r21	; 0x06
    13a2:	6f 83       	std	Y+7, r22	; 0x07
    13a4:	78 87       	std	Y+8, r23	; 0x08
    13a6:	89 87       	std	Y+9, r24	; 0x09
    13a8:	9a 87       	std	Y+10, r25	; 0x0a
    13aa:	ab 80       	ldd	r10, Y+3	; 0x03
    13ac:	bc 80       	ldd	r11, Y+4	; 0x04
    13ae:	cd 80       	ldd	r12, Y+5	; 0x05
    13b0:	de 80       	ldd	r13, Y+6	; 0x06
    13b2:	ef 80       	ldd	r14, Y+7	; 0x07
    13b4:	f8 84       	ldd	r15, Y+8	; 0x08
    13b6:	09 85       	ldd	r16, Y+9	; 0x09
    13b8:	1a 85       	ldd	r17, Y+10	; 0x0a
    13ba:	2a 2d       	mov	r18, r10
    13bc:	3b 2d       	mov	r19, r11
    13be:	4c 2d       	mov	r20, r12
    13c0:	5d 2d       	mov	r21, r13
    13c2:	6e 2d       	mov	r22, r14
    13c4:	7f 2d       	mov	r23, r15
    13c6:	80 2f       	mov	r24, r16
    13c8:	91 2f       	mov	r25, r17
    13ca:	a2 2c       	mov	r10, r2
    13cc:	b3 2c       	mov	r11, r3
    13ce:	c4 2c       	mov	r12, r4
    13d0:	d5 2c       	mov	r13, r5
    13d2:	e6 2c       	mov	r14, r6
    13d4:	f7 2c       	mov	r15, r7
    13d6:	08 2d       	mov	r16, r8
    13d8:	19 2d       	mov	r17, r9
    13da:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <__adddi3>
    13de:	a2 2e       	mov	r10, r18
    13e0:	b3 2e       	mov	r11, r19
    13e2:	c4 2e       	mov	r12, r20
    13e4:	d5 2e       	mov	r13, r21
    13e6:	e6 2e       	mov	r14, r22
    13e8:	f7 2e       	mov	r15, r23
    13ea:	08 2f       	mov	r16, r24
    13ec:	19 2f       	mov	r17, r25
    13ee:	2a 2d       	mov	r18, r10
    13f0:	3b 2d       	mov	r19, r11
    13f2:	4c 2d       	mov	r20, r12
    13f4:	5d 2d       	mov	r21, r13
    13f6:	6e 2d       	mov	r22, r14
    13f8:	7f 2d       	mov	r23, r15
    13fa:	80 2f       	mov	r24, r16
    13fc:	91 2f       	mov	r25, r17
    13fe:	29 51       	subi	r18, 0x19	; 25
    1400:	3c 4f       	sbci	r19, 0xFC	; 252
    1402:	4f 4f       	sbci	r20, 0xFF	; 255
    1404:	5f 4f       	sbci	r21, 0xFF	; 255
    1406:	6f 4f       	sbci	r22, 0xFF	; 255
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	8f 4f       	sbci	r24, 0xFF	; 255
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	a2 2e       	mov	r10, r18
    1410:	b3 2e       	mov	r11, r19
    1412:	c4 2e       	mov	r12, r20
    1414:	d5 2e       	mov	r13, r21
    1416:	e6 2e       	mov	r14, r22
    1418:	f7 2e       	mov	r15, r23
    141a:	08 2f       	mov	r16, r24
    141c:	19 2f       	mov	r17, r25
    141e:	2a 2d       	mov	r18, r10
    1420:	3b 2d       	mov	r19, r11
    1422:	4c 2d       	mov	r20, r12
    1424:	5d 2d       	mov	r21, r13
    1426:	6e 2d       	mov	r22, r14
    1428:	7f 2d       	mov	r23, r15
    142a:	80 2f       	mov	r24, r16
    142c:	91 2f       	mov	r25, r17
    142e:	0e 94 40 2a 	call	0x5480	; 0x5480 <__floatundisf>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e8       	ldi	r19, 0x80	; 128
    143a:	4b eb       	ldi	r20, 0xBB	; 187
    143c:	55 e4       	ldi	r21, 0x45	; 69
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	bc 01       	movw	r22, r24
    144c:	cd 01       	movw	r24, r26
    144e:	0e 94 99 29 	call	0x5332	; 0x5332 <__fixunssfdi>
    1452:	a2 2e       	mov	r10, r18
    1454:	b3 2e       	mov	r11, r19
    1456:	c4 2e       	mov	r12, r20
    1458:	d5 2e       	mov	r13, r21
    145a:	e6 2e       	mov	r14, r22
    145c:	f7 2e       	mov	r15, r23
    145e:	08 2f       	mov	r16, r24
    1460:	19 2f       	mov	r17, r25
    1462:	d6 01       	movw	r26, r12
    1464:	c5 01       	movw	r24, r10
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	d6 de       	rcall	.-596    	; 0x1218 <__portable_avr_delay_cycles>
}
    146c:	2a 96       	adiw	r28, 0x0a	; 10
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	bf 90       	pop	r11
    1484:	af 90       	pop	r10
    1486:	9f 90       	pop	r9
    1488:	8f 90       	pop	r8
    148a:	7f 90       	pop	r7
    148c:	6f 90       	pop	r6
    148e:	5f 90       	pop	r5
    1490:	4f 90       	pop	r4
    1492:	3f 90       	pop	r3
    1494:	2f 90       	pop	r2
    1496:	08 95       	ret

00001498 <pressure_init>:

void pressure_init(MS5607* sensor)
{
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	00 d0       	rcall	.+0      	; 0x149e <pressure_init+0x6>
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	9a 83       	std	Y+2, r25	; 0x02
	pressure_reset(sensor);
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	32 df       	rcall	.-412    	; 0x1310 <pressure_reset>
	
	spi_select(sensor->ss_pin);
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	fc 01       	movw	r30, r24
    14b2:	80 81       	ld	r24, Z
    14b4:	0e 94 db 14 	call	0x29b6	; 0x29b6 <spi_select>
	spi_write(MS5607_SPI, 0xA2);
    14b8:	62 ea       	ldi	r22, 0xA2	; 162
    14ba:	80 ec       	ldi	r24, 0xC0	; 192
    14bc:	98 e0       	ldi	r25, 0x08	; 8
    14be:	0e 94 22 14 	call	0x2844	; 0x2844 <spi_write>
	sensor->C1 = read16(MS5607_SPI);
    14c2:	80 ec       	ldi	r24, 0xC0	; 192
    14c4:	98 e0       	ldi	r25, 0x08	; 8
    14c6:	ae de       	rcall	.-676    	; 0x1224 <read16>
    14c8:	9c 01       	movw	r18, r24
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	fc 01       	movw	r30, r24
    14d0:	21 83       	std	Z+1, r18	; 0x01
    14d2:	32 83       	std	Z+2, r19	; 0x02
	spi_deselect(sensor->ss_pin);
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	fc 01       	movw	r30, r24
    14da:	80 81       	ld	r24, Z
    14dc:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <spi_deselect>
	
	spi_select(sensor->ss_pin);
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	fc 01       	movw	r30, r24
    14e6:	80 81       	ld	r24, Z
    14e8:	0e 94 db 14 	call	0x29b6	; 0x29b6 <spi_select>
	spi_write(MS5607_SPI, 0xA4);
    14ec:	64 ea       	ldi	r22, 0xA4	; 164
    14ee:	80 ec       	ldi	r24, 0xC0	; 192
    14f0:	98 e0       	ldi	r25, 0x08	; 8
    14f2:	0e 94 22 14 	call	0x2844	; 0x2844 <spi_write>
	sensor->C2 = read16(MS5607_SPI);
    14f6:	80 ec       	ldi	r24, 0xC0	; 192
    14f8:	98 e0       	ldi	r25, 0x08	; 8
    14fa:	94 de       	rcall	.-728    	; 0x1224 <read16>
    14fc:	9c 01       	movw	r18, r24
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	fc 01       	movw	r30, r24
    1504:	23 83       	std	Z+3, r18	; 0x03
    1506:	34 83       	std	Z+4, r19	; 0x04
	spi_deselect(sensor->ss_pin);
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	fc 01       	movw	r30, r24
    150e:	80 81       	ld	r24, Z
    1510:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <spi_deselect>
	
	spi_select(sensor->ss_pin);
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	fc 01       	movw	r30, r24
    151a:	80 81       	ld	r24, Z
    151c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <spi_select>
	spi_write(MS5607_SPI, 0xA6);
    1520:	66 ea       	ldi	r22, 0xA6	; 166
    1522:	80 ec       	ldi	r24, 0xC0	; 192
    1524:	98 e0       	ldi	r25, 0x08	; 8
    1526:	0e 94 22 14 	call	0x2844	; 0x2844 <spi_write>
	sensor->C3 = read16(MS5607_SPI);
    152a:	80 ec       	ldi	r24, 0xC0	; 192
    152c:	98 e0       	ldi	r25, 0x08	; 8
    152e:	7a de       	rcall	.-780    	; 0x1224 <read16>
    1530:	9c 01       	movw	r18, r24
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	fc 01       	movw	r30, r24
    1538:	25 83       	std	Z+5, r18	; 0x05
    153a:	36 83       	std	Z+6, r19	; 0x06
	spi_deselect(sensor->ss_pin);
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	fc 01       	movw	r30, r24
    1542:	80 81       	ld	r24, Z
    1544:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <spi_deselect>
	
	spi_select(sensor->ss_pin);
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	fc 01       	movw	r30, r24
    154e:	80 81       	ld	r24, Z
    1550:	0e 94 db 14 	call	0x29b6	; 0x29b6 <spi_select>
	spi_write(MS5607_SPI, 0xA8);
    1554:	68 ea       	ldi	r22, 0xA8	; 168
    1556:	80 ec       	ldi	r24, 0xC0	; 192
    1558:	98 e0       	ldi	r25, 0x08	; 8
    155a:	0e 94 22 14 	call	0x2844	; 0x2844 <spi_write>
	sensor->C4 = read16(MS5607_SPI);
    155e:	80 ec       	ldi	r24, 0xC0	; 192
    1560:	98 e0       	ldi	r25, 0x08	; 8
    1562:	60 de       	rcall	.-832    	; 0x1224 <read16>
    1564:	9c 01       	movw	r18, r24
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	fc 01       	movw	r30, r24
    156c:	27 83       	std	Z+7, r18	; 0x07
    156e:	30 87       	std	Z+8, r19	; 0x08
	spi_deselect(sensor->ss_pin);
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	fc 01       	movw	r30, r24
    1576:	80 81       	ld	r24, Z
    1578:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <spi_deselect>
	
	spi_select(sensor->ss_pin);
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	fc 01       	movw	r30, r24
    1582:	80 81       	ld	r24, Z
    1584:	0e 94 db 14 	call	0x29b6	; 0x29b6 <spi_select>
	spi_write(MS5607_SPI, 0xAA);
    1588:	6a ea       	ldi	r22, 0xAA	; 170
    158a:	80 ec       	ldi	r24, 0xC0	; 192
    158c:	98 e0       	ldi	r25, 0x08	; 8
    158e:	0e 94 22 14 	call	0x2844	; 0x2844 <spi_write>
	sensor->C5 = read16(MS5607_SPI);
    1592:	80 ec       	ldi	r24, 0xC0	; 192
    1594:	98 e0       	ldi	r25, 0x08	; 8
    1596:	46 de       	rcall	.-884    	; 0x1224 <read16>
    1598:	9c 01       	movw	r18, r24
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
    159e:	fc 01       	movw	r30, r24
    15a0:	21 87       	std	Z+9, r18	; 0x09
    15a2:	32 87       	std	Z+10, r19	; 0x0a
	spi_deselect(sensor->ss_pin);
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9a 81       	ldd	r25, Y+2	; 0x02
    15a8:	fc 01       	movw	r30, r24
    15aa:	80 81       	ld	r24, Z
    15ac:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <spi_deselect>
	
	spi_select(sensor->ss_pin);
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	fc 01       	movw	r30, r24
    15b6:	80 81       	ld	r24, Z
    15b8:	0e 94 db 14 	call	0x29b6	; 0x29b6 <spi_select>
	spi_write(MS5607_SPI, 0xAC);
    15bc:	6c ea       	ldi	r22, 0xAC	; 172
    15be:	80 ec       	ldi	r24, 0xC0	; 192
    15c0:	98 e0       	ldi	r25, 0x08	; 8
    15c2:	0e 94 22 14 	call	0x2844	; 0x2844 <spi_write>
	sensor->C6 = read16(MS5607_SPI);
    15c6:	80 ec       	ldi	r24, 0xC0	; 192
    15c8:	98 e0       	ldi	r25, 0x08	; 8
    15ca:	2c de       	rcall	.-936    	; 0x1224 <read16>
    15cc:	9c 01       	movw	r18, r24
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	fc 01       	movw	r30, r24
    15d4:	23 87       	std	Z+11, r18	; 0x0b
    15d6:	34 87       	std	Z+12, r19	; 0x0c
	spi_deselect(sensor->ss_pin);
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	9a 81       	ldd	r25, Y+2	; 0x02
    15dc:	fc 01       	movw	r30, r24
    15de:	80 81       	ld	r24, Z
    15e0:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <spi_deselect>
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <readMS5607>:

double readMS5607(MS5607* sensor)
{
    15ee:	2f 92       	push	r2
    15f0:	3f 92       	push	r3
    15f2:	4f 92       	push	r4
    15f4:	5f 92       	push	r5
    15f6:	6f 92       	push	r6
    15f8:	7f 92       	push	r7
    15fa:	8f 92       	push	r8
    15fc:	9f 92       	push	r9
    15fe:	af 92       	push	r10
    1600:	bf 92       	push	r11
    1602:	cf 92       	push	r12
    1604:	df 92       	push	r13
    1606:	ef 92       	push	r14
    1608:	ff 92       	push	r15
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	c6 55       	subi	r28, 0x56	; 86
    1618:	d1 09       	sbc	r29, r1
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	8d ab       	std	Y+53, r24	; 0x35
    1620:	9e ab       	std	Y+54, r25	; 0x36
	
	//Pressure Data (D1)//
	spi_select(sensor->ss_pin);
    1622:	8d a9       	ldd	r24, Y+53	; 0x35
    1624:	9e a9       	ldd	r25, Y+54	; 0x36
    1626:	fc 01       	movw	r30, r24
    1628:	80 81       	ld	r24, Z
    162a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <spi_select>
	spi_write(MS5607_SPI, 0x48); //Tell MS5607 to record raw pressure (D1)
    162e:	68 e4       	ldi	r22, 0x48	; 72
    1630:	80 ec       	ldi	r24, 0xC0	; 192
    1632:	98 e0       	ldi	r25, 0x08	; 8
    1634:	0e 94 22 14 	call	0x2844	; 0x2844 <spi_write>
	spi_deselect(sensor->ss_pin);
    1638:	8d a9       	ldd	r24, Y+53	; 0x35
    163a:	9e a9       	ldd	r25, Y+54	; 0x36
    163c:	fc 01       	movw	r30, r24
    163e:	80 81       	ld	r24, Z
    1640:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <spi_deselect>
	delay_ms(10);
    1644:	dd dd       	rcall	.-1094   	; 0x1200 <sysclk_get_cpu_hz>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9c 01       	movw	r18, r24
    164c:	ad 01       	movw	r20, r26
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	cb 01       	movw	r24, r22
    1654:	82 2e       	mov	r8, r18
    1656:	93 2e       	mov	r9, r19
    1658:	a4 2e       	mov	r10, r20
    165a:	b5 2e       	mov	r11, r21
    165c:	c6 2e       	mov	r12, r22
    165e:	d7 2e       	mov	r13, r23
    1660:	e8 2e       	mov	r14, r24
    1662:	f9 2e       	mov	r15, r25
    1664:	28 2d       	mov	r18, r8
    1666:	39 2d       	mov	r19, r9
    1668:	4a 2d       	mov	r20, r10
    166a:	5b 2d       	mov	r21, r11
    166c:	6c 2d       	mov	r22, r12
    166e:	7d 2d       	mov	r23, r13
    1670:	8e 2d       	mov	r24, r14
    1672:	9f 2d       	mov	r25, r15
    1674:	01 e0       	ldi	r16, 0x01	; 1
    1676:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <__ashldi3>
    167a:	2f ab       	std	Y+55, r18	; 0x37
    167c:	38 af       	std	Y+56, r19	; 0x38
    167e:	49 af       	std	Y+57, r20	; 0x39
    1680:	5a af       	std	Y+58, r21	; 0x3a
    1682:	6b af       	std	Y+59, r22	; 0x3b
    1684:	7c af       	std	Y+60, r23	; 0x3c
    1686:	8d af       	std	Y+61, r24	; 0x3d
    1688:	9e af       	std	Y+62, r25	; 0x3e
    168a:	8f a8       	ldd	r8, Y+55	; 0x37
    168c:	98 ac       	ldd	r9, Y+56	; 0x38
    168e:	a9 ac       	ldd	r10, Y+57	; 0x39
    1690:	ba ac       	ldd	r11, Y+58	; 0x3a
    1692:	cb ac       	ldd	r12, Y+59	; 0x3b
    1694:	dc ac       	ldd	r13, Y+60	; 0x3c
    1696:	ed ac       	ldd	r14, Y+61	; 0x3d
    1698:	fe ac       	ldd	r15, Y+62	; 0x3e
    169a:	28 2d       	mov	r18, r8
    169c:	39 2d       	mov	r19, r9
    169e:	4a 2d       	mov	r20, r10
    16a0:	5b 2d       	mov	r21, r11
    16a2:	6c 2d       	mov	r22, r12
    16a4:	7d 2d       	mov	r23, r13
    16a6:	8e 2d       	mov	r24, r14
    16a8:	9f 2d       	mov	r25, r15
    16aa:	02 e0       	ldi	r16, 0x02	; 2
    16ac:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <__ashldi3>
    16b0:	2f af       	std	Y+63, r18	; 0x3f
    16b2:	21 96       	adiw	r28, 0x01	; 1
    16b4:	3f af       	std	Y+63, r19	; 0x3f
    16b6:	21 97       	sbiw	r28, 0x01	; 1
    16b8:	22 96       	adiw	r28, 0x02	; 2
    16ba:	4f af       	std	Y+63, r20	; 0x3f
    16bc:	22 97       	sbiw	r28, 0x02	; 2
    16be:	23 96       	adiw	r28, 0x03	; 3
    16c0:	5f af       	std	Y+63, r21	; 0x3f
    16c2:	23 97       	sbiw	r28, 0x03	; 3
    16c4:	24 96       	adiw	r28, 0x04	; 4
    16c6:	6f af       	std	Y+63, r22	; 0x3f
    16c8:	24 97       	sbiw	r28, 0x04	; 4
    16ca:	25 96       	adiw	r28, 0x05	; 5
    16cc:	7f af       	std	Y+63, r23	; 0x3f
    16ce:	25 97       	sbiw	r28, 0x05	; 5
    16d0:	26 96       	adiw	r28, 0x06	; 6
    16d2:	8f af       	std	Y+63, r24	; 0x3f
    16d4:	26 97       	sbiw	r28, 0x06	; 6
    16d6:	27 96       	adiw	r28, 0x07	; 7
    16d8:	9f af       	std	Y+63, r25	; 0x3f
    16da:	27 97       	sbiw	r28, 0x07	; 7
    16dc:	28 2d       	mov	r18, r8
    16de:	39 2d       	mov	r19, r9
    16e0:	4a 2d       	mov	r20, r10
    16e2:	5b 2d       	mov	r21, r11
    16e4:	6c 2d       	mov	r22, r12
    16e6:	7d 2d       	mov	r23, r13
    16e8:	8e 2d       	mov	r24, r14
    16ea:	9f 2d       	mov	r25, r15
    16ec:	af ac       	ldd	r10, Y+63	; 0x3f
    16ee:	21 96       	adiw	r28, 0x01	; 1
    16f0:	bf ac       	ldd	r11, Y+63	; 0x3f
    16f2:	21 97       	sbiw	r28, 0x01	; 1
    16f4:	22 96       	adiw	r28, 0x02	; 2
    16f6:	cf ac       	ldd	r12, Y+63	; 0x3f
    16f8:	22 97       	sbiw	r28, 0x02	; 2
    16fa:	23 96       	adiw	r28, 0x03	; 3
    16fc:	df ac       	ldd	r13, Y+63	; 0x3f
    16fe:	23 97       	sbiw	r28, 0x03	; 3
    1700:	24 96       	adiw	r28, 0x04	; 4
    1702:	ef ac       	ldd	r14, Y+63	; 0x3f
    1704:	24 97       	sbiw	r28, 0x04	; 4
    1706:	25 96       	adiw	r28, 0x05	; 5
    1708:	ff ac       	ldd	r15, Y+63	; 0x3f
    170a:	25 97       	sbiw	r28, 0x05	; 5
    170c:	26 96       	adiw	r28, 0x06	; 6
    170e:	0f ad       	ldd	r16, Y+63	; 0x3f
    1710:	26 97       	sbiw	r28, 0x06	; 6
    1712:	27 96       	adiw	r28, 0x07	; 7
    1714:	1f ad       	ldd	r17, Y+63	; 0x3f
    1716:	27 97       	sbiw	r28, 0x07	; 7
    1718:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <__adddi3>
    171c:	a2 2e       	mov	r10, r18
    171e:	b3 2e       	mov	r11, r19
    1720:	c4 2e       	mov	r12, r20
    1722:	d5 2e       	mov	r13, r21
    1724:	e6 2e       	mov	r14, r22
    1726:	f7 2e       	mov	r15, r23
    1728:	08 2f       	mov	r16, r24
    172a:	19 2f       	mov	r17, r25
    172c:	2a 2d       	mov	r18, r10
    172e:	3b 2d       	mov	r19, r11
    1730:	4c 2d       	mov	r20, r12
    1732:	5d 2d       	mov	r21, r13
    1734:	6e 2d       	mov	r22, r14
    1736:	7f 2d       	mov	r23, r15
    1738:	80 2f       	mov	r24, r16
    173a:	91 2f       	mov	r25, r17
    173c:	29 51       	subi	r18, 0x19	; 25
    173e:	3c 4f       	sbci	r19, 0xFC	; 252
    1740:	4f 4f       	sbci	r20, 0xFF	; 255
    1742:	5f 4f       	sbci	r21, 0xFF	; 255
    1744:	6f 4f       	sbci	r22, 0xFF	; 255
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	8f 4f       	sbci	r24, 0xFF	; 255
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	a2 2e       	mov	r10, r18
    174e:	b3 2e       	mov	r11, r19
    1750:	c4 2e       	mov	r12, r20
    1752:	d5 2e       	mov	r13, r21
    1754:	e6 2e       	mov	r14, r22
    1756:	f7 2e       	mov	r15, r23
    1758:	08 2f       	mov	r16, r24
    175a:	19 2f       	mov	r17, r25
    175c:	2a 2d       	mov	r18, r10
    175e:	3b 2d       	mov	r19, r11
    1760:	4c 2d       	mov	r20, r12
    1762:	5d 2d       	mov	r21, r13
    1764:	6e 2d       	mov	r22, r14
    1766:	7f 2d       	mov	r23, r15
    1768:	80 2f       	mov	r24, r16
    176a:	91 2f       	mov	r25, r17
    176c:	0e 94 40 2a 	call	0x5480	; 0x5480 <__floatundisf>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e8       	ldi	r19, 0x80	; 128
    1778:	4b eb       	ldi	r20, 0xBB	; 187
    177a:	55 e4       	ldi	r21, 0x45	; 69
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	0e 94 99 29 	call	0x5332	; 0x5332 <__fixunssfdi>
    1790:	a2 2e       	mov	r10, r18
    1792:	b3 2e       	mov	r11, r19
    1794:	c4 2e       	mov	r12, r20
    1796:	d5 2e       	mov	r13, r21
    1798:	e6 2e       	mov	r14, r22
    179a:	f7 2e       	mov	r15, r23
    179c:	08 2f       	mov	r16, r24
    179e:	19 2f       	mov	r17, r25
    17a0:	d6 01       	movw	r26, r12
    17a2:	c5 01       	movw	r24, r10
    17a4:	bc 01       	movw	r22, r24
    17a6:	cd 01       	movw	r24, r26
    17a8:	37 dd       	rcall	.-1426   	; 0x1218 <__portable_avr_delay_cycles>
	
	spi_select(sensor->ss_pin);
    17aa:	8d a9       	ldd	r24, Y+53	; 0x35
    17ac:	9e a9       	ldd	r25, Y+54	; 0x36
    17ae:	fc 01       	movw	r30, r24
    17b0:	80 81       	ld	r24, Z
    17b2:	0e 94 db 14 	call	0x29b6	; 0x29b6 <spi_select>
	spi_write(MS5607_SPI, 0x0); //Tell MS5607 to read off data
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	80 ec       	ldi	r24, 0xC0	; 192
    17ba:	98 e0       	ldi	r25, 0x08	; 8
    17bc:	0e 94 22 14 	call	0x2844	; 0x2844 <spi_write>
	sensor->D1 = read24(MS5607_SPI);
    17c0:	80 ec       	ldi	r24, 0xC0	; 192
    17c2:	98 e0       	ldi	r25, 0x08	; 8
    17c4:	55 dd       	rcall	.-1366   	; 0x1270 <read24>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	2d a9       	ldd	r18, Y+53	; 0x35
    17cc:	3e a9       	ldd	r19, Y+54	; 0x36
    17ce:	f9 01       	movw	r30, r18
    17d0:	85 87       	std	Z+13, r24	; 0x0d
    17d2:	96 87       	std	Z+14, r25	; 0x0e
    17d4:	a7 87       	std	Z+15, r26	; 0x0f
    17d6:	b0 8b       	std	Z+16, r27	; 0x10
	spi_deselect(sensor->ss_pin);
    17d8:	8d a9       	ldd	r24, Y+53	; 0x35
    17da:	9e a9       	ldd	r25, Y+54	; 0x36
    17dc:	fc 01       	movw	r30, r24
    17de:	80 81       	ld	r24, Z
    17e0:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <spi_deselect>
	
	//Temperature Data (D2)//
	spi_select(sensor->ss_pin);
    17e4:	8d a9       	ldd	r24, Y+53	; 0x35
    17e6:	9e a9       	ldd	r25, Y+54	; 0x36
    17e8:	fc 01       	movw	r30, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	0e 94 db 14 	call	0x29b6	; 0x29b6 <spi_select>
	spi_write(MS5607_SPI, 0x58); //Tell MS5607 to record raw temperature (D2)
    17f0:	68 e5       	ldi	r22, 0x58	; 88
    17f2:	80 ec       	ldi	r24, 0xC0	; 192
    17f4:	98 e0       	ldi	r25, 0x08	; 8
    17f6:	0e 94 22 14 	call	0x2844	; 0x2844 <spi_write>
	spi_deselect(sensor->ss_pin);
    17fa:	8d a9       	ldd	r24, Y+53	; 0x35
    17fc:	9e a9       	ldd	r25, Y+54	; 0x36
    17fe:	fc 01       	movw	r30, r24
    1800:	80 81       	ld	r24, Z
    1802:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <spi_deselect>
	delay_ms(10);
    1806:	fc dc       	rcall	.-1544   	; 0x1200 <sysclk_get_cpu_hz>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9c 01       	movw	r18, r24
    180e:	ad 01       	movw	r20, r26
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	cb 01       	movw	r24, r22
    1816:	82 2e       	mov	r8, r18
    1818:	93 2e       	mov	r9, r19
    181a:	a4 2e       	mov	r10, r20
    181c:	b5 2e       	mov	r11, r21
    181e:	c6 2e       	mov	r12, r22
    1820:	d7 2e       	mov	r13, r23
    1822:	e8 2e       	mov	r14, r24
    1824:	f9 2e       	mov	r15, r25
    1826:	28 2d       	mov	r18, r8
    1828:	39 2d       	mov	r19, r9
    182a:	4a 2d       	mov	r20, r10
    182c:	5b 2d       	mov	r21, r11
    182e:	6c 2d       	mov	r22, r12
    1830:	7d 2d       	mov	r23, r13
    1832:	8e 2d       	mov	r24, r14
    1834:	9f 2d       	mov	r25, r15
    1836:	01 e0       	ldi	r16, 0x01	; 1
    1838:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <__ashldi3>
    183c:	28 96       	adiw	r28, 0x08	; 8
    183e:	2f af       	std	Y+63, r18	; 0x3f
    1840:	28 97       	sbiw	r28, 0x08	; 8
    1842:	29 96       	adiw	r28, 0x09	; 9
    1844:	3f af       	std	Y+63, r19	; 0x3f
    1846:	29 97       	sbiw	r28, 0x09	; 9
    1848:	2a 96       	adiw	r28, 0x0a	; 10
    184a:	4f af       	std	Y+63, r20	; 0x3f
    184c:	2a 97       	sbiw	r28, 0x0a	; 10
    184e:	2b 96       	adiw	r28, 0x0b	; 11
    1850:	5f af       	std	Y+63, r21	; 0x3f
    1852:	2b 97       	sbiw	r28, 0x0b	; 11
    1854:	2c 96       	adiw	r28, 0x0c	; 12
    1856:	6f af       	std	Y+63, r22	; 0x3f
    1858:	2c 97       	sbiw	r28, 0x0c	; 12
    185a:	2d 96       	adiw	r28, 0x0d	; 13
    185c:	7f af       	std	Y+63, r23	; 0x3f
    185e:	2d 97       	sbiw	r28, 0x0d	; 13
    1860:	2e 96       	adiw	r28, 0x0e	; 14
    1862:	8f af       	std	Y+63, r24	; 0x3f
    1864:	2e 97       	sbiw	r28, 0x0e	; 14
    1866:	2f 96       	adiw	r28, 0x0f	; 15
    1868:	9f af       	std	Y+63, r25	; 0x3f
    186a:	2f 97       	sbiw	r28, 0x0f	; 15
    186c:	28 96       	adiw	r28, 0x08	; 8
    186e:	8f ac       	ldd	r8, Y+63	; 0x3f
    1870:	28 97       	sbiw	r28, 0x08	; 8
    1872:	29 96       	adiw	r28, 0x09	; 9
    1874:	9f ac       	ldd	r9, Y+63	; 0x3f
    1876:	29 97       	sbiw	r28, 0x09	; 9
    1878:	2a 96       	adiw	r28, 0x0a	; 10
    187a:	af ac       	ldd	r10, Y+63	; 0x3f
    187c:	2a 97       	sbiw	r28, 0x0a	; 10
    187e:	2b 96       	adiw	r28, 0x0b	; 11
    1880:	bf ac       	ldd	r11, Y+63	; 0x3f
    1882:	2b 97       	sbiw	r28, 0x0b	; 11
    1884:	2c 96       	adiw	r28, 0x0c	; 12
    1886:	cf ac       	ldd	r12, Y+63	; 0x3f
    1888:	2c 97       	sbiw	r28, 0x0c	; 12
    188a:	2d 96       	adiw	r28, 0x0d	; 13
    188c:	df ac       	ldd	r13, Y+63	; 0x3f
    188e:	2d 97       	sbiw	r28, 0x0d	; 13
    1890:	2e 96       	adiw	r28, 0x0e	; 14
    1892:	ef ac       	ldd	r14, Y+63	; 0x3f
    1894:	2e 97       	sbiw	r28, 0x0e	; 14
    1896:	2f 96       	adiw	r28, 0x0f	; 15
    1898:	ff ac       	ldd	r15, Y+63	; 0x3f
    189a:	2f 97       	sbiw	r28, 0x0f	; 15
    189c:	28 2d       	mov	r18, r8
    189e:	39 2d       	mov	r19, r9
    18a0:	4a 2d       	mov	r20, r10
    18a2:	5b 2d       	mov	r21, r11
    18a4:	6c 2d       	mov	r22, r12
    18a6:	7d 2d       	mov	r23, r13
    18a8:	8e 2d       	mov	r24, r14
    18aa:	9f 2d       	mov	r25, r15
    18ac:	02 e0       	ldi	r16, 0x02	; 2
    18ae:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <__ashldi3>
    18b2:	60 96       	adiw	r28, 0x10	; 16
    18b4:	2f af       	std	Y+63, r18	; 0x3f
    18b6:	60 97       	sbiw	r28, 0x10	; 16
    18b8:	61 96       	adiw	r28, 0x11	; 17
    18ba:	3f af       	std	Y+63, r19	; 0x3f
    18bc:	61 97       	sbiw	r28, 0x11	; 17
    18be:	62 96       	adiw	r28, 0x12	; 18
    18c0:	4f af       	std	Y+63, r20	; 0x3f
    18c2:	62 97       	sbiw	r28, 0x12	; 18
    18c4:	63 96       	adiw	r28, 0x13	; 19
    18c6:	5f af       	std	Y+63, r21	; 0x3f
    18c8:	63 97       	sbiw	r28, 0x13	; 19
    18ca:	64 96       	adiw	r28, 0x14	; 20
    18cc:	6f af       	std	Y+63, r22	; 0x3f
    18ce:	64 97       	sbiw	r28, 0x14	; 20
    18d0:	65 96       	adiw	r28, 0x15	; 21
    18d2:	7f af       	std	Y+63, r23	; 0x3f
    18d4:	65 97       	sbiw	r28, 0x15	; 21
    18d6:	66 96       	adiw	r28, 0x16	; 22
    18d8:	8f af       	std	Y+63, r24	; 0x3f
    18da:	66 97       	sbiw	r28, 0x16	; 22
    18dc:	67 96       	adiw	r28, 0x17	; 23
    18de:	9f af       	std	Y+63, r25	; 0x3f
    18e0:	67 97       	sbiw	r28, 0x17	; 23
    18e2:	28 2d       	mov	r18, r8
    18e4:	39 2d       	mov	r19, r9
    18e6:	4a 2d       	mov	r20, r10
    18e8:	5b 2d       	mov	r21, r11
    18ea:	6c 2d       	mov	r22, r12
    18ec:	7d 2d       	mov	r23, r13
    18ee:	8e 2d       	mov	r24, r14
    18f0:	9f 2d       	mov	r25, r15
    18f2:	60 96       	adiw	r28, 0x10	; 16
    18f4:	af ac       	ldd	r10, Y+63	; 0x3f
    18f6:	60 97       	sbiw	r28, 0x10	; 16
    18f8:	61 96       	adiw	r28, 0x11	; 17
    18fa:	bf ac       	ldd	r11, Y+63	; 0x3f
    18fc:	61 97       	sbiw	r28, 0x11	; 17
    18fe:	62 96       	adiw	r28, 0x12	; 18
    1900:	cf ac       	ldd	r12, Y+63	; 0x3f
    1902:	62 97       	sbiw	r28, 0x12	; 18
    1904:	63 96       	adiw	r28, 0x13	; 19
    1906:	df ac       	ldd	r13, Y+63	; 0x3f
    1908:	63 97       	sbiw	r28, 0x13	; 19
    190a:	64 96       	adiw	r28, 0x14	; 20
    190c:	ef ac       	ldd	r14, Y+63	; 0x3f
    190e:	64 97       	sbiw	r28, 0x14	; 20
    1910:	65 96       	adiw	r28, 0x15	; 21
    1912:	ff ac       	ldd	r15, Y+63	; 0x3f
    1914:	65 97       	sbiw	r28, 0x15	; 21
    1916:	66 96       	adiw	r28, 0x16	; 22
    1918:	0f ad       	ldd	r16, Y+63	; 0x3f
    191a:	66 97       	sbiw	r28, 0x16	; 22
    191c:	67 96       	adiw	r28, 0x17	; 23
    191e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1920:	67 97       	sbiw	r28, 0x17	; 23
    1922:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <__adddi3>
    1926:	a2 2e       	mov	r10, r18
    1928:	b3 2e       	mov	r11, r19
    192a:	c4 2e       	mov	r12, r20
    192c:	d5 2e       	mov	r13, r21
    192e:	e6 2e       	mov	r14, r22
    1930:	f7 2e       	mov	r15, r23
    1932:	08 2f       	mov	r16, r24
    1934:	19 2f       	mov	r17, r25
    1936:	2a 2d       	mov	r18, r10
    1938:	3b 2d       	mov	r19, r11
    193a:	4c 2d       	mov	r20, r12
    193c:	5d 2d       	mov	r21, r13
    193e:	6e 2d       	mov	r22, r14
    1940:	7f 2d       	mov	r23, r15
    1942:	80 2f       	mov	r24, r16
    1944:	91 2f       	mov	r25, r17
    1946:	29 51       	subi	r18, 0x19	; 25
    1948:	3c 4f       	sbci	r19, 0xFC	; 252
    194a:	4f 4f       	sbci	r20, 0xFF	; 255
    194c:	5f 4f       	sbci	r21, 0xFF	; 255
    194e:	6f 4f       	sbci	r22, 0xFF	; 255
    1950:	7f 4f       	sbci	r23, 0xFF	; 255
    1952:	8f 4f       	sbci	r24, 0xFF	; 255
    1954:	9f 4f       	sbci	r25, 0xFF	; 255
    1956:	a2 2e       	mov	r10, r18
    1958:	b3 2e       	mov	r11, r19
    195a:	c4 2e       	mov	r12, r20
    195c:	d5 2e       	mov	r13, r21
    195e:	e6 2e       	mov	r14, r22
    1960:	f7 2e       	mov	r15, r23
    1962:	08 2f       	mov	r16, r24
    1964:	19 2f       	mov	r17, r25
    1966:	2a 2d       	mov	r18, r10
    1968:	3b 2d       	mov	r19, r11
    196a:	4c 2d       	mov	r20, r12
    196c:	5d 2d       	mov	r21, r13
    196e:	6e 2d       	mov	r22, r14
    1970:	7f 2d       	mov	r23, r15
    1972:	80 2f       	mov	r24, r16
    1974:	91 2f       	mov	r25, r17
    1976:	0e 94 40 2a 	call	0x5480	; 0x5480 <__floatundisf>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e8       	ldi	r19, 0x80	; 128
    1982:	4b eb       	ldi	r20, 0xBB	; 187
    1984:	55 e4       	ldi	r21, 0x45	; 69
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	bc 01       	movw	r22, r24
    1994:	cd 01       	movw	r24, r26
    1996:	0e 94 99 29 	call	0x5332	; 0x5332 <__fixunssfdi>
    199a:	a2 2e       	mov	r10, r18
    199c:	b3 2e       	mov	r11, r19
    199e:	c4 2e       	mov	r12, r20
    19a0:	d5 2e       	mov	r13, r21
    19a2:	e6 2e       	mov	r14, r22
    19a4:	f7 2e       	mov	r15, r23
    19a6:	08 2f       	mov	r16, r24
    19a8:	19 2f       	mov	r17, r25
    19aa:	d6 01       	movw	r26, r12
    19ac:	c5 01       	movw	r24, r10
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	32 dc       	rcall	.-1948   	; 0x1218 <__portable_avr_delay_cycles>
	
	spi_select(sensor->ss_pin);
    19b4:	8d a9       	ldd	r24, Y+53	; 0x35
    19b6:	9e a9       	ldd	r25, Y+54	; 0x36
    19b8:	fc 01       	movw	r30, r24
    19ba:	80 81       	ld	r24, Z
    19bc:	fc d7       	rcall	.+4088   	; 0x29b6 <spi_select>
	spi_write(MS5607_SPI, 0x0); //Tell MS5607 to read off data
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	80 ec       	ldi	r24, 0xC0	; 192
    19c2:	98 e0       	ldi	r25, 0x08	; 8
    19c4:	3f d7       	rcall	.+3710   	; 0x2844 <spi_write>
	sensor->D2 = read24(MS5607_SPI);
    19c6:	80 ec       	ldi	r24, 0xC0	; 192
    19c8:	98 e0       	ldi	r25, 0x08	; 8
    19ca:	52 dc       	rcall	.-1884   	; 0x1270 <read24>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	2d a9       	ldd	r18, Y+53	; 0x35
    19d2:	3e a9       	ldd	r19, Y+54	; 0x36
    19d4:	f9 01       	movw	r30, r18
    19d6:	81 8b       	std	Z+17, r24	; 0x11
    19d8:	92 8b       	std	Z+18, r25	; 0x12
    19da:	a3 8b       	std	Z+19, r26	; 0x13
    19dc:	b4 8b       	std	Z+20, r27	; 0x14
	spi_deselect(sensor->ss_pin);
    19de:	8d a9       	ldd	r24, Y+53	; 0x35
    19e0:	9e a9       	ldd	r25, Y+54	; 0x36
    19e2:	fc 01       	movw	r30, r24
    19e4:	80 81       	ld	r24, Z
    19e6:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <spi_deselect>
	
	
	//Get usable data from raw data//
	int32_t altitude = 0;
    19ea:	19 a2       	std	Y+33, r1	; 0x21
    19ec:	1a a2       	std	Y+34, r1	; 0x22
    19ee:	1b a2       	std	Y+35, r1	; 0x23
    19f0:	1c a2       	std	Y+36, r1	; 0x24
	float dt = 0, T2 = 0;
    19f2:	1d a2       	std	Y+37, r1	; 0x25
    19f4:	1e a2       	std	Y+38, r1	; 0x26
    19f6:	1f a2       	std	Y+39, r1	; 0x27
    19f8:	18 a6       	std	Y+40, r1	; 0x28
    19fa:	19 a6       	std	Y+41, r1	; 0x29
    19fc:	1a a6       	std	Y+42, r1	; 0x2a
    19fe:	1b a6       	std	Y+43, r1	; 0x2b
    1a00:	1c a6       	std	Y+44, r1	; 0x2c
	int32_t TEMP = 0, P = 0;
    1a02:	1d a6       	std	Y+45, r1	; 0x2d
    1a04:	1e a6       	std	Y+46, r1	; 0x2e
    1a06:	1f a6       	std	Y+47, r1	; 0x2f
    1a08:	18 aa       	std	Y+48, r1	; 0x30
    1a0a:	19 aa       	std	Y+49, r1	; 0x31
    1a0c:	1a aa       	std	Y+50, r1	; 0x32
    1a0e:	1b aa       	std	Y+51, r1	; 0x33
    1a10:	1c aa       	std	Y+52, r1	; 0x34
	int64_t OFF = 0, SENS = 0, OFF2 = 0, SENS2 = 0;
    1a12:	19 82       	std	Y+1, r1	; 0x01
    1a14:	1a 82       	std	Y+2, r1	; 0x02
    1a16:	1b 82       	std	Y+3, r1	; 0x03
    1a18:	1c 82       	std	Y+4, r1	; 0x04
    1a1a:	1d 82       	std	Y+5, r1	; 0x05
    1a1c:	1e 82       	std	Y+6, r1	; 0x06
    1a1e:	1f 82       	std	Y+7, r1	; 0x07
    1a20:	18 86       	std	Y+8, r1	; 0x08
    1a22:	19 86       	std	Y+9, r1	; 0x09
    1a24:	1a 86       	std	Y+10, r1	; 0x0a
    1a26:	1b 86       	std	Y+11, r1	; 0x0b
    1a28:	1c 86       	std	Y+12, r1	; 0x0c
    1a2a:	1d 86       	std	Y+13, r1	; 0x0d
    1a2c:	1e 86       	std	Y+14, r1	; 0x0e
    1a2e:	1f 86       	std	Y+15, r1	; 0x0f
    1a30:	18 8a       	std	Y+16, r1	; 0x10
    1a32:	19 8a       	std	Y+17, r1	; 0x11
    1a34:	1a 8a       	std	Y+18, r1	; 0x12
    1a36:	1b 8a       	std	Y+19, r1	; 0x13
    1a38:	1c 8a       	std	Y+20, r1	; 0x14
    1a3a:	1d 8a       	std	Y+21, r1	; 0x15
    1a3c:	1e 8a       	std	Y+22, r1	; 0x16
    1a3e:	1f 8a       	std	Y+23, r1	; 0x17
    1a40:	18 8e       	std	Y+24, r1	; 0x18
    1a42:	19 8e       	std	Y+25, r1	; 0x19
    1a44:	1a 8e       	std	Y+26, r1	; 0x1a
    1a46:	1b 8e       	std	Y+27, r1	; 0x1b
    1a48:	1c 8e       	std	Y+28, r1	; 0x1c
    1a4a:	1d 8e       	std	Y+29, r1	; 0x1d
    1a4c:	1e 8e       	std	Y+30, r1	; 0x1e
    1a4e:	1f 8e       	std	Y+31, r1	; 0x1f
    1a50:	18 a2       	std	Y+32, r1	; 0x20
	
	dt = sensor->D2 - ((float)sensor->C5 * 256);
    1a52:	8d a9       	ldd	r24, Y+53	; 0x35
    1a54:	9e a9       	ldd	r25, Y+54	; 0x36
    1a56:	fc 01       	movw	r30, r24
    1a58:	81 89       	ldd	r24, Z+17	; 0x11
    1a5a:	92 89       	ldd	r25, Z+18	; 0x12
    1a5c:	a3 89       	ldd	r26, Z+19	; 0x13
    1a5e:	b4 89       	ldd	r27, Z+20	; 0x14
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 03 2a 	call	0x5406	; 0x5406 <__floatunsisf>
    1a68:	6b 01       	movw	r12, r22
    1a6a:	7c 01       	movw	r14, r24
    1a6c:	8d a9       	ldd	r24, Y+53	; 0x35
    1a6e:	9e a9       	ldd	r25, Y+54	; 0x36
    1a70:	fc 01       	movw	r30, r24
    1a72:	81 85       	ldd	r24, Z+9	; 0x09
    1a74:	92 85       	ldd	r25, Z+10	; 0x0a
    1a76:	cc 01       	movw	r24, r24
    1a78:	a0 e0       	ldi	r26, 0x00	; 0
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 03 2a 	call	0x5406	; 0x5406 <__floatunsisf>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	53 e4       	ldi	r21, 0x43	; 67
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 24 2b 	call	0x5648	; 0x5648 <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9c 01       	movw	r18, r24
    1a9e:	ad 01       	movw	r20, r26
    1aa0:	c7 01       	movw	r24, r14
    1aa2:	b6 01       	movw	r22, r12
    1aa4:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	8d a3       	std	Y+37, r24	; 0x25
    1aae:	9e a3       	std	Y+38, r25	; 0x26
    1ab0:	af a3       	std	Y+39, r26	; 0x27
    1ab2:	b8 a7       	std	Y+40, r27	; 0x28
	OFF = ((float)sensor->C2 * 131072) + (((float)sensor->C4 * dt) / 64);
    1ab4:	8d a9       	ldd	r24, Y+53	; 0x35
    1ab6:	9e a9       	ldd	r25, Y+54	; 0x36
    1ab8:	fc 01       	movw	r30, r24
    1aba:	83 81       	ldd	r24, Z+3	; 0x03
    1abc:	94 81       	ldd	r25, Z+4	; 0x04
    1abe:	cc 01       	movw	r24, r24
    1ac0:	a0 e0       	ldi	r26, 0x00	; 0
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 03 2a 	call	0x5406	; 0x5406 <__floatunsisf>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	58 e4       	ldi	r21, 0x48	; 72
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 24 2b 	call	0x5648	; 0x5648 <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	6c 01       	movw	r12, r24
    1ae6:	7d 01       	movw	r14, r26
    1ae8:	8d a9       	ldd	r24, Y+53	; 0x35
    1aea:	9e a9       	ldd	r25, Y+54	; 0x36
    1aec:	fc 01       	movw	r30, r24
    1aee:	87 81       	ldd	r24, Z+7	; 0x07
    1af0:	90 85       	ldd	r25, Z+8	; 0x08
    1af2:	cc 01       	movw	r24, r24
    1af4:	a0 e0       	ldi	r26, 0x00	; 0
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 03 2a 	call	0x5406	; 0x5406 <__floatunsisf>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	2d a1       	ldd	r18, Y+37	; 0x25
    1b06:	3e a1       	ldd	r19, Y+38	; 0x26
    1b08:	4f a1       	ldd	r20, Y+39	; 0x27
    1b0a:	58 a5       	ldd	r21, Y+40	; 0x28
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 24 2b 	call	0x5648	; 0x5648 <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	52 e4       	ldi	r21, 0x42	; 66
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	ad 01       	movw	r20, r26
    1b30:	c7 01       	movw	r24, r14
    1b32:	b6 01       	movw	r22, r12
    1b34:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 94 29 	call	0x5328	; 0x5328 <__fixsfdi>
    1b44:	a2 2e       	mov	r10, r18
    1b46:	b3 2e       	mov	r11, r19
    1b48:	c4 2e       	mov	r12, r20
    1b4a:	d5 2e       	mov	r13, r21
    1b4c:	e6 2e       	mov	r14, r22
    1b4e:	f7 2e       	mov	r15, r23
    1b50:	08 2f       	mov	r16, r24
    1b52:	19 2f       	mov	r17, r25
    1b54:	a9 82       	std	Y+1, r10	; 0x01
    1b56:	ba 82       	std	Y+2, r11	; 0x02
    1b58:	cb 82       	std	Y+3, r12	; 0x03
    1b5a:	dc 82       	std	Y+4, r13	; 0x04
    1b5c:	ed 82       	std	Y+5, r14	; 0x05
    1b5e:	fe 82       	std	Y+6, r15	; 0x06
    1b60:	0f 83       	std	Y+7, r16	; 0x07
    1b62:	18 87       	std	Y+8, r17	; 0x08
	SENS = ((float)sensor->C1 * 65536) + (((float)sensor->C3 * dt) / 128);
    1b64:	8d a9       	ldd	r24, Y+53	; 0x35
    1b66:	9e a9       	ldd	r25, Y+54	; 0x36
    1b68:	fc 01       	movw	r30, r24
    1b6a:	81 81       	ldd	r24, Z+1	; 0x01
    1b6c:	92 81       	ldd	r25, Z+2	; 0x02
    1b6e:	cc 01       	movw	r24, r24
    1b70:	a0 e0       	ldi	r26, 0x00	; 0
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 03 2a 	call	0x5406	; 0x5406 <__floatunsisf>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	0e 94 24 2b 	call	0x5648	; 0x5648 <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	6c 01       	movw	r12, r24
    1b96:	7d 01       	movw	r14, r26
    1b98:	8d a9       	ldd	r24, Y+53	; 0x35
    1b9a:	9e a9       	ldd	r25, Y+54	; 0x36
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	85 81       	ldd	r24, Z+5	; 0x05
    1ba0:	96 81       	ldd	r25, Z+6	; 0x06
    1ba2:	cc 01       	movw	r24, r24
    1ba4:	a0 e0       	ldi	r26, 0x00	; 0
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 03 2a 	call	0x5406	; 0x5406 <__floatunsisf>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	2d a1       	ldd	r18, Y+37	; 0x25
    1bb6:	3e a1       	ldd	r19, Y+38	; 0x26
    1bb8:	4f a1       	ldd	r20, Y+39	; 0x27
    1bba:	58 a5       	ldd	r21, Y+40	; 0x28
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	0e 94 24 2b 	call	0x5648	; 0x5648 <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	53 e4       	ldi	r21, 0x43	; 67
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9c 01       	movw	r18, r24
    1bde:	ad 01       	movw	r20, r26
    1be0:	c7 01       	movw	r24, r14
    1be2:	b6 01       	movw	r22, r12
    1be4:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	bc 01       	movw	r22, r24
    1bee:	cd 01       	movw	r24, r26
    1bf0:	0e 94 94 29 	call	0x5328	; 0x5328 <__fixsfdi>
    1bf4:	a2 2e       	mov	r10, r18
    1bf6:	b3 2e       	mov	r11, r19
    1bf8:	c4 2e       	mov	r12, r20
    1bfa:	d5 2e       	mov	r13, r21
    1bfc:	e6 2e       	mov	r14, r22
    1bfe:	f7 2e       	mov	r15, r23
    1c00:	08 2f       	mov	r16, r24
    1c02:	19 2f       	mov	r17, r25
    1c04:	a9 86       	std	Y+9, r10	; 0x09
    1c06:	ba 86       	std	Y+10, r11	; 0x0a
    1c08:	cb 86       	std	Y+11, r12	; 0x0b
    1c0a:	dc 86       	std	Y+12, r13	; 0x0c
    1c0c:	ed 86       	std	Y+13, r14	; 0x0d
    1c0e:	fe 86       	std	Y+14, r15	; 0x0e
    1c10:	0f 87       	std	Y+15, r16	; 0x0f
    1c12:	18 8b       	std	Y+16, r17	; 0x10
	TEMP = 2000 + (dt * ((float)sensor->C6 / 8388608));
    1c14:	8d a9       	ldd	r24, Y+53	; 0x35
    1c16:	9e a9       	ldd	r25, Y+54	; 0x36
    1c18:	fc 01       	movw	r30, r24
    1c1a:	83 85       	ldd	r24, Z+11	; 0x0b
    1c1c:	94 85       	ldd	r25, Z+12	; 0x0c
    1c1e:	cc 01       	movw	r24, r24
    1c20:	a0 e0       	ldi	r26, 0x00	; 0
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	bc 01       	movw	r22, r24
    1c26:	cd 01       	movw	r24, r26
    1c28:	0e 94 03 2a 	call	0x5406	; 0x5406 <__floatunsisf>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	5b e4       	ldi	r21, 0x4B	; 75
    1c38:	bc 01       	movw	r22, r24
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	2d a1       	ldd	r18, Y+37	; 0x25
    1c46:	3e a1       	ldd	r19, Y+38	; 0x26
    1c48:	4f a1       	ldd	r20, Y+39	; 0x27
    1c4a:	58 a5       	ldd	r21, Y+40	; 0x28
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	cd 01       	movw	r24, r26
    1c50:	0e 94 24 2b 	call	0x5648	; 0x5648 <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a ef       	ldi	r20, 0xFA	; 250
    1c5e:	54 e4       	ldi	r21, 0x44	; 68
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 ce 29 	call	0x539c	; 0x539c <__fixsfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	8d a7       	std	Y+45, r24	; 0x2d
    1c7a:	9e a7       	std	Y+46, r25	; 0x2e
    1c7c:	af a7       	std	Y+47, r26	; 0x2f
    1c7e:	b8 ab       	std	Y+48, r27	; 0x30
	msTemp=TEMP;
    1c80:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c82:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c84:	af a5       	ldd	r26, Y+47	; 0x2f
    1c86:	b8 a9       	ldd	r27, Y+48	; 0x30
    1c88:	80 93 ff 22 	sts	0x22FF, r24
    1c8c:	90 93 00 23 	sts	0x2300, r25
    1c90:	a0 93 01 23 	sts	0x2301, r26
    1c94:	b0 93 02 23 	sts	0x2302, r27
	if (TEMP < 2000)
    1c98:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c9c:	af a5       	ldd	r26, Y+47	; 0x2f
    1c9e:	b8 a9       	ldd	r27, Y+48	; 0x30
    1ca0:	80 3d       	cpi	r24, 0xD0	; 208
    1ca2:	97 40       	sbci	r25, 0x07	; 7
    1ca4:	a1 05       	cpc	r26, r1
    1ca6:	b1 05       	cpc	r27, r1
    1ca8:	0c f0       	brlt	.+2      	; 0x1cac <readMS5607+0x6be>
    1caa:	8c c1       	rjmp	.+792    	; 0x1fc4 <readMS5607+0x9d6>
	{
		T2 = dt * dt / 2147483648;
    1cac:	2d a1       	ldd	r18, Y+37	; 0x25
    1cae:	3e a1       	ldd	r19, Y+38	; 0x26
    1cb0:	4f a1       	ldd	r20, Y+39	; 0x27
    1cb2:	58 a5       	ldd	r21, Y+40	; 0x28
    1cb4:	6d a1       	ldd	r22, Y+37	; 0x25
    1cb6:	7e a1       	ldd	r23, Y+38	; 0x26
    1cb8:	8f a1       	ldd	r24, Y+39	; 0x27
    1cba:	98 a5       	ldd	r25, Y+40	; 0x28
    1cbc:	0e 94 24 2b 	call	0x5648	; 0x5648 <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	5f e4       	ldi	r21, 0x4F	; 79
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	89 a7       	std	Y+41, r24	; 0x29
    1cda:	9a a7       	std	Y+42, r25	; 0x2a
    1cdc:	ab a7       	std	Y+43, r26	; 0x2b
    1cde:	bc a7       	std	Y+44, r27	; 0x2c
		OFF2 = 61 * (pow((TEMP - 2000), 2.0)) / 16;
    1ce0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ce2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ce4:	af a5       	ldd	r26, Y+47	; 0x2f
    1ce6:	b8 a9       	ldd	r27, Y+48	; 0x30
    1ce8:	80 5d       	subi	r24, 0xD0	; 208
    1cea:	97 40       	sbci	r25, 0x07	; 7
    1cec:	a1 09       	sbc	r26, r1
    1cee:	b1 09       	sbc	r27, r1
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 05 2a 	call	0x540a	; 0x540a <__floatsisf>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	50 e4       	ldi	r21, 0x40	; 64
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 87 2b 	call	0x570e	; 0x570e <pow>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	44 e7       	ldi	r20, 0x74	; 116
    1d16:	52 e4       	ldi	r21, 0x42	; 66
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 24 2b 	call	0x5648	; 0x5648 <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	51 e4       	ldi	r21, 0x41	; 65
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 94 29 	call	0x5328	; 0x5328 <__fixsfdi>
    1d40:	a2 2e       	mov	r10, r18
    1d42:	b3 2e       	mov	r11, r19
    1d44:	c4 2e       	mov	r12, r20
    1d46:	d5 2e       	mov	r13, r21
    1d48:	e6 2e       	mov	r14, r22
    1d4a:	f7 2e       	mov	r15, r23
    1d4c:	08 2f       	mov	r16, r24
    1d4e:	19 2f       	mov	r17, r25
    1d50:	a9 8a       	std	Y+17, r10	; 0x11
    1d52:	ba 8a       	std	Y+18, r11	; 0x12
    1d54:	cb 8a       	std	Y+19, r12	; 0x13
    1d56:	dc 8a       	std	Y+20, r13	; 0x14
    1d58:	ed 8a       	std	Y+21, r14	; 0x15
    1d5a:	fe 8a       	std	Y+22, r15	; 0x16
    1d5c:	0f 8b       	std	Y+23, r16	; 0x17
    1d5e:	18 8f       	std	Y+24, r17	; 0x18
		SENS2 = 2 * (pow((TEMP - 2000), 2.0));
    1d60:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d62:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d64:	af a5       	ldd	r26, Y+47	; 0x2f
    1d66:	b8 a9       	ldd	r27, Y+48	; 0x30
    1d68:	80 5d       	subi	r24, 0xD0	; 208
    1d6a:	97 40       	sbci	r25, 0x07	; 7
    1d6c:	a1 09       	sbc	r26, r1
    1d6e:	b1 09       	sbc	r27, r1
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	0e 94 05 2a 	call	0x540a	; 0x540a <__floatsisf>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	50 e4       	ldi	r21, 0x40	; 64
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 87 2b 	call	0x570e	; 0x570e <pow>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9c 01       	movw	r18, r24
    1d92:	ad 01       	movw	r20, r26
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 94 29 	call	0x5328	; 0x5328 <__fixsfdi>
    1da8:	a2 2e       	mov	r10, r18
    1daa:	b3 2e       	mov	r11, r19
    1dac:	c4 2e       	mov	r12, r20
    1dae:	d5 2e       	mov	r13, r21
    1db0:	e6 2e       	mov	r14, r22
    1db2:	f7 2e       	mov	r15, r23
    1db4:	08 2f       	mov	r16, r24
    1db6:	19 2f       	mov	r17, r25
    1db8:	a9 8e       	std	Y+25, r10	; 0x19
    1dba:	ba 8e       	std	Y+26, r11	; 0x1a
    1dbc:	cb 8e       	std	Y+27, r12	; 0x1b
    1dbe:	dc 8e       	std	Y+28, r13	; 0x1c
    1dc0:	ed 8e       	std	Y+29, r14	; 0x1d
    1dc2:	fe 8e       	std	Y+30, r15	; 0x1e
    1dc4:	0f 8f       	std	Y+31, r16	; 0x1f
    1dc6:	18 a3       	std	Y+32, r17	; 0x20
		if(TEMP < -1500)
    1dc8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dca:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dcc:	af a5       	ldd	r26, Y+47	; 0x2f
    1dce:	b8 a9       	ldd	r27, Y+48	; 0x30
    1dd0:	84 32       	cpi	r24, 0x24	; 36
    1dd2:	9a 4f       	sbci	r25, 0xFA	; 250
    1dd4:	af 4f       	sbci	r26, 0xFF	; 255
    1dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd8:	0c f0       	brlt	.+2      	; 0x1ddc <readMS5607+0x7ee>
    1dda:	94 c0       	rjmp	.+296    	; 0x1f04 <readMS5607+0x916>
		{
			OFF2 = OFF2 + 15 * (pow((TEMP + 1500), 2));
    1ddc:	29 89       	ldd	r18, Y+17	; 0x11
    1dde:	3a 89       	ldd	r19, Y+18	; 0x12
    1de0:	4b 89       	ldd	r20, Y+19	; 0x13
    1de2:	5c 89       	ldd	r21, Y+20	; 0x14
    1de4:	6d 89       	ldd	r22, Y+21	; 0x15
    1de6:	7e 89       	ldd	r23, Y+22	; 0x16
    1de8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dea:	98 8d       	ldd	r25, Y+24	; 0x18
    1dec:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__floatdisf>
    1df0:	6b 01       	movw	r12, r22
    1df2:	7c 01       	movw	r14, r24
    1df4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1df6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1df8:	af a5       	ldd	r26, Y+47	; 0x2f
    1dfa:	b8 a9       	ldd	r27, Y+48	; 0x30
    1dfc:	84 52       	subi	r24, 0x24	; 36
    1dfe:	9a 4f       	sbci	r25, 0xFA	; 250
    1e00:	af 4f       	sbci	r26, 0xFF	; 255
    1e02:	bf 4f       	sbci	r27, 0xFF	; 255
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 05 2a 	call	0x540a	; 0x540a <__floatsisf>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	50 e4       	ldi	r21, 0x40	; 64
    1e18:	bc 01       	movw	r22, r24
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	0e 94 87 2b 	call	0x570e	; 0x570e <pow>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e7       	ldi	r20, 0x70	; 112
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 24 2b 	call	0x5648	; 0x5648 <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9c 01       	movw	r18, r24
    1e3a:	ad 01       	movw	r20, r26
    1e3c:	c7 01       	movw	r24, r14
    1e3e:	b6 01       	movw	r22, r12
    1e40:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 94 29 	call	0x5328	; 0x5328 <__fixsfdi>
    1e50:	a2 2e       	mov	r10, r18
    1e52:	b3 2e       	mov	r11, r19
    1e54:	c4 2e       	mov	r12, r20
    1e56:	d5 2e       	mov	r13, r21
    1e58:	e6 2e       	mov	r14, r22
    1e5a:	f7 2e       	mov	r15, r23
    1e5c:	08 2f       	mov	r16, r24
    1e5e:	19 2f       	mov	r17, r25
    1e60:	a9 8a       	std	Y+17, r10	; 0x11
    1e62:	ba 8a       	std	Y+18, r11	; 0x12
    1e64:	cb 8a       	std	Y+19, r12	; 0x13
    1e66:	dc 8a       	std	Y+20, r13	; 0x14
    1e68:	ed 8a       	std	Y+21, r14	; 0x15
    1e6a:	fe 8a       	std	Y+22, r15	; 0x16
    1e6c:	0f 8b       	std	Y+23, r16	; 0x17
    1e6e:	18 8f       	std	Y+24, r17	; 0x18
			SENS2 = SENS2 + 8 * (pow((TEMP + 1500), 2));
    1e70:	29 8d       	ldd	r18, Y+25	; 0x19
    1e72:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1e74:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1e76:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1e78:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e7a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1e7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e7e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e80:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__floatdisf>
    1e84:	6b 01       	movw	r12, r22
    1e86:	7c 01       	movw	r14, r24
    1e88:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e8c:	af a5       	ldd	r26, Y+47	; 0x2f
    1e8e:	b8 a9       	ldd	r27, Y+48	; 0x30
    1e90:	84 52       	subi	r24, 0x24	; 36
    1e92:	9a 4f       	sbci	r25, 0xFA	; 250
    1e94:	af 4f       	sbci	r26, 0xFF	; 255
    1e96:	bf 4f       	sbci	r27, 0xFF	; 255
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 05 2a 	call	0x540a	; 0x540a <__floatsisf>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	50 e4       	ldi	r21, 0x40	; 64
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 87 2b 	call	0x570e	; 0x570e <pow>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	51 e4       	ldi	r21, 0x41	; 65
    1ec0:	bc 01       	movw	r22, r24
    1ec2:	cd 01       	movw	r24, r26
    1ec4:	0e 94 24 2b 	call	0x5648	; 0x5648 <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9c 01       	movw	r18, r24
    1ece:	ad 01       	movw	r20, r26
    1ed0:	c7 01       	movw	r24, r14
    1ed2:	b6 01       	movw	r22, r12
    1ed4:	0e 94 c8 28 	call	0x5190	; 0x5190 <__addsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	bc 01       	movw	r22, r24
    1ede:	cd 01       	movw	r24, r26
    1ee0:	0e 94 94 29 	call	0x5328	; 0x5328 <__fixsfdi>
    1ee4:	a2 2e       	mov	r10, r18
    1ee6:	b3 2e       	mov	r11, r19
    1ee8:	c4 2e       	mov	r12, r20
    1eea:	d5 2e       	mov	r13, r21
    1eec:	e6 2e       	mov	r14, r22
    1eee:	f7 2e       	mov	r15, r23
    1ef0:	08 2f       	mov	r16, r24
    1ef2:	19 2f       	mov	r17, r25
    1ef4:	a9 8e       	std	Y+25, r10	; 0x19
    1ef6:	ba 8e       	std	Y+26, r11	; 0x1a
    1ef8:	cb 8e       	std	Y+27, r12	; 0x1b
    1efa:	dc 8e       	std	Y+28, r13	; 0x1c
    1efc:	ed 8e       	std	Y+29, r14	; 0x1d
    1efe:	fe 8e       	std	Y+30, r15	; 0x1e
    1f00:	0f 8f       	std	Y+31, r16	; 0x1f
    1f02:	18 a3       	std	Y+32, r17	; 0x20
		}
		TEMP = TEMP - T2;
    1f04:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f06:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0c:	0e 94 05 2a 	call	0x540a	; 0x540a <__floatsisf>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	29 a5       	ldd	r18, Y+41	; 0x29
    1f16:	3a a5       	ldd	r19, Y+42	; 0x2a
    1f18:	4b a5       	ldd	r20, Y+43	; 0x2b
    1f1a:	5c a5       	ldd	r21, Y+44	; 0x2c
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	bc 01       	movw	r22, r24
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	0e 94 ce 29 	call	0x539c	; 0x539c <__fixsfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	8d a7       	std	Y+45, r24	; 0x2d
    1f36:	9e a7       	std	Y+46, r25	; 0x2e
    1f38:	af a7       	std	Y+47, r26	; 0x2f
    1f3a:	b8 ab       	std	Y+48, r27	; 0x30
		OFF = OFF - OFF2;
    1f3c:	29 81       	ldd	r18, Y+1	; 0x01
    1f3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f40:	4b 81       	ldd	r20, Y+3	; 0x03
    1f42:	5c 81       	ldd	r21, Y+4	; 0x04
    1f44:	6d 81       	ldd	r22, Y+5	; 0x05
    1f46:	7e 81       	ldd	r23, Y+6	; 0x06
    1f48:	8f 81       	ldd	r24, Y+7	; 0x07
    1f4a:	98 85       	ldd	r25, Y+8	; 0x08
    1f4c:	a9 88       	ldd	r10, Y+17	; 0x11
    1f4e:	ba 88       	ldd	r11, Y+18	; 0x12
    1f50:	cb 88       	ldd	r12, Y+19	; 0x13
    1f52:	dc 88       	ldd	r13, Y+20	; 0x14
    1f54:	ed 88       	ldd	r14, Y+21	; 0x15
    1f56:	fe 88       	ldd	r15, Y+22	; 0x16
    1f58:	0f 89       	ldd	r16, Y+23	; 0x17
    1f5a:	18 8d       	ldd	r17, Y+24	; 0x18
    1f5c:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <__subdi3>
    1f60:	a2 2e       	mov	r10, r18
    1f62:	b3 2e       	mov	r11, r19
    1f64:	c4 2e       	mov	r12, r20
    1f66:	d5 2e       	mov	r13, r21
    1f68:	e6 2e       	mov	r14, r22
    1f6a:	f7 2e       	mov	r15, r23
    1f6c:	08 2f       	mov	r16, r24
    1f6e:	19 2f       	mov	r17, r25
    1f70:	a9 82       	std	Y+1, r10	; 0x01
    1f72:	ba 82       	std	Y+2, r11	; 0x02
    1f74:	cb 82       	std	Y+3, r12	; 0x03
    1f76:	dc 82       	std	Y+4, r13	; 0x04
    1f78:	ed 82       	std	Y+5, r14	; 0x05
    1f7a:	fe 82       	std	Y+6, r15	; 0x06
    1f7c:	0f 83       	std	Y+7, r16	; 0x07
    1f7e:	18 87       	std	Y+8, r17	; 0x08
		SENS = SENS - SENS2;
    1f80:	29 85       	ldd	r18, Y+9	; 0x09
    1f82:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f84:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f86:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f88:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f8a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8e:	98 89       	ldd	r25, Y+16	; 0x10
    1f90:	a9 8c       	ldd	r10, Y+25	; 0x19
    1f92:	ba 8c       	ldd	r11, Y+26	; 0x1a
    1f94:	cb 8c       	ldd	r12, Y+27	; 0x1b
    1f96:	dc 8c       	ldd	r13, Y+28	; 0x1c
    1f98:	ed 8c       	ldd	r14, Y+29	; 0x1d
    1f9a:	fe 8c       	ldd	r15, Y+30	; 0x1e
    1f9c:	0f 8d       	ldd	r16, Y+31	; 0x1f
    1f9e:	18 a1       	ldd	r17, Y+32	; 0x20
    1fa0:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <__subdi3>
    1fa4:	a2 2e       	mov	r10, r18
    1fa6:	b3 2e       	mov	r11, r19
    1fa8:	c4 2e       	mov	r12, r20
    1faa:	d5 2e       	mov	r13, r21
    1fac:	e6 2e       	mov	r14, r22
    1fae:	f7 2e       	mov	r15, r23
    1fb0:	08 2f       	mov	r16, r24
    1fb2:	19 2f       	mov	r17, r25
    1fb4:	a9 86       	std	Y+9, r10	; 0x09
    1fb6:	ba 86       	std	Y+10, r11	; 0x0a
    1fb8:	cb 86       	std	Y+11, r12	; 0x0b
    1fba:	dc 86       	std	Y+12, r13	; 0x0c
    1fbc:	ed 86       	std	Y+13, r14	; 0x0d
    1fbe:	fe 86       	std	Y+14, r15	; 0x0e
    1fc0:	0f 87       	std	Y+15, r16	; 0x0f
    1fc2:	18 8b       	std	Y+16, r17	; 0x10
	}

	P = ((sensor->D1 * SENS / 2097152) - OFF) / 32768; //in pascals
    1fc4:	8d a9       	ldd	r24, Y+53	; 0x35
    1fc6:	9e a9       	ldd	r25, Y+54	; 0x36
    1fc8:	fc 01       	movw	r30, r24
    1fca:	85 85       	ldd	r24, Z+13	; 0x0d
    1fcc:	96 85       	ldd	r25, Z+14	; 0x0e
    1fce:	a7 85       	ldd	r26, Z+15	; 0x0f
    1fd0:	b0 89       	ldd	r27, Z+16	; 0x10
    1fd2:	1c 01       	movw	r2, r24
    1fd4:	2d 01       	movw	r4, r26
    1fd6:	61 2c       	mov	r6, r1
    1fd8:	71 2c       	mov	r7, r1
    1fda:	43 01       	movw	r8, r6
    1fdc:	a9 84       	ldd	r10, Y+9	; 0x09
    1fde:	ba 84       	ldd	r11, Y+10	; 0x0a
    1fe0:	cb 84       	ldd	r12, Y+11	; 0x0b
    1fe2:	dc 84       	ldd	r13, Y+12	; 0x0c
    1fe4:	ed 84       	ldd	r14, Y+13	; 0x0d
    1fe6:	fe 84       	ldd	r15, Y+14	; 0x0e
    1fe8:	0f 85       	ldd	r16, Y+15	; 0x0f
    1fea:	18 89       	ldd	r17, Y+16	; 0x10
    1fec:	22 2d       	mov	r18, r2
    1fee:	33 2d       	mov	r19, r3
    1ff0:	44 2d       	mov	r20, r4
    1ff2:	55 2d       	mov	r21, r5
    1ff4:	66 2d       	mov	r22, r6
    1ff6:	77 2d       	mov	r23, r7
    1ff8:	88 2d       	mov	r24, r8
    1ffa:	99 2d       	mov	r25, r9
    1ffc:	0e 94 c9 2c 	call	0x5992	; 0x5992 <__muldi3>
    2000:	a2 2e       	mov	r10, r18
    2002:	b3 2e       	mov	r11, r19
    2004:	c4 2e       	mov	r12, r20
    2006:	d5 2e       	mov	r13, r21
    2008:	e6 2e       	mov	r14, r22
    200a:	f7 2e       	mov	r15, r23
    200c:	08 2f       	mov	r16, r24
    200e:	19 2f       	mov	r17, r25
    2010:	2a 2d       	mov	r18, r10
    2012:	3b 2d       	mov	r19, r11
    2014:	4c 2d       	mov	r20, r12
    2016:	5d 2d       	mov	r21, r13
    2018:	6e 2d       	mov	r22, r14
    201a:	7f 2d       	mov	r23, r15
    201c:	80 2f       	mov	r24, r16
    201e:	91 2f       	mov	r25, r17
    2020:	a2 2e       	mov	r10, r18
    2022:	b3 2e       	mov	r11, r19
    2024:	c4 2e       	mov	r12, r20
    2026:	d5 2e       	mov	r13, r21
    2028:	e6 2e       	mov	r14, r22
    202a:	f7 2e       	mov	r15, r23
    202c:	08 2f       	mov	r16, r24
    202e:	19 2f       	mov	r17, r25
    2030:	2a 2d       	mov	r18, r10
    2032:	3b 2d       	mov	r19, r11
    2034:	4c 2d       	mov	r20, r12
    2036:	5d 2d       	mov	r21, r13
    2038:	6e 2d       	mov	r22, r14
    203a:	7f 2d       	mov	r23, r15
    203c:	80 2f       	mov	r24, r16
    203e:	91 2f       	mov	r25, r17
    2040:	a0 e0       	ldi	r26, 0x00	; 0
    2042:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__cmpdi2_s8>
    2046:	04 f5       	brge	.+64     	; 0x2088 <readMS5607+0xa9a>
    2048:	2a 2d       	mov	r18, r10
    204a:	3b 2d       	mov	r19, r11
    204c:	4c 2d       	mov	r20, r12
    204e:	5d 2d       	mov	r21, r13
    2050:	6e 2d       	mov	r22, r14
    2052:	7f 2d       	mov	r23, r15
    2054:	80 2f       	mov	r24, r16
    2056:	91 2f       	mov	r25, r17
    2058:	21 50       	subi	r18, 0x01	; 1
    205a:	31 09       	sbc	r19, r1
    205c:	40 4e       	sbci	r20, 0xE0	; 224
    205e:	5f 4f       	sbci	r21, 0xFF	; 255
    2060:	6f 4f       	sbci	r22, 0xFF	; 255
    2062:	7f 4f       	sbci	r23, 0xFF	; 255
    2064:	8f 4f       	sbci	r24, 0xFF	; 255
    2066:	9f 4f       	sbci	r25, 0xFF	; 255
    2068:	22 2e       	mov	r2, r18
    206a:	33 2e       	mov	r3, r19
    206c:	44 2e       	mov	r4, r20
    206e:	55 2e       	mov	r5, r21
    2070:	66 2e       	mov	r6, r22
    2072:	77 2e       	mov	r7, r23
    2074:	88 2e       	mov	r8, r24
    2076:	99 2e       	mov	r9, r25
    2078:	a2 2c       	mov	r10, r2
    207a:	b3 2c       	mov	r11, r3
    207c:	c4 2c       	mov	r12, r4
    207e:	d5 2c       	mov	r13, r5
    2080:	e6 2c       	mov	r14, r6
    2082:	f7 2c       	mov	r15, r7
    2084:	08 2d       	mov	r16, r8
    2086:	19 2d       	mov	r17, r9
    2088:	2a 2d       	mov	r18, r10
    208a:	3b 2d       	mov	r19, r11
    208c:	4c 2d       	mov	r20, r12
    208e:	5d 2d       	mov	r21, r13
    2090:	6e 2d       	mov	r22, r14
    2092:	7f 2d       	mov	r23, r15
    2094:	80 2f       	mov	r24, r16
    2096:	91 2f       	mov	r25, r17
    2098:	05 e1       	ldi	r16, 0x15	; 21
    209a:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__ashrdi3>
    209e:	22 2e       	mov	r2, r18
    20a0:	33 2e       	mov	r3, r19
    20a2:	44 2e       	mov	r4, r20
    20a4:	55 2e       	mov	r5, r21
    20a6:	66 2e       	mov	r6, r22
    20a8:	77 2e       	mov	r7, r23
    20aa:	88 2e       	mov	r8, r24
    20ac:	99 2e       	mov	r9, r25
    20ae:	a2 2c       	mov	r10, r2
    20b0:	b3 2c       	mov	r11, r3
    20b2:	c4 2c       	mov	r12, r4
    20b4:	d5 2c       	mov	r13, r5
    20b6:	e6 2c       	mov	r14, r6
    20b8:	f7 2c       	mov	r15, r7
    20ba:	08 2d       	mov	r16, r8
    20bc:	19 2d       	mov	r17, r9
    20be:	2a 2d       	mov	r18, r10
    20c0:	3b 2d       	mov	r19, r11
    20c2:	4c 2d       	mov	r20, r12
    20c4:	5d 2d       	mov	r21, r13
    20c6:	6e 2d       	mov	r22, r14
    20c8:	7f 2d       	mov	r23, r15
    20ca:	80 2f       	mov	r24, r16
    20cc:	91 2f       	mov	r25, r17
    20ce:	a9 80       	ldd	r10, Y+1	; 0x01
    20d0:	ba 80       	ldd	r11, Y+2	; 0x02
    20d2:	cb 80       	ldd	r12, Y+3	; 0x03
    20d4:	dc 80       	ldd	r13, Y+4	; 0x04
    20d6:	ed 80       	ldd	r14, Y+5	; 0x05
    20d8:	fe 80       	ldd	r15, Y+6	; 0x06
    20da:	0f 81       	ldd	r16, Y+7	; 0x07
    20dc:	18 85       	ldd	r17, Y+8	; 0x08
    20de:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <__subdi3>
    20e2:	22 2e       	mov	r2, r18
    20e4:	33 2e       	mov	r3, r19
    20e6:	44 2e       	mov	r4, r20
    20e8:	55 2e       	mov	r5, r21
    20ea:	66 2e       	mov	r6, r22
    20ec:	77 2e       	mov	r7, r23
    20ee:	88 2e       	mov	r8, r24
    20f0:	99 2e       	mov	r9, r25
    20f2:	a2 2c       	mov	r10, r2
    20f4:	b3 2c       	mov	r11, r3
    20f6:	c4 2c       	mov	r12, r4
    20f8:	d5 2c       	mov	r13, r5
    20fa:	e6 2c       	mov	r14, r6
    20fc:	f7 2c       	mov	r15, r7
    20fe:	08 2d       	mov	r16, r8
    2100:	19 2d       	mov	r17, r9
    2102:	2a 2d       	mov	r18, r10
    2104:	3b 2d       	mov	r19, r11
    2106:	4c 2d       	mov	r20, r12
    2108:	5d 2d       	mov	r21, r13
    210a:	6e 2d       	mov	r22, r14
    210c:	7f 2d       	mov	r23, r15
    210e:	80 2f       	mov	r24, r16
    2110:	91 2f       	mov	r25, r17
    2112:	a0 e0       	ldi	r26, 0x00	; 0
    2114:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__cmpdi2_s8>
    2118:	04 f5       	brge	.+64     	; 0x215a <readMS5607+0xb6c>
    211a:	2a 2d       	mov	r18, r10
    211c:	3b 2d       	mov	r19, r11
    211e:	4c 2d       	mov	r20, r12
    2120:	5d 2d       	mov	r21, r13
    2122:	6e 2d       	mov	r22, r14
    2124:	7f 2d       	mov	r23, r15
    2126:	80 2f       	mov	r24, r16
    2128:	91 2f       	mov	r25, r17
    212a:	21 50       	subi	r18, 0x01	; 1
    212c:	30 48       	sbci	r19, 0x80	; 128
    212e:	4f 4f       	sbci	r20, 0xFF	; 255
    2130:	5f 4f       	sbci	r21, 0xFF	; 255
    2132:	6f 4f       	sbci	r22, 0xFF	; 255
    2134:	7f 4f       	sbci	r23, 0xFF	; 255
    2136:	8f 4f       	sbci	r24, 0xFF	; 255
    2138:	9f 4f       	sbci	r25, 0xFF	; 255
    213a:	22 2e       	mov	r2, r18
    213c:	33 2e       	mov	r3, r19
    213e:	44 2e       	mov	r4, r20
    2140:	55 2e       	mov	r5, r21
    2142:	66 2e       	mov	r6, r22
    2144:	77 2e       	mov	r7, r23
    2146:	88 2e       	mov	r8, r24
    2148:	99 2e       	mov	r9, r25
    214a:	a2 2c       	mov	r10, r2
    214c:	b3 2c       	mov	r11, r3
    214e:	c4 2c       	mov	r12, r4
    2150:	d5 2c       	mov	r13, r5
    2152:	e6 2c       	mov	r14, r6
    2154:	f7 2c       	mov	r15, r7
    2156:	08 2d       	mov	r16, r8
    2158:	19 2d       	mov	r17, r9
    215a:	2a 2d       	mov	r18, r10
    215c:	3b 2d       	mov	r19, r11
    215e:	4c 2d       	mov	r20, r12
    2160:	5d 2d       	mov	r21, r13
    2162:	6e 2d       	mov	r22, r14
    2164:	7f 2d       	mov	r23, r15
    2166:	80 2f       	mov	r24, r16
    2168:	91 2f       	mov	r25, r17
    216a:	0f e0       	ldi	r16, 0x0F	; 15
    216c:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__ashrdi3>
    2170:	a2 2e       	mov	r10, r18
    2172:	b3 2e       	mov	r11, r19
    2174:	c4 2e       	mov	r12, r20
    2176:	d5 2e       	mov	r13, r21
    2178:	e6 2e       	mov	r14, r22
    217a:	f7 2e       	mov	r15, r23
    217c:	08 2f       	mov	r16, r24
    217e:	19 2f       	mov	r17, r25
    2180:	2a 2d       	mov	r18, r10
    2182:	3b 2d       	mov	r19, r11
    2184:	4c 2d       	mov	r20, r12
    2186:	5d 2d       	mov	r21, r13
    2188:	6e 2d       	mov	r22, r14
    218a:	7f 2d       	mov	r23, r15
    218c:	80 2f       	mov	r24, r16
    218e:	91 2f       	mov	r25, r17
    2190:	29 ab       	std	Y+49, r18	; 0x31
    2192:	3a ab       	std	Y+50, r19	; 0x32
    2194:	4b ab       	std	Y+51, r20	; 0x33
    2196:	5c ab       	std	Y+52, r21	; 0x34
	msPressure = P;
    2198:	89 a9       	ldd	r24, Y+49	; 0x31
    219a:	9a a9       	ldd	r25, Y+50	; 0x32
    219c:	ab a9       	ldd	r26, Y+51	; 0x33
    219e:	bc a9       	ldd	r27, Y+52	; 0x34
    21a0:	80 93 2b 22 	sts	0x222B, r24
    21a4:	90 93 2c 22 	sts	0x222C, r25
    21a8:	a0 93 2d 22 	sts	0x222D, r26
    21ac:	b0 93 2e 22 	sts	0x222E, r27
	//altitude = (TEMP / -0.0065) * (pow ( ((float)P / 101325), 0.190198216) - 1);
	altitude = (1- pow(((float)P/101325),0.190284)) * 44307.69;
    21b0:	69 a9       	ldd	r22, Y+49	; 0x31
    21b2:	7a a9       	ldd	r23, Y+50	; 0x32
    21b4:	8b a9       	ldd	r24, Y+51	; 0x33
    21b6:	9c a9       	ldd	r25, Y+52	; 0x34
    21b8:	0e 94 05 2a 	call	0x540a	; 0x540a <__floatsisf>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	20 e8       	ldi	r18, 0x80	; 128
    21c2:	36 ee       	ldi	r19, 0xE6	; 230
    21c4:	45 ec       	ldi	r20, 0xC5	; 197
    21c6:	57 e4       	ldi	r21, 0x47	; 71
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	2f ec       	ldi	r18, 0xCF	; 207
    21d6:	39 ed       	ldi	r19, 0xD9	; 217
    21d8:	42 e4       	ldi	r20, 0x42	; 66
    21da:	5e e3       	ldi	r21, 0x3E	; 62
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	0e 94 87 2b 	call	0x570e	; 0x570e <pow>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9c 01       	movw	r18, r24
    21ea:	ad 01       	movw	r20, r26
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	80 e8       	ldi	r24, 0x80	; 128
    21f2:	9f e3       	ldi	r25, 0x3F	; 63
    21f4:	0e 94 c7 28 	call	0x518e	; 0x518e <__subsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	21 eb       	ldi	r18, 0xB1	; 177
    21fe:	33 e1       	ldi	r19, 0x13	; 19
    2200:	4d e2       	ldi	r20, 0x2D	; 45
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 24 2b 	call	0x5648	; 0x5648 <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 ce 29 	call	0x539c	; 0x539c <__fixsfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	89 a3       	std	Y+33, r24	; 0x21
    221e:	9a a3       	std	Y+34, r25	; 0x22
    2220:	ab a3       	std	Y+35, r26	; 0x23
    2222:	bc a3       	std	Y+36, r27	; 0x24

	//printf("temp:%ld\tpres:%ld\taltitude:%ld\n", TEMP, P, altitude);
	//printf("D1: %lu D2: %lu P: %lu \n",sensor->D1,sensor->D2,P);
	//printf("Pitot Tube MS5607 Calibration Constants:\nC1:%u\nC2:%u\nC3:%u\nC4:%u\nC5:%u\nC6:%u\n",sensor->C1,sensor->C2,sensor->C3,sensor->C4,sensor->C5,sensor->C6);

	return altitude;
    2224:	69 a1       	ldd	r22, Y+33	; 0x21
    2226:	7a a1       	ldd	r23, Y+34	; 0x22
    2228:	8b a1       	ldd	r24, Y+35	; 0x23
    222a:	9c a1       	ldd	r25, Y+36	; 0x24
    222c:	0e 94 05 2a 	call	0x540a	; 0x540a <__floatsisf>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
}
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	ca 5a       	subi	r28, 0xAA	; 170
    223a:	df 4f       	sbci	r29, 0xFF	; 255
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	ff 90       	pop	r15
    224a:	ef 90       	pop	r14
    224c:	df 90       	pop	r13
    224e:	cf 90       	pop	r12
    2250:	bf 90       	pop	r11
    2252:	af 90       	pop	r10
    2254:	9f 90       	pop	r9
    2256:	8f 90       	pop	r8
    2258:	7f 90       	pop	r7
    225a:	6f 90       	pop	r6
    225c:	5f 90       	pop	r5
    225e:	4f 90       	pop	r4
    2260:	3f 90       	pop	r3
    2262:	2f 90       	pop	r2
    2264:	08 95       	ret

00002266 <updateAltitude>:

void updateAltitude(void)
{
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
	alt = readMS5607(&pressure_sensor); 
    226e:	8c e3       	ldi	r24, 0x3C	; 60
    2270:	98 e2       	ldi	r25, 0x28	; 40
    2272:	bd d9       	rcall	.-3206   	; 0x15ee <readMS5607>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 ce 29 	call	0x539c	; 0x539c <__fixsfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	80 93 61 28 	sts	0x2861, r24
    2288:	90 93 62 28 	sts	0x2862, r25
	//delayTime+=65; 
	//smoothedAlt = (alpha * alt) + (1-alpha) * lastSmoothedAlt; 
	//lastSmoothedAlt = smoothedAlt; 
	//currentAltitude = smoothedAlt - groundAlt;
	currentAltitude = alt;
    228c:	80 91 61 28 	lds	r24, 0x2861
    2290:	90 91 62 28 	lds	r25, 0x2862
    2294:	80 93 63 28 	sts	0x2863, r24
    2298:	90 93 64 28 	sts	0x2864, r25
}
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	08 95       	ret

000022a2 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    22a2:	cf 93       	push	r28
    22a4:	df 93       	push	r29
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	98 e4       	ldi	r25, 0x48	; 72
    22ae:	a8 ee       	ldi	r26, 0xE8	; 232
    22b0:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	08 95       	ret

000022bc <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	1f 92       	push	r1
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    22c6:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    22c8:	ec df       	rcall	.-40     	; 0x22a2 <sysclk_get_main_hz>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	29 81       	ldd	r18, Y+1	; 0x01
    22d0:	22 2f       	mov	r18, r18
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	04 c0       	rjmp	.+8      	; 0x22de <sysclk_get_per4_hz+0x22>
    22d6:	b6 95       	lsr	r27
    22d8:	a7 95       	ror	r26
    22da:	97 95       	ror	r25
    22dc:	87 95       	ror	r24
    22de:	2a 95       	dec	r18
    22e0:	d2 f7       	brpl	.-12     	; 0x22d6 <sysclk_get_per4_hz+0x1a>
}
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0f 90       	pop	r0
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	08 95       	ret

000022ee <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    22f6:	e2 df       	rcall	.-60     	; 0x22bc <sysclk_get_per4_hz>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	08 95       	ret

00002306 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    2306:	cf 93       	push	r28
    2308:	df 93       	push	r29
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    230e:	ef df       	rcall	.-34     	; 0x22ee <sysclk_get_per2_hz>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
}
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	df 91       	pop	r29
    231a:	cf 91       	pop	r28
    231c:	08 95       	ret

0000231e <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    2326:	ef df       	rcall	.-34     	; 0x2306 <sysclk_get_per_hz>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
}
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	08 95       	ret

00002336 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	00 d0       	rcall	.+0      	; 0x233c <sysclk_enable_peripheral_clock+0x6>
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	9a 83       	std	Y+2, r25	; 0x02
	if (module == NULL) {
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	9a 81       	ldd	r25, Y+2	; 0x02
    2348:	89 2b       	or	r24, r25
    234a:	09 f4       	brne	.+2      	; 0x234e <sysclk_enable_peripheral_clock+0x18>
    234c:	d7 c0       	rjmp	.+430    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	9a 81       	ldd	r25, Y+2	; 0x02
    2352:	80 3c       	cpi	r24, 0xC0	; 192
    2354:	91 05       	cpc	r25, r1
    2356:	21 f4       	brne	.+8      	; 0x2360 <sysclk_enable_peripheral_clock+0x2a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2358:	60 e1       	ldi	r22, 0x10	; 16
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	dd d7       	rcall	.+4026   	; 0x3318 <sysclk_enable_module>
    235e:	ce c0       	rjmp	.+412    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	81 15       	cp	r24, r1
    2366:	94 40       	sbci	r25, 0x04	; 4
    2368:	21 f4       	brne	.+8      	; 0x2372 <sysclk_enable_peripheral_clock+0x3c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    236a:	64 e0       	ldi	r22, 0x04	; 4
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	d4 d7       	rcall	.+4008   	; 0x3318 <sysclk_enable_module>
    2370:	c5 c0       	rjmp	.+394    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	9a 81       	ldd	r25, Y+2	; 0x02
    2376:	80 38       	cpi	r24, 0x80	; 128
    2378:	91 40       	sbci	r25, 0x01	; 1
    237a:	21 f4       	brne	.+8      	; 0x2384 <sysclk_enable_peripheral_clock+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    237c:	62 e0       	ldi	r22, 0x02	; 2
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	cb d7       	rcall	.+3990   	; 0x3318 <sysclk_enable_module>
    2382:	bc c0       	rjmp	.+376    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
    2388:	81 15       	cp	r24, r1
    238a:	91 40       	sbci	r25, 0x01	; 1
    238c:	21 f4       	brne	.+8      	; 0x2396 <sysclk_enable_peripheral_clock+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    238e:	61 e0       	ldi	r22, 0x01	; 1
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	c2 d7       	rcall	.+3972   	; 0x3318 <sysclk_enable_module>
    2394:	b3 c0       	rjmp	.+358    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	9a 81       	ldd	r25, Y+2	; 0x02
    239a:	80 38       	cpi	r24, 0x80	; 128
    239c:	93 40       	sbci	r25, 0x03	; 3
    239e:	21 f4       	brne	.+8      	; 0x23a8 <sysclk_enable_peripheral_clock+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    23a0:	61 e0       	ldi	r22, 0x01	; 1
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	b9 d7       	rcall	.+3954   	; 0x3318 <sysclk_enable_module>
    23a6:	aa c0       	rjmp	.+340    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	81 15       	cp	r24, r1
    23ae:	92 40       	sbci	r25, 0x02	; 2
    23b0:	21 f4       	brne	.+8      	; 0x23ba <sysclk_enable_peripheral_clock+0x84>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    23b2:	62 e0       	ldi	r22, 0x02	; 2
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	b0 d7       	rcall	.+3936   	; 0x3318 <sysclk_enable_module>
    23b8:	a1 c0       	rjmp	.+322    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	9a 81       	ldd	r25, Y+2	; 0x02
    23be:	80 32       	cpi	r24, 0x20	; 32
    23c0:	93 40       	sbci	r25, 0x03	; 3
    23c2:	21 f4       	brne	.+8      	; 0x23cc <sysclk_enable_peripheral_clock+0x96>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    23c4:	64 e0       	ldi	r22, 0x04	; 4
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	a7 d7       	rcall	.+3918   	; 0x3318 <sysclk_enable_module>
    23ca:	98 c0       	rjmp	.+304    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	9a 81       	ldd	r25, Y+2	; 0x02
    23d0:	81 15       	cp	r24, r1
    23d2:	98 40       	sbci	r25, 0x08	; 8
    23d4:	21 f4       	brne	.+8      	; 0x23de <sysclk_enable_peripheral_clock+0xa8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    23d6:	61 e0       	ldi	r22, 0x01	; 1
    23d8:	83 e0       	ldi	r24, 0x03	; 3
    23da:	9e d7       	rcall	.+3900   	; 0x3318 <sysclk_enable_module>
    23dc:	8f c0       	rjmp	.+286    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	81 15       	cp	r24, r1
    23e4:	99 40       	sbci	r25, 0x09	; 9
    23e6:	21 f4       	brne	.+8      	; 0x23f0 <sysclk_enable_peripheral_clock+0xba>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	84 e0       	ldi	r24, 0x04	; 4
    23ec:	95 d7       	rcall	.+3882   	; 0x3318 <sysclk_enable_module>
    23ee:	86 c0       	rjmp	.+268    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	9a 81       	ldd	r25, Y+2	; 0x02
    23f4:	81 15       	cp	r24, r1
    23f6:	9a 40       	sbci	r25, 0x0A	; 10
    23f8:	21 f4       	brne	.+8      	; 0x2402 <sysclk_enable_peripheral_clock+0xcc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    23fa:	61 e0       	ldi	r22, 0x01	; 1
    23fc:	85 e0       	ldi	r24, 0x05	; 5
    23fe:	8c d7       	rcall	.+3864   	; 0x3318 <sysclk_enable_module>
    2400:	7d c0       	rjmp	.+250    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	80 34       	cpi	r24, 0x40	; 64
    2408:	98 40       	sbci	r25, 0x08	; 8
    240a:	21 f4       	brne	.+8      	; 0x2414 <sysclk_enable_peripheral_clock+0xde>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    240c:	62 e0       	ldi	r22, 0x02	; 2
    240e:	83 e0       	ldi	r24, 0x03	; 3
    2410:	83 d7       	rcall	.+3846   	; 0x3318 <sysclk_enable_module>
    2412:	74 c0       	rjmp	.+232    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	9a 81       	ldd	r25, Y+2	; 0x02
    2418:	80 34       	cpi	r24, 0x40	; 64
    241a:	99 40       	sbci	r25, 0x09	; 9
    241c:	21 f4       	brne	.+8      	; 0x2426 <sysclk_enable_peripheral_clock+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    241e:	62 e0       	ldi	r22, 0x02	; 2
    2420:	84 e0       	ldi	r24, 0x04	; 4
    2422:	7a d7       	rcall	.+3828   	; 0x3318 <sysclk_enable_module>
    2424:	6b c0       	rjmp	.+214    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	80 39       	cpi	r24, 0x90	; 144
    242c:	98 40       	sbci	r25, 0x08	; 8
    242e:	21 f4       	brne	.+8      	; 0x2438 <sysclk_enable_peripheral_clock+0x102>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2430:	64 e0       	ldi	r22, 0x04	; 4
    2432:	83 e0       	ldi	r24, 0x03	; 3
    2434:	71 d7       	rcall	.+3810   	; 0x3318 <sysclk_enable_module>
    2436:	62 c0       	rjmp	.+196    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	9a 81       	ldd	r25, Y+2	; 0x02
    243c:	80 39       	cpi	r24, 0x90	; 144
    243e:	99 40       	sbci	r25, 0x09	; 9
    2440:	21 f4       	brne	.+8      	; 0x244a <sysclk_enable_peripheral_clock+0x114>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2442:	64 e0       	ldi	r22, 0x04	; 4
    2444:	84 e0       	ldi	r24, 0x04	; 4
    2446:	68 d7       	rcall	.+3792   	; 0x3318 <sysclk_enable_module>
    2448:	59 c0       	rjmp	.+178    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	80 39       	cpi	r24, 0x90	; 144
    2450:	9a 40       	sbci	r25, 0x0A	; 10
    2452:	21 f4       	brne	.+8      	; 0x245c <sysclk_enable_peripheral_clock+0x126>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2454:	64 e0       	ldi	r22, 0x04	; 4
    2456:	85 e0       	ldi	r24, 0x05	; 5
    2458:	5f d7       	rcall	.+3774   	; 0x3318 <sysclk_enable_module>
    245a:	50 c0       	rjmp	.+160    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	80 3c       	cpi	r24, 0xC0	; 192
    2462:	98 40       	sbci	r25, 0x08	; 8
    2464:	21 f4       	brne	.+8      	; 0x246e <sysclk_enable_peripheral_clock+0x138>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2466:	68 e0       	ldi	r22, 0x08	; 8
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	56 d7       	rcall	.+3756   	; 0x3318 <sysclk_enable_module>
    246c:	47 c0       	rjmp	.+142    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	9a 81       	ldd	r25, Y+2	; 0x02
    2472:	80 3c       	cpi	r24, 0xC0	; 192
    2474:	99 40       	sbci	r25, 0x09	; 9
    2476:	21 f4       	brne	.+8      	; 0x2480 <sysclk_enable_peripheral_clock+0x14a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2478:	68 e0       	ldi	r22, 0x08	; 8
    247a:	84 e0       	ldi	r24, 0x04	; 4
    247c:	4d d7       	rcall	.+3738   	; 0x3318 <sysclk_enable_module>
    247e:	3e c0       	rjmp	.+124    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	9a 81       	ldd	r25, Y+2	; 0x02
    2484:	80 3a       	cpi	r24, 0xA0	; 160
    2486:	98 40       	sbci	r25, 0x08	; 8
    2488:	21 f4       	brne	.+8      	; 0x2492 <sysclk_enable_peripheral_clock+0x15c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    248a:	60 e1       	ldi	r22, 0x10	; 16
    248c:	83 e0       	ldi	r24, 0x03	; 3
    248e:	44 d7       	rcall	.+3720   	; 0x3318 <sysclk_enable_module>
    2490:	35 c0       	rjmp	.+106    	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	80 3a       	cpi	r24, 0xA0	; 160
    2498:	99 40       	sbci	r25, 0x09	; 9
    249a:	21 f4       	brne	.+8      	; 0x24a4 <sysclk_enable_peripheral_clock+0x16e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    249c:	60 e1       	ldi	r22, 0x10	; 16
    249e:	84 e0       	ldi	r24, 0x04	; 4
    24a0:	3b d7       	rcall	.+3702   	; 0x3318 <sysclk_enable_module>
    24a2:	2c c0       	rjmp	.+88     	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	9a 81       	ldd	r25, Y+2	; 0x02
    24a8:	80 3a       	cpi	r24, 0xA0	; 160
    24aa:	9a 40       	sbci	r25, 0x0A	; 10
    24ac:	21 f4       	brne	.+8      	; 0x24b6 <sysclk_enable_peripheral_clock+0x180>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    24ae:	60 e1       	ldi	r22, 0x10	; 16
    24b0:	85 e0       	ldi	r24, 0x05	; 5
    24b2:	32 d7       	rcall	.+3684   	; 0x3318 <sysclk_enable_module>
    24b4:	23 c0       	rjmp	.+70     	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	80 3b       	cpi	r24, 0xB0	; 176
    24bc:	98 40       	sbci	r25, 0x08	; 8
    24be:	21 f4       	brne	.+8      	; 0x24c8 <sysclk_enable_peripheral_clock+0x192>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    24c0:	60 e2       	ldi	r22, 0x20	; 32
    24c2:	83 e0       	ldi	r24, 0x03	; 3
    24c4:	29 d7       	rcall	.+3666   	; 0x3318 <sysclk_enable_module>
    24c6:	1a c0       	rjmp	.+52     	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	80 3b       	cpi	r24, 0xB0	; 176
    24ce:	99 40       	sbci	r25, 0x09	; 9
    24d0:	21 f4       	brne	.+8      	; 0x24da <sysclk_enable_peripheral_clock+0x1a4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    24d2:	60 e2       	ldi	r22, 0x20	; 32
    24d4:	84 e0       	ldi	r24, 0x04	; 4
    24d6:	20 d7       	rcall	.+3648   	; 0x3318 <sysclk_enable_module>
    24d8:	11 c0       	rjmp	.+34     	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	80 38       	cpi	r24, 0x80	; 128
    24e0:	94 40       	sbci	r25, 0x04	; 4
    24e2:	21 f4       	brne	.+8      	; 0x24ec <sysclk_enable_peripheral_clock+0x1b6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    24e4:	60 e4       	ldi	r22, 0x40	; 64
    24e6:	83 e0       	ldi	r24, 0x03	; 3
    24e8:	17 d7       	rcall	.+3630   	; 0x3318 <sysclk_enable_module>
    24ea:	08 c0       	rjmp	.+16     	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	80 3a       	cpi	r24, 0xA0	; 160
    24f2:	94 40       	sbci	r25, 0x04	; 4
    24f4:	19 f4       	brne	.+6      	; 0x24fc <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    24f6:	60 e4       	ldi	r22, 0x40	; 64
    24f8:	85 e0       	ldi	r24, 0x05	; 5
    24fa:	0e d7       	rcall	.+3612   	; 0x3318 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

00002506 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    2506:	61 50       	subi	r22, 0x01	; 1
    2508:	71 09       	sbc	r23, r1
    250a:	81 09       	sbc	r24, r1
    250c:	91 09       	sbc	r25, r1
    250e:	d9 f7       	brne	.-10     	; 0x2506 <__portable_avr_delay_cycles>
}
    2510:	08 95       	ret

00002512 <ioport_set_pin_low>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_low(port_pin_t pin)
{
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	2a 97       	sbiw	r28, 0x0a	; 10
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	8a 87       	std	Y+10, r24	; 0x0a
    2522:	8a 85       	ldd	r24, Y+10	; 0x0a
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	1a 82       	std	Y+2, r1	; 0x02
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	8b 83       	std	Y+3, r24	; 0x03
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2530:	8c 81       	ldd	r24, Y+4	; 0x04
    2532:	86 95       	lsr	r24
    2534:	86 95       	lsr	r24
    2536:	86 95       	lsr	r24
    2538:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    253a:	8d 81       	ldd	r24, Y+5	; 0x05
    253c:	88 2f       	mov	r24, r24
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	82 95       	swap	r24
    2546:	92 95       	swap	r25
    2548:	90 7f       	andi	r25, 0xF0	; 240
    254a:	98 27       	eor	r25, r24
    254c:	80 7f       	andi	r24, 0xF0	; 240
    254e:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2550:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
    2552:	8e 83       	std	Y+6, r24	; 0x06
    2554:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	88 23       	and	r24, r24
    255a:	a9 f0       	breq	.+42     	; 0x2586 <ioport_set_pin_low+0x74>
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2560:	88 85       	ldd	r24, Y+8	; 0x08
    2562:	88 2f       	mov	r24, r24
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9c 01       	movw	r18, r24
    2568:	27 70       	andi	r18, 0x07	; 7
    256a:	33 27       	eor	r19, r19
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <ioport_set_pin_low+0x64>
    2572:	88 0f       	add	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	2a 95       	dec	r18
    2578:	e2 f7       	brpl	.-8      	; 0x2572 <ioport_set_pin_low+0x60>
    257a:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    257c:	8e 81       	ldd	r24, Y+6	; 0x06
    257e:	9f 81       	ldd	r25, Y+7	; 0x07
    2580:	fc 01       	movw	r30, r24
    2582:	25 83       	std	Z+5, r18	; 0x05
    2584:	14 c0       	rjmp	.+40     	; 0x25ae <ioport_set_pin_low+0x9c>
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    258a:	89 85       	ldd	r24, Y+9	; 0x09
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	9c 01       	movw	r18, r24
    2592:	27 70       	andi	r18, 0x07	; 7
    2594:	33 27       	eor	r19, r19
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <ioport_set_pin_low+0x8e>
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	2a 95       	dec	r18
    25a2:	e2 f7       	brpl	.-8      	; 0x259c <ioport_set_pin_low+0x8a>
    25a4:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    25a6:	8e 81       	ldd	r24, Y+6	; 0x06
    25a8:	9f 81       	ldd	r25, Y+7	; 0x07
    25aa:	fc 01       	movw	r30, r24
    25ac:	26 83       	std	Z+6, r18	; 0x06
	arch_ioport_set_pin_level(pin, false);
}
    25ae:	2a 96       	adiw	r28, 0x0a	; 10
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	08 95       	ret

000025ba <ioport_set_pin_high>:
 * an output.
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_set_pin_high(port_pin_t pin)
{
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	2a 97       	sbiw	r28, 0x0a	; 10
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	8a 87       	std	Y+10, r24	; 0x0a
    25ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	8a 83       	std	Y+2, r24	; 0x02
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	8b 83       	std	Y+3, r24	; 0x03
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	8c 83       	std	Y+4, r24	; 0x04
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    25da:	8c 81       	ldd	r24, Y+4	; 0x04
    25dc:	86 95       	lsr	r24
    25de:	86 95       	lsr	r24
    25e0:	86 95       	lsr	r24
    25e2:	8d 83       	std	Y+5, r24	; 0x05
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	88 2f       	mov	r24, r24
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	82 95       	swap	r24
    25f0:	92 95       	swap	r25
    25f2:	90 7f       	andi	r25, 0xF0	; 240
    25f4:	98 27       	eor	r25, r24
    25f6:	80 7f       	andi	r24, 0xF0	; 240
    25f8:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    25fa:	9a 5f       	subi	r25, 0xFA	; 250
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
    25fc:	8e 83       	std	Y+6, r24	; 0x06
    25fe:	9f 83       	std	Y+7, r25	; 0x07

	if (level) {
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	88 23       	and	r24, r24
    2604:	a9 f0       	breq	.+42     	; 0x2630 <ioport_set_pin_high+0x76>
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	88 87       	std	Y+8, r24	; 0x08
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    260a:	88 85       	ldd	r24, Y+8	; 0x08
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9c 01       	movw	r18, r24
    2612:	27 70       	andi	r18, 0x07	; 7
    2614:	33 27       	eor	r19, r19
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <ioport_set_pin_high+0x66>
    261c:	88 0f       	add	r24, r24
    261e:	99 1f       	adc	r25, r25
    2620:	2a 95       	dec	r18
    2622:	e2 f7       	brpl	.-8      	; 0x261c <ioport_set_pin_high+0x62>
    2624:	28 2f       	mov	r18, r24
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2626:	8e 81       	ldd	r24, Y+6	; 0x06
    2628:	9f 81       	ldd	r25, Y+7	; 0x07
    262a:	fc 01       	movw	r30, r24
    262c:	25 83       	std	Z+5, r18	; 0x05
    262e:	14 c0       	rjmp	.+40     	; 0x2658 <ioport_set_pin_high+0x9e>
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	89 87       	std	Y+9, r24	; 0x09
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2634:	89 85       	ldd	r24, Y+9	; 0x09
    2636:	88 2f       	mov	r24, r24
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9c 01       	movw	r18, r24
    263c:	27 70       	andi	r18, 0x07	; 7
    263e:	33 27       	eor	r19, r19
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	02 c0       	rjmp	.+4      	; 0x264a <ioport_set_pin_high+0x90>
    2646:	88 0f       	add	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	2a 95       	dec	r18
    264c:	e2 f7       	brpl	.-8      	; 0x2646 <ioport_set_pin_high+0x8c>
    264e:	28 2f       	mov	r18, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2650:	8e 81       	ldd	r24, Y+6	; 0x06
    2652:	9f 81       	ldd	r25, Y+7	; 0x07
    2654:	fc 01       	movw	r30, r24
    2656:	26 83       	std	Z+6, r18	; 0x06
	arch_ioport_set_pin_level(pin, true);
}
    2658:	2a 96       	adiw	r28, 0x0a	; 10
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	08 95       	ret

00002664 <spi_init>:

#include "drivers/driver.h"
#include <asf.h>

void spi_init(SPI_t* targetspi, PORT_t* port)
{
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	00 d0       	rcall	.+0      	; 0x266a <spi_init+0x6>
    266a:	00 d0       	rcall	.+0      	; 0x266c <spi_init+0x8>
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	6b 83       	std	Y+3, r22	; 0x03
    2676:	7c 83       	std	Y+4, r23	; 0x04
	sysclk_enable_peripheral_clock(targetspi);	//Enable peripheral clock
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	9a 81       	ldd	r25, Y+2	; 0x02
    267c:	5c de       	rcall	.-840    	; 0x2336 <sysclk_enable_peripheral_clock>
	port->DIRSET |= 0b10110000;	//Initialize 
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	9c 81       	ldd	r25, Y+4	; 0x04
    2682:	fc 01       	movw	r30, r24
    2684:	81 81       	ldd	r24, Z+1	; 0x01
    2686:	28 2f       	mov	r18, r24
    2688:	20 6b       	ori	r18, 0xB0	; 176
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	fc 01       	movw	r30, r24
    2690:	21 83       	std	Z+1, r18	; 0x01
	port->DIR &= 0b10111111;
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	fc 01       	movw	r30, r24
    2698:	80 81       	ld	r24, Z
    269a:	28 2f       	mov	r18, r24
    269c:	2f 7b       	andi	r18, 0xBF	; 191
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	9c 81       	ldd	r25, Y+4	; 0x04
    26a2:	fc 01       	movw	r30, r24
    26a4:	20 83       	st	Z, r18
	port->OUT |= 0b10110000;
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	fc 01       	movw	r30, r24
    26ac:	84 81       	ldd	r24, Z+4	; 0x04
    26ae:	28 2f       	mov	r18, r24
    26b0:	20 6b       	ori	r18, 0xB0	; 176
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	9c 81       	ldd	r25, Y+4	; 0x04
    26b6:	fc 01       	movw	r30, r24
    26b8:	24 83       	std	Z+4, r18	; 0x04
	targetspi->CTRL = 0b11010000;	//16 MHz
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	9a 81       	ldd	r25, Y+2	; 0x02
    26be:	20 ed       	ldi	r18, 0xD0	; 208
    26c0:	fc 01       	movw	r30, r24
    26c2:	20 83       	st	Z, r18
}
    26c4:	24 96       	adiw	r28, 0x04	; 4
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <spi_read>:

uint8_t spi_read(SPI_t* targetspi)
{
    26d0:	af 92       	push	r10
    26d2:	bf 92       	push	r11
    26d4:	cf 92       	push	r12
    26d6:	df 92       	push	r13
    26d8:	ef 92       	push	r14
    26da:	ff 92       	push	r15
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <spi_read+0x16>
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	9a 83       	std	Y+2, r25	; 0x02
	delay_ms(1);
    26ee:	17 de       	rcall	.-978    	; 0x231e <sysclk_get_cpu_hz>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	5c 01       	movw	r10, r24
    26f6:	6d 01       	movw	r12, r26
    26f8:	e1 2c       	mov	r14, r1
    26fa:	f1 2c       	mov	r15, r1
    26fc:	87 01       	movw	r16, r14
    26fe:	2a 2d       	mov	r18, r10
    2700:	3b 2d       	mov	r19, r11
    2702:	4c 2d       	mov	r20, r12
    2704:	5d 2d       	mov	r21, r13
    2706:	6e 2d       	mov	r22, r14
    2708:	7f 2d       	mov	r23, r15
    270a:	80 2f       	mov	r24, r16
    270c:	91 2f       	mov	r25, r17
    270e:	29 51       	subi	r18, 0x19	; 25
    2710:	3c 4f       	sbci	r19, 0xFC	; 252
    2712:	4f 4f       	sbci	r20, 0xFF	; 255
    2714:	5f 4f       	sbci	r21, 0xFF	; 255
    2716:	6f 4f       	sbci	r22, 0xFF	; 255
    2718:	7f 4f       	sbci	r23, 0xFF	; 255
    271a:	8f 4f       	sbci	r24, 0xFF	; 255
    271c:	9f 4f       	sbci	r25, 0xFF	; 255
    271e:	a2 2e       	mov	r10, r18
    2720:	b3 2e       	mov	r11, r19
    2722:	c4 2e       	mov	r12, r20
    2724:	d5 2e       	mov	r13, r21
    2726:	e6 2e       	mov	r14, r22
    2728:	f7 2e       	mov	r15, r23
    272a:	08 2f       	mov	r16, r24
    272c:	19 2f       	mov	r17, r25
    272e:	2a 2d       	mov	r18, r10
    2730:	3b 2d       	mov	r19, r11
    2732:	4c 2d       	mov	r20, r12
    2734:	5d 2d       	mov	r21, r13
    2736:	6e 2d       	mov	r22, r14
    2738:	7f 2d       	mov	r23, r15
    273a:	80 2f       	mov	r24, r16
    273c:	91 2f       	mov	r25, r17
    273e:	0e 94 40 2a 	call	0x5480	; 0x5480 <__floatundisf>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e8       	ldi	r19, 0x80	; 128
    274a:	4b eb       	ldi	r20, 0xBB	; 187
    274c:	55 e4       	ldi	r21, 0x45	; 69
    274e:	bc 01       	movw	r22, r24
    2750:	cd 01       	movw	r24, r26
    2752:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	bc 01       	movw	r22, r24
    275c:	cd 01       	movw	r24, r26
    275e:	0e 94 99 29 	call	0x5332	; 0x5332 <__fixunssfdi>
    2762:	a2 2e       	mov	r10, r18
    2764:	b3 2e       	mov	r11, r19
    2766:	c4 2e       	mov	r12, r20
    2768:	d5 2e       	mov	r13, r21
    276a:	e6 2e       	mov	r14, r22
    276c:	f7 2e       	mov	r15, r23
    276e:	08 2f       	mov	r16, r24
    2770:	19 2f       	mov	r17, r25
    2772:	d6 01       	movw	r26, r12
    2774:	c5 01       	movw	r24, r10
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	c5 de       	rcall	.-630    	; 0x2506 <__portable_avr_delay_cycles>
	targetspi->DATA = 0xFF;
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	9a 81       	ldd	r25, Y+2	; 0x02
    2780:	2f ef       	ldi	r18, 0xFF	; 255
    2782:	fc 01       	movw	r30, r24
    2784:	23 83       	std	Z+3, r18	; 0x03
	while(!(targetspi->STATUS >> 7));
    2786:	00 00       	nop
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	fc 01       	movw	r30, r24
    278e:	82 81       	ldd	r24, Z+2	; 0x02
    2790:	88 23       	and	r24, r24
    2792:	d4 f7       	brge	.-12     	; 0x2788 <spi_read+0xb8>
	delay_ms(1);
    2794:	c4 dd       	rcall	.-1144   	; 0x231e <sysclk_get_cpu_hz>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	5c 01       	movw	r10, r24
    279c:	6d 01       	movw	r12, r26
    279e:	e1 2c       	mov	r14, r1
    27a0:	f1 2c       	mov	r15, r1
    27a2:	87 01       	movw	r16, r14
    27a4:	2a 2d       	mov	r18, r10
    27a6:	3b 2d       	mov	r19, r11
    27a8:	4c 2d       	mov	r20, r12
    27aa:	5d 2d       	mov	r21, r13
    27ac:	6e 2d       	mov	r22, r14
    27ae:	7f 2d       	mov	r23, r15
    27b0:	80 2f       	mov	r24, r16
    27b2:	91 2f       	mov	r25, r17
    27b4:	29 51       	subi	r18, 0x19	; 25
    27b6:	3c 4f       	sbci	r19, 0xFC	; 252
    27b8:	4f 4f       	sbci	r20, 0xFF	; 255
    27ba:	5f 4f       	sbci	r21, 0xFF	; 255
    27bc:	6f 4f       	sbci	r22, 0xFF	; 255
    27be:	7f 4f       	sbci	r23, 0xFF	; 255
    27c0:	8f 4f       	sbci	r24, 0xFF	; 255
    27c2:	9f 4f       	sbci	r25, 0xFF	; 255
    27c4:	a2 2e       	mov	r10, r18
    27c6:	b3 2e       	mov	r11, r19
    27c8:	c4 2e       	mov	r12, r20
    27ca:	d5 2e       	mov	r13, r21
    27cc:	e6 2e       	mov	r14, r22
    27ce:	f7 2e       	mov	r15, r23
    27d0:	08 2f       	mov	r16, r24
    27d2:	19 2f       	mov	r17, r25
    27d4:	2a 2d       	mov	r18, r10
    27d6:	3b 2d       	mov	r19, r11
    27d8:	4c 2d       	mov	r20, r12
    27da:	5d 2d       	mov	r21, r13
    27dc:	6e 2d       	mov	r22, r14
    27de:	7f 2d       	mov	r23, r15
    27e0:	80 2f       	mov	r24, r16
    27e2:	91 2f       	mov	r25, r17
    27e4:	0e 94 40 2a 	call	0x5480	; 0x5480 <__floatundisf>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e8       	ldi	r19, 0x80	; 128
    27f0:	4b eb       	ldi	r20, 0xBB	; 187
    27f2:	55 e4       	ldi	r21, 0x45	; 69
    27f4:	bc 01       	movw	r22, r24
    27f6:	cd 01       	movw	r24, r26
    27f8:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 99 29 	call	0x5332	; 0x5332 <__fixunssfdi>
    2808:	a2 2e       	mov	r10, r18
    280a:	b3 2e       	mov	r11, r19
    280c:	c4 2e       	mov	r12, r20
    280e:	d5 2e       	mov	r13, r21
    2810:	e6 2e       	mov	r14, r22
    2812:	f7 2e       	mov	r15, r23
    2814:	08 2f       	mov	r16, r24
    2816:	19 2f       	mov	r17, r25
    2818:	d6 01       	movw	r26, r12
    281a:	c5 01       	movw	r24, r10
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	72 de       	rcall	.-796    	; 0x2506 <__portable_avr_delay_cycles>
	//printf("spi_read:%u\n",targetspi->DATA);	//Actually reading in all 1's. Next use this code on an xplained board and see if it's functional or if it's the sensor
	return targetspi->DATA;
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	9a 81       	ldd	r25, Y+2	; 0x02
    2826:	fc 01       	movw	r30, r24
    2828:	83 81       	ldd	r24, Z+3	; 0x03
}
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	1f 91       	pop	r17
    2834:	0f 91       	pop	r16
    2836:	ff 90       	pop	r15
    2838:	ef 90       	pop	r14
    283a:	df 90       	pop	r13
    283c:	cf 90       	pop	r12
    283e:	bf 90       	pop	r11
    2840:	af 90       	pop	r10
    2842:	08 95       	ret

00002844 <spi_write>:

void spi_write(SPI_t* targetspi, uint8_t data)
{
    2844:	af 92       	push	r10
    2846:	bf 92       	push	r11
    2848:	cf 92       	push	r12
    284a:	df 92       	push	r13
    284c:	ef 92       	push	r14
    284e:	ff 92       	push	r15
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	00 d0       	rcall	.+0      	; 0x285a <spi_write+0x16>
    285a:	1f 92       	push	r1
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	9a 83       	std	Y+2, r25	; 0x02
    2864:	6b 83       	std	Y+3, r22	; 0x03
	delay_ms(1);
    2866:	5b dd       	rcall	.-1354   	; 0x231e <sysclk_get_cpu_hz>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	5c 01       	movw	r10, r24
    286e:	6d 01       	movw	r12, r26
    2870:	e1 2c       	mov	r14, r1
    2872:	f1 2c       	mov	r15, r1
    2874:	87 01       	movw	r16, r14
    2876:	2a 2d       	mov	r18, r10
    2878:	3b 2d       	mov	r19, r11
    287a:	4c 2d       	mov	r20, r12
    287c:	5d 2d       	mov	r21, r13
    287e:	6e 2d       	mov	r22, r14
    2880:	7f 2d       	mov	r23, r15
    2882:	80 2f       	mov	r24, r16
    2884:	91 2f       	mov	r25, r17
    2886:	29 51       	subi	r18, 0x19	; 25
    2888:	3c 4f       	sbci	r19, 0xFC	; 252
    288a:	4f 4f       	sbci	r20, 0xFF	; 255
    288c:	5f 4f       	sbci	r21, 0xFF	; 255
    288e:	6f 4f       	sbci	r22, 0xFF	; 255
    2890:	7f 4f       	sbci	r23, 0xFF	; 255
    2892:	8f 4f       	sbci	r24, 0xFF	; 255
    2894:	9f 4f       	sbci	r25, 0xFF	; 255
    2896:	a2 2e       	mov	r10, r18
    2898:	b3 2e       	mov	r11, r19
    289a:	c4 2e       	mov	r12, r20
    289c:	d5 2e       	mov	r13, r21
    289e:	e6 2e       	mov	r14, r22
    28a0:	f7 2e       	mov	r15, r23
    28a2:	08 2f       	mov	r16, r24
    28a4:	19 2f       	mov	r17, r25
    28a6:	2a 2d       	mov	r18, r10
    28a8:	3b 2d       	mov	r19, r11
    28aa:	4c 2d       	mov	r20, r12
    28ac:	5d 2d       	mov	r21, r13
    28ae:	6e 2d       	mov	r22, r14
    28b0:	7f 2d       	mov	r23, r15
    28b2:	80 2f       	mov	r24, r16
    28b4:	91 2f       	mov	r25, r17
    28b6:	0e 94 40 2a 	call	0x5480	; 0x5480 <__floatundisf>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e8       	ldi	r19, 0x80	; 128
    28c2:	4b eb       	ldi	r20, 0xBB	; 187
    28c4:	55 e4       	ldi	r21, 0x45	; 69
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	0e 94 99 29 	call	0x5332	; 0x5332 <__fixunssfdi>
    28da:	a2 2e       	mov	r10, r18
    28dc:	b3 2e       	mov	r11, r19
    28de:	c4 2e       	mov	r12, r20
    28e0:	d5 2e       	mov	r13, r21
    28e2:	e6 2e       	mov	r14, r22
    28e4:	f7 2e       	mov	r15, r23
    28e6:	08 2f       	mov	r16, r24
    28e8:	19 2f       	mov	r17, r25
    28ea:	d6 01       	movw	r26, r12
    28ec:	c5 01       	movw	r24, r10
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	09 de       	rcall	.-1006   	; 0x2506 <__portable_avr_delay_cycles>
	targetspi->DATA = data;
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
    28f8:	2b 81       	ldd	r18, Y+3	; 0x03
    28fa:	fc 01       	movw	r30, r24
    28fc:	23 83       	std	Z+3, r18	; 0x03
	while(!(targetspi->STATUS >> 7));
    28fe:	00 00       	nop
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	fc 01       	movw	r30, r24
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	88 23       	and	r24, r24
    290a:	d4 f7       	brge	.-12     	; 0x2900 <spi_write+0xbc>
	delay_ms(1);
    290c:	08 dd       	rcall	.-1520   	; 0x231e <sysclk_get_cpu_hz>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	5c 01       	movw	r10, r24
    2914:	6d 01       	movw	r12, r26
    2916:	e1 2c       	mov	r14, r1
    2918:	f1 2c       	mov	r15, r1
    291a:	87 01       	movw	r16, r14
    291c:	2a 2d       	mov	r18, r10
    291e:	3b 2d       	mov	r19, r11
    2920:	4c 2d       	mov	r20, r12
    2922:	5d 2d       	mov	r21, r13
    2924:	6e 2d       	mov	r22, r14
    2926:	7f 2d       	mov	r23, r15
    2928:	80 2f       	mov	r24, r16
    292a:	91 2f       	mov	r25, r17
    292c:	29 51       	subi	r18, 0x19	; 25
    292e:	3c 4f       	sbci	r19, 0xFC	; 252
    2930:	4f 4f       	sbci	r20, 0xFF	; 255
    2932:	5f 4f       	sbci	r21, 0xFF	; 255
    2934:	6f 4f       	sbci	r22, 0xFF	; 255
    2936:	7f 4f       	sbci	r23, 0xFF	; 255
    2938:	8f 4f       	sbci	r24, 0xFF	; 255
    293a:	9f 4f       	sbci	r25, 0xFF	; 255
    293c:	a2 2e       	mov	r10, r18
    293e:	b3 2e       	mov	r11, r19
    2940:	c4 2e       	mov	r12, r20
    2942:	d5 2e       	mov	r13, r21
    2944:	e6 2e       	mov	r14, r22
    2946:	f7 2e       	mov	r15, r23
    2948:	08 2f       	mov	r16, r24
    294a:	19 2f       	mov	r17, r25
    294c:	2a 2d       	mov	r18, r10
    294e:	3b 2d       	mov	r19, r11
    2950:	4c 2d       	mov	r20, r12
    2952:	5d 2d       	mov	r21, r13
    2954:	6e 2d       	mov	r22, r14
    2956:	7f 2d       	mov	r23, r15
    2958:	80 2f       	mov	r24, r16
    295a:	91 2f       	mov	r25, r17
    295c:	0e 94 40 2a 	call	0x5480	; 0x5480 <__floatundisf>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e8       	ldi	r19, 0x80	; 128
    2968:	4b eb       	ldi	r20, 0xBB	; 187
    296a:	55 e4       	ldi	r21, 0x45	; 69
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 99 29 	call	0x5332	; 0x5332 <__fixunssfdi>
    2980:	a2 2e       	mov	r10, r18
    2982:	b3 2e       	mov	r11, r19
    2984:	c4 2e       	mov	r12, r20
    2986:	d5 2e       	mov	r13, r21
    2988:	e6 2e       	mov	r14, r22
    298a:	f7 2e       	mov	r15, r23
    298c:	08 2f       	mov	r16, r24
    298e:	19 2f       	mov	r17, r25
    2990:	d6 01       	movw	r26, r12
    2992:	c5 01       	movw	r24, r10
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	b6 dd       	rcall	.-1172   	; 0x2506 <__portable_avr_delay_cycles>
}
    299a:	23 96       	adiw	r28, 0x03	; 3
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	ff 90       	pop	r15
    29aa:	ef 90       	pop	r14
    29ac:	df 90       	pop	r13
    29ae:	cf 90       	pop	r12
    29b0:	bf 90       	pop	r11
    29b2:	af 90       	pop	r10
    29b4:	08 95       	ret

000029b6 <spi_select>:

void spi_select(ioport_pin_t pin)
{
    29b6:	af 92       	push	r10
    29b8:	bf 92       	push	r11
    29ba:	cf 92       	push	r12
    29bc:	df 92       	push	r13
    29be:	ef 92       	push	r14
    29c0:	ff 92       	push	r15
    29c2:	0f 93       	push	r16
    29c4:	1f 93       	push	r17
    29c6:	cf 93       	push	r28
    29c8:	df 93       	push	r29
    29ca:	1f 92       	push	r1
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    29d0:	89 83       	std	Y+1, r24	; 0x01
	delay_ms(1);
    29d2:	a5 dc       	rcall	.-1718   	; 0x231e <sysclk_get_cpu_hz>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	5c 01       	movw	r10, r24
    29da:	6d 01       	movw	r12, r26
    29dc:	e1 2c       	mov	r14, r1
    29de:	f1 2c       	mov	r15, r1
    29e0:	87 01       	movw	r16, r14
    29e2:	2a 2d       	mov	r18, r10
    29e4:	3b 2d       	mov	r19, r11
    29e6:	4c 2d       	mov	r20, r12
    29e8:	5d 2d       	mov	r21, r13
    29ea:	6e 2d       	mov	r22, r14
    29ec:	7f 2d       	mov	r23, r15
    29ee:	80 2f       	mov	r24, r16
    29f0:	91 2f       	mov	r25, r17
    29f2:	29 51       	subi	r18, 0x19	; 25
    29f4:	3c 4f       	sbci	r19, 0xFC	; 252
    29f6:	4f 4f       	sbci	r20, 0xFF	; 255
    29f8:	5f 4f       	sbci	r21, 0xFF	; 255
    29fa:	6f 4f       	sbci	r22, 0xFF	; 255
    29fc:	7f 4f       	sbci	r23, 0xFF	; 255
    29fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2a00:	9f 4f       	sbci	r25, 0xFF	; 255
    2a02:	a2 2e       	mov	r10, r18
    2a04:	b3 2e       	mov	r11, r19
    2a06:	c4 2e       	mov	r12, r20
    2a08:	d5 2e       	mov	r13, r21
    2a0a:	e6 2e       	mov	r14, r22
    2a0c:	f7 2e       	mov	r15, r23
    2a0e:	08 2f       	mov	r16, r24
    2a10:	19 2f       	mov	r17, r25
    2a12:	2a 2d       	mov	r18, r10
    2a14:	3b 2d       	mov	r19, r11
    2a16:	4c 2d       	mov	r20, r12
    2a18:	5d 2d       	mov	r21, r13
    2a1a:	6e 2d       	mov	r22, r14
    2a1c:	7f 2d       	mov	r23, r15
    2a1e:	80 2f       	mov	r24, r16
    2a20:	91 2f       	mov	r25, r17
    2a22:	0e 94 40 2a 	call	0x5480	; 0x5480 <__floatundisf>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e8       	ldi	r19, 0x80	; 128
    2a2e:	4b eb       	ldi	r20, 0xBB	; 187
    2a30:	55 e4       	ldi	r21, 0x45	; 69
    2a32:	bc 01       	movw	r22, r24
    2a34:	cd 01       	movw	r24, r26
    2a36:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 99 29 	call	0x5332	; 0x5332 <__fixunssfdi>
    2a46:	a2 2e       	mov	r10, r18
    2a48:	b3 2e       	mov	r11, r19
    2a4a:	c4 2e       	mov	r12, r20
    2a4c:	d5 2e       	mov	r13, r21
    2a4e:	e6 2e       	mov	r14, r22
    2a50:	f7 2e       	mov	r15, r23
    2a52:	08 2f       	mov	r16, r24
    2a54:	19 2f       	mov	r17, r25
    2a56:	d6 01       	movw	r26, r12
    2a58:	c5 01       	movw	r24, r10
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	53 dd       	rcall	.-1370   	; 0x2506 <__portable_avr_delay_cycles>
	ioport_set_pin_low(pin);
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	57 dd       	rcall	.-1362   	; 0x2512 <ioport_set_pin_low>
	delay_ms(1);
    2a64:	5c dc       	rcall	.-1864   	; 0x231e <sysclk_get_cpu_hz>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	5c 01       	movw	r10, r24
    2a6c:	6d 01       	movw	r12, r26
    2a6e:	e1 2c       	mov	r14, r1
    2a70:	f1 2c       	mov	r15, r1
    2a72:	87 01       	movw	r16, r14
    2a74:	2a 2d       	mov	r18, r10
    2a76:	3b 2d       	mov	r19, r11
    2a78:	4c 2d       	mov	r20, r12
    2a7a:	5d 2d       	mov	r21, r13
    2a7c:	6e 2d       	mov	r22, r14
    2a7e:	7f 2d       	mov	r23, r15
    2a80:	80 2f       	mov	r24, r16
    2a82:	91 2f       	mov	r25, r17
    2a84:	29 51       	subi	r18, 0x19	; 25
    2a86:	3c 4f       	sbci	r19, 0xFC	; 252
    2a88:	4f 4f       	sbci	r20, 0xFF	; 255
    2a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a8c:	6f 4f       	sbci	r22, 0xFF	; 255
    2a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a90:	8f 4f       	sbci	r24, 0xFF	; 255
    2a92:	9f 4f       	sbci	r25, 0xFF	; 255
    2a94:	a2 2e       	mov	r10, r18
    2a96:	b3 2e       	mov	r11, r19
    2a98:	c4 2e       	mov	r12, r20
    2a9a:	d5 2e       	mov	r13, r21
    2a9c:	e6 2e       	mov	r14, r22
    2a9e:	f7 2e       	mov	r15, r23
    2aa0:	08 2f       	mov	r16, r24
    2aa2:	19 2f       	mov	r17, r25
    2aa4:	2a 2d       	mov	r18, r10
    2aa6:	3b 2d       	mov	r19, r11
    2aa8:	4c 2d       	mov	r20, r12
    2aaa:	5d 2d       	mov	r21, r13
    2aac:	6e 2d       	mov	r22, r14
    2aae:	7f 2d       	mov	r23, r15
    2ab0:	80 2f       	mov	r24, r16
    2ab2:	91 2f       	mov	r25, r17
    2ab4:	0e 94 40 2a 	call	0x5480	; 0x5480 <__floatundisf>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e8       	ldi	r19, 0x80	; 128
    2ac0:	4b eb       	ldi	r20, 0xBB	; 187
    2ac2:	55 e4       	ldi	r21, 0x45	; 69
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	cd 01       	movw	r24, r26
    2ad4:	0e 94 99 29 	call	0x5332	; 0x5332 <__fixunssfdi>
    2ad8:	a2 2e       	mov	r10, r18
    2ada:	b3 2e       	mov	r11, r19
    2adc:	c4 2e       	mov	r12, r20
    2ade:	d5 2e       	mov	r13, r21
    2ae0:	e6 2e       	mov	r14, r22
    2ae2:	f7 2e       	mov	r15, r23
    2ae4:	08 2f       	mov	r16, r24
    2ae6:	19 2f       	mov	r17, r25
    2ae8:	d6 01       	movw	r26, r12
    2aea:	c5 01       	movw	r24, r10
    2aec:	bc 01       	movw	r22, r24
    2aee:	cd 01       	movw	r24, r26
    2af0:	0a dd       	rcall	.-1516   	; 0x2506 <__portable_avr_delay_cycles>
}
    2af2:	0f 90       	pop	r0
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	1f 91       	pop	r17
    2afa:	0f 91       	pop	r16
    2afc:	ff 90       	pop	r15
    2afe:	ef 90       	pop	r14
    2b00:	df 90       	pop	r13
    2b02:	cf 90       	pop	r12
    2b04:	bf 90       	pop	r11
    2b06:	af 90       	pop	r10
    2b08:	08 95       	ret

00002b0a <spi_deselect>:

void spi_deselect(ioport_pin_t pin)
{
    2b0a:	af 92       	push	r10
    2b0c:	bf 92       	push	r11
    2b0e:	cf 92       	push	r12
    2b10:	df 92       	push	r13
    2b12:	ef 92       	push	r14
    2b14:	ff 92       	push	r15
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	1f 92       	push	r1
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	89 83       	std	Y+1, r24	; 0x01
	delay_ms(1);
    2b26:	fb db       	rcall	.-2058   	; 0x231e <sysclk_get_cpu_hz>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	5c 01       	movw	r10, r24
    2b2e:	6d 01       	movw	r12, r26
    2b30:	e1 2c       	mov	r14, r1
    2b32:	f1 2c       	mov	r15, r1
    2b34:	87 01       	movw	r16, r14
    2b36:	2a 2d       	mov	r18, r10
    2b38:	3b 2d       	mov	r19, r11
    2b3a:	4c 2d       	mov	r20, r12
    2b3c:	5d 2d       	mov	r21, r13
    2b3e:	6e 2d       	mov	r22, r14
    2b40:	7f 2d       	mov	r23, r15
    2b42:	80 2f       	mov	r24, r16
    2b44:	91 2f       	mov	r25, r17
    2b46:	29 51       	subi	r18, 0x19	; 25
    2b48:	3c 4f       	sbci	r19, 0xFC	; 252
    2b4a:	4f 4f       	sbci	r20, 0xFF	; 255
    2b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4e:	6f 4f       	sbci	r22, 0xFF	; 255
    2b50:	7f 4f       	sbci	r23, 0xFF	; 255
    2b52:	8f 4f       	sbci	r24, 0xFF	; 255
    2b54:	9f 4f       	sbci	r25, 0xFF	; 255
    2b56:	a2 2e       	mov	r10, r18
    2b58:	b3 2e       	mov	r11, r19
    2b5a:	c4 2e       	mov	r12, r20
    2b5c:	d5 2e       	mov	r13, r21
    2b5e:	e6 2e       	mov	r14, r22
    2b60:	f7 2e       	mov	r15, r23
    2b62:	08 2f       	mov	r16, r24
    2b64:	19 2f       	mov	r17, r25
    2b66:	2a 2d       	mov	r18, r10
    2b68:	3b 2d       	mov	r19, r11
    2b6a:	4c 2d       	mov	r20, r12
    2b6c:	5d 2d       	mov	r21, r13
    2b6e:	6e 2d       	mov	r22, r14
    2b70:	7f 2d       	mov	r23, r15
    2b72:	80 2f       	mov	r24, r16
    2b74:	91 2f       	mov	r25, r17
    2b76:	0e 94 40 2a 	call	0x5480	; 0x5480 <__floatundisf>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e8       	ldi	r19, 0x80	; 128
    2b82:	4b eb       	ldi	r20, 0xBB	; 187
    2b84:	55 e4       	ldi	r21, 0x45	; 69
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	bc 01       	movw	r22, r24
    2b94:	cd 01       	movw	r24, r26
    2b96:	0e 94 99 29 	call	0x5332	; 0x5332 <__fixunssfdi>
    2b9a:	a2 2e       	mov	r10, r18
    2b9c:	b3 2e       	mov	r11, r19
    2b9e:	c4 2e       	mov	r12, r20
    2ba0:	d5 2e       	mov	r13, r21
    2ba2:	e6 2e       	mov	r14, r22
    2ba4:	f7 2e       	mov	r15, r23
    2ba6:	08 2f       	mov	r16, r24
    2ba8:	19 2f       	mov	r17, r25
    2baa:	d6 01       	movw	r26, r12
    2bac:	c5 01       	movw	r24, r10
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	a9 dc       	rcall	.-1710   	; 0x2506 <__portable_avr_delay_cycles>
	ioport_set_pin_high(pin);
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	01 dd       	rcall	.-1534   	; 0x25ba <ioport_set_pin_high>
	delay_ms(1);
    2bb8:	b2 db       	rcall	.-2204   	; 0x231e <sysclk_get_cpu_hz>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	5c 01       	movw	r10, r24
    2bc0:	6d 01       	movw	r12, r26
    2bc2:	e1 2c       	mov	r14, r1
    2bc4:	f1 2c       	mov	r15, r1
    2bc6:	87 01       	movw	r16, r14
    2bc8:	2a 2d       	mov	r18, r10
    2bca:	3b 2d       	mov	r19, r11
    2bcc:	4c 2d       	mov	r20, r12
    2bce:	5d 2d       	mov	r21, r13
    2bd0:	6e 2d       	mov	r22, r14
    2bd2:	7f 2d       	mov	r23, r15
    2bd4:	80 2f       	mov	r24, r16
    2bd6:	91 2f       	mov	r25, r17
    2bd8:	29 51       	subi	r18, 0x19	; 25
    2bda:	3c 4f       	sbci	r19, 0xFC	; 252
    2bdc:	4f 4f       	sbci	r20, 0xFF	; 255
    2bde:	5f 4f       	sbci	r21, 0xFF	; 255
    2be0:	6f 4f       	sbci	r22, 0xFF	; 255
    2be2:	7f 4f       	sbci	r23, 0xFF	; 255
    2be4:	8f 4f       	sbci	r24, 0xFF	; 255
    2be6:	9f 4f       	sbci	r25, 0xFF	; 255
    2be8:	a2 2e       	mov	r10, r18
    2bea:	b3 2e       	mov	r11, r19
    2bec:	c4 2e       	mov	r12, r20
    2bee:	d5 2e       	mov	r13, r21
    2bf0:	e6 2e       	mov	r14, r22
    2bf2:	f7 2e       	mov	r15, r23
    2bf4:	08 2f       	mov	r16, r24
    2bf6:	19 2f       	mov	r17, r25
    2bf8:	2a 2d       	mov	r18, r10
    2bfa:	3b 2d       	mov	r19, r11
    2bfc:	4c 2d       	mov	r20, r12
    2bfe:	5d 2d       	mov	r21, r13
    2c00:	6e 2d       	mov	r22, r14
    2c02:	7f 2d       	mov	r23, r15
    2c04:	80 2f       	mov	r24, r16
    2c06:	91 2f       	mov	r25, r17
    2c08:	0e 94 40 2a 	call	0x5480	; 0x5480 <__floatundisf>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e8       	ldi	r19, 0x80	; 128
    2c14:	4b eb       	ldi	r20, 0xBB	; 187
    2c16:	55 e4       	ldi	r21, 0x45	; 69
    2c18:	bc 01       	movw	r22, r24
    2c1a:	cd 01       	movw	r24, r26
    2c1c:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	0e 94 99 29 	call	0x5332	; 0x5332 <__fixunssfdi>
    2c2c:	a2 2e       	mov	r10, r18
    2c2e:	b3 2e       	mov	r11, r19
    2c30:	c4 2e       	mov	r12, r20
    2c32:	d5 2e       	mov	r13, r21
    2c34:	e6 2e       	mov	r14, r22
    2c36:	f7 2e       	mov	r15, r23
    2c38:	08 2f       	mov	r16, r24
    2c3a:	19 2f       	mov	r17, r25
    2c3c:	d6 01       	movw	r26, r12
    2c3e:	c5 01       	movw	r24, r10
    2c40:	bc 01       	movw	r22, r24
    2c42:	cd 01       	movw	r24, r26
    2c44:	60 dc       	rcall	.-1856   	; 0x2506 <__portable_avr_delay_cycles>
    2c46:	0f 90       	pop	r0
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	1f 91       	pop	r17
    2c4e:	0f 91       	pop	r16
    2c50:	ff 90       	pop	r15
    2c52:	ef 90       	pop	r14
    2c54:	df 90       	pop	r13
    2c56:	cf 90       	pop	r12
    2c58:	bf 90       	pop	r11
    2c5a:	af 90       	pop	r10
    2c5c:	08 95       	ret

00002c5e <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
#else
		return 32000000UL;
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	98 e4       	ldi	r25, 0x48	; 72
    2c6a:	a8 ee       	ldi	r26, 0xE8	; 232
    2c6c:	b1 e0       	ldi	r27, 0x01	; 1

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    2c6e:	bc 01       	movw	r22, r24
    2c70:	cd 01       	movw	r24, r26
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	08 95       	ret

00002c78 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    2c78:	cf 93       	push	r28
    2c7a:	df 93       	push	r29
    2c7c:	1f 92       	push	r1
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    2c82:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    2c84:	ec df       	rcall	.-40     	; 0x2c5e <sysclk_get_main_hz>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	29 81       	ldd	r18, Y+1	; 0x01
    2c8c:	22 2f       	mov	r18, r18
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	04 c0       	rjmp	.+8      	; 0x2c9a <sysclk_get_per4_hz+0x22>
    2c92:	b6 95       	lsr	r27
    2c94:	a7 95       	ror	r26
    2c96:	97 95       	ror	r25
    2c98:	87 95       	ror	r24
    2c9a:	2a 95       	dec	r18
    2c9c:	d2 f7       	brpl	.-12     	; 0x2c92 <sysclk_get_per4_hz+0x1a>
}
    2c9e:	bc 01       	movw	r22, r24
    2ca0:	cd 01       	movw	r24, r26
    2ca2:	0f 90       	pop	r0
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	08 95       	ret

00002caa <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    2cb2:	e2 df       	rcall	.-60     	; 0x2c78 <sysclk_get_per4_hz>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	08 95       	ret

00002cc2 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    2cc2:	cf 93       	push	r28
    2cc4:	df 93       	push	r29
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    2cca:	ef df       	rcall	.-34     	; 0x2caa <sysclk_get_per2_hz>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
}
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	cd 01       	movw	r24, r26
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	08 95       	ret

00002cda <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    2cda:	cf 93       	push	r28
    2cdc:	df 93       	push	r29
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    2ce2:	ef df       	rcall	.-34     	; 0x2cc2 <sysclk_get_per_hz>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
}
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	08 95       	ret

00002cf2 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    2cf2:	61 50       	subi	r22, 0x01	; 1
    2cf4:	71 09       	sbc	r23, r1
    2cf6:	81 09       	sbc	r24, r1
    2cf8:	91 09       	sbc	r25, r1
    2cfa:	d9 f7       	brne	.-10     	; 0x2cf2 <__portable_avr_delay_cycles>
}
    2cfc:	08 95       	ret

00002cfe <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    2cfe:	cf 93       	push	r28
    2d00:	df 93       	push	r29
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	27 97       	sbiw	r28, 0x07	; 7
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	8d 83       	std	Y+5, r24	; 0x05
    2d0e:	6e 83       	std	Y+6, r22	; 0x06
    2d10:	7f 83       	std	Y+7, r23	; 0x07
    2d12:	8d 81       	ldd	r24, Y+5	; 0x05
    2d14:	89 83       	std	Y+1, r24	; 0x01
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	88 2f       	mov	r24, r24
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	9c 01       	movw	r18, r24
    2d1e:	27 70       	andi	r18, 0x07	; 7
    2d20:	33 27       	eor	r19, r19
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <ioport_configure_pin+0x2e>
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	2a 95       	dec	r18
    2d2e:	e2 f7       	brpl	.-8      	; 0x2d28 <ioport_configure_pin+0x2a>
    2d30:	68 2f       	mov	r22, r24
    2d32:	8d 81       	ldd	r24, Y+5	; 0x05
    2d34:	8a 83       	std	Y+2, r24	; 0x02
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3c:	86 95       	lsr	r24
    2d3e:	86 95       	lsr	r24
    2d40:	86 95       	lsr	r24
    2d42:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2d44:	8c 81       	ldd	r24, Y+4	; 0x04
    2d46:	88 2f       	mov	r24, r24
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	88 0f       	add	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	82 95       	swap	r24
    2d50:	92 95       	swap	r25
    2d52:	90 7f       	andi	r25, 0xF0	; 240
    2d54:	98 27       	eor	r25, r24
    2d56:	80 7f       	andi	r24, 0xF0	; 240
    2d58:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2d5a:	9a 5f       	subi	r25, 0xFA	; 250
    2d5c:	9c 01       	movw	r18, r24
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d60:	9f 81       	ldd	r25, Y+7	; 0x07
    2d62:	ac 01       	movw	r20, r24
    2d64:	c9 01       	movw	r24, r18
    2d66:	0e 94 50 28 	call	0x50a0	; 0x50a0 <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    2d6a:	27 96       	adiw	r28, 0x07	; 7
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	08 95       	ret

00002d76 <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    cli();
    2d7e:	f8 94       	cli
    return 1;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
}
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	08 95       	ret

00002d88 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <__iRestore+0x6>
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	89 83       	std	Y+1, r24	; 0x01
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    SREG = *__s;
    2d96:	8f e3       	ldi	r24, 0x3F	; 63
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	29 81       	ldd	r18, Y+1	; 0x01
    2d9c:	3a 81       	ldd	r19, Y+2	; 0x02
    2d9e:	f9 01       	movw	r30, r18
    2da0:	20 81       	ld	r18, Z
    2da2:	fc 01       	movw	r30, r24
    2da4:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	08 95       	ret

00002db0 <main>:
/* Function Prototypes */


/*******************************************************************************************/
										/* Main method */
int main (void){
    2db0:	2f 92       	push	r2
    2db2:	3f 92       	push	r3
    2db4:	4f 92       	push	r4
    2db6:	5f 92       	push	r5
    2db8:	6f 92       	push	r6
    2dba:	7f 92       	push	r7
    2dbc:	8f 92       	push	r8
    2dbe:	9f 92       	push	r9
    2dc0:	af 92       	push	r10
    2dc2:	bf 92       	push	r11
    2dc4:	cf 92       	push	r12
    2dc6:	df 92       	push	r13
    2dc8:	ef 92       	push	r14
    2dca:	ff 92       	push	r15
    2dcc:	0f 93       	push	r16
    2dce:	1f 93       	push	r17
    2dd0:	cf 93       	push	r28
    2dd2:	df 93       	push	r29
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	28 97       	sbiw	r28, 0x08	; 8
    2dda:	cd bf       	out	0x3d, r28	; 61
    2ddc:	de bf       	out	0x3e, r29	; 62
	board_init();
    2dde:	0e 94 ad 28 	call	0x515a	; 0x515a <board_init>
	clock_init();
    2de2:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <clock_init>
	data_init();
    2de6:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <data_init>
	ADC_init();
    2dea:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <ADC_init>
	int_init();
    2dee:	0e 94 31 26 	call	0x4c62	; 0x4c62 <int_init>
	//init_imu();
	
	//Pressure sensor inits
	pressure_sensor.ss_pin = IOPORT_CREATE_PIN(PORTC, 4);	//Assign the correct slave select pins to pressure sensors
    2df2:	84 e1       	ldi	r24, 0x14	; 20
    2df4:	80 93 3c 28 	sts	0x283C, r24
	spi_init(&SPIC, &PORTC);	//Initialize the SPI interface
    2df8:	60 e4       	ldi	r22, 0x40	; 64
    2dfa:	76 e0       	ldi	r23, 0x06	; 6
    2dfc:	80 ec       	ldi	r24, 0xC0	; 192
    2dfe:	98 e0       	ldi	r25, 0x08	; 8
    2e00:	31 dc       	rcall	.-1950   	; 0x2664 <spi_init>
	ioport_configure_pin(pressure_sensor.ss_pin, IOPORT_DIR_OUTPUT || IOPORT_INIT_HIGH);
    2e02:	80 91 3c 28 	lds	r24, 0x283C
    2e06:	61 e0       	ldi	r22, 0x01	; 1
    2e08:	70 e0       	ldi	r23, 0x00	; 0
    2e0a:	79 df       	rcall	.-270    	; 0x2cfe <ioport_configure_pin>
	pressure_init(&pressure_sensor);	//Initialize the pressure sensor (gets the calibration constants)
    2e0c:	8c e3       	ldi	r24, 0x3C	; 60
    2e0e:	98 e2       	ldi	r25, 0x28	; 40
    2e10:	0e 94 4c 0a 	call	0x1498	; 0x1498 <pressure_init>
		//return -1;
	}
	#endif
	
	
	delay_ms(200);
    2e14:	62 df       	rcall	.-316    	; 0x2cda <sysclk_get_cpu_hz>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	1c 01       	movw	r2, r24
    2e1c:	2d 01       	movw	r4, r26
    2e1e:	61 2c       	mov	r6, r1
    2e20:	71 2c       	mov	r7, r1
    2e22:	43 01       	movw	r8, r6
    2e24:	a2 2c       	mov	r10, r2
    2e26:	b3 2c       	mov	r11, r3
    2e28:	c4 2c       	mov	r12, r4
    2e2a:	d5 2c       	mov	r13, r5
    2e2c:	e6 2c       	mov	r14, r6
    2e2e:	f7 2c       	mov	r15, r7
    2e30:	08 2d       	mov	r16, r8
    2e32:	19 2d       	mov	r17, r9
    2e34:	2a 2d       	mov	r18, r10
    2e36:	3b 2d       	mov	r19, r11
    2e38:	4c 2d       	mov	r20, r12
    2e3a:	5d 2d       	mov	r21, r13
    2e3c:	6e 2d       	mov	r22, r14
    2e3e:	7f 2d       	mov	r23, r15
    2e40:	80 2f       	mov	r24, r16
    2e42:	91 2f       	mov	r25, r17
    2e44:	02 e0       	ldi	r16, 0x02	; 2
    2e46:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <__ashldi3>
    2e4a:	a2 2e       	mov	r10, r18
    2e4c:	b3 2e       	mov	r11, r19
    2e4e:	c4 2e       	mov	r12, r20
    2e50:	d5 2e       	mov	r13, r21
    2e52:	e6 2e       	mov	r14, r22
    2e54:	f7 2e       	mov	r15, r23
    2e56:	08 2f       	mov	r16, r24
    2e58:	19 2f       	mov	r17, r25
    2e5a:	2a 2d       	mov	r18, r10
    2e5c:	3b 2d       	mov	r19, r11
    2e5e:	4c 2d       	mov	r20, r12
    2e60:	5d 2d       	mov	r21, r13
    2e62:	6e 2d       	mov	r22, r14
    2e64:	7f 2d       	mov	r23, r15
    2e66:	80 2f       	mov	r24, r16
    2e68:	91 2f       	mov	r25, r17
    2e6a:	a2 2c       	mov	r10, r2
    2e6c:	b3 2c       	mov	r11, r3
    2e6e:	c4 2c       	mov	r12, r4
    2e70:	d5 2c       	mov	r13, r5
    2e72:	e6 2c       	mov	r14, r6
    2e74:	f7 2c       	mov	r15, r7
    2e76:	08 2d       	mov	r16, r8
    2e78:	19 2d       	mov	r17, r9
    2e7a:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <__subdi3>
    2e7e:	a2 2e       	mov	r10, r18
    2e80:	b3 2e       	mov	r11, r19
    2e82:	c4 2e       	mov	r12, r20
    2e84:	d5 2e       	mov	r13, r21
    2e86:	e6 2e       	mov	r14, r22
    2e88:	f7 2e       	mov	r15, r23
    2e8a:	08 2f       	mov	r16, r24
    2e8c:	19 2f       	mov	r17, r25
    2e8e:	2a 2d       	mov	r18, r10
    2e90:	3b 2d       	mov	r19, r11
    2e92:	4c 2d       	mov	r20, r12
    2e94:	5d 2d       	mov	r21, r13
    2e96:	6e 2d       	mov	r22, r14
    2e98:	7f 2d       	mov	r23, r15
    2e9a:	80 2f       	mov	r24, r16
    2e9c:	91 2f       	mov	r25, r17
    2e9e:	03 e0       	ldi	r16, 0x03	; 3
    2ea0:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <__ashldi3>
    2ea4:	29 83       	std	Y+1, r18	; 0x01
    2ea6:	3a 83       	std	Y+2, r19	; 0x02
    2ea8:	4b 83       	std	Y+3, r20	; 0x03
    2eaa:	5c 83       	std	Y+4, r21	; 0x04
    2eac:	6d 83       	std	Y+5, r22	; 0x05
    2eae:	7e 83       	std	Y+6, r23	; 0x06
    2eb0:	8f 83       	std	Y+7, r24	; 0x07
    2eb2:	98 87       	std	Y+8, r25	; 0x08
    2eb4:	a9 80       	ldd	r10, Y+1	; 0x01
    2eb6:	ba 80       	ldd	r11, Y+2	; 0x02
    2eb8:	cb 80       	ldd	r12, Y+3	; 0x03
    2eba:	dc 80       	ldd	r13, Y+4	; 0x04
    2ebc:	ed 80       	ldd	r14, Y+5	; 0x05
    2ebe:	fe 80       	ldd	r15, Y+6	; 0x06
    2ec0:	0f 81       	ldd	r16, Y+7	; 0x07
    2ec2:	18 85       	ldd	r17, Y+8	; 0x08
    2ec4:	2a 2d       	mov	r18, r10
    2ec6:	3b 2d       	mov	r19, r11
    2ec8:	4c 2d       	mov	r20, r12
    2eca:	5d 2d       	mov	r21, r13
    2ecc:	6e 2d       	mov	r22, r14
    2ece:	7f 2d       	mov	r23, r15
    2ed0:	80 2f       	mov	r24, r16
    2ed2:	91 2f       	mov	r25, r17
    2ed4:	a2 2c       	mov	r10, r2
    2ed6:	b3 2c       	mov	r11, r3
    2ed8:	c4 2c       	mov	r12, r4
    2eda:	d5 2c       	mov	r13, r5
    2edc:	e6 2c       	mov	r14, r6
    2ede:	f7 2c       	mov	r15, r7
    2ee0:	08 2d       	mov	r16, r8
    2ee2:	19 2d       	mov	r17, r9
    2ee4:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <__adddi3>
    2ee8:	a2 2e       	mov	r10, r18
    2eea:	b3 2e       	mov	r11, r19
    2eec:	c4 2e       	mov	r12, r20
    2eee:	d5 2e       	mov	r13, r21
    2ef0:	e6 2e       	mov	r14, r22
    2ef2:	f7 2e       	mov	r15, r23
    2ef4:	08 2f       	mov	r16, r24
    2ef6:	19 2f       	mov	r17, r25
    2ef8:	2a 2d       	mov	r18, r10
    2efa:	3b 2d       	mov	r19, r11
    2efc:	4c 2d       	mov	r20, r12
    2efe:	5d 2d       	mov	r21, r13
    2f00:	6e 2d       	mov	r22, r14
    2f02:	7f 2d       	mov	r23, r15
    2f04:	80 2f       	mov	r24, r16
    2f06:	91 2f       	mov	r25, r17
    2f08:	03 e0       	ldi	r16, 0x03	; 3
    2f0a:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <__ashldi3>
    2f0e:	22 2e       	mov	r2, r18
    2f10:	33 2e       	mov	r3, r19
    2f12:	44 2e       	mov	r4, r20
    2f14:	55 2e       	mov	r5, r21
    2f16:	66 2e       	mov	r6, r22
    2f18:	77 2e       	mov	r7, r23
    2f1a:	88 2e       	mov	r8, r24
    2f1c:	99 2e       	mov	r9, r25
    2f1e:	a2 2c       	mov	r10, r2
    2f20:	b3 2c       	mov	r11, r3
    2f22:	c4 2c       	mov	r12, r4
    2f24:	d5 2c       	mov	r13, r5
    2f26:	e6 2c       	mov	r14, r6
    2f28:	f7 2c       	mov	r15, r7
    2f2a:	08 2d       	mov	r16, r8
    2f2c:	19 2d       	mov	r17, r9
    2f2e:	2a 2c       	mov	r2, r10
    2f30:	3b 2c       	mov	r3, r11
    2f32:	4c 2c       	mov	r4, r12
    2f34:	5d 2c       	mov	r5, r13
    2f36:	6e 2c       	mov	r6, r14
    2f38:	7f 2c       	mov	r7, r15
    2f3a:	80 2e       	mov	r8, r16
    2f3c:	91 2e       	mov	r9, r17
    2f3e:	22 2d       	mov	r18, r2
    2f40:	33 2d       	mov	r19, r3
    2f42:	44 2d       	mov	r20, r4
    2f44:	55 2d       	mov	r21, r5
    2f46:	66 2d       	mov	r22, r6
    2f48:	77 2d       	mov	r23, r7
    2f4a:	88 2d       	mov	r24, r8
    2f4c:	99 2d       	mov	r25, r9
    2f4e:	29 51       	subi	r18, 0x19	; 25
    2f50:	3c 4f       	sbci	r19, 0xFC	; 252
    2f52:	4f 4f       	sbci	r20, 0xFF	; 255
    2f54:	5f 4f       	sbci	r21, 0xFF	; 255
    2f56:	6f 4f       	sbci	r22, 0xFF	; 255
    2f58:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5e:	a2 2e       	mov	r10, r18
    2f60:	b3 2e       	mov	r11, r19
    2f62:	c4 2e       	mov	r12, r20
    2f64:	d5 2e       	mov	r13, r21
    2f66:	e6 2e       	mov	r14, r22
    2f68:	f7 2e       	mov	r15, r23
    2f6a:	08 2f       	mov	r16, r24
    2f6c:	19 2f       	mov	r17, r25
    2f6e:	2a 2d       	mov	r18, r10
    2f70:	3b 2d       	mov	r19, r11
    2f72:	4c 2d       	mov	r20, r12
    2f74:	5d 2d       	mov	r21, r13
    2f76:	6e 2d       	mov	r22, r14
    2f78:	7f 2d       	mov	r23, r15
    2f7a:	80 2f       	mov	r24, r16
    2f7c:	91 2f       	mov	r25, r17
    2f7e:	0e 94 40 2a 	call	0x5480	; 0x5480 <__floatundisf>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e8       	ldi	r19, 0x80	; 128
    2f8a:	4b eb       	ldi	r20, 0xBB	; 187
    2f8c:	55 e4       	ldi	r21, 0x45	; 69
    2f8e:	bc 01       	movw	r22, r24
    2f90:	cd 01       	movw	r24, r26
    2f92:	0e 94 2c 29 	call	0x5258	; 0x5258 <__divsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	bc 01       	movw	r22, r24
    2f9c:	cd 01       	movw	r24, r26
    2f9e:	0e 94 99 29 	call	0x5332	; 0x5332 <__fixunssfdi>
    2fa2:	a2 2e       	mov	r10, r18
    2fa4:	b3 2e       	mov	r11, r19
    2fa6:	c4 2e       	mov	r12, r20
    2fa8:	d5 2e       	mov	r13, r21
    2faa:	e6 2e       	mov	r14, r22
    2fac:	f7 2e       	mov	r15, r23
    2fae:	08 2f       	mov	r16, r24
    2fb0:	19 2f       	mov	r17, r25
    2fb2:	d6 01       	movw	r26, r12
    2fb4:	c5 01       	movw	r24, r10
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	9b de       	rcall	.-714    	; 0x2cf2 <__portable_avr_delay_cycles>
	printf("\nPACKET COUNT--------CURRENT ALTITUDE----MS PRESSURE---------INTERNAL TEMP-------EXTERNAL TEMP-------LATITUDE------------LONGITUDE-----------READ ALT------------SAT NUMBER----------GPS SPEED-----------ABG GEIGER----------BG GEIGER-----------ACCEL X-------------ACCEL Y-------------ACCEL Z\n");
    2fbc:	81 e2       	ldi	r24, 0x21	; 33
    2fbe:	90 e2       	ldi	r25, 0x20	; 32
    2fc0:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <puts>
	
	
	while(1){
		//while loop and chill
	}
    2fc4:	ff cf       	rjmp	.-2      	; 0x2fc4 <main+0x214>

00002fc6 <__vector_66>:
}

ISR(PORTA_INT0_vect){ //Every time alpha geiger sends us a ping, throw this interrupt 
    2fc6:	1f 92       	push	r1
    2fc8:	0f 92       	push	r0
    2fca:	00 90 3f 00 	lds	r0, 0x003F
    2fce:	0f 92       	push	r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	2f 93       	push	r18
    2fd4:	3f 93       	push	r19
    2fd6:	4f 93       	push	r20
    2fd8:	5f 93       	push	r21
    2fda:	6f 93       	push	r22
    2fdc:	7f 93       	push	r23
    2fde:	8f 93       	push	r24
    2fe0:	9f 93       	push	r25
    2fe2:	af 93       	push	r26
    2fe4:	bf 93       	push	r27
    2fe6:	ef 93       	push	r30
    2fe8:	ff 93       	push	r31
    2fea:	cf 93       	push	r28
    2fec:	df 93       	push	r29
    2fee:	00 d0       	rcall	.+0      	; 0x2ff0 <__vector_66+0x2a>
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2ff4:	8f e3       	ldi	r24, 0x3F	; 63
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	80 81       	ld	r24, Z
    2ffc:	8a 83       	std	Y+2, r24	; 0x02
    2ffe:	bb de       	rcall	.-650    	; 0x2d76 <__iCliRetVal>
    3000:	89 83       	std	Y+1, r24	; 0x01
    3002:	0a c0       	rjmp	.+20     	; 0x3018 <__stack+0x19>

		ABG_geiger++;
    3004:	80 91 b4 21 	lds	r24, 0x21B4
    3008:	90 91 b5 21 	lds	r25, 0x21B5
    300c:	01 96       	adiw	r24, 0x01	; 1
    300e:	80 93 b4 21 	sts	0x21B4, r24
    3012:	90 93 b5 21 	sts	0x21B5, r25
		//while loop and chill
	}
}

ISR(PORTA_INT0_vect){ //Every time alpha geiger sends us a ping, throw this interrupt 
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3016:	19 82       	std	Y+1, r1	; 0x01
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	88 23       	and	r24, r24
    301c:	99 f7       	brne	.-26     	; 0x3004 <__stack+0x5>
    301e:	ce 01       	movw	r24, r28
    3020:	02 96       	adiw	r24, 0x02	; 2
    3022:	b2 de       	rcall	.-668    	; 0x2d88 <__iRestore>

		ABG_geiger++;
		
	}
}
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	df 91       	pop	r29
    302a:	cf 91       	pop	r28
    302c:	ff 91       	pop	r31
    302e:	ef 91       	pop	r30
    3030:	bf 91       	pop	r27
    3032:	af 91       	pop	r26
    3034:	9f 91       	pop	r25
    3036:	8f 91       	pop	r24
    3038:	7f 91       	pop	r23
    303a:	6f 91       	pop	r22
    303c:	5f 91       	pop	r21
    303e:	4f 91       	pop	r20
    3040:	3f 91       	pop	r19
    3042:	2f 91       	pop	r18
    3044:	0f 90       	pop	r0
    3046:	00 92 3f 00 	sts	0x003F, r0
    304a:	0f 90       	pop	r0
    304c:	1f 90       	pop	r1
    304e:	18 95       	reti

00003050 <__vector_67>:

ISR(PORTA_INT1_vect){ //Every time beta geiger sends us a ping, throw this interrupt
    3050:	1f 92       	push	r1
    3052:	0f 92       	push	r0
    3054:	00 90 3f 00 	lds	r0, 0x003F
    3058:	0f 92       	push	r0
    305a:	11 24       	eor	r1, r1
    305c:	2f 93       	push	r18
    305e:	3f 93       	push	r19
    3060:	4f 93       	push	r20
    3062:	5f 93       	push	r21
    3064:	6f 93       	push	r22
    3066:	7f 93       	push	r23
    3068:	8f 93       	push	r24
    306a:	9f 93       	push	r25
    306c:	af 93       	push	r26
    306e:	bf 93       	push	r27
    3070:	ef 93       	push	r30
    3072:	ff 93       	push	r31
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	00 d0       	rcall	.+0      	; 0x307a <__vector_67+0x2a>
    307a:	cd b7       	in	r28, 0x3d	; 61
    307c:	de b7       	in	r29, 0x3e	; 62
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    307e:	8f e3       	ldi	r24, 0x3F	; 63
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	fc 01       	movw	r30, r24
    3084:	80 81       	ld	r24, Z
    3086:	8a 83       	std	Y+2, r24	; 0x02
    3088:	76 de       	rcall	.-788    	; 0x2d76 <__iCliRetVal>
    308a:	89 83       	std	Y+1, r24	; 0x01
    308c:	0a c0       	rjmp	.+20     	; 0x30a2 <__vector_67+0x52>

		BG_geiger++;
    308e:	80 91 b6 21 	lds	r24, 0x21B6
    3092:	90 91 b7 21 	lds	r25, 0x21B7
    3096:	01 96       	adiw	r24, 0x01	; 1
    3098:	80 93 b6 21 	sts	0x21B6, r24
    309c:	90 93 b7 21 	sts	0x21B7, r25
		
	}
}

ISR(PORTA_INT1_vect){ //Every time beta geiger sends us a ping, throw this interrupt
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    30a0:	19 82       	std	Y+1, r1	; 0x01
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	88 23       	and	r24, r24
    30a6:	99 f7       	brne	.-26     	; 0x308e <__vector_67+0x3e>
    30a8:	ce 01       	movw	r24, r28
    30aa:	02 96       	adiw	r24, 0x02	; 2
    30ac:	6d de       	rcall	.-806    	; 0x2d88 <__iRestore>

		BG_geiger++;
		
	}
}
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	ff 91       	pop	r31
    30b8:	ef 91       	pop	r30
    30ba:	bf 91       	pop	r27
    30bc:	af 91       	pop	r26
    30be:	9f 91       	pop	r25
    30c0:	8f 91       	pop	r24
    30c2:	7f 91       	pop	r23
    30c4:	6f 91       	pop	r22
    30c6:	5f 91       	pop	r21
    30c8:	4f 91       	pop	r20
    30ca:	3f 91       	pop	r19
    30cc:	2f 91       	pop	r18
    30ce:	0f 90       	pop	r0
    30d0:	00 92 3f 00 	sts	0x003F, r0
    30d4:	0f 90       	pop	r0
    30d6:	1f 90       	pop	r1
    30d8:	18 95       	reti

000030da <__vector_14>:

ISR(TCC0_OVF_vect){ //Each second throw the interrupt and do this function
    30da:	1f 92       	push	r1
    30dc:	0f 92       	push	r0
    30de:	00 90 3f 00 	lds	r0, 0x003F
    30e2:	0f 92       	push	r0
    30e4:	11 24       	eor	r1, r1
    30e6:	2f 93       	push	r18
    30e8:	3f 93       	push	r19
    30ea:	4f 93       	push	r20
    30ec:	5f 93       	push	r21
    30ee:	6f 93       	push	r22
    30f0:	7f 93       	push	r23
    30f2:	8f 93       	push	r24
    30f4:	9f 93       	push	r25
    30f6:	af 93       	push	r26
    30f8:	bf 93       	push	r27
    30fa:	ef 93       	push	r30
    30fc:	ff 93       	push	r31
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	00 d0       	rcall	.+0      	; 0x3104 <__vector_14+0x2a>
    3104:	cd b7       	in	r28, 0x3d	; 61
    3106:	de b7       	in	r29, 0x3e	; 62
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3108:	8f e3       	ldi	r24, 0x3F	; 63
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	fc 01       	movw	r30, r24
    310e:	80 81       	ld	r24, Z
    3110:	8a 83       	std	Y+2, r24	; 0x02
    3112:	31 de       	rcall	.-926    	; 0x2d76 <__iCliRetVal>
    3114:	89 83       	std	Y+1, r24	; 0x01
    3116:	0b c0       	rjmp	.+22     	; 0x312e <__vector_14+0x54>

		sendTelemetry();
    3118:	0e 94 dd 24 	call	0x49ba	; 0x49ba <sendTelemetry>
		ABG_geiger = 0;//reset geiger counter readings to zero
    311c:	10 92 b4 21 	sts	0x21B4, r1
    3120:	10 92 b5 21 	sts	0x21B5, r1
		BG_geiger = 0;
    3124:	10 92 b6 21 	sts	0x21B6, r1
    3128:	10 92 b7 21 	sts	0x21B7, r1
		
	}
}

ISR(TCC0_OVF_vect){ //Each second throw the interrupt and do this function
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    312c:	19 82       	std	Y+1, r1	; 0x01
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	88 23       	and	r24, r24
    3132:	91 f7       	brne	.-28     	; 0x3118 <__vector_14+0x3e>
    3134:	ce 01       	movw	r24, r28
    3136:	02 96       	adiw	r24, 0x02	; 2
    3138:	27 de       	rcall	.-946    	; 0x2d88 <__iRestore>
		sendTelemetry();
		ABG_geiger = 0;//reset geiger counter readings to zero
		BG_geiger = 0;
		
	}
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
    313e:	df 91       	pop	r29
    3140:	cf 91       	pop	r28
    3142:	ff 91       	pop	r31
    3144:	ef 91       	pop	r30
    3146:	bf 91       	pop	r27
    3148:	af 91       	pop	r26
    314a:	9f 91       	pop	r25
    314c:	8f 91       	pop	r24
    314e:	7f 91       	pop	r23
    3150:	6f 91       	pop	r22
    3152:	5f 91       	pop	r21
    3154:	4f 91       	pop	r20
    3156:	3f 91       	pop	r19
    3158:	2f 91       	pop	r18
    315a:	0f 90       	pop	r0
    315c:	00 92 3f 00 	sts	0x003F, r0
    3160:	0f 90       	pop	r0
    3162:	1f 90       	pop	r1
    3164:	18 95       	reti

00003166 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    3166:	cf 93       	push	r28
    3168:	df 93       	push	r29
    316a:	1f 92       	push	r1
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
    3170:	8f e3       	ldi	r24, 0x3F	; 63
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	fc 01       	movw	r30, r24
    3176:	80 81       	ld	r24, Z
    3178:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    317a:	f8 94       	cli
	return flags;
    317c:	89 81       	ldd	r24, Y+1	; 0x01
}
    317e:	0f 90       	pop	r0
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	08 95       	ret

00003186 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    3186:	cf 93       	push	r28
    3188:	df 93       	push	r29
    318a:	1f 92       	push	r1
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
    3190:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    3192:	8f e3       	ldi	r24, 0x3F	; 63
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	29 81       	ldd	r18, Y+1	; 0x01
    3198:	fc 01       	movw	r30, r24
    319a:	20 83       	st	Z, r18
}
    319c:	0f 90       	pop	r0
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	08 95       	ret

000031a4 <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
    31a4:	cf 93       	push	r28
    31a6:	df 93       	push	r29
    31a8:	00 d0       	rcall	.+0      	; 0x31aa <osc_enable_internal+0x6>
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    31b0:	da df       	rcall	.-76     	; 0x3166 <cpu_irq_save>
    31b2:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    31b4:	80 e5       	ldi	r24, 0x50	; 80
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	20 e5       	ldi	r18, 0x50	; 80
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	f9 01       	movw	r30, r18
    31be:	30 81       	ld	r19, Z
    31c0:	2a 81       	ldd	r18, Y+2	; 0x02
    31c2:	23 2b       	or	r18, r19
    31c4:	fc 01       	movw	r30, r24
    31c6:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	dd df       	rcall	.-70     	; 0x3186 <cpu_irq_restore>
}
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	df 91       	pop	r29
    31d2:	cf 91       	pop	r28
    31d4:	08 95       	ret

000031d6 <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
    31da:	00 d0       	rcall	.+0      	; 0x31dc <osc_enable_external+0x6>
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    31e2:	80 e5       	ldi	r24, 0x50	; 80
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	fc 01       	movw	r30, r24
    31e8:	12 82       	std	Z+2, r1	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
    31ea:	bd df       	rcall	.-134    	; 0x3166 <cpu_irq_save>
    31ec:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
    31ee:	80 e5       	ldi	r24, 0x50	; 80
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	20 e5       	ldi	r18, 0x50	; 80
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	f9 01       	movw	r30, r18
    31f8:	30 81       	ld	r19, Z
    31fa:	2a 81       	ldd	r18, Y+2	; 0x02
    31fc:	23 2b       	or	r18, r19
    31fe:	fc 01       	movw	r30, r24
    3200:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	c0 df       	rcall	.-128    	; 0x3186 <cpu_irq_restore>
}
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	08 95       	ret

00003210 <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	00 d0       	rcall	.+0      	; 0x3216 <osc_disable+0x6>
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
    321a:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    321c:	a4 df       	rcall	.-184    	; 0x3166 <cpu_irq_save>
    321e:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
    3220:	80 e5       	ldi	r24, 0x50	; 80
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	20 e5       	ldi	r18, 0x50	; 80
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	f9 01       	movw	r30, r18
    322a:	20 81       	ld	r18, Z
    322c:	32 2f       	mov	r19, r18
    322e:	2a 81       	ldd	r18, Y+2	; 0x02
    3230:	20 95       	com	r18
    3232:	23 23       	and	r18, r19
    3234:	fc 01       	movw	r30, r24
    3236:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	a5 df       	rcall	.-182    	; 0x3186 <cpu_irq_restore>
}
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	08 95       	ret

00003246 <osc_enable>:

static inline void osc_enable(uint8_t id)
{
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	1f 92       	push	r1
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	88 30       	cpi	r24, 0x08	; 8
    3256:	19 f0       	breq	.+6      	; 0x325e <osc_enable+0x18>
		osc_enable_internal(id);
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	a4 df       	rcall	.-184    	; 0x31a4 <osc_enable_internal>
    325c:	02 c0       	rjmp	.+4      	; 0x3262 <osc_enable+0x1c>
	} else {
		osc_enable_external(id);
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	ba df       	rcall	.-140    	; 0x31d6 <osc_enable_external>
	}
}
    3262:	0f 90       	pop	r0
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	08 95       	ret

0000326a <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
    326a:	cf 93       	push	r28
    326c:	df 93       	push	r29
    326e:	1f 92       	push	r1
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3276:	80 e5       	ldi	r24, 0x50	; 80
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	fc 01       	movw	r30, r24
    327c:	91 81       	ldd	r25, Z+1	; 0x01
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	98 23       	and	r25, r24
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	99 23       	and	r25, r25
    3286:	09 f4       	brne	.+2      	; 0x328a <osc_is_ready+0x20>
    3288:	80 e0       	ldi	r24, 0x00	; 0
}
    328a:	0f 90       	pop	r0
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	08 95       	ret

00003292 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    3292:	cf 93       	push	r28
    3294:	df 93       	push	r29
    3296:	1f 92       	push	r1
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
    329e:	00 00       	nop
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	e3 df       	rcall	.-58     	; 0x326a <osc_is_ready>
    32a4:	98 2f       	mov	r25, r24
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	89 27       	eor	r24, r25
    32aa:	88 23       	and	r24, r24
    32ac:	c9 f7       	brne	.-14     	; 0x32a0 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
    32ae:	0f 90       	pop	r0
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	08 95       	ret

000032b6 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	00 d0       	rcall	.+0      	; 0x32bc <sysclk_init+0x6>
    32bc:	00 d0       	rcall	.+0      	; 0x32be <sysclk_init+0x8>
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
    32c2:	80 e7       	ldi	r24, 0x70	; 112
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
    32ca:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    32cc:	1b 82       	std	Y+3, r1	; 0x03
    32ce:	0d c0       	rjmp	.+26     	; 0x32ea <sysclk_init+0x34>
		*(reg++) = 0xff;
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	9a 81       	ldd	r25, Y+2	; 0x02
    32d4:	9c 01       	movw	r18, r24
    32d6:	2f 5f       	subi	r18, 0xFF	; 255
    32d8:	3f 4f       	sbci	r19, 0xFF	; 255
    32da:	29 83       	std	Y+1, r18	; 0x01
    32dc:	3a 83       	std	Y+2, r19	; 0x02
    32de:	2f ef       	ldi	r18, 0xFF	; 255
    32e0:	fc 01       	movw	r30, r24
    32e2:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
    32e4:	8b 81       	ldd	r24, Y+3	; 0x03
    32e6:	8f 5f       	subi	r24, 0xFF	; 255
    32e8:	8b 83       	std	Y+3, r24	; 0x03
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	87 30       	cpi	r24, 0x07	; 7
    32ee:	80 f3       	brcs	.-32     	; 0x32d0 <sysclk_init+0x1a>
	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RC2MHZ) {
		need_rc2mhz = true;
	} else {
		switch (CONFIG_SYSCLK_SOURCE) {
		case SYSCLK_SRC_RC32MHZ:
			osc_enable(OSC_ID_RC32MHZ);
    32f0:	82 e0       	ldi	r24, 0x02	; 2
    32f2:	a9 df       	rcall	.-174    	; 0x3246 <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
    32f4:	82 e0       	ldi	r24, 0x02	; 2
    32f6:	cd df       	rcall	.-102    	; 0x3292 <osc_wait_ready>
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
			break;
    32f8:	00 00       	nop
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    32fa:	61 e0       	ldi	r22, 0x01	; 1
    32fc:	80 e4       	ldi	r24, 0x40	; 64
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	f9 d2       	rcall	.+1522   	; 0x38f4 <ccp_write_io>
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
    3302:	8c 81       	ldd	r24, Y+4	; 0x04
    3304:	88 23       	and	r24, r24
    3306:	11 f4       	brne	.+4      	; 0x330c <sysclk_init+0x56>
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	82 df       	rcall	.-252    	; 0x3210 <osc_disable>
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    330c:	24 96       	adiw	r28, 0x04	; 4
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	df 91       	pop	r29
    3314:	cf 91       	pop	r28
    3316:	08 95       	ret

00003318 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    3318:	cf 93       	push	r28
    331a:	df 93       	push	r29
    331c:	00 d0       	rcall	.+0      	; 0x331e <sysclk_enable_module+0x6>
    331e:	1f 92       	push	r1
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	8a 83       	std	Y+2, r24	; 0x02
    3326:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
    3328:	1e df       	rcall	.-452    	; 0x3166 <cpu_irq_save>
    332a:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	88 2f       	mov	r24, r24
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	80 59       	subi	r24, 0x90	; 144
    3334:	9f 4f       	sbci	r25, 0xFF	; 255
    3336:	2a 81       	ldd	r18, Y+2	; 0x02
    3338:	22 2f       	mov	r18, r18
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	20 59       	subi	r18, 0x90	; 144
    333e:	3f 4f       	sbci	r19, 0xFF	; 255
    3340:	f9 01       	movw	r30, r18
    3342:	20 81       	ld	r18, Z
    3344:	32 2f       	mov	r19, r18
    3346:	2b 81       	ldd	r18, Y+3	; 0x03
    3348:	20 95       	com	r18
    334a:	23 23       	and	r18, r19
    334c:	fc 01       	movw	r30, r24
    334e:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	19 df       	rcall	.-462    	; 0x3186 <cpu_irq_restore>
}
    3354:	23 96       	adiw	r28, 0x03	; 3
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	de bf       	out	0x3e, r29	; 62
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	08 95       	ret

00003360 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    3360:	cf 93       	push	r28
    3362:	df 93       	push	r29
    3364:	00 d0       	rcall	.+0      	; 0x3366 <_read+0x6>
    3366:	1f 92       	push	r1
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	8a 83       	std	Y+2, r24	; 0x02
    336e:	9b 83       	std	Y+3, r25	; 0x03
	char c;
	ptr_get(stdio_base,&c);
    3370:	20 91 70 28 	lds	r18, 0x2870
    3374:	30 91 71 28 	lds	r19, 0x2871
    3378:	80 91 74 28 	lds	r24, 0x2874
    337c:	90 91 75 28 	lds	r25, 0x2875
    3380:	ae 01       	movw	r20, r28
    3382:	4f 5f       	subi	r20, 0xFF	; 255
    3384:	5f 4f       	sbci	r21, 0xFF	; 255
    3386:	ba 01       	movw	r22, r20
    3388:	f9 01       	movw	r30, r18
    338a:	09 95       	icall
	return c;
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	08 2e       	mov	r0, r24
    3390:	00 0c       	add	r0, r0
    3392:	99 0b       	sbc	r25, r25
}
    3394:	23 96       	adiw	r28, 0x03	; 3
    3396:	cd bf       	out	0x3d, r28	; 61
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	df 91       	pop	r29
    339c:	cf 91       	pop	r28
    339e:	08 95       	ret

000033a0 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <_write+0x6>
    33a6:	1f 92       	push	r1
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	89 83       	std	Y+1, r24	; 0x01
    33ae:	6a 83       	std	Y+2, r22	; 0x02
    33b0:	7b 83       	std	Y+3, r23	; 0x03
	if (ptr_put(stdio_base, c) < 0) {
    33b2:	20 91 72 28 	lds	r18, 0x2872
    33b6:	30 91 73 28 	lds	r19, 0x2873
    33ba:	80 91 74 28 	lds	r24, 0x2874
    33be:	90 91 75 28 	lds	r25, 0x2875
    33c2:	69 81       	ldd	r22, Y+1	; 0x01
    33c4:	f9 01       	movw	r30, r18
    33c6:	09 95       	icall
    33c8:	99 23       	and	r25, r25
    33ca:	1c f4       	brge	.+6      	; 0x33d2 <_write+0x32>
		return -1;
    33cc:	8f ef       	ldi	r24, 0xFF	; 255
    33ce:	9f ef       	ldi	r25, 0xFF	; 255
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <_write+0x36>
	}
	return 1;
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	90 e0       	ldi	r25, 0x00	; 0
}
    33d6:	23 96       	adiw	r28, 0x03	; 3
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	08 95       	ret

000033e2 <__vector_68>:
 *
 * This function will handle interrupt on analog comparator A channel 0 and
 * call the analog comparator channel A callback function.
 */
ISR(ACA_AC0_vect)
{
    33e2:	1f 92       	push	r1
    33e4:	0f 92       	push	r0
    33e6:	00 90 3f 00 	lds	r0, 0x003F
    33ea:	0f 92       	push	r0
    33ec:	11 24       	eor	r1, r1
    33ee:	2f 93       	push	r18
    33f0:	3f 93       	push	r19
    33f2:	4f 93       	push	r20
    33f4:	5f 93       	push	r21
    33f6:	6f 93       	push	r22
    33f8:	7f 93       	push	r23
    33fa:	8f 93       	push	r24
    33fc:	9f 93       	push	r25
    33fe:	af 93       	push	r26
    3400:	bf 93       	push	r27
    3402:	ef 93       	push	r30
    3404:	ff 93       	push	r31
    3406:	cf 93       	push	r28
    3408:	df 93       	push	r29
    340a:	cd b7       	in	r28, 0x3d	; 61
    340c:	de b7       	in	r29, 0x3e	; 62
	if (ac_aca_callback) {
    340e:	80 91 ba 21 	lds	r24, 0x21BA
    3412:	90 91 bb 21 	lds	r25, 0x21BB
    3416:	89 2b       	or	r24, r25
    3418:	f9 f0       	breq	.+62     	; 0x3458 <__vector_68+0x76>
		if (ACA.STATUS & AC_AC0STATE_bm) {
    341a:	80 e8       	ldi	r24, 0x80	; 128
    341c:	93 e0       	ldi	r25, 0x03	; 3
    341e:	fc 01       	movw	r30, r24
    3420:	87 81       	ldd	r24, Z+7	; 0x07
    3422:	88 2f       	mov	r24, r24
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	80 71       	andi	r24, 0x10	; 16
    3428:	99 27       	eor	r25, r25
    342a:	89 2b       	or	r24, r25
    342c:	59 f0       	breq	.+22     	; 0x3444 <__vector_68+0x62>
			ac_aca_callback(&ACA, 0, AC_STATUS_ABOVE);
    342e:	20 91 ba 21 	lds	r18, 0x21BA
    3432:	30 91 bb 21 	lds	r19, 0x21BB
    3436:	40 e0       	ldi	r20, 0x00	; 0
    3438:	60 e0       	ldi	r22, 0x00	; 0
    343a:	80 e8       	ldi	r24, 0x80	; 128
    343c:	93 e0       	ldi	r25, 0x03	; 3
    343e:	f9 01       	movw	r30, r18
    3440:	09 95       	icall
    3442:	0a c0       	rjmp	.+20     	; 0x3458 <__vector_68+0x76>
		}
		else {
			ac_aca_callback(&ACA, 0, AC_STATUS_BELOW);
    3444:	20 91 ba 21 	lds	r18, 0x21BA
    3448:	30 91 bb 21 	lds	r19, 0x21BB
    344c:	40 e8       	ldi	r20, 0x80	; 128
    344e:	60 e0       	ldi	r22, 0x00	; 0
    3450:	80 e8       	ldi	r24, 0x80	; 128
    3452:	93 e0       	ldi	r25, 0x03	; 3
    3454:	f9 01       	movw	r30, r18
    3456:	09 95       	icall
		}
	}
}
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	ff 91       	pop	r31
    345e:	ef 91       	pop	r30
    3460:	bf 91       	pop	r27
    3462:	af 91       	pop	r26
    3464:	9f 91       	pop	r25
    3466:	8f 91       	pop	r24
    3468:	7f 91       	pop	r23
    346a:	6f 91       	pop	r22
    346c:	5f 91       	pop	r21
    346e:	4f 91       	pop	r20
    3470:	3f 91       	pop	r19
    3472:	2f 91       	pop	r18
    3474:	0f 90       	pop	r0
    3476:	00 92 3f 00 	sts	0x003F, r0
    347a:	0f 90       	pop	r0
    347c:	1f 90       	pop	r1
    347e:	18 95       	reti

00003480 <__vector_69>:
 *
 * This function will handle interrupt on analog comparator A channel 1 and
 * call the analog comparator channel A callback function.
 */
ISR(ACA_AC1_vect)
{
    3480:	1f 92       	push	r1
    3482:	0f 92       	push	r0
    3484:	00 90 3f 00 	lds	r0, 0x003F
    3488:	0f 92       	push	r0
    348a:	11 24       	eor	r1, r1
    348c:	2f 93       	push	r18
    348e:	3f 93       	push	r19
    3490:	4f 93       	push	r20
    3492:	5f 93       	push	r21
    3494:	6f 93       	push	r22
    3496:	7f 93       	push	r23
    3498:	8f 93       	push	r24
    349a:	9f 93       	push	r25
    349c:	af 93       	push	r26
    349e:	bf 93       	push	r27
    34a0:	ef 93       	push	r30
    34a2:	ff 93       	push	r31
    34a4:	cf 93       	push	r28
    34a6:	df 93       	push	r29
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
	if (ac_aca_callback) {
    34ac:	80 91 ba 21 	lds	r24, 0x21BA
    34b0:	90 91 bb 21 	lds	r25, 0x21BB
    34b4:	89 2b       	or	r24, r25
    34b6:	f9 f0       	breq	.+62     	; 0x34f6 <__vector_69+0x76>
		if (ACA.STATUS & AC_AC1STATE_bm) {
    34b8:	80 e8       	ldi	r24, 0x80	; 128
    34ba:	93 e0       	ldi	r25, 0x03	; 3
    34bc:	fc 01       	movw	r30, r24
    34be:	87 81       	ldd	r24, Z+7	; 0x07
    34c0:	88 2f       	mov	r24, r24
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	80 72       	andi	r24, 0x20	; 32
    34c6:	99 27       	eor	r25, r25
    34c8:	89 2b       	or	r24, r25
    34ca:	59 f0       	breq	.+22     	; 0x34e2 <__vector_69+0x62>
			ac_aca_callback(&ACA, 1, AC_STATUS_ABOVE);
    34cc:	20 91 ba 21 	lds	r18, 0x21BA
    34d0:	30 91 bb 21 	lds	r19, 0x21BB
    34d4:	40 e0       	ldi	r20, 0x00	; 0
    34d6:	61 e0       	ldi	r22, 0x01	; 1
    34d8:	80 e8       	ldi	r24, 0x80	; 128
    34da:	93 e0       	ldi	r25, 0x03	; 3
    34dc:	f9 01       	movw	r30, r18
    34de:	09 95       	icall
    34e0:	0a c0       	rjmp	.+20     	; 0x34f6 <__vector_69+0x76>
		}
		else {
			ac_aca_callback(&ACA, 1, AC_STATUS_BELOW);
    34e2:	20 91 ba 21 	lds	r18, 0x21BA
    34e6:	30 91 bb 21 	lds	r19, 0x21BB
    34ea:	40 e8       	ldi	r20, 0x80	; 128
    34ec:	61 e0       	ldi	r22, 0x01	; 1
    34ee:	80 e8       	ldi	r24, 0x80	; 128
    34f0:	93 e0       	ldi	r25, 0x03	; 3
    34f2:	f9 01       	movw	r30, r18
    34f4:	09 95       	icall
		}
	}
}
    34f6:	df 91       	pop	r29
    34f8:	cf 91       	pop	r28
    34fa:	ff 91       	pop	r31
    34fc:	ef 91       	pop	r30
    34fe:	bf 91       	pop	r27
    3500:	af 91       	pop	r26
    3502:	9f 91       	pop	r25
    3504:	8f 91       	pop	r24
    3506:	7f 91       	pop	r23
    3508:	6f 91       	pop	r22
    350a:	5f 91       	pop	r21
    350c:	4f 91       	pop	r20
    350e:	3f 91       	pop	r19
    3510:	2f 91       	pop	r18
    3512:	0f 90       	pop	r0
    3514:	00 92 3f 00 	sts	0x003F, r0
    3518:	0f 90       	pop	r0
    351a:	1f 90       	pop	r1
    351c:	18 95       	reti

0000351e <__vector_70>:
 *
 * This function will handle interrupt on analog comparator A in window mode
 * and call the analog comparator channel A callback function.
 */
ISR(ACA_ACW_vect)
{
    351e:	1f 92       	push	r1
    3520:	0f 92       	push	r0
    3522:	00 90 3f 00 	lds	r0, 0x003F
    3526:	0f 92       	push	r0
    3528:	11 24       	eor	r1, r1
    352a:	2f 93       	push	r18
    352c:	3f 93       	push	r19
    352e:	4f 93       	push	r20
    3530:	5f 93       	push	r21
    3532:	6f 93       	push	r22
    3534:	7f 93       	push	r23
    3536:	8f 93       	push	r24
    3538:	9f 93       	push	r25
    353a:	af 93       	push	r26
    353c:	bf 93       	push	r27
    353e:	ef 93       	push	r30
    3540:	ff 93       	push	r31
    3542:	cf 93       	push	r28
    3544:	df 93       	push	r29
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
	if (ac_aca_callback) {
    354a:	80 91 ba 21 	lds	r24, 0x21BA
    354e:	90 91 bb 21 	lds	r25, 0x21BB
    3552:	89 2b       	or	r24, r25
    3554:	79 f0       	breq	.+30     	; 0x3574 <__vector_70+0x56>
		ac_aca_callback(&ACA, 0, (enum ac_status_t)(ACA.STATUS &
    3556:	20 91 ba 21 	lds	r18, 0x21BA
    355a:	30 91 bb 21 	lds	r19, 0x21BB
    355e:	80 e8       	ldi	r24, 0x80	; 128
    3560:	93 e0       	ldi	r25, 0x03	; 3
    3562:	fc 01       	movw	r30, r24
    3564:	87 81       	ldd	r24, Z+7	; 0x07
    3566:	80 7c       	andi	r24, 0xC0	; 192
    3568:	48 2f       	mov	r20, r24
    356a:	60 e0       	ldi	r22, 0x00	; 0
    356c:	80 e8       	ldi	r24, 0x80	; 128
    356e:	93 e0       	ldi	r25, 0x03	; 3
    3570:	f9 01       	movw	r30, r18
    3572:	09 95       	icall
					AC_WSTATE_gm));
	}
}
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	ff 91       	pop	r31
    357a:	ef 91       	pop	r30
    357c:	bf 91       	pop	r27
    357e:	af 91       	pop	r26
    3580:	9f 91       	pop	r25
    3582:	8f 91       	pop	r24
    3584:	7f 91       	pop	r23
    3586:	6f 91       	pop	r22
    3588:	5f 91       	pop	r21
    358a:	4f 91       	pop	r20
    358c:	3f 91       	pop	r19
    358e:	2f 91       	pop	r18
    3590:	0f 90       	pop	r0
    3592:	00 92 3f 00 	sts	0x003F, r0
    3596:	0f 90       	pop	r0
    3598:	1f 90       	pop	r1
    359a:	18 95       	reti

0000359c <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    359c:	1f 92       	push	r1
    359e:	0f 92       	push	r0
    35a0:	00 90 3f 00 	lds	r0, 0x003F
    35a4:	0f 92       	push	r0
    35a6:	11 24       	eor	r1, r1
    35a8:	2f 93       	push	r18
    35aa:	3f 93       	push	r19
    35ac:	4f 93       	push	r20
    35ae:	5f 93       	push	r21
    35b0:	6f 93       	push	r22
    35b2:	7f 93       	push	r23
    35b4:	8f 93       	push	r24
    35b6:	9f 93       	push	r25
    35b8:	af 93       	push	r26
    35ba:	bf 93       	push	r27
    35bc:	ef 93       	push	r30
    35be:	ff 93       	push	r31
    35c0:	cf 93       	push	r28
    35c2:	df 93       	push	r29
    35c4:	00 d0       	rcall	.+0      	; 0x35c6 <__vector_71+0x2a>
    35c6:	00 d0       	rcall	.+0      	; 0x35c8 <__vector_71+0x2c>
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    35cc:	20 91 76 28 	lds	r18, 0x2876
    35d0:	30 91 77 28 	lds	r19, 0x2877
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	92 e0       	ldi	r25, 0x02	; 2
    35d8:	89 83       	std	Y+1, r24	; 0x01
    35da:	9a 83       	std	Y+2, r25	; 0x02
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    35e0:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    35e2:	8b 81       	ldd	r24, Y+3	; 0x03
    35e4:	88 2f       	mov	r24, r24
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	83 70       	andi	r24, 0x03	; 3
    35ea:	99 27       	eor	r25, r25
    35ec:	89 2b       	or	r24, r25
    35ee:	39 f4       	brne	.+14     	; 0x35fe <__vector_71+0x62>
		index += 2;
    35f0:	8c 81       	ldd	r24, Y+4	; 0x04
    35f2:	8e 5f       	subi	r24, 0xFE	; 254
    35f4:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    35f6:	8b 81       	ldd	r24, Y+3	; 0x03
    35f8:	86 95       	lsr	r24
    35fa:	86 95       	lsr	r24
    35fc:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    35fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3600:	88 2f       	mov	r24, r24
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	81 70       	andi	r24, 0x01	; 1
    3606:	99 27       	eor	r25, r25
    3608:	89 2b       	or	r24, r25
    360a:	19 f4       	brne	.+6      	; 0x3612 <__vector_71+0x76>
		index++;
    360c:	8c 81       	ldd	r24, Y+4	; 0x04
    360e:	8f 5f       	subi	r24, 0xFF	; 255
    3610:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    3612:	89 81       	ldd	r24, Y+1	; 0x01
    3614:	9a 81       	ldd	r25, Y+2	; 0x02
    3616:	ac 01       	movw	r20, r24
    3618:	40 5e       	subi	r20, 0xE0	; 224
    361a:	5f 4f       	sbci	r21, 0xFF	; 255
    361c:	8c 81       	ldd	r24, Y+4	; 0x04
    361e:	88 2f       	mov	r24, r24
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	88 0f       	add	r24, r24
    3624:	99 1f       	adc	r25, r25
    3626:	88 0f       	add	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	88 0f       	add	r24, r24
    362c:	99 1f       	adc	r25, r25
    362e:	84 0f       	add	r24, r20
    3630:	95 1f       	adc	r25, r21
    3632:	fc 01       	movw	r30, r24
    3634:	84 81       	ldd	r24, Z+4	; 0x04
    3636:	95 81       	ldd	r25, Z+5	; 0x05
    3638:	ac 01       	movw	r20, r24
    363a:	61 e0       	ldi	r22, 0x01	; 1
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	92 e0       	ldi	r25, 0x02	; 2
    3640:	f9 01       	movw	r30, r18
    3642:	09 95       	icall
}
    3644:	24 96       	adiw	r28, 0x04	; 4
    3646:	cd bf       	out	0x3d, r28	; 61
    3648:	de bf       	out	0x3e, r29	; 62
    364a:	df 91       	pop	r29
    364c:	cf 91       	pop	r28
    364e:	ff 91       	pop	r31
    3650:	ef 91       	pop	r30
    3652:	bf 91       	pop	r27
    3654:	af 91       	pop	r26
    3656:	9f 91       	pop	r25
    3658:	8f 91       	pop	r24
    365a:	7f 91       	pop	r23
    365c:	6f 91       	pop	r22
    365e:	5f 91       	pop	r21
    3660:	4f 91       	pop	r20
    3662:	3f 91       	pop	r19
    3664:	2f 91       	pop	r18
    3666:	0f 90       	pop	r0
    3668:	00 92 3f 00 	sts	0x003F, r0
    366c:	0f 90       	pop	r0
    366e:	1f 90       	pop	r1
    3670:	18 95       	reti

00003672 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    3672:	1f 92       	push	r1
    3674:	0f 92       	push	r0
    3676:	00 90 3f 00 	lds	r0, 0x003F
    367a:	0f 92       	push	r0
    367c:	11 24       	eor	r1, r1
    367e:	2f 93       	push	r18
    3680:	3f 93       	push	r19
    3682:	4f 93       	push	r20
    3684:	5f 93       	push	r21
    3686:	6f 93       	push	r22
    3688:	7f 93       	push	r23
    368a:	8f 93       	push	r24
    368c:	9f 93       	push	r25
    368e:	af 93       	push	r26
    3690:	bf 93       	push	r27
    3692:	ef 93       	push	r30
    3694:	ff 93       	push	r31
    3696:	cf 93       	push	r28
    3698:	df 93       	push	r29
    369a:	00 d0       	rcall	.+0      	; 0x369c <__vector_72+0x2a>
    369c:	00 d0       	rcall	.+0      	; 0x369e <__vector_72+0x2c>
    369e:	cd b7       	in	r28, 0x3d	; 61
    36a0:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    36a2:	20 91 76 28 	lds	r18, 0x2876
    36a6:	30 91 77 28 	lds	r19, 0x2877
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	92 e0       	ldi	r25, 0x02	; 2
    36ae:	89 83       	std	Y+1, r24	; 0x01
    36b0:	9a 83       	std	Y+2, r25	; 0x02
    36b2:	82 e0       	ldi	r24, 0x02	; 2
    36b4:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    36b6:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    36b8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ba:	88 2f       	mov	r24, r24
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	83 70       	andi	r24, 0x03	; 3
    36c0:	99 27       	eor	r25, r25
    36c2:	89 2b       	or	r24, r25
    36c4:	39 f4       	brne	.+14     	; 0x36d4 <__vector_72+0x62>
		index += 2;
    36c6:	8c 81       	ldd	r24, Y+4	; 0x04
    36c8:	8e 5f       	subi	r24, 0xFE	; 254
    36ca:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    36cc:	8b 81       	ldd	r24, Y+3	; 0x03
    36ce:	86 95       	lsr	r24
    36d0:	86 95       	lsr	r24
    36d2:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    36d4:	8b 81       	ldd	r24, Y+3	; 0x03
    36d6:	88 2f       	mov	r24, r24
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	81 70       	andi	r24, 0x01	; 1
    36dc:	99 27       	eor	r25, r25
    36de:	89 2b       	or	r24, r25
    36e0:	19 f4       	brne	.+6      	; 0x36e8 <__vector_72+0x76>
		index++;
    36e2:	8c 81       	ldd	r24, Y+4	; 0x04
    36e4:	8f 5f       	subi	r24, 0xFF	; 255
    36e6:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    36e8:	89 81       	ldd	r24, Y+1	; 0x01
    36ea:	9a 81       	ldd	r25, Y+2	; 0x02
    36ec:	ac 01       	movw	r20, r24
    36ee:	40 5e       	subi	r20, 0xE0	; 224
    36f0:	5f 4f       	sbci	r21, 0xFF	; 255
    36f2:	8c 81       	ldd	r24, Y+4	; 0x04
    36f4:	88 2f       	mov	r24, r24
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	88 0f       	add	r24, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	88 0f       	add	r24, r24
    36fe:	99 1f       	adc	r25, r25
    3700:	88 0f       	add	r24, r24
    3702:	99 1f       	adc	r25, r25
    3704:	84 0f       	add	r24, r20
    3706:	95 1f       	adc	r25, r21
    3708:	fc 01       	movw	r30, r24
    370a:	84 81       	ldd	r24, Z+4	; 0x04
    370c:	95 81       	ldd	r25, Z+5	; 0x05
    370e:	ac 01       	movw	r20, r24
    3710:	62 e0       	ldi	r22, 0x02	; 2
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	92 e0       	ldi	r25, 0x02	; 2
    3716:	f9 01       	movw	r30, r18
    3718:	09 95       	icall
}
    371a:	24 96       	adiw	r28, 0x04	; 4
    371c:	cd bf       	out	0x3d, r28	; 61
    371e:	de bf       	out	0x3e, r29	; 62
    3720:	df 91       	pop	r29
    3722:	cf 91       	pop	r28
    3724:	ff 91       	pop	r31
    3726:	ef 91       	pop	r30
    3728:	bf 91       	pop	r27
    372a:	af 91       	pop	r26
    372c:	9f 91       	pop	r25
    372e:	8f 91       	pop	r24
    3730:	7f 91       	pop	r23
    3732:	6f 91       	pop	r22
    3734:	5f 91       	pop	r21
    3736:	4f 91       	pop	r20
    3738:	3f 91       	pop	r19
    373a:	2f 91       	pop	r18
    373c:	0f 90       	pop	r0
    373e:	00 92 3f 00 	sts	0x003F, r0
    3742:	0f 90       	pop	r0
    3744:	1f 90       	pop	r1
    3746:	18 95       	reti

00003748 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    3748:	1f 92       	push	r1
    374a:	0f 92       	push	r0
    374c:	00 90 3f 00 	lds	r0, 0x003F
    3750:	0f 92       	push	r0
    3752:	11 24       	eor	r1, r1
    3754:	2f 93       	push	r18
    3756:	3f 93       	push	r19
    3758:	4f 93       	push	r20
    375a:	5f 93       	push	r21
    375c:	6f 93       	push	r22
    375e:	7f 93       	push	r23
    3760:	8f 93       	push	r24
    3762:	9f 93       	push	r25
    3764:	af 93       	push	r26
    3766:	bf 93       	push	r27
    3768:	ef 93       	push	r30
    376a:	ff 93       	push	r31
    376c:	cf 93       	push	r28
    376e:	df 93       	push	r29
    3770:	00 d0       	rcall	.+0      	; 0x3772 <__vector_73+0x2a>
    3772:	00 d0       	rcall	.+0      	; 0x3774 <__vector_73+0x2c>
    3774:	cd b7       	in	r28, 0x3d	; 61
    3776:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    3778:	20 91 76 28 	lds	r18, 0x2876
    377c:	30 91 77 28 	lds	r19, 0x2877
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	92 e0       	ldi	r25, 0x02	; 2
    3784:	89 83       	std	Y+1, r24	; 0x01
    3786:	9a 83       	std	Y+2, r25	; 0x02
    3788:	84 e0       	ldi	r24, 0x04	; 4
    378a:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    378c:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    378e:	8b 81       	ldd	r24, Y+3	; 0x03
    3790:	88 2f       	mov	r24, r24
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	83 70       	andi	r24, 0x03	; 3
    3796:	99 27       	eor	r25, r25
    3798:	89 2b       	or	r24, r25
    379a:	39 f4       	brne	.+14     	; 0x37aa <__vector_73+0x62>
		index += 2;
    379c:	8c 81       	ldd	r24, Y+4	; 0x04
    379e:	8e 5f       	subi	r24, 0xFE	; 254
    37a0:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    37a2:	8b 81       	ldd	r24, Y+3	; 0x03
    37a4:	86 95       	lsr	r24
    37a6:	86 95       	lsr	r24
    37a8:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    37aa:	8b 81       	ldd	r24, Y+3	; 0x03
    37ac:	88 2f       	mov	r24, r24
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	81 70       	andi	r24, 0x01	; 1
    37b2:	99 27       	eor	r25, r25
    37b4:	89 2b       	or	r24, r25
    37b6:	19 f4       	brne	.+6      	; 0x37be <__vector_73+0x76>
		index++;
    37b8:	8c 81       	ldd	r24, Y+4	; 0x04
    37ba:	8f 5f       	subi	r24, 0xFF	; 255
    37bc:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	9a 81       	ldd	r25, Y+2	; 0x02
    37c2:	ac 01       	movw	r20, r24
    37c4:	40 5e       	subi	r20, 0xE0	; 224
    37c6:	5f 4f       	sbci	r21, 0xFF	; 255
    37c8:	8c 81       	ldd	r24, Y+4	; 0x04
    37ca:	88 2f       	mov	r24, r24
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	88 0f       	add	r24, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	84 0f       	add	r24, r20
    37dc:	95 1f       	adc	r25, r21
    37de:	fc 01       	movw	r30, r24
    37e0:	84 81       	ldd	r24, Z+4	; 0x04
    37e2:	95 81       	ldd	r25, Z+5	; 0x05
    37e4:	ac 01       	movw	r20, r24
    37e6:	64 e0       	ldi	r22, 0x04	; 4
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	92 e0       	ldi	r25, 0x02	; 2
    37ec:	f9 01       	movw	r30, r18
    37ee:	09 95       	icall
}
    37f0:	24 96       	adiw	r28, 0x04	; 4
    37f2:	cd bf       	out	0x3d, r28	; 61
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	df 91       	pop	r29
    37f8:	cf 91       	pop	r28
    37fa:	ff 91       	pop	r31
    37fc:	ef 91       	pop	r30
    37fe:	bf 91       	pop	r27
    3800:	af 91       	pop	r26
    3802:	9f 91       	pop	r25
    3804:	8f 91       	pop	r24
    3806:	7f 91       	pop	r23
    3808:	6f 91       	pop	r22
    380a:	5f 91       	pop	r21
    380c:	4f 91       	pop	r20
    380e:	3f 91       	pop	r19
    3810:	2f 91       	pop	r18
    3812:	0f 90       	pop	r0
    3814:	00 92 3f 00 	sts	0x003F, r0
    3818:	0f 90       	pop	r0
    381a:	1f 90       	pop	r1
    381c:	18 95       	reti

0000381e <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    381e:	1f 92       	push	r1
    3820:	0f 92       	push	r0
    3822:	00 90 3f 00 	lds	r0, 0x003F
    3826:	0f 92       	push	r0
    3828:	11 24       	eor	r1, r1
    382a:	2f 93       	push	r18
    382c:	3f 93       	push	r19
    382e:	4f 93       	push	r20
    3830:	5f 93       	push	r21
    3832:	6f 93       	push	r22
    3834:	7f 93       	push	r23
    3836:	8f 93       	push	r24
    3838:	9f 93       	push	r25
    383a:	af 93       	push	r26
    383c:	bf 93       	push	r27
    383e:	ef 93       	push	r30
    3840:	ff 93       	push	r31
    3842:	cf 93       	push	r28
    3844:	df 93       	push	r29
    3846:	00 d0       	rcall	.+0      	; 0x3848 <__vector_74+0x2a>
    3848:	00 d0       	rcall	.+0      	; 0x384a <__vector_74+0x2c>
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    384e:	20 91 76 28 	lds	r18, 0x2876
    3852:	30 91 77 28 	lds	r19, 0x2877
    3856:	80 e0       	ldi	r24, 0x00	; 0
    3858:	92 e0       	ldi	r25, 0x02	; 2
    385a:	89 83       	std	Y+1, r24	; 0x01
    385c:	9a 83       	std	Y+2, r25	; 0x02
    385e:	88 e0       	ldi	r24, 0x08	; 8
    3860:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    3862:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    3864:	8b 81       	ldd	r24, Y+3	; 0x03
    3866:	88 2f       	mov	r24, r24
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	83 70       	andi	r24, 0x03	; 3
    386c:	99 27       	eor	r25, r25
    386e:	89 2b       	or	r24, r25
    3870:	39 f4       	brne	.+14     	; 0x3880 <__vector_74+0x62>
		index += 2;
    3872:	8c 81       	ldd	r24, Y+4	; 0x04
    3874:	8e 5f       	subi	r24, 0xFE	; 254
    3876:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
    3878:	8b 81       	ldd	r24, Y+3	; 0x03
    387a:	86 95       	lsr	r24
    387c:	86 95       	lsr	r24
    387e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	88 2f       	mov	r24, r24
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	81 70       	andi	r24, 0x01	; 1
    3888:	99 27       	eor	r25, r25
    388a:	89 2b       	or	r24, r25
    388c:	19 f4       	brne	.+6      	; 0x3894 <__vector_74+0x76>
		index++;
    388e:	8c 81       	ldd	r24, Y+4	; 0x04
    3890:	8f 5f       	subi	r24, 0xFF	; 255
    3892:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    3894:	89 81       	ldd	r24, Y+1	; 0x01
    3896:	9a 81       	ldd	r25, Y+2	; 0x02
    3898:	ac 01       	movw	r20, r24
    389a:	40 5e       	subi	r20, 0xE0	; 224
    389c:	5f 4f       	sbci	r21, 0xFF	; 255
    389e:	8c 81       	ldd	r24, Y+4	; 0x04
    38a0:	88 2f       	mov	r24, r24
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	88 0f       	add	r24, r24
    38a6:	99 1f       	adc	r25, r25
    38a8:	88 0f       	add	r24, r24
    38aa:	99 1f       	adc	r25, r25
    38ac:	88 0f       	add	r24, r24
    38ae:	99 1f       	adc	r25, r25
    38b0:	84 0f       	add	r24, r20
    38b2:	95 1f       	adc	r25, r21
    38b4:	fc 01       	movw	r30, r24
    38b6:	84 81       	ldd	r24, Z+4	; 0x04
    38b8:	95 81       	ldd	r25, Z+5	; 0x05
    38ba:	ac 01       	movw	r20, r24
    38bc:	68 e0       	ldi	r22, 0x08	; 8
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	92 e0       	ldi	r25, 0x02	; 2
    38c2:	f9 01       	movw	r30, r18
    38c4:	09 95       	icall
}
    38c6:	24 96       	adiw	r28, 0x04	; 4
    38c8:	cd bf       	out	0x3d, r28	; 61
    38ca:	de bf       	out	0x3e, r29	; 62
    38cc:	df 91       	pop	r29
    38ce:	cf 91       	pop	r28
    38d0:	ff 91       	pop	r31
    38d2:	ef 91       	pop	r30
    38d4:	bf 91       	pop	r27
    38d6:	af 91       	pop	r26
    38d8:	9f 91       	pop	r25
    38da:	8f 91       	pop	r24
    38dc:	7f 91       	pop	r23
    38de:	6f 91       	pop	r22
    38e0:	5f 91       	pop	r21
    38e2:	4f 91       	pop	r20
    38e4:	3f 91       	pop	r19
    38e6:	2f 91       	pop	r18
    38e8:	0f 90       	pop	r0
    38ea:	00 92 3f 00 	sts	0x003F, r0
    38ee:	0f 90       	pop	r0
    38f0:	1f 90       	pop	r1
    38f2:	18 95       	reti

000038f4 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    38f4:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    38f6:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    38f8:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    38fa:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    38fc:	60 83       	st	Z, r22
	ret                             // Return to caller
    38fe:	08 95       	ret

00003900 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3900:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    3904:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3906:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3908:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    390c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    390e:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3912:	08 95       	ret

00003914 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    3914:	1f 92       	push	r1
    3916:	0f 92       	push	r0
    3918:	00 90 3f 00 	lds	r0, 0x003F
    391c:	0f 92       	push	r0
    391e:	11 24       	eor	r1, r1
    3920:	8f 93       	push	r24
    3922:	9f 93       	push	r25
    3924:	cf 93       	push	r28
    3926:	df 93       	push	r29
    3928:	cd b7       	in	r28, 0x3d	; 61
    392a:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    392c:	80 91 78 28 	lds	r24, 0x2878
    3930:	90 91 79 28 	lds	r25, 0x2879
    3934:	01 96       	adiw	r24, 0x01	; 1
    3936:	80 93 78 28 	sts	0x2878, r24
    393a:	90 93 79 28 	sts	0x2879, r25
}
    393e:	df 91       	pop	r29
    3940:	cf 91       	pop	r28
    3942:	9f 91       	pop	r25
    3944:	8f 91       	pop	r24
    3946:	0f 90       	pop	r0
    3948:	00 92 3f 00 	sts	0x003F, r0
    394c:	0f 90       	pop	r0
    394e:	1f 90       	pop	r1
    3950:	18 95       	reti

00003952 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    3952:	1f 92       	push	r1
    3954:	0f 92       	push	r0
    3956:	00 90 3f 00 	lds	r0, 0x003F
    395a:	0f 92       	push	r0
    395c:	11 24       	eor	r1, r1
    395e:	2f 93       	push	r18
    3960:	3f 93       	push	r19
    3962:	4f 93       	push	r20
    3964:	5f 93       	push	r21
    3966:	6f 93       	push	r22
    3968:	7f 93       	push	r23
    396a:	8f 93       	push	r24
    396c:	9f 93       	push	r25
    396e:	af 93       	push	r26
    3970:	bf 93       	push	r27
    3972:	ef 93       	push	r30
    3974:	ff 93       	push	r31
    3976:	cf 93       	push	r28
    3978:	df 93       	push	r29
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	28 97       	sbiw	r28, 0x08	; 8
    3980:	cd bf       	out	0x3d, r28	; 61
    3982:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    3984:	20 91 78 28 	lds	r18, 0x2878
    3988:	30 91 79 28 	lds	r19, 0x2879
    398c:	80 91 7a 28 	lds	r24, 0x287A
    3990:	90 91 7b 28 	lds	r25, 0x287B
    3994:	28 17       	cp	r18, r24
    3996:	39 07       	cpc	r19, r25
    3998:	08 f4       	brcc	.+2      	; 0x399c <__vector_11+0x4a>
    399a:	63 c0       	rjmp	.+198    	; 0x3a62 <__vector_11+0x110>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	94 e0       	ldi	r25, 0x04	; 4
    39a0:	21 e0       	ldi	r18, 0x01	; 1
    39a2:	fc 01       	movw	r30, r24
    39a4:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    39a6:	80 91 7e 28 	lds	r24, 0x287E
    39aa:	90 91 7f 28 	lds	r25, 0x287F
    39ae:	89 2b       	or	r24, r25
    39b0:	09 f4       	brne	.+2      	; 0x39b4 <__vector_11+0x62>
    39b2:	57 c0       	rjmp	.+174    	; 0x3a62 <__vector_11+0x110>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    39b4:	80 91 78 28 	lds	r24, 0x2878
    39b8:	90 91 79 28 	lds	r25, 0x2879
    39bc:	cc 01       	movw	r24, r24
    39be:	a0 e0       	ldi	r26, 0x00	; 0
    39c0:	b0 e0       	ldi	r27, 0x00	; 0
    39c2:	ac 01       	movw	r20, r24
    39c4:	33 27       	eor	r19, r19
    39c6:	22 27       	eor	r18, r18
					| RTC.CNT;
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	94 e0       	ldi	r25, 0x04	; 4
    39cc:	fc 01       	movw	r30, r24
    39ce:	80 85       	ldd	r24, Z+8	; 0x08
    39d0:	91 85       	ldd	r25, Z+9	; 0x09
    39d2:	cc 01       	movw	r24, r24
    39d4:	a0 e0       	ldi	r26, 0x00	; 0
    39d6:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    39d8:	82 2b       	or	r24, r18
    39da:	93 2b       	or	r25, r19
    39dc:	a4 2b       	or	r26, r20
    39de:	b5 2b       	or	r27, r21
    39e0:	89 83       	std	Y+1, r24	; 0x01
    39e2:	9a 83       	std	Y+2, r25	; 0x02
    39e4:	ab 83       	std	Y+3, r26	; 0x03
    39e6:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    39e8:	80 91 7a 28 	lds	r24, 0x287A
    39ec:	90 91 7b 28 	lds	r25, 0x287B
    39f0:	cc 01       	movw	r24, r24
    39f2:	a0 e0       	ldi	r26, 0x00	; 0
    39f4:	b0 e0       	ldi	r27, 0x00	; 0
    39f6:	ac 01       	movw	r20, r24
    39f8:	33 27       	eor	r19, r19
    39fa:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    39fc:	80 91 7c 28 	lds	r24, 0x287C
    3a00:	90 91 7d 28 	lds	r25, 0x287D
    3a04:	cc 01       	movw	r24, r24
    3a06:	a0 e0       	ldi	r26, 0x00	; 0
    3a08:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    3a0a:	82 2b       	or	r24, r18
    3a0c:	93 2b       	or	r25, r19
    3a0e:	a4 2b       	or	r26, r20
    3a10:	b5 2b       	or	r27, r21
    3a12:	8d 83       	std	Y+5, r24	; 0x05
    3a14:	9e 83       	std	Y+6, r25	; 0x06
    3a16:	af 83       	std	Y+7, r26	; 0x07
    3a18:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    3a1a:	2d 81       	ldd	r18, Y+5	; 0x05
    3a1c:	3e 81       	ldd	r19, Y+6	; 0x06
    3a1e:	4f 81       	ldd	r20, Y+7	; 0x07
    3a20:	58 85       	ldd	r21, Y+8	; 0x08
    3a22:	89 81       	ldd	r24, Y+1	; 0x01
    3a24:	9a 81       	ldd	r25, Y+2	; 0x02
    3a26:	ab 81       	ldd	r26, Y+3	; 0x03
    3a28:	bc 81       	ldd	r27, Y+4	; 0x04
    3a2a:	28 17       	cp	r18, r24
    3a2c:	39 07       	cpc	r19, r25
    3a2e:	4a 07       	cpc	r20, r26
    3a30:	5b 07       	cpc	r21, r27
    3a32:	58 f0       	brcs	.+22     	; 0x3a4a <__vector_11+0xf8>
				count = alarm + 1;
    3a34:	8d 81       	ldd	r24, Y+5	; 0x05
    3a36:	9e 81       	ldd	r25, Y+6	; 0x06
    3a38:	af 81       	ldd	r26, Y+7	; 0x07
    3a3a:	b8 85       	ldd	r27, Y+8	; 0x08
    3a3c:	01 96       	adiw	r24, 0x01	; 1
    3a3e:	a1 1d       	adc	r26, r1
    3a40:	b1 1d       	adc	r27, r1
    3a42:	89 83       	std	Y+1, r24	; 0x01
    3a44:	9a 83       	std	Y+2, r25	; 0x02
    3a46:	ab 83       	std	Y+3, r26	; 0x03
    3a48:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    3a4a:	20 91 7e 28 	lds	r18, 0x287E
    3a4e:	30 91 7f 28 	lds	r19, 0x287F
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	9a 81       	ldd	r25, Y+2	; 0x02
    3a56:	ab 81       	ldd	r26, Y+3	; 0x03
    3a58:	bc 81       	ldd	r27, Y+4	; 0x04
    3a5a:	bc 01       	movw	r22, r24
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	f9 01       	movw	r30, r18
    3a60:	09 95       	icall
		}
	}
}
    3a62:	28 96       	adiw	r28, 0x08	; 8
    3a64:	cd bf       	out	0x3d, r28	; 61
    3a66:	de bf       	out	0x3e, r29	; 62
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	ff 91       	pop	r31
    3a6e:	ef 91       	pop	r30
    3a70:	bf 91       	pop	r27
    3a72:	af 91       	pop	r26
    3a74:	9f 91       	pop	r25
    3a76:	8f 91       	pop	r24
    3a78:	7f 91       	pop	r23
    3a7a:	6f 91       	pop	r22
    3a7c:	5f 91       	pop	r21
    3a7e:	4f 91       	pop	r20
    3a80:	3f 91       	pop	r19
    3a82:	2f 91       	pop	r18
    3a84:	0f 90       	pop	r0
    3a86:	00 92 3f 00 	sts	0x003F, r0
    3a8a:	0f 90       	pop	r0
    3a8c:	1f 90       	pop	r1
    3a8e:	18 95       	reti

00003a90 <__vector_13>:
	status_code_t const status = transfer.status;

	transfer.locked = false;

	return status;
}
    3a90:	1f 92       	push	r1
    3a92:	0f 92       	push	r0
    3a94:	00 90 3f 00 	lds	r0, 0x003F
    3a98:	0f 92       	push	r0
    3a9a:	11 24       	eor	r1, r1
    3a9c:	2f 93       	push	r18
    3a9e:	3f 93       	push	r19
    3aa0:	4f 93       	push	r20
    3aa2:	5f 93       	push	r21
    3aa4:	6f 93       	push	r22
    3aa6:	7f 93       	push	r23
    3aa8:	8f 93       	push	r24
    3aaa:	9f 93       	push	r25
    3aac:	af 93       	push	r26
    3aae:	bf 93       	push	r27
    3ab0:	ef 93       	push	r30
    3ab2:	ff 93       	push	r31
    3ab4:	cf 93       	push	r28
    3ab6:	df 93       	push	r29
    3ab8:	cd b7       	in	r28, 0x3d	; 61
    3aba:	de b7       	in	r29, 0x3e	; 62
    3abc:	22 d1       	rcall	.+580    	; 0x3d02 <twim_interrupt_handler>
    3abe:	df 91       	pop	r29
    3ac0:	cf 91       	pop	r28
    3ac2:	ff 91       	pop	r31
    3ac4:	ef 91       	pop	r30
    3ac6:	bf 91       	pop	r27
    3ac8:	af 91       	pop	r26
    3aca:	9f 91       	pop	r25
    3acc:	8f 91       	pop	r24
    3ace:	7f 91       	pop	r23
    3ad0:	6f 91       	pop	r22
    3ad2:	5f 91       	pop	r21
    3ad4:	4f 91       	pop	r20
    3ad6:	3f 91       	pop	r19
    3ad8:	2f 91       	pop	r18
    3ada:	0f 90       	pop	r0
    3adc:	00 92 3f 00 	sts	0x003F, r0
    3ae0:	0f 90       	pop	r0
    3ae2:	1f 90       	pop	r1
    3ae4:	18 95       	reti

00003ae6 <__vector_46>:
    3ae6:	1f 92       	push	r1
    3ae8:	0f 92       	push	r0
    3aea:	00 90 3f 00 	lds	r0, 0x003F
    3aee:	0f 92       	push	r0
    3af0:	11 24       	eor	r1, r1
    3af2:	2f 93       	push	r18
    3af4:	3f 93       	push	r19
    3af6:	4f 93       	push	r20
    3af8:	5f 93       	push	r21
    3afa:	6f 93       	push	r22
    3afc:	7f 93       	push	r23
    3afe:	8f 93       	push	r24
    3b00:	9f 93       	push	r25
    3b02:	af 93       	push	r26
    3b04:	bf 93       	push	r27
    3b06:	ef 93       	push	r30
    3b08:	ff 93       	push	r31
    3b0a:	cf 93       	push	r28
    3b0c:	df 93       	push	r29
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    3b12:	f7 d0       	rcall	.+494    	; 0x3d02 <twim_interrupt_handler>
    3b14:	df 91       	pop	r29
    3b16:	cf 91       	pop	r28
    3b18:	ff 91       	pop	r31
    3b1a:	ef 91       	pop	r30
    3b1c:	bf 91       	pop	r27
    3b1e:	af 91       	pop	r26
    3b20:	9f 91       	pop	r25
    3b22:	8f 91       	pop	r24
    3b24:	7f 91       	pop	r23
    3b26:	6f 91       	pop	r22
    3b28:	5f 91       	pop	r21
    3b2a:	4f 91       	pop	r20
    3b2c:	3f 91       	pop	r19
    3b2e:	2f 91       	pop	r18
    3b30:	0f 90       	pop	r0
    3b32:	00 92 3f 00 	sts	0x003F, r0
    3b36:	0f 90       	pop	r0
    3b38:	1f 90       	pop	r1
    3b3a:	18 95       	reti

00003b3c <twim_write_handler>:
 * \brief TWI master write interrupt handler.
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    3b44:	28 97       	sbiw	r28, 0x08	; 8
    3b46:	cd bf       	out	0x3d, r28	; 61
    3b48:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    3b4a:	80 91 bc 21 	lds	r24, 0x21BC
    3b4e:	90 91 bd 21 	lds	r25, 0x21BD
    3b52:	89 83       	std	Y+1, r24	; 0x01
    3b54:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    3b56:	80 91 be 21 	lds	r24, 0x21BE
    3b5a:	90 91 bf 21 	lds	r25, 0x21BF
    3b5e:	8b 83       	std	Y+3, r24	; 0x03
    3b60:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.addr_count < pkg->addr_length) {
    3b62:	20 91 c0 21 	lds	r18, 0x21C0
    3b66:	30 91 c1 21 	lds	r19, 0x21C1
    3b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6e:	fc 01       	movw	r30, r24
    3b70:	84 81       	ldd	r24, Z+4	; 0x04
    3b72:	95 81       	ldd	r25, Z+5	; 0x05
    3b74:	28 17       	cp	r18, r24
    3b76:	39 07       	cpc	r19, r25
    3b78:	e4 f4       	brge	.+56     	; 0x3bb2 <twim_write_handler+0x76>

		const uint8_t * const data = pkg->addr;
    3b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b7e:	01 96       	adiw	r24, 0x01	; 1
    3b80:	8d 83       	std	Y+5, r24	; 0x05
    3b82:	9e 83       	std	Y+6, r25	; 0x06
		bus->MASTER.DATA = data[transfer.addr_count++];
    3b84:	80 91 c0 21 	lds	r24, 0x21C0
    3b88:	90 91 c1 21 	lds	r25, 0x21C1
    3b8c:	9c 01       	movw	r18, r24
    3b8e:	2f 5f       	subi	r18, 0xFF	; 255
    3b90:	3f 4f       	sbci	r19, 0xFF	; 255
    3b92:	20 93 c0 21 	sts	0x21C0, r18
    3b96:	30 93 c1 21 	sts	0x21C1, r19
    3b9a:	9c 01       	movw	r18, r24
    3b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba0:	82 0f       	add	r24, r18
    3ba2:	93 1f       	adc	r25, r19
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	20 81       	ld	r18, Z
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bac:	fc 01       	movw	r30, r24
    3bae:	27 83       	std	Z+7, r18	; 0x07
    3bb0:	3f c0       	rjmp	.+126    	; 0x3c30 <twim_write_handler+0xf4>

	} else if (transfer.data_count < pkg->length) {
    3bb2:	20 91 c2 21 	lds	r18, 0x21C2
    3bb6:	30 91 c3 21 	lds	r19, 0x21C3
    3bba:	8b 81       	ldd	r24, Y+3	; 0x03
    3bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	80 85       	ldd	r24, Z+8	; 0x08
    3bc2:	91 85       	ldd	r25, Z+9	; 0x09
    3bc4:	28 17       	cp	r18, r24
    3bc6:	39 07       	cpc	r19, r25
    3bc8:	60 f5       	brcc	.+88     	; 0x3c22 <twim_write_handler+0xe6>

		if (transfer.read) {
    3bca:	80 91 c4 21 	lds	r24, 0x21C4
    3bce:	88 23       	and	r24, r24
    3bd0:	59 f0       	breq	.+22     	; 0x3be8 <twim_write_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd6:	fc 01       	movw	r30, r24
    3bd8:	86 81       	ldd	r24, Z+6	; 0x06
    3bda:	28 2f       	mov	r18, r24
    3bdc:	21 60       	ori	r18, 0x01	; 1
    3bde:	89 81       	ldd	r24, Y+1	; 0x01
    3be0:	9a 81       	ldd	r25, Y+2	; 0x02
    3be2:	fc 01       	movw	r30, r24
    3be4:	26 83       	std	Z+6, r18	; 0x06
    3be6:	24 c0       	rjmp	.+72     	; 0x3c30 <twim_write_handler+0xf4>

		} else {
			const uint8_t * const data = pkg->buffer;
    3be8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bea:	9c 81       	ldd	r25, Y+4	; 0x04
    3bec:	fc 01       	movw	r30, r24
    3bee:	86 81       	ldd	r24, Z+6	; 0x06
    3bf0:	97 81       	ldd	r25, Z+7	; 0x07
    3bf2:	8f 83       	std	Y+7, r24	; 0x07
    3bf4:	98 87       	std	Y+8, r25	; 0x08
			bus->MASTER.DATA = data[transfer.data_count++];
    3bf6:	80 91 c2 21 	lds	r24, 0x21C2
    3bfa:	90 91 c3 21 	lds	r25, 0x21C3
    3bfe:	9c 01       	movw	r18, r24
    3c00:	2f 5f       	subi	r18, 0xFF	; 255
    3c02:	3f 4f       	sbci	r19, 0xFF	; 255
    3c04:	20 93 c2 21 	sts	0x21C2, r18
    3c08:	30 93 c3 21 	sts	0x21C3, r19
    3c0c:	2f 81       	ldd	r18, Y+7	; 0x07
    3c0e:	38 85       	ldd	r19, Y+8	; 0x08
    3c10:	82 0f       	add	r24, r18
    3c12:	93 1f       	adc	r25, r19
    3c14:	fc 01       	movw	r30, r24
    3c16:	20 81       	ld	r18, Z
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	27 83       	std	Z+7, r18	; 0x07
    3c20:	07 c0       	rjmp	.+14     	; 0x3c30 <twim_write_handler+0xf4>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	9a 81       	ldd	r25, Y+2	; 0x02
    3c26:	23 e0       	ldi	r18, 0x03	; 3
    3c28:	fc 01       	movw	r30, r24
    3c2a:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = STATUS_OK;
    3c2c:	10 92 c6 21 	sts	0x21C6, r1
	}
}
    3c30:	28 96       	adiw	r28, 0x08	; 8
    3c32:	cd bf       	out	0x3d, r28	; 61
    3c34:	de bf       	out	0x3e, r29	; 62
    3c36:	df 91       	pop	r29
    3c38:	cf 91       	pop	r28
    3c3a:	08 95       	ret

00003c3c <twim_read_handler>:
 *
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
    3c3c:	cf 93       	push	r28
    3c3e:	df 93       	push	r29
    3c40:	cd b7       	in	r28, 0x3d	; 61
    3c42:	de b7       	in	r29, 0x3e	; 62
    3c44:	26 97       	sbiw	r28, 0x06	; 6
    3c46:	cd bf       	out	0x3d, r28	; 61
    3c48:	de bf       	out	0x3e, r29	; 62
	TWI_t * const         bus = transfer.bus;
    3c4a:	80 91 bc 21 	lds	r24, 0x21BC
    3c4e:	90 91 bd 21 	lds	r25, 0x21BD
    3c52:	89 83       	std	Y+1, r24	; 0x01
    3c54:	9a 83       	std	Y+2, r25	; 0x02
	twi_package_t * const pkg = transfer.pkg;
    3c56:	80 91 be 21 	lds	r24, 0x21BE
    3c5a:	90 91 bf 21 	lds	r25, 0x21BF
    3c5e:	8b 83       	std	Y+3, r24	; 0x03
    3c60:	9c 83       	std	Y+4, r25	; 0x04

	if (transfer.data_count < pkg->length) {
    3c62:	20 91 c2 21 	lds	r18, 0x21C2
    3c66:	30 91 c3 21 	lds	r19, 0x21C3
    3c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c6e:	fc 01       	movw	r30, r24
    3c70:	80 85       	ldd	r24, Z+8	; 0x08
    3c72:	91 85       	ldd	r25, Z+9	; 0x09
    3c74:	28 17       	cp	r18, r24
    3c76:	39 07       	cpc	r19, r25
    3c78:	b0 f5       	brcc	.+108    	; 0x3ce6 <twim_read_handler+0xaa>

		uint8_t * const data = pkg->buffer;
    3c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c7e:	fc 01       	movw	r30, r24
    3c80:	86 81       	ldd	r24, Z+6	; 0x06
    3c82:	97 81       	ldd	r25, Z+7	; 0x07
    3c84:	8d 83       	std	Y+5, r24	; 0x05
    3c86:	9e 83       	std	Y+6, r25	; 0x06
		data[transfer.data_count++] = bus->MASTER.DATA;
    3c88:	80 91 c2 21 	lds	r24, 0x21C2
    3c8c:	90 91 c3 21 	lds	r25, 0x21C3
    3c90:	9c 01       	movw	r18, r24
    3c92:	2f 5f       	subi	r18, 0xFF	; 255
    3c94:	3f 4f       	sbci	r19, 0xFF	; 255
    3c96:	20 93 c2 21 	sts	0x21C2, r18
    3c9a:	30 93 c3 21 	sts	0x21C3, r19
    3c9e:	2d 81       	ldd	r18, Y+5	; 0x05
    3ca0:	3e 81       	ldd	r19, Y+6	; 0x06
    3ca2:	82 0f       	add	r24, r18
    3ca4:	93 1f       	adc	r25, r19
    3ca6:	29 81       	ldd	r18, Y+1	; 0x01
    3ca8:	3a 81       	ldd	r19, Y+2	; 0x02
    3caa:	f9 01       	movw	r30, r18
    3cac:	27 81       	ldd	r18, Z+7	; 0x07
    3cae:	fc 01       	movw	r30, r24
    3cb0:	20 83       	st	Z, r18

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    3cb2:	20 91 c2 21 	lds	r18, 0x21C2
    3cb6:	30 91 c3 21 	lds	r19, 0x21C3
    3cba:	8b 81       	ldd	r24, Y+3	; 0x03
    3cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	80 85       	ldd	r24, Z+8	; 0x08
    3cc2:	91 85       	ldd	r25, Z+9	; 0x09
    3cc4:	28 17       	cp	r18, r24
    3cc6:	39 07       	cpc	r19, r25
    3cc8:	30 f4       	brcc	.+12     	; 0x3cd6 <twim_read_handler+0x9a>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cce:	22 e0       	ldi	r18, 0x02	; 2
    3cd0:	fc 01       	movw	r30, r24
    3cd2:	23 83       	std	Z+3, r18	; 0x03
    3cd4:	10 c0       	rjmp	.+32     	; 0x3cf6 <twim_read_handler+0xba>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3cd6:	89 81       	ldd	r24, Y+1	; 0x01
    3cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cda:	27 e0       	ldi	r18, 0x07	; 7
    3cdc:	fc 01       	movw	r30, r24
    3cde:	23 83       	std	Z+3, r18	; 0x03
			transfer.status = STATUS_OK;
    3ce0:	10 92 c6 21 	sts	0x21C6, r1
    3ce4:	08 c0       	rjmp	.+16     	; 0x3cf6 <twim_read_handler+0xba>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cea:	23 e0       	ldi	r18, 0x03	; 3
    3cec:	fc 01       	movw	r30, r24
    3cee:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_NO_MEMORY;
    3cf0:	89 ef       	ldi	r24, 0xF9	; 249
    3cf2:	80 93 c6 21 	sts	0x21C6, r24
	}
}
    3cf6:	26 96       	adiw	r28, 0x06	; 6
    3cf8:	cd bf       	out	0x3d, r28	; 61
    3cfa:	de bf       	out	0x3e, r29	; 62
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	08 95       	ret

00003d02 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    3d02:	cf 93       	push	r28
    3d04:	df 93       	push	r29
    3d06:	1f 92       	push	r1
    3d08:	cd b7       	in	r28, 0x3d	; 61
    3d0a:	de b7       	in	r29, 0x3e	; 62
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    3d0c:	80 91 bc 21 	lds	r24, 0x21BC
    3d10:	90 91 bd 21 	lds	r25, 0x21BD
    3d14:	fc 01       	movw	r30, r24
    3d16:	84 81       	ldd	r24, Z+4	; 0x04
    3d18:	89 83       	std	Y+1, r24	; 0x01

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    3d1a:	89 81       	ldd	r24, Y+1	; 0x01
    3d1c:	88 2f       	mov	r24, r24
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	88 70       	andi	r24, 0x08	; 8
    3d22:	99 27       	eor	r25, r25
    3d24:	89 2b       	or	r24, r25
    3d26:	99 f0       	breq	.+38     	; 0x3d4e <twim_interrupt_handler+0x4c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    3d28:	80 91 bc 21 	lds	r24, 0x21BC
    3d2c:	90 91 bd 21 	lds	r25, 0x21BD
    3d30:	29 81       	ldd	r18, Y+1	; 0x01
    3d32:	28 60       	ori	r18, 0x08	; 8
    3d34:	fc 01       	movw	r30, r24
    3d36:	24 83       	std	Z+4, r18	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    3d38:	80 91 bc 21 	lds	r24, 0x21BC
    3d3c:	90 91 bd 21 	lds	r25, 0x21BD
    3d40:	23 e0       	ldi	r18, 0x03	; 3
    3d42:	fc 01       	movw	r30, r24
    3d44:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_BUSY;
    3d46:	86 ef       	ldi	r24, 0xF6	; 246
    3d48:	80 93 c6 21 	sts	0x21C6, r24
    3d4c:	2a c0       	rjmp	.+84     	; 0x3da2 <twim_interrupt_handler+0xa0>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    3d4e:	89 81       	ldd	r24, Y+1	; 0x01
    3d50:	88 2f       	mov	r24, r24
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	84 70       	andi	r24, 0x04	; 4
    3d56:	99 27       	eor	r25, r25
    3d58:	89 2b       	or	r24, r25
    3d5a:	39 f4       	brne	.+14     	; 0x3d6a <twim_interrupt_handler+0x68>
		(master_status & TWI_MASTER_RXACK_bm)) {
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	88 2f       	mov	r24, r24
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	80 71       	andi	r24, 0x10	; 16
    3d64:	99 27       	eor	r25, r25

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    3d66:	89 2b       	or	r24, r25
    3d68:	59 f0       	breq	.+22     	; 0x3d80 <twim_interrupt_handler+0x7e>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3d6a:	80 91 bc 21 	lds	r24, 0x21BC
    3d6e:	90 91 bd 21 	lds	r25, 0x21BD
    3d72:	23 e0       	ldi	r18, 0x03	; 3
    3d74:	fc 01       	movw	r30, r24
    3d76:	23 83       	std	Z+3, r18	; 0x03
		transfer.status = ERR_IO_ERROR;
    3d78:	8f ef       	ldi	r24, 0xFF	; 255
    3d7a:	80 93 c6 21 	sts	0x21C6, r24
    3d7e:	11 c0       	rjmp	.+34     	; 0x3da2 <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
    3d82:	88 2f       	mov	r24, r24
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	80 74       	andi	r24, 0x40	; 64
    3d88:	99 27       	eor	r25, r25
    3d8a:	89 2b       	or	r24, r25
    3d8c:	11 f0       	breq	.+4      	; 0x3d92 <twim_interrupt_handler+0x90>

		twim_write_handler();
    3d8e:	d6 de       	rcall	.-596    	; 0x3b3c <twim_write_handler>
    3d90:	08 c0       	rjmp	.+16     	; 0x3da2 <twim_interrupt_handler+0xa0>

	} else if (master_status & TWI_MASTER_RIF_bm) {
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	88 23       	and	r24, r24
    3d96:	14 f4       	brge	.+4      	; 0x3d9c <twim_interrupt_handler+0x9a>

		twim_read_handler();
    3d98:	51 df       	rcall	.-350    	; 0x3c3c <twim_read_handler>
    3d9a:	03 c0       	rjmp	.+6      	; 0x3da2 <twim_interrupt_handler+0xa0>

	} else {

		transfer.status = ERR_PROTOCOL;
    3d9c:	8b ef       	ldi	r24, 0xFB	; 251
    3d9e:	80 93 c6 21 	sts	0x21C6, r24
	}
}
    3da2:	0f 90       	pop	r0
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	08 95       	ret

00003daa <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	cd b7       	in	r28, 0x3d	; 61
    3db0:	de b7       	in	r29, 0x3e	; 62
    3db2:	25 97       	sbiw	r28, 0x05	; 5
    3db4:	cd bf       	out	0x3d, r28	; 61
    3db6:	de bf       	out	0x3e, r29	; 62
    3db8:	8a 83       	std	Y+2, r24	; 0x02
    3dba:	9b 83       	std	Y+3, r25	; 0x03
    3dbc:	6c 83       	std	Y+4, r22	; 0x04
    3dbe:	7d 83       	std	Y+5, r23	; 0x05
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
    3dc0:	88 eb       	ldi	r24, 0xB8	; 184
    3dc2:	89 83       	std	Y+1, r24	; 0x01
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    3dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc6:	9d 81       	ldd	r25, Y+5	; 0x05
    3dc8:	fc 01       	movw	r30, r24
    3dca:	84 81       	ldd	r24, Z+4	; 0x04
    3dcc:	95 81       	ldd	r25, Z+5	; 0x05
    3dce:	a6 81       	ldd	r26, Z+6	; 0x06
    3dd0:	b7 81       	ldd	r27, Z+7	; 0x07
    3dd2:	28 2f       	mov	r18, r24
    3dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd8:	fc 01       	movw	r30, r24
    3dda:	25 83       	std	Z+5, r18	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    3ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dde:	9b 81       	ldd	r25, Y+3	; 0x03
    3de0:	29 81       	ldd	r18, Y+1	; 0x01
    3de2:	fc 01       	movw	r30, r24
    3de4:	21 83       	std	Z+1, r18	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3de6:	8a 81       	ldd	r24, Y+2	; 0x02
    3de8:	9b 81       	ldd	r25, Y+3	; 0x03
    3dea:	21 e0       	ldi	r18, 0x01	; 1
    3dec:	fc 01       	movw	r30, r24
    3dee:	24 83       	std	Z+4, r18	; 0x04

	transfer.locked    = false;
    3df0:	10 92 c5 21 	sts	0x21C5, r1
	transfer.status    = STATUS_OK;
    3df4:	10 92 c6 21 	sts	0x21C6, r1

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    3df8:	80 ea       	ldi	r24, 0xA0	; 160
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	20 ea       	ldi	r18, 0xA0	; 160
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	f9 01       	movw	r30, r18
    3e02:	22 81       	ldd	r18, Z+2	; 0x02
    3e04:	22 60       	ori	r18, 0x02	; 2
    3e06:	fc 01       	movw	r30, r24
    3e08:	22 83       	std	Z+2, r18	; 0x02

	cpu_irq_enable();
    3e0a:	78 94       	sei

	return STATUS_OK;
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
}
    3e0e:	25 96       	adiw	r28, 0x05	; 5
    3e10:	cd bf       	out	0x3d, r28	; 61
    3e12:	de bf       	out	0x3e, r29	; 62
    3e14:	df 91       	pop	r29
    3e16:	cf 91       	pop	r28
    3e18:	08 95       	ret

00003e1a <usart_rx_enable>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
    3e1e:	00 d0       	rcall	.+0      	; 0x3e20 <usart_rx_enable+0x6>
    3e20:	cd b7       	in	r28, 0x3d	; 61
    3e22:	de b7       	in	r29, 0x3e	; 62
    3e24:	89 83       	std	Y+1, r24	; 0x01
    3e26:	9a 83       	std	Y+2, r25	; 0x02
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e2c:	fc 01       	movw	r30, r24
    3e2e:	84 81       	ldd	r24, Z+4	; 0x04
    3e30:	28 2f       	mov	r18, r24
    3e32:	20 61       	ori	r18, 0x10	; 16
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	9a 81       	ldd	r25, Y+2	; 0x02
    3e38:	fc 01       	movw	r30, r24
    3e3a:	24 83       	std	Z+4, r18	; 0x04
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	df 91       	pop	r29
    3e42:	cf 91       	pop	r28
    3e44:	08 95       	ret

00003e46 <usart_format_set>:
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	cd b7       	in	r28, 0x3d	; 61
    3e4c:	de b7       	in	r29, 0x3e	; 62
    3e4e:	25 97       	sbiw	r28, 0x05	; 5
    3e50:	cd bf       	out	0x3d, r28	; 61
    3e52:	de bf       	out	0x3e, r29	; 62
    3e54:	89 83       	std	Y+1, r24	; 0x01
    3e56:	9a 83       	std	Y+2, r25	; 0x02
    3e58:	6b 83       	std	Y+3, r22	; 0x03
    3e5a:	4c 83       	std	Y+4, r20	; 0x04
    3e5c:	2d 83       	std	Y+5, r18	; 0x05
    3e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e60:	8c 81       	ldd	r24, Y+4	; 0x04
    3e62:	89 2b       	or	r24, r25
    3e64:	98 2f       	mov	r25, r24
    3e66:	8d 81       	ldd	r24, Y+5	; 0x05
    3e68:	88 23       	and	r24, r24
    3e6a:	11 f0       	breq	.+4      	; 0x3e70 <usart_format_set+0x2a>
    3e6c:	88 e0       	ldi	r24, 0x08	; 8
    3e6e:	01 c0       	rjmp	.+2      	; 0x3e72 <usart_format_set+0x2c>
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	89 2b       	or	r24, r25
    3e74:	28 2f       	mov	r18, r24
    3e76:	89 81       	ldd	r24, Y+1	; 0x01
    3e78:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7a:	fc 01       	movw	r30, r24
    3e7c:	25 83       	std	Z+5, r18	; 0x05
    3e7e:	25 96       	adiw	r28, 0x05	; 5
    3e80:	cd bf       	out	0x3d, r28	; 61
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	df 91       	pop	r29
    3e86:	cf 91       	pop	r28
    3e88:	08 95       	ret

00003e8a <usart_tx_enable>:
    3e8a:	cf 93       	push	r28
    3e8c:	df 93       	push	r29
    3e8e:	00 d0       	rcall	.+0      	; 0x3e90 <usart_tx_enable+0x6>
    3e90:	cd b7       	in	r28, 0x3d	; 61
    3e92:	de b7       	in	r29, 0x3e	; 62
    3e94:	89 83       	std	Y+1, r24	; 0x01
    3e96:	9a 83       	std	Y+2, r25	; 0x02
    3e98:	89 81       	ldd	r24, Y+1	; 0x01
    3e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	84 81       	ldd	r24, Z+4	; 0x04
    3ea0:	28 2f       	mov	r18, r24
    3ea2:	28 60       	ori	r18, 0x08	; 8
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	24 83       	std	Z+4, r18	; 0x04
    3eac:	0f 90       	pop	r0
    3eae:	0f 90       	pop	r0
    3eb0:	df 91       	pop	r29
    3eb2:	cf 91       	pop	r28
    3eb4:	08 95       	ret

00003eb6 <usart_set_mode>:
    3eb6:	cf 93       	push	r28
    3eb8:	df 93       	push	r29
    3eba:	00 d0       	rcall	.+0      	; 0x3ebc <usart_set_mode+0x6>
    3ebc:	1f 92       	push	r1
    3ebe:	cd b7       	in	r28, 0x3d	; 61
    3ec0:	de b7       	in	r29, 0x3e	; 62
    3ec2:	89 83       	std	Y+1, r24	; 0x01
    3ec4:	9a 83       	std	Y+2, r25	; 0x02
    3ec6:	6b 83       	std	Y+3, r22	; 0x03
    3ec8:	89 81       	ldd	r24, Y+1	; 0x01
    3eca:	9a 81       	ldd	r25, Y+2	; 0x02
    3ecc:	fc 01       	movw	r30, r24
    3ece:	85 81       	ldd	r24, Z+5	; 0x05
    3ed0:	98 2f       	mov	r25, r24
    3ed2:	9f 73       	andi	r25, 0x3F	; 63
    3ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed6:	89 2b       	or	r24, r25
    3ed8:	28 2f       	mov	r18, r24
    3eda:	89 81       	ldd	r24, Y+1	; 0x01
    3edc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ede:	fc 01       	movw	r30, r24
    3ee0:	25 83       	std	Z+5, r18	; 0x05
    3ee2:	23 96       	adiw	r28, 0x03	; 3
    3ee4:	cd bf       	out	0x3d, r28	; 61
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	df 91       	pop	r29
    3eea:	cf 91       	pop	r28
    3eec:	08 95       	ret

00003eee <usart_data_register_is_empty>:
    3eee:	cf 93       	push	r28
    3ef0:	df 93       	push	r29
    3ef2:	00 d0       	rcall	.+0      	; 0x3ef4 <usart_data_register_is_empty+0x6>
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	89 83       	std	Y+1, r24	; 0x01
    3efa:	9a 83       	std	Y+2, r25	; 0x02
    3efc:	89 81       	ldd	r24, Y+1	; 0x01
    3efe:	9a 81       	ldd	r25, Y+2	; 0x02
    3f00:	fc 01       	movw	r30, r24
    3f02:	81 81       	ldd	r24, Z+1	; 0x01
    3f04:	88 2f       	mov	r24, r24
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	80 72       	andi	r24, 0x20	; 32
    3f0a:	99 27       	eor	r25, r25
    3f0c:	21 e0       	ldi	r18, 0x01	; 1
    3f0e:	89 2b       	or	r24, r25
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <usart_data_register_is_empty+0x26>
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	82 2f       	mov	r24, r18
    3f16:	0f 90       	pop	r0
    3f18:	0f 90       	pop	r0
    3f1a:	df 91       	pop	r29
    3f1c:	cf 91       	pop	r28
    3f1e:	08 95       	ret

00003f20 <usart_rx_is_complete>:
    3f20:	cf 93       	push	r28
    3f22:	df 93       	push	r29
    3f24:	00 d0       	rcall	.+0      	; 0x3f26 <usart_rx_is_complete+0x6>
    3f26:	cd b7       	in	r28, 0x3d	; 61
    3f28:	de b7       	in	r29, 0x3e	; 62
    3f2a:	89 83       	std	Y+1, r24	; 0x01
    3f2c:	9a 83       	std	Y+2, r25	; 0x02
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
    3f30:	9a 81       	ldd	r25, Y+2	; 0x02
    3f32:	fc 01       	movw	r30, r24
    3f34:	81 81       	ldd	r24, Z+1	; 0x01
    3f36:	88 2f       	mov	r24, r24
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	80 78       	andi	r24, 0x80	; 128
    3f3c:	99 27       	eor	r25, r25
    3f3e:	21 e0       	ldi	r18, 0x01	; 1
    3f40:	89 2b       	or	r24, r25
    3f42:	09 f4       	brne	.+2      	; 0x3f46 <usart_rx_is_complete+0x26>
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	82 2f       	mov	r24, r18
    3f48:	0f 90       	pop	r0
    3f4a:	0f 90       	pop	r0
    3f4c:	df 91       	pop	r29
    3f4e:	cf 91       	pop	r28
    3f50:	08 95       	ret

00003f52 <sysclk_get_main_hz>:
    3f52:	cf 93       	push	r28
    3f54:	df 93       	push	r29
    3f56:	cd b7       	in	r28, 0x3d	; 61
    3f58:	de b7       	in	r29, 0x3e	; 62
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	98 e4       	ldi	r25, 0x48	; 72
    3f5e:	a8 ee       	ldi	r26, 0xE8	; 232
    3f60:	b1 e0       	ldi	r27, 0x01	; 1
    3f62:	bc 01       	movw	r22, r24
    3f64:	cd 01       	movw	r24, r26
    3f66:	df 91       	pop	r29
    3f68:	cf 91       	pop	r28
    3f6a:	08 95       	ret

00003f6c <sysclk_get_per4_hz>:
    3f6c:	cf 93       	push	r28
    3f6e:	df 93       	push	r29
    3f70:	1f 92       	push	r1
    3f72:	cd b7       	in	r28, 0x3d	; 61
    3f74:	de b7       	in	r29, 0x3e	; 62
    3f76:	19 82       	std	Y+1, r1	; 0x01
    3f78:	ec df       	rcall	.-40     	; 0x3f52 <sysclk_get_main_hz>
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	cb 01       	movw	r24, r22
    3f7e:	29 81       	ldd	r18, Y+1	; 0x01
    3f80:	22 2f       	mov	r18, r18
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	04 c0       	rjmp	.+8      	; 0x3f8e <sysclk_get_per4_hz+0x22>
    3f86:	b6 95       	lsr	r27
    3f88:	a7 95       	ror	r26
    3f8a:	97 95       	ror	r25
    3f8c:	87 95       	ror	r24
    3f8e:	2a 95       	dec	r18
    3f90:	d2 f7       	brpl	.-12     	; 0x3f86 <sysclk_get_per4_hz+0x1a>
    3f92:	bc 01       	movw	r22, r24
    3f94:	cd 01       	movw	r24, r26
    3f96:	0f 90       	pop	r0
    3f98:	df 91       	pop	r29
    3f9a:	cf 91       	pop	r28
    3f9c:	08 95       	ret

00003f9e <sysclk_get_per2_hz>:
    3f9e:	cf 93       	push	r28
    3fa0:	df 93       	push	r29
    3fa2:	cd b7       	in	r28, 0x3d	; 61
    3fa4:	de b7       	in	r29, 0x3e	; 62
    3fa6:	e2 df       	rcall	.-60     	; 0x3f6c <sysclk_get_per4_hz>
    3fa8:	dc 01       	movw	r26, r24
    3faa:	cb 01       	movw	r24, r22
    3fac:	bc 01       	movw	r22, r24
    3fae:	cd 01       	movw	r24, r26
    3fb0:	df 91       	pop	r29
    3fb2:	cf 91       	pop	r28
    3fb4:	08 95       	ret

00003fb6 <sysclk_get_per_hz>:
    3fb6:	cf 93       	push	r28
    3fb8:	df 93       	push	r29
    3fba:	cd b7       	in	r28, 0x3d	; 61
    3fbc:	de b7       	in	r29, 0x3e	; 62
    3fbe:	ef df       	rcall	.-34     	; 0x3f9e <sysclk_get_per2_hz>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	bc 01       	movw	r22, r24
    3fc6:	cd 01       	movw	r24, r26
    3fc8:	df 91       	pop	r29
    3fca:	cf 91       	pop	r28
    3fcc:	08 95       	ret

00003fce <sysclk_enable_peripheral_clock>:
    3fce:	cf 93       	push	r28
    3fd0:	df 93       	push	r29
    3fd2:	00 d0       	rcall	.+0      	; 0x3fd4 <sysclk_enable_peripheral_clock+0x6>
    3fd4:	cd b7       	in	r28, 0x3d	; 61
    3fd6:	de b7       	in	r29, 0x3e	; 62
    3fd8:	89 83       	std	Y+1, r24	; 0x01
    3fda:	9a 83       	std	Y+2, r25	; 0x02
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe0:	89 2b       	or	r24, r25
    3fe2:	09 f4       	brne	.+2      	; 0x3fe6 <sysclk_enable_peripheral_clock+0x18>
    3fe4:	d7 c0       	rjmp	.+430    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fea:	80 3c       	cpi	r24, 0xC0	; 192
    3fec:	91 05       	cpc	r25, r1
    3fee:	21 f4       	brne	.+8      	; 0x3ff8 <sysclk_enable_peripheral_clock+0x2a>
    3ff0:	60 e1       	ldi	r22, 0x10	; 16
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	91 d9       	rcall	.-3294   	; 0x3318 <sysclk_enable_module>
    3ff6:	ce c0       	rjmp	.+412    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    3ff8:	89 81       	ldd	r24, Y+1	; 0x01
    3ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffc:	81 15       	cp	r24, r1
    3ffe:	94 40       	sbci	r25, 0x04	; 4
    4000:	21 f4       	brne	.+8      	; 0x400a <sysclk_enable_peripheral_clock+0x3c>
    4002:	64 e0       	ldi	r22, 0x04	; 4
    4004:	80 e0       	ldi	r24, 0x00	; 0
    4006:	88 d9       	rcall	.-3312   	; 0x3318 <sysclk_enable_module>
    4008:	c5 c0       	rjmp	.+394    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    400a:	89 81       	ldd	r24, Y+1	; 0x01
    400c:	9a 81       	ldd	r25, Y+2	; 0x02
    400e:	80 38       	cpi	r24, 0x80	; 128
    4010:	91 40       	sbci	r25, 0x01	; 1
    4012:	21 f4       	brne	.+8      	; 0x401c <sysclk_enable_peripheral_clock+0x4e>
    4014:	62 e0       	ldi	r22, 0x02	; 2
    4016:	80 e0       	ldi	r24, 0x00	; 0
    4018:	7f d9       	rcall	.-3330   	; 0x3318 <sysclk_enable_module>
    401a:	bc c0       	rjmp	.+376    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    401c:	89 81       	ldd	r24, Y+1	; 0x01
    401e:	9a 81       	ldd	r25, Y+2	; 0x02
    4020:	81 15       	cp	r24, r1
    4022:	91 40       	sbci	r25, 0x01	; 1
    4024:	21 f4       	brne	.+8      	; 0x402e <sysclk_enable_peripheral_clock+0x60>
    4026:	61 e0       	ldi	r22, 0x01	; 1
    4028:	80 e0       	ldi	r24, 0x00	; 0
    402a:	76 d9       	rcall	.-3348   	; 0x3318 <sysclk_enable_module>
    402c:	b3 c0       	rjmp	.+358    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    402e:	89 81       	ldd	r24, Y+1	; 0x01
    4030:	9a 81       	ldd	r25, Y+2	; 0x02
    4032:	80 38       	cpi	r24, 0x80	; 128
    4034:	93 40       	sbci	r25, 0x03	; 3
    4036:	21 f4       	brne	.+8      	; 0x4040 <sysclk_enable_peripheral_clock+0x72>
    4038:	61 e0       	ldi	r22, 0x01	; 1
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	6d d9       	rcall	.-3366   	; 0x3318 <sysclk_enable_module>
    403e:	aa c0       	rjmp	.+340    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    4040:	89 81       	ldd	r24, Y+1	; 0x01
    4042:	9a 81       	ldd	r25, Y+2	; 0x02
    4044:	81 15       	cp	r24, r1
    4046:	92 40       	sbci	r25, 0x02	; 2
    4048:	21 f4       	brne	.+8      	; 0x4052 <sysclk_enable_peripheral_clock+0x84>
    404a:	62 e0       	ldi	r22, 0x02	; 2
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	64 d9       	rcall	.-3384   	; 0x3318 <sysclk_enable_module>
    4050:	a1 c0       	rjmp	.+322    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    4052:	89 81       	ldd	r24, Y+1	; 0x01
    4054:	9a 81       	ldd	r25, Y+2	; 0x02
    4056:	80 32       	cpi	r24, 0x20	; 32
    4058:	93 40       	sbci	r25, 0x03	; 3
    405a:	21 f4       	brne	.+8      	; 0x4064 <sysclk_enable_peripheral_clock+0x96>
    405c:	64 e0       	ldi	r22, 0x04	; 4
    405e:	82 e0       	ldi	r24, 0x02	; 2
    4060:	5b d9       	rcall	.-3402   	; 0x3318 <sysclk_enable_module>
    4062:	98 c0       	rjmp	.+304    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    4064:	89 81       	ldd	r24, Y+1	; 0x01
    4066:	9a 81       	ldd	r25, Y+2	; 0x02
    4068:	81 15       	cp	r24, r1
    406a:	98 40       	sbci	r25, 0x08	; 8
    406c:	21 f4       	brne	.+8      	; 0x4076 <sysclk_enable_peripheral_clock+0xa8>
    406e:	61 e0       	ldi	r22, 0x01	; 1
    4070:	83 e0       	ldi	r24, 0x03	; 3
    4072:	52 d9       	rcall	.-3420   	; 0x3318 <sysclk_enable_module>
    4074:	8f c0       	rjmp	.+286    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    4076:	89 81       	ldd	r24, Y+1	; 0x01
    4078:	9a 81       	ldd	r25, Y+2	; 0x02
    407a:	81 15       	cp	r24, r1
    407c:	99 40       	sbci	r25, 0x09	; 9
    407e:	21 f4       	brne	.+8      	; 0x4088 <sysclk_enable_peripheral_clock+0xba>
    4080:	61 e0       	ldi	r22, 0x01	; 1
    4082:	84 e0       	ldi	r24, 0x04	; 4
    4084:	49 d9       	rcall	.-3438   	; 0x3318 <sysclk_enable_module>
    4086:	86 c0       	rjmp	.+268    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    4088:	89 81       	ldd	r24, Y+1	; 0x01
    408a:	9a 81       	ldd	r25, Y+2	; 0x02
    408c:	81 15       	cp	r24, r1
    408e:	9a 40       	sbci	r25, 0x0A	; 10
    4090:	21 f4       	brne	.+8      	; 0x409a <sysclk_enable_peripheral_clock+0xcc>
    4092:	61 e0       	ldi	r22, 0x01	; 1
    4094:	85 e0       	ldi	r24, 0x05	; 5
    4096:	40 d9       	rcall	.-3456   	; 0x3318 <sysclk_enable_module>
    4098:	7d c0       	rjmp	.+250    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    409a:	89 81       	ldd	r24, Y+1	; 0x01
    409c:	9a 81       	ldd	r25, Y+2	; 0x02
    409e:	80 34       	cpi	r24, 0x40	; 64
    40a0:	98 40       	sbci	r25, 0x08	; 8
    40a2:	21 f4       	brne	.+8      	; 0x40ac <sysclk_enable_peripheral_clock+0xde>
    40a4:	62 e0       	ldi	r22, 0x02	; 2
    40a6:	83 e0       	ldi	r24, 0x03	; 3
    40a8:	37 d9       	rcall	.-3474   	; 0x3318 <sysclk_enable_module>
    40aa:	74 c0       	rjmp	.+232    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	9a 81       	ldd	r25, Y+2	; 0x02
    40b0:	80 34       	cpi	r24, 0x40	; 64
    40b2:	99 40       	sbci	r25, 0x09	; 9
    40b4:	21 f4       	brne	.+8      	; 0x40be <sysclk_enable_peripheral_clock+0xf0>
    40b6:	62 e0       	ldi	r22, 0x02	; 2
    40b8:	84 e0       	ldi	r24, 0x04	; 4
    40ba:	2e d9       	rcall	.-3492   	; 0x3318 <sysclk_enable_module>
    40bc:	6b c0       	rjmp	.+214    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    40be:	89 81       	ldd	r24, Y+1	; 0x01
    40c0:	9a 81       	ldd	r25, Y+2	; 0x02
    40c2:	80 39       	cpi	r24, 0x90	; 144
    40c4:	98 40       	sbci	r25, 0x08	; 8
    40c6:	21 f4       	brne	.+8      	; 0x40d0 <sysclk_enable_peripheral_clock+0x102>
    40c8:	64 e0       	ldi	r22, 0x04	; 4
    40ca:	83 e0       	ldi	r24, 0x03	; 3
    40cc:	25 d9       	rcall	.-3510   	; 0x3318 <sysclk_enable_module>
    40ce:	62 c0       	rjmp	.+196    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    40d0:	89 81       	ldd	r24, Y+1	; 0x01
    40d2:	9a 81       	ldd	r25, Y+2	; 0x02
    40d4:	80 39       	cpi	r24, 0x90	; 144
    40d6:	99 40       	sbci	r25, 0x09	; 9
    40d8:	21 f4       	brne	.+8      	; 0x40e2 <sysclk_enable_peripheral_clock+0x114>
    40da:	64 e0       	ldi	r22, 0x04	; 4
    40dc:	84 e0       	ldi	r24, 0x04	; 4
    40de:	1c d9       	rcall	.-3528   	; 0x3318 <sysclk_enable_module>
    40e0:	59 c0       	rjmp	.+178    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	9a 81       	ldd	r25, Y+2	; 0x02
    40e6:	80 39       	cpi	r24, 0x90	; 144
    40e8:	9a 40       	sbci	r25, 0x0A	; 10
    40ea:	21 f4       	brne	.+8      	; 0x40f4 <sysclk_enable_peripheral_clock+0x126>
    40ec:	64 e0       	ldi	r22, 0x04	; 4
    40ee:	85 e0       	ldi	r24, 0x05	; 5
    40f0:	13 d9       	rcall	.-3546   	; 0x3318 <sysclk_enable_module>
    40f2:	50 c0       	rjmp	.+160    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	9a 81       	ldd	r25, Y+2	; 0x02
    40f8:	80 3c       	cpi	r24, 0xC0	; 192
    40fa:	98 40       	sbci	r25, 0x08	; 8
    40fc:	21 f4       	brne	.+8      	; 0x4106 <sysclk_enable_peripheral_clock+0x138>
    40fe:	68 e0       	ldi	r22, 0x08	; 8
    4100:	83 e0       	ldi	r24, 0x03	; 3
    4102:	0a d9       	rcall	.-3564   	; 0x3318 <sysclk_enable_module>
    4104:	47 c0       	rjmp	.+142    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    4106:	89 81       	ldd	r24, Y+1	; 0x01
    4108:	9a 81       	ldd	r25, Y+2	; 0x02
    410a:	80 3c       	cpi	r24, 0xC0	; 192
    410c:	99 40       	sbci	r25, 0x09	; 9
    410e:	21 f4       	brne	.+8      	; 0x4118 <sysclk_enable_peripheral_clock+0x14a>
    4110:	68 e0       	ldi	r22, 0x08	; 8
    4112:	84 e0       	ldi	r24, 0x04	; 4
    4114:	01 d9       	rcall	.-3582   	; 0x3318 <sysclk_enable_module>
    4116:	3e c0       	rjmp	.+124    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    4118:	89 81       	ldd	r24, Y+1	; 0x01
    411a:	9a 81       	ldd	r25, Y+2	; 0x02
    411c:	80 3a       	cpi	r24, 0xA0	; 160
    411e:	98 40       	sbci	r25, 0x08	; 8
    4120:	21 f4       	brne	.+8      	; 0x412a <sysclk_enable_peripheral_clock+0x15c>
    4122:	60 e1       	ldi	r22, 0x10	; 16
    4124:	83 e0       	ldi	r24, 0x03	; 3
    4126:	f8 d8       	rcall	.-3600   	; 0x3318 <sysclk_enable_module>
    4128:	35 c0       	rjmp	.+106    	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    412a:	89 81       	ldd	r24, Y+1	; 0x01
    412c:	9a 81       	ldd	r25, Y+2	; 0x02
    412e:	80 3a       	cpi	r24, 0xA0	; 160
    4130:	99 40       	sbci	r25, 0x09	; 9
    4132:	21 f4       	brne	.+8      	; 0x413c <sysclk_enable_peripheral_clock+0x16e>
    4134:	60 e1       	ldi	r22, 0x10	; 16
    4136:	84 e0       	ldi	r24, 0x04	; 4
    4138:	ef d8       	rcall	.-3618   	; 0x3318 <sysclk_enable_module>
    413a:	2c c0       	rjmp	.+88     	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    413c:	89 81       	ldd	r24, Y+1	; 0x01
    413e:	9a 81       	ldd	r25, Y+2	; 0x02
    4140:	80 3a       	cpi	r24, 0xA0	; 160
    4142:	9a 40       	sbci	r25, 0x0A	; 10
    4144:	21 f4       	brne	.+8      	; 0x414e <sysclk_enable_peripheral_clock+0x180>
    4146:	60 e1       	ldi	r22, 0x10	; 16
    4148:	85 e0       	ldi	r24, 0x05	; 5
    414a:	e6 d8       	rcall	.-3636   	; 0x3318 <sysclk_enable_module>
    414c:	23 c0       	rjmp	.+70     	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    414e:	89 81       	ldd	r24, Y+1	; 0x01
    4150:	9a 81       	ldd	r25, Y+2	; 0x02
    4152:	80 3b       	cpi	r24, 0xB0	; 176
    4154:	98 40       	sbci	r25, 0x08	; 8
    4156:	21 f4       	brne	.+8      	; 0x4160 <sysclk_enable_peripheral_clock+0x192>
    4158:	60 e2       	ldi	r22, 0x20	; 32
    415a:	83 e0       	ldi	r24, 0x03	; 3
    415c:	dd d8       	rcall	.-3654   	; 0x3318 <sysclk_enable_module>
    415e:	1a c0       	rjmp	.+52     	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    4160:	89 81       	ldd	r24, Y+1	; 0x01
    4162:	9a 81       	ldd	r25, Y+2	; 0x02
    4164:	80 3b       	cpi	r24, 0xB0	; 176
    4166:	99 40       	sbci	r25, 0x09	; 9
    4168:	21 f4       	brne	.+8      	; 0x4172 <sysclk_enable_peripheral_clock+0x1a4>
    416a:	60 e2       	ldi	r22, 0x20	; 32
    416c:	84 e0       	ldi	r24, 0x04	; 4
    416e:	d4 d8       	rcall	.-3672   	; 0x3318 <sysclk_enable_module>
    4170:	11 c0       	rjmp	.+34     	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    4172:	89 81       	ldd	r24, Y+1	; 0x01
    4174:	9a 81       	ldd	r25, Y+2	; 0x02
    4176:	80 38       	cpi	r24, 0x80	; 128
    4178:	94 40       	sbci	r25, 0x04	; 4
    417a:	21 f4       	brne	.+8      	; 0x4184 <sysclk_enable_peripheral_clock+0x1b6>
    417c:	60 e4       	ldi	r22, 0x40	; 64
    417e:	83 e0       	ldi	r24, 0x03	; 3
    4180:	cb d8       	rcall	.-3690   	; 0x3318 <sysclk_enable_module>
    4182:	08 c0       	rjmp	.+16     	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    4184:	89 81       	ldd	r24, Y+1	; 0x01
    4186:	9a 81       	ldd	r25, Y+2	; 0x02
    4188:	80 3a       	cpi	r24, 0xA0	; 160
    418a:	94 40       	sbci	r25, 0x04	; 4
    418c:	19 f4       	brne	.+6      	; 0x4194 <sysclk_enable_peripheral_clock+0x1c6>
    418e:	60 e4       	ldi	r22, 0x40	; 64
    4190:	85 e0       	ldi	r24, 0x05	; 5
    4192:	c2 d8       	rcall	.-3708   	; 0x3318 <sysclk_enable_module>
    4194:	0f 90       	pop	r0
    4196:	0f 90       	pop	r0
    4198:	df 91       	pop	r29
    419a:	cf 91       	pop	r28
    419c:	08 95       	ret

0000419e <usart_init_rs232>:
    419e:	0f 93       	push	r16
    41a0:	1f 93       	push	r17
    41a2:	cf 93       	push	r28
    41a4:	df 93       	push	r29
    41a6:	cd b7       	in	r28, 0x3d	; 61
    41a8:	de b7       	in	r29, 0x3e	; 62
    41aa:	25 97       	sbiw	r28, 0x05	; 5
    41ac:	cd bf       	out	0x3d, r28	; 61
    41ae:	de bf       	out	0x3e, r29	; 62
    41b0:	8a 83       	std	Y+2, r24	; 0x02
    41b2:	9b 83       	std	Y+3, r25	; 0x03
    41b4:	6c 83       	std	Y+4, r22	; 0x04
    41b6:	7d 83       	std	Y+5, r23	; 0x05
    41b8:	8a 81       	ldd	r24, Y+2	; 0x02
    41ba:	9b 81       	ldd	r25, Y+3	; 0x03
    41bc:	08 df       	rcall	.-496    	; 0x3fce <sysclk_enable_peripheral_clock>
    41be:	8a 81       	ldd	r24, Y+2	; 0x02
    41c0:	9b 81       	ldd	r25, Y+3	; 0x03
    41c2:	60 e0       	ldi	r22, 0x00	; 0
    41c4:	78 de       	rcall	.-784    	; 0x3eb6 <usart_set_mode>
    41c6:	8c 81       	ldd	r24, Y+4	; 0x04
    41c8:	9d 81       	ldd	r25, Y+5	; 0x05
    41ca:	fc 01       	movw	r30, r24
    41cc:	26 81       	ldd	r18, Z+6	; 0x06
    41ce:	8c 81       	ldd	r24, Y+4	; 0x04
    41d0:	9d 81       	ldd	r25, Y+5	; 0x05
    41d2:	fc 01       	movw	r30, r24
    41d4:	45 81       	ldd	r20, Z+5	; 0x05
    41d6:	8c 81       	ldd	r24, Y+4	; 0x04
    41d8:	9d 81       	ldd	r25, Y+5	; 0x05
    41da:	fc 01       	movw	r30, r24
    41dc:	34 81       	ldd	r19, Z+4	; 0x04
    41de:	8a 81       	ldd	r24, Y+2	; 0x02
    41e0:	9b 81       	ldd	r25, Y+3	; 0x03
    41e2:	63 2f       	mov	r22, r19
    41e4:	30 de       	rcall	.-928    	; 0x3e46 <usart_format_set>
    41e6:	e7 de       	rcall	.-562    	; 0x3fb6 <sysclk_get_per_hz>
    41e8:	9b 01       	movw	r18, r22
    41ea:	ac 01       	movw	r20, r24
    41ec:	8c 81       	ldd	r24, Y+4	; 0x04
    41ee:	9d 81       	ldd	r25, Y+5	; 0x05
    41f0:	fc 01       	movw	r30, r24
    41f2:	80 81       	ld	r24, Z
    41f4:	91 81       	ldd	r25, Z+1	; 0x01
    41f6:	a2 81       	ldd	r26, Z+2	; 0x02
    41f8:	b3 81       	ldd	r27, Z+3	; 0x03
    41fa:	ea 81       	ldd	r30, Y+2	; 0x02
    41fc:	fb 81       	ldd	r31, Y+3	; 0x03
    41fe:	89 01       	movw	r16, r18
    4200:	9a 01       	movw	r18, r20
    4202:	ac 01       	movw	r20, r24
    4204:	bd 01       	movw	r22, r26
    4206:	cf 01       	movw	r24, r30
    4208:	48 d0       	rcall	.+144    	; 0x429a <usart_set_baudrate>
    420a:	89 83       	std	Y+1, r24	; 0x01
    420c:	8a 81       	ldd	r24, Y+2	; 0x02
    420e:	9b 81       	ldd	r25, Y+3	; 0x03
    4210:	3c de       	rcall	.-904    	; 0x3e8a <usart_tx_enable>
    4212:	8a 81       	ldd	r24, Y+2	; 0x02
    4214:	9b 81       	ldd	r25, Y+3	; 0x03
    4216:	01 de       	rcall	.-1022   	; 0x3e1a <usart_rx_enable>
    4218:	89 81       	ldd	r24, Y+1	; 0x01
    421a:	25 96       	adiw	r28, 0x05	; 5
    421c:	cd bf       	out	0x3d, r28	; 61
    421e:	de bf       	out	0x3e, r29	; 62
    4220:	df 91       	pop	r29
    4222:	cf 91       	pop	r28
    4224:	1f 91       	pop	r17
    4226:	0f 91       	pop	r16
    4228:	08 95       	ret

0000422a <usart_putchar>:
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	00 d0       	rcall	.+0      	; 0x4230 <usart_putchar+0x6>
    4230:	1f 92       	push	r1
    4232:	cd b7       	in	r28, 0x3d	; 61
    4234:	de b7       	in	r29, 0x3e	; 62
    4236:	89 83       	std	Y+1, r24	; 0x01
    4238:	9a 83       	std	Y+2, r25	; 0x02
    423a:	6b 83       	std	Y+3, r22	; 0x03
    423c:	00 00       	nop
    423e:	89 81       	ldd	r24, Y+1	; 0x01
    4240:	9a 81       	ldd	r25, Y+2	; 0x02
    4242:	55 de       	rcall	.-854    	; 0x3eee <usart_data_register_is_empty>
    4244:	98 2f       	mov	r25, r24
    4246:	81 e0       	ldi	r24, 0x01	; 1
    4248:	89 27       	eor	r24, r25
    424a:	88 23       	and	r24, r24
    424c:	c1 f7       	brne	.-16     	; 0x423e <usart_putchar+0x14>
    424e:	89 81       	ldd	r24, Y+1	; 0x01
    4250:	9a 81       	ldd	r25, Y+2	; 0x02
    4252:	2b 81       	ldd	r18, Y+3	; 0x03
    4254:	fc 01       	movw	r30, r24
    4256:	20 83       	st	Z, r18
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	23 96       	adiw	r28, 0x03	; 3
    425e:	cd bf       	out	0x3d, r28	; 61
    4260:	de bf       	out	0x3e, r29	; 62
    4262:	df 91       	pop	r29
    4264:	cf 91       	pop	r28
    4266:	08 95       	ret

00004268 <usart_getchar>:
    4268:	cf 93       	push	r28
    426a:	df 93       	push	r29
    426c:	00 d0       	rcall	.+0      	; 0x426e <usart_getchar+0x6>
    426e:	cd b7       	in	r28, 0x3d	; 61
    4270:	de b7       	in	r29, 0x3e	; 62
    4272:	89 83       	std	Y+1, r24	; 0x01
    4274:	9a 83       	std	Y+2, r25	; 0x02
    4276:	00 00       	nop
    4278:	89 81       	ldd	r24, Y+1	; 0x01
    427a:	9a 81       	ldd	r25, Y+2	; 0x02
    427c:	51 de       	rcall	.-862    	; 0x3f20 <usart_rx_is_complete>
    427e:	98 2f       	mov	r25, r24
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	89 27       	eor	r24, r25
    4284:	88 23       	and	r24, r24
    4286:	c1 f7       	brne	.-16     	; 0x4278 <usart_getchar+0x10>
    4288:	89 81       	ldd	r24, Y+1	; 0x01
    428a:	9a 81       	ldd	r25, Y+2	; 0x02
    428c:	fc 01       	movw	r30, r24
    428e:	80 81       	ld	r24, Z
    4290:	0f 90       	pop	r0
    4292:	0f 90       	pop	r0
    4294:	df 91       	pop	r29
    4296:	cf 91       	pop	r28
    4298:	08 95       	ret

0000429a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    429a:	ef 92       	push	r14
    429c:	ff 92       	push	r15
    429e:	0f 93       	push	r16
    42a0:	1f 93       	push	r17
    42a2:	cf 93       	push	r28
    42a4:	df 93       	push	r29
    42a6:	cd b7       	in	r28, 0x3d	; 61
    42a8:	de b7       	in	r29, 0x3e	; 62
    42aa:	af 97       	sbiw	r28, 0x2f	; 47
    42ac:	cd bf       	out	0x3d, r28	; 61
    42ae:	de bf       	out	0x3e, r29	; 62
    42b0:	8e 8b       	std	Y+22, r24	; 0x16
    42b2:	9f 8b       	std	Y+23, r25	; 0x17
    42b4:	48 8f       	std	Y+24, r20	; 0x18
    42b6:	59 8f       	std	Y+25, r21	; 0x19
    42b8:	6a 8f       	std	Y+26, r22	; 0x1a
    42ba:	7b 8f       	std	Y+27, r23	; 0x1b
    42bc:	0c 8f       	std	Y+28, r16	; 0x1c
    42be:	1d 8f       	std	Y+29, r17	; 0x1d
    42c0:	2e 8f       	std	Y+30, r18	; 0x1e
    42c2:	3f 8f       	std	Y+31, r19	; 0x1f

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    42c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    42c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    42c8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    42ca:	bf 8d       	ldd	r27, Y+31	; 0x1f
    42cc:	68 94       	set
    42ce:	12 f8       	bld	r1, 2
    42d0:	b6 95       	lsr	r27
    42d2:	a7 95       	ror	r26
    42d4:	97 95       	ror	r25
    42d6:	87 95       	ror	r24
    42d8:	16 94       	lsr	r1
    42da:	d1 f7       	brne	.-12     	; 0x42d0 <usart_set_baudrate+0x36>
    42dc:	8e 87       	std	Y+14, r24	; 0x0e
    42de:	9f 87       	std	Y+15, r25	; 0x0f
    42e0:	a8 8b       	std	Y+16, r26	; 0x10
    42e2:	b9 8b       	std	Y+17, r27	; 0x11
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    42e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    42e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    42e8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    42ea:	bf 8d       	ldd	r27, Y+31	; 0x1f
    42ec:	07 2e       	mov	r0, r23
    42ee:	76 e1       	ldi	r23, 0x16	; 22
    42f0:	b6 95       	lsr	r27
    42f2:	a7 95       	ror	r26
    42f4:	97 95       	ror	r25
    42f6:	87 95       	ror	r24
    42f8:	7a 95       	dec	r23
    42fa:	d1 f7       	brne	.-12     	; 0x42f0 <usart_set_baudrate+0x56>
    42fc:	70 2d       	mov	r23, r0
    42fe:	8a 87       	std	Y+10, r24	; 0x0a
    4300:	9b 87       	std	Y+11, r25	; 0x0b
    4302:	ac 87       	std	Y+12, r26	; 0x0c
    4304:	bd 87       	std	Y+13, r27	; 0x0d

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    4306:	8e 89       	ldd	r24, Y+22	; 0x16
    4308:	9f 89       	ldd	r25, Y+23	; 0x17
    430a:	fc 01       	movw	r30, r24
    430c:	84 81       	ldd	r24, Z+4	; 0x04
    430e:	88 2f       	mov	r24, r24
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	84 70       	andi	r24, 0x04	; 4
    4314:	99 27       	eor	r25, r25
    4316:	89 2b       	or	r24, r25
    4318:	c1 f4       	brne	.+48     	; 0x434a <usart_set_baudrate+0xb0>
		max_rate /= 2;
    431a:	8e 85       	ldd	r24, Y+14	; 0x0e
    431c:	9f 85       	ldd	r25, Y+15	; 0x0f
    431e:	a8 89       	ldd	r26, Y+16	; 0x10
    4320:	b9 89       	ldd	r27, Y+17	; 0x11
    4322:	b6 95       	lsr	r27
    4324:	a7 95       	ror	r26
    4326:	97 95       	ror	r25
    4328:	87 95       	ror	r24
    432a:	8e 87       	std	Y+14, r24	; 0x0e
    432c:	9f 87       	std	Y+15, r25	; 0x0f
    432e:	a8 8b       	std	Y+16, r26	; 0x10
    4330:	b9 8b       	std	Y+17, r27	; 0x11
		min_rate /= 2;
    4332:	8a 85       	ldd	r24, Y+10	; 0x0a
    4334:	9b 85       	ldd	r25, Y+11	; 0x0b
    4336:	ac 85       	ldd	r26, Y+12	; 0x0c
    4338:	bd 85       	ldd	r27, Y+13	; 0x0d
    433a:	b6 95       	lsr	r27
    433c:	a7 95       	ror	r26
    433e:	97 95       	ror	r25
    4340:	87 95       	ror	r24
    4342:	8a 87       	std	Y+10, r24	; 0x0a
    4344:	9b 87       	std	Y+11, r25	; 0x0b
    4346:	ac 87       	std	Y+12, r26	; 0x0c
    4348:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    434a:	28 8d       	ldd	r18, Y+24	; 0x18
    434c:	39 8d       	ldd	r19, Y+25	; 0x19
    434e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4350:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4352:	8e 85       	ldd	r24, Y+14	; 0x0e
    4354:	9f 85       	ldd	r25, Y+15	; 0x0f
    4356:	a8 89       	ldd	r26, Y+16	; 0x10
    4358:	b9 89       	ldd	r27, Y+17	; 0x11
    435a:	82 17       	cp	r24, r18
    435c:	93 07       	cpc	r25, r19
    435e:	a4 07       	cpc	r26, r20
    4360:	b5 07       	cpc	r27, r21
    4362:	68 f0       	brcs	.+26     	; 0x437e <usart_set_baudrate+0xe4>
    4364:	28 8d       	ldd	r18, Y+24	; 0x18
    4366:	39 8d       	ldd	r19, Y+25	; 0x19
    4368:	4a 8d       	ldd	r20, Y+26	; 0x1a
    436a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    436c:	8a 85       	ldd	r24, Y+10	; 0x0a
    436e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4370:	ac 85       	ldd	r26, Y+12	; 0x0c
    4372:	bd 85       	ldd	r27, Y+13	; 0x0d
    4374:	28 17       	cp	r18, r24
    4376:	39 07       	cpc	r19, r25
    4378:	4a 07       	cpc	r20, r26
    437a:	5b 07       	cpc	r21, r27
    437c:	10 f4       	brcc	.+4      	; 0x4382 <usart_set_baudrate+0xe8>
		return false;
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	3f c1       	rjmp	.+638    	; 0x4600 <usart_set_baudrate+0x366>
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    4382:	8e 89       	ldd	r24, Y+22	; 0x16
    4384:	9f 89       	ldd	r25, Y+23	; 0x17
    4386:	fc 01       	movw	r30, r24
    4388:	84 81       	ldd	r24, Z+4	; 0x04
    438a:	88 2f       	mov	r24, r24
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	84 70       	andi	r24, 0x04	; 4
    4390:	99 27       	eor	r25, r25
    4392:	89 2b       	or	r24, r25
    4394:	61 f4       	brne	.+24     	; 0x43ae <usart_set_baudrate+0x114>
		baud *= 2;
    4396:	88 8d       	ldd	r24, Y+24	; 0x18
    4398:	99 8d       	ldd	r25, Y+25	; 0x19
    439a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    439c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    439e:	88 0f       	add	r24, r24
    43a0:	99 1f       	adc	r25, r25
    43a2:	aa 1f       	adc	r26, r26
    43a4:	bb 1f       	adc	r27, r27
    43a6:	88 8f       	std	Y+24, r24	; 0x18
    43a8:	99 8f       	std	Y+25, r25	; 0x19
    43aa:	aa 8f       	std	Y+26, r26	; 0x1a
    43ac:	bb 8f       	std	Y+27, r27	; 0x1b
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    43ae:	8f ef       	ldi	r24, 0xFF	; 255
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	a0 e0       	ldi	r26, 0x00	; 0
    43b4:	b0 e0       	ldi	r27, 0x00	; 0
    43b6:	8e 83       	std	Y+6, r24	; 0x06
    43b8:	9f 83       	std	Y+7, r25	; 0x07
    43ba:	a8 87       	std	Y+8, r26	; 0x08
    43bc:	b9 87       	std	Y+9, r27	; 0x09
	ratio = cpu_hz / baud;
    43be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    43c0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    43c2:	ae 8d       	ldd	r26, Y+30	; 0x1e
    43c4:	bf 8d       	ldd	r27, Y+31	; 0x1f
    43c6:	28 8d       	ldd	r18, Y+24	; 0x18
    43c8:	39 8d       	ldd	r19, Y+25	; 0x19
    43ca:	4a 8d       	ldd	r20, Y+26	; 0x1a
    43cc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    43ce:	bc 01       	movw	r22, r24
    43d0:	cd 01       	movw	r24, r26
    43d2:	0e 94 a7 2c 	call	0x594e	; 0x594e <__udivmodsi4>
    43d6:	da 01       	movw	r26, r20
    43d8:	c9 01       	movw	r24, r18
    43da:	8a 8b       	std	Y+18, r24	; 0x12
    43dc:	9b 8b       	std	Y+19, r25	; 0x13
    43de:	ac 8b       	std	Y+20, r26	; 0x14
    43e0:	bd 8b       	std	Y+21, r27	; 0x15

	for (exp = -7; exp < 7; exp++) {
    43e2:	89 ef       	ldi	r24, 0xF9	; 249
    43e4:	89 83       	std	Y+1, r24	; 0x01
    43e6:	29 c0       	rjmp	.+82     	; 0x443a <usart_set_baudrate+0x1a0>
		if (ratio < limit) {
    43e8:	2a 89       	ldd	r18, Y+18	; 0x12
    43ea:	3b 89       	ldd	r19, Y+19	; 0x13
    43ec:	4c 89       	ldd	r20, Y+20	; 0x14
    43ee:	5d 89       	ldd	r21, Y+21	; 0x15
    43f0:	8e 81       	ldd	r24, Y+6	; 0x06
    43f2:	9f 81       	ldd	r25, Y+7	; 0x07
    43f4:	a8 85       	ldd	r26, Y+8	; 0x08
    43f6:	b9 85       	ldd	r27, Y+9	; 0x09
    43f8:	28 17       	cp	r18, r24
    43fa:	39 07       	cpc	r19, r25
    43fc:	4a 07       	cpc	r20, r26
    43fe:	5b 07       	cpc	r21, r27
    4400:	08 f4       	brcc	.+2      	; 0x4404 <usart_set_baudrate+0x16a>
			break;
    4402:	1e c0       	rjmp	.+60     	; 0x4440 <usart_set_baudrate+0x1a6>
		}

		limit <<= 1;
    4404:	8e 81       	ldd	r24, Y+6	; 0x06
    4406:	9f 81       	ldd	r25, Y+7	; 0x07
    4408:	a8 85       	ldd	r26, Y+8	; 0x08
    440a:	b9 85       	ldd	r27, Y+9	; 0x09
    440c:	88 0f       	add	r24, r24
    440e:	99 1f       	adc	r25, r25
    4410:	aa 1f       	adc	r26, r26
    4412:	bb 1f       	adc	r27, r27
    4414:	8e 83       	std	Y+6, r24	; 0x06
    4416:	9f 83       	std	Y+7, r25	; 0x07
    4418:	a8 87       	std	Y+8, r26	; 0x08
    441a:	b9 87       	std	Y+9, r27	; 0x09

		if (exp < -3) {
    441c:	89 81       	ldd	r24, Y+1	; 0x01
    441e:	8d 3f       	cpi	r24, 0xFD	; 253
    4420:	4c f4       	brge	.+18     	; 0x4434 <usart_set_baudrate+0x19a>
			limit |= 1;
    4422:	8e 81       	ldd	r24, Y+6	; 0x06
    4424:	9f 81       	ldd	r25, Y+7	; 0x07
    4426:	a8 85       	ldd	r26, Y+8	; 0x08
    4428:	b9 85       	ldd	r27, Y+9	; 0x09
    442a:	81 60       	ori	r24, 0x01	; 1
    442c:	8e 83       	std	Y+6, r24	; 0x06
    442e:	9f 83       	std	Y+7, r25	; 0x07
    4430:	a8 87       	std	Y+8, r26	; 0x08
    4432:	b9 87       	std	Y+9, r27	; 0x09

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    4434:	89 81       	ldd	r24, Y+1	; 0x01
    4436:	8f 5f       	subi	r24, 0xFF	; 255
    4438:	89 83       	std	Y+1, r24	; 0x01
    443a:	89 81       	ldd	r24, Y+1	; 0x01
    443c:	87 30       	cpi	r24, 0x07	; 7
    443e:	a4 f2       	brlt	.-88     	; 0x43e8 <usart_set_baudrate+0x14e>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    4440:	89 81       	ldd	r24, Y+1	; 0x01
    4442:	88 23       	and	r24, r24
    4444:	0c f0       	brlt	.+2      	; 0x4448 <usart_set_baudrate+0x1ae>
    4446:	8a c0       	rjmp	.+276    	; 0x455c <usart_set_baudrate+0x2c2>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    4448:	88 8d       	ldd	r24, Y+24	; 0x18
    444a:	99 8d       	ldd	r25, Y+25	; 0x19
    444c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    444e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4450:	88 0f       	add	r24, r24
    4452:	99 1f       	adc	r25, r25
    4454:	aa 1f       	adc	r26, r26
    4456:	bb 1f       	adc	r27, r27
    4458:	88 0f       	add	r24, r24
    445a:	99 1f       	adc	r25, r25
    445c:	aa 1f       	adc	r26, r26
    445e:	bb 1f       	adc	r27, r27
    4460:	88 0f       	add	r24, r24
    4462:	99 1f       	adc	r25, r25
    4464:	aa 1f       	adc	r26, r26
    4466:	bb 1f       	adc	r27, r27
    4468:	9c 01       	movw	r18, r24
    446a:	ad 01       	movw	r20, r26
    446c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    446e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4470:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4472:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4474:	82 1b       	sub	r24, r18
    4476:	93 0b       	sbc	r25, r19
    4478:	a4 0b       	sbc	r26, r20
    447a:	b5 0b       	sbc	r27, r21
    447c:	8c 8f       	std	Y+28, r24	; 0x1c
    447e:	9d 8f       	std	Y+29, r25	; 0x1d
    4480:	ae 8f       	std	Y+30, r26	; 0x1e
    4482:	bf 8f       	std	Y+31, r27	; 0x1f
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    4484:	89 81       	ldd	r24, Y+1	; 0x01
    4486:	8e 3f       	cpi	r24, 0xFE	; 254
    4488:	94 f5       	brge	.+100    	; 0x44ee <usart_set_baudrate+0x254>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    448a:	89 81       	ldd	r24, Y+1	; 0x01
    448c:	08 2e       	mov	r0, r24
    448e:	00 0c       	add	r0, r0
    4490:	99 0b       	sbc	r25, r25
    4492:	2d ef       	ldi	r18, 0xFD	; 253
    4494:	3f ef       	ldi	r19, 0xFF	; 255
    4496:	28 1b       	sub	r18, r24
    4498:	39 0b       	sbc	r19, r25
    449a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    449c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    449e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    44a0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    44a2:	7c 01       	movw	r14, r24
    44a4:	8d 01       	movw	r16, r26
    44a6:	04 c0       	rjmp	.+8      	; 0x44b0 <usart_set_baudrate+0x216>
    44a8:	ee 0c       	add	r14, r14
    44aa:	ff 1c       	adc	r15, r15
    44ac:	00 1f       	adc	r16, r16
    44ae:	11 1f       	adc	r17, r17
    44b0:	2a 95       	dec	r18
    44b2:	d2 f7       	brpl	.-12     	; 0x44a8 <usart_set_baudrate+0x20e>
    44b4:	a8 01       	movw	r20, r16
    44b6:	97 01       	movw	r18, r14
    44b8:	88 8d       	ldd	r24, Y+24	; 0x18
    44ba:	99 8d       	ldd	r25, Y+25	; 0x19
    44bc:	aa 8d       	ldd	r26, Y+26	; 0x1a
    44be:	bb 8d       	ldd	r27, Y+27	; 0x1b
    44c0:	b6 95       	lsr	r27
    44c2:	a7 95       	ror	r26
    44c4:	97 95       	ror	r25
    44c6:	87 95       	ror	r24
    44c8:	82 0f       	add	r24, r18
    44ca:	93 1f       	adc	r25, r19
    44cc:	a4 1f       	adc	r26, r20
    44ce:	b5 1f       	adc	r27, r21
    44d0:	28 8d       	ldd	r18, Y+24	; 0x18
    44d2:	39 8d       	ldd	r19, Y+25	; 0x19
    44d4:	4a 8d       	ldd	r20, Y+26	; 0x1a
    44d6:	5b 8d       	ldd	r21, Y+27	; 0x1b
    44d8:	bc 01       	movw	r22, r24
    44da:	cd 01       	movw	r24, r26
    44dc:	0e 94 a7 2c 	call	0x594e	; 0x594e <__udivmodsi4>
    44e0:	da 01       	movw	r26, r20
    44e2:	c9 01       	movw	r24, r18
    44e4:	8a 83       	std	Y+2, r24	; 0x02
    44e6:	9b 83       	std	Y+3, r25	; 0x03
    44e8:	ac 83       	std	Y+4, r26	; 0x04
    44ea:	bd 83       	std	Y+5, r27	; 0x05
    44ec:	70 c0       	rjmp	.+224    	; 0x45ce <usart_set_baudrate+0x334>
		} else {
			baud <<= exp + 3;
    44ee:	89 81       	ldd	r24, Y+1	; 0x01
    44f0:	08 2e       	mov	r0, r24
    44f2:	00 0c       	add	r0, r0
    44f4:	99 0b       	sbc	r25, r25
    44f6:	9c 01       	movw	r18, r24
    44f8:	2d 5f       	subi	r18, 0xFD	; 253
    44fa:	3f 4f       	sbci	r19, 0xFF	; 255
    44fc:	88 8d       	ldd	r24, Y+24	; 0x18
    44fe:	99 8d       	ldd	r25, Y+25	; 0x19
    4500:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4502:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4504:	04 c0       	rjmp	.+8      	; 0x450e <usart_set_baudrate+0x274>
    4506:	88 0f       	add	r24, r24
    4508:	99 1f       	adc	r25, r25
    450a:	aa 1f       	adc	r26, r26
    450c:	bb 1f       	adc	r27, r27
    450e:	2a 95       	dec	r18
    4510:	d2 f7       	brpl	.-12     	; 0x4506 <usart_set_baudrate+0x26c>
    4512:	88 8f       	std	Y+24, r24	; 0x18
    4514:	99 8f       	std	Y+25, r25	; 0x19
    4516:	aa 8f       	std	Y+26, r26	; 0x1a
    4518:	bb 8f       	std	Y+27, r27	; 0x1b
			div = (cpu_hz + baud / 2) / baud;
    451a:	88 8d       	ldd	r24, Y+24	; 0x18
    451c:	99 8d       	ldd	r25, Y+25	; 0x19
    451e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4520:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4522:	9c 01       	movw	r18, r24
    4524:	ad 01       	movw	r20, r26
    4526:	56 95       	lsr	r21
    4528:	47 95       	ror	r20
    452a:	37 95       	ror	r19
    452c:	27 95       	ror	r18
    452e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4530:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4532:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4534:	bf 8d       	ldd	r27, Y+31	; 0x1f
    4536:	82 0f       	add	r24, r18
    4538:	93 1f       	adc	r25, r19
    453a:	a4 1f       	adc	r26, r20
    453c:	b5 1f       	adc	r27, r21
    453e:	28 8d       	ldd	r18, Y+24	; 0x18
    4540:	39 8d       	ldd	r19, Y+25	; 0x19
    4542:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4544:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4546:	bc 01       	movw	r22, r24
    4548:	cd 01       	movw	r24, r26
    454a:	0e 94 a7 2c 	call	0x594e	; 0x594e <__udivmodsi4>
    454e:	da 01       	movw	r26, r20
    4550:	c9 01       	movw	r24, r18
    4552:	8a 83       	std	Y+2, r24	; 0x02
    4554:	9b 83       	std	Y+3, r25	; 0x03
    4556:	ac 83       	std	Y+4, r26	; 0x04
    4558:	bd 83       	std	Y+5, r27	; 0x05
    455a:	39 c0       	rjmp	.+114    	; 0x45ce <usart_set_baudrate+0x334>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    455c:	89 81       	ldd	r24, Y+1	; 0x01
    455e:	08 2e       	mov	r0, r24
    4560:	00 0c       	add	r0, r0
    4562:	99 0b       	sbc	r25, r25
    4564:	9c 01       	movw	r18, r24
    4566:	2d 5f       	subi	r18, 0xFD	; 253
    4568:	3f 4f       	sbci	r19, 0xFF	; 255
    456a:	88 8d       	ldd	r24, Y+24	; 0x18
    456c:	99 8d       	ldd	r25, Y+25	; 0x19
    456e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4570:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4572:	04 c0       	rjmp	.+8      	; 0x457c <usart_set_baudrate+0x2e2>
    4574:	88 0f       	add	r24, r24
    4576:	99 1f       	adc	r25, r25
    4578:	aa 1f       	adc	r26, r26
    457a:	bb 1f       	adc	r27, r27
    457c:	2a 95       	dec	r18
    457e:	d2 f7       	brpl	.-12     	; 0x4574 <usart_set_baudrate+0x2da>
    4580:	88 8f       	std	Y+24, r24	; 0x18
    4582:	99 8f       	std	Y+25, r25	; 0x19
    4584:	aa 8f       	std	Y+26, r26	; 0x1a
    4586:	bb 8f       	std	Y+27, r27	; 0x1b
		div = (cpu_hz + baud / 2) / baud - 1;
    4588:	88 8d       	ldd	r24, Y+24	; 0x18
    458a:	99 8d       	ldd	r25, Y+25	; 0x19
    458c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    458e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4590:	9c 01       	movw	r18, r24
    4592:	ad 01       	movw	r20, r26
    4594:	56 95       	lsr	r21
    4596:	47 95       	ror	r20
    4598:	37 95       	ror	r19
    459a:	27 95       	ror	r18
    459c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    459e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    45a0:	ae 8d       	ldd	r26, Y+30	; 0x1e
    45a2:	bf 8d       	ldd	r27, Y+31	; 0x1f
    45a4:	82 0f       	add	r24, r18
    45a6:	93 1f       	adc	r25, r19
    45a8:	a4 1f       	adc	r26, r20
    45aa:	b5 1f       	adc	r27, r21
    45ac:	28 8d       	ldd	r18, Y+24	; 0x18
    45ae:	39 8d       	ldd	r19, Y+25	; 0x19
    45b0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    45b2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    45b4:	bc 01       	movw	r22, r24
    45b6:	cd 01       	movw	r24, r26
    45b8:	0e 94 a7 2c 	call	0x594e	; 0x594e <__udivmodsi4>
    45bc:	da 01       	movw	r26, r20
    45be:	c9 01       	movw	r24, r18
    45c0:	01 97       	sbiw	r24, 0x01	; 1
    45c2:	a1 09       	sbc	r26, r1
    45c4:	b1 09       	sbc	r27, r1
    45c6:	8a 83       	std	Y+2, r24	; 0x02
    45c8:	9b 83       	std	Y+3, r25	; 0x03
    45ca:	ac 83       	std	Y+4, r26	; 0x04
    45cc:	bd 83       	std	Y+5, r27	; 0x05
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    45ce:	8a 81       	ldd	r24, Y+2	; 0x02
    45d0:	9b 81       	ldd	r25, Y+3	; 0x03
    45d2:	ac 81       	ldd	r26, Y+4	; 0x04
    45d4:	bd 81       	ldd	r27, Y+5	; 0x05
    45d6:	89 2f       	mov	r24, r25
    45d8:	9a 2f       	mov	r25, r26
    45da:	ab 2f       	mov	r26, r27
    45dc:	bb 27       	eor	r27, r27
    45de:	98 2f       	mov	r25, r24
    45e0:	9f 70       	andi	r25, 0x0F	; 15
    45e2:	89 81       	ldd	r24, Y+1	; 0x01
    45e4:	82 95       	swap	r24
    45e6:	80 7f       	andi	r24, 0xF0	; 240
    45e8:	29 2f       	mov	r18, r25
    45ea:	28 2b       	or	r18, r24
    45ec:	8e 89       	ldd	r24, Y+22	; 0x16
    45ee:	9f 89       	ldd	r25, Y+23	; 0x17
    45f0:	fc 01       	movw	r30, r24
    45f2:	27 83       	std	Z+7, r18	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    45f4:	2a 81       	ldd	r18, Y+2	; 0x02
    45f6:	8e 89       	ldd	r24, Y+22	; 0x16
    45f8:	9f 89       	ldd	r25, Y+23	; 0x17
    45fa:	fc 01       	movw	r30, r24
    45fc:	26 83       	std	Z+6, r18	; 0x06

	return true;
    45fe:	81 e0       	ldi	r24, 0x01	; 1
}
    4600:	af 96       	adiw	r28, 0x2f	; 47
    4602:	cd bf       	out	0x3d, r28	; 61
    4604:	de bf       	out	0x3e, r29	; 62
    4606:	df 91       	pop	r29
    4608:	cf 91       	pop	r28
    460a:	1f 91       	pop	r17
    460c:	0f 91       	pop	r16
    460e:	ff 90       	pop	r15
    4610:	ef 90       	pop	r14
    4612:	08 95       	ret

00004614 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
    4614:	cf 93       	push	r28
    4616:	df 93       	push	r29
    4618:	00 d0       	rcall	.+0      	; 0x461a <sysclk_enable_peripheral_clock+0x6>
    461a:	cd b7       	in	r28, 0x3d	; 61
    461c:	de b7       	in	r29, 0x3e	; 62
    461e:	89 83       	std	Y+1, r24	; 0x01
    4620:	9a 83       	std	Y+2, r25	; 0x02
	if (module == NULL) {
    4622:	89 81       	ldd	r24, Y+1	; 0x01
    4624:	9a 81       	ldd	r25, Y+2	; 0x02
    4626:	89 2b       	or	r24, r25
    4628:	09 f4       	brne	.+2      	; 0x462c <sysclk_enable_peripheral_clock+0x18>
    462a:	ef c0       	rjmp	.+478    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    462c:	89 81       	ldd	r24, Y+1	; 0x01
    462e:	9a 81       	ldd	r25, Y+2	; 0x02
    4630:	80 3c       	cpi	r24, 0xC0	; 192
    4632:	91 05       	cpc	r25, r1
    4634:	29 f4       	brne	.+10     	; 0x4640 <sysclk_enable_peripheral_clock+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    4636:	60 e1       	ldi	r22, 0x10	; 16
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    463e:	e5 c0       	rjmp	.+458    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    4640:	89 81       	ldd	r24, Y+1	; 0x01
    4642:	9a 81       	ldd	r25, Y+2	; 0x02
    4644:	81 15       	cp	r24, r1
    4646:	94 40       	sbci	r25, 0x04	; 4
    4648:	29 f4       	brne	.+10     	; 0x4654 <sysclk_enable_peripheral_clock+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    464a:	64 e0       	ldi	r22, 0x04	; 4
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    4652:	db c0       	rjmp	.+438    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    4654:	89 81       	ldd	r24, Y+1	; 0x01
    4656:	9a 81       	ldd	r25, Y+2	; 0x02
    4658:	80 38       	cpi	r24, 0x80	; 128
    465a:	91 40       	sbci	r25, 0x01	; 1
    465c:	29 f4       	brne	.+10     	; 0x4668 <sysclk_enable_peripheral_clock+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    465e:	62 e0       	ldi	r22, 0x02	; 2
    4660:	80 e0       	ldi	r24, 0x00	; 0
    4662:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    4666:	d1 c0       	rjmp	.+418    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    4668:	89 81       	ldd	r24, Y+1	; 0x01
    466a:	9a 81       	ldd	r25, Y+2	; 0x02
    466c:	81 15       	cp	r24, r1
    466e:	91 40       	sbci	r25, 0x01	; 1
    4670:	29 f4       	brne	.+10     	; 0x467c <sysclk_enable_peripheral_clock+0x68>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4672:	61 e0       	ldi	r22, 0x01	; 1
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    467a:	c7 c0       	rjmp	.+398    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    467c:	89 81       	ldd	r24, Y+1	; 0x01
    467e:	9a 81       	ldd	r25, Y+2	; 0x02
    4680:	80 38       	cpi	r24, 0x80	; 128
    4682:	93 40       	sbci	r25, 0x03	; 3
    4684:	29 f4       	brne	.+10     	; 0x4690 <sysclk_enable_peripheral_clock+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    4686:	61 e0       	ldi	r22, 0x01	; 1
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    468e:	bd c0       	rjmp	.+378    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    4690:	89 81       	ldd	r24, Y+1	; 0x01
    4692:	9a 81       	ldd	r25, Y+2	; 0x02
    4694:	81 15       	cp	r24, r1
    4696:	92 40       	sbci	r25, 0x02	; 2
    4698:	29 f4       	brne	.+10     	; 0x46a4 <sysclk_enable_peripheral_clock+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    469a:	62 e0       	ldi	r22, 0x02	; 2
    469c:	81 e0       	ldi	r24, 0x01	; 1
    469e:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    46a2:	b3 c0       	rjmp	.+358    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    46a4:	89 81       	ldd	r24, Y+1	; 0x01
    46a6:	9a 81       	ldd	r25, Y+2	; 0x02
    46a8:	80 32       	cpi	r24, 0x20	; 32
    46aa:	93 40       	sbci	r25, 0x03	; 3
    46ac:	29 f4       	brne	.+10     	; 0x46b8 <sysclk_enable_peripheral_clock+0xa4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    46ae:	64 e0       	ldi	r22, 0x04	; 4
    46b0:	82 e0       	ldi	r24, 0x02	; 2
    46b2:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    46b6:	a9 c0       	rjmp	.+338    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    46b8:	89 81       	ldd	r24, Y+1	; 0x01
    46ba:	9a 81       	ldd	r25, Y+2	; 0x02
    46bc:	81 15       	cp	r24, r1
    46be:	98 40       	sbci	r25, 0x08	; 8
    46c0:	29 f4       	brne	.+10     	; 0x46cc <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    46c2:	61 e0       	ldi	r22, 0x01	; 1
    46c4:	83 e0       	ldi	r24, 0x03	; 3
    46c6:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    46ca:	9f c0       	rjmp	.+318    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    46cc:	89 81       	ldd	r24, Y+1	; 0x01
    46ce:	9a 81       	ldd	r25, Y+2	; 0x02
    46d0:	81 15       	cp	r24, r1
    46d2:	99 40       	sbci	r25, 0x09	; 9
    46d4:	29 f4       	brne	.+10     	; 0x46e0 <sysclk_enable_peripheral_clock+0xcc>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    46d6:	61 e0       	ldi	r22, 0x01	; 1
    46d8:	84 e0       	ldi	r24, 0x04	; 4
    46da:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    46de:	95 c0       	rjmp	.+298    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	9a 81       	ldd	r25, Y+2	; 0x02
    46e4:	81 15       	cp	r24, r1
    46e6:	9a 40       	sbci	r25, 0x0A	; 10
    46e8:	29 f4       	brne	.+10     	; 0x46f4 <sysclk_enable_peripheral_clock+0xe0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    46ea:	61 e0       	ldi	r22, 0x01	; 1
    46ec:	85 e0       	ldi	r24, 0x05	; 5
    46ee:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    46f2:	8b c0       	rjmp	.+278    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    46f4:	89 81       	ldd	r24, Y+1	; 0x01
    46f6:	9a 81       	ldd	r25, Y+2	; 0x02
    46f8:	80 34       	cpi	r24, 0x40	; 64
    46fa:	98 40       	sbci	r25, 0x08	; 8
    46fc:	29 f4       	brne	.+10     	; 0x4708 <sysclk_enable_peripheral_clock+0xf4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    46fe:	62 e0       	ldi	r22, 0x02	; 2
    4700:	83 e0       	ldi	r24, 0x03	; 3
    4702:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    4706:	81 c0       	rjmp	.+258    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    4708:	89 81       	ldd	r24, Y+1	; 0x01
    470a:	9a 81       	ldd	r25, Y+2	; 0x02
    470c:	80 34       	cpi	r24, 0x40	; 64
    470e:	99 40       	sbci	r25, 0x09	; 9
    4710:	29 f4       	brne	.+10     	; 0x471c <sysclk_enable_peripheral_clock+0x108>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    4712:	62 e0       	ldi	r22, 0x02	; 2
    4714:	84 e0       	ldi	r24, 0x04	; 4
    4716:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    471a:	77 c0       	rjmp	.+238    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    471c:	89 81       	ldd	r24, Y+1	; 0x01
    471e:	9a 81       	ldd	r25, Y+2	; 0x02
    4720:	80 39       	cpi	r24, 0x90	; 144
    4722:	98 40       	sbci	r25, 0x08	; 8
    4724:	29 f4       	brne	.+10     	; 0x4730 <sysclk_enable_peripheral_clock+0x11c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    4726:	64 e0       	ldi	r22, 0x04	; 4
    4728:	83 e0       	ldi	r24, 0x03	; 3
    472a:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    472e:	6d c0       	rjmp	.+218    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    4730:	89 81       	ldd	r24, Y+1	; 0x01
    4732:	9a 81       	ldd	r25, Y+2	; 0x02
    4734:	80 39       	cpi	r24, 0x90	; 144
    4736:	99 40       	sbci	r25, 0x09	; 9
    4738:	29 f4       	brne	.+10     	; 0x4744 <sysclk_enable_peripheral_clock+0x130>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    473a:	64 e0       	ldi	r22, 0x04	; 4
    473c:	84 e0       	ldi	r24, 0x04	; 4
    473e:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    4742:	63 c0       	rjmp	.+198    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    4744:	89 81       	ldd	r24, Y+1	; 0x01
    4746:	9a 81       	ldd	r25, Y+2	; 0x02
    4748:	80 39       	cpi	r24, 0x90	; 144
    474a:	9a 40       	sbci	r25, 0x0A	; 10
    474c:	29 f4       	brne	.+10     	; 0x4758 <sysclk_enable_peripheral_clock+0x144>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    474e:	64 e0       	ldi	r22, 0x04	; 4
    4750:	85 e0       	ldi	r24, 0x05	; 5
    4752:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    4756:	59 c0       	rjmp	.+178    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    4758:	89 81       	ldd	r24, Y+1	; 0x01
    475a:	9a 81       	ldd	r25, Y+2	; 0x02
    475c:	80 3c       	cpi	r24, 0xC0	; 192
    475e:	98 40       	sbci	r25, 0x08	; 8
    4760:	29 f4       	brne	.+10     	; 0x476c <sysclk_enable_peripheral_clock+0x158>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    4762:	68 e0       	ldi	r22, 0x08	; 8
    4764:	83 e0       	ldi	r24, 0x03	; 3
    4766:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    476a:	4f c0       	rjmp	.+158    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    476c:	89 81       	ldd	r24, Y+1	; 0x01
    476e:	9a 81       	ldd	r25, Y+2	; 0x02
    4770:	80 3c       	cpi	r24, 0xC0	; 192
    4772:	99 40       	sbci	r25, 0x09	; 9
    4774:	29 f4       	brne	.+10     	; 0x4780 <sysclk_enable_peripheral_clock+0x16c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    4776:	68 e0       	ldi	r22, 0x08	; 8
    4778:	84 e0       	ldi	r24, 0x04	; 4
    477a:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    477e:	45 c0       	rjmp	.+138    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    4780:	89 81       	ldd	r24, Y+1	; 0x01
    4782:	9a 81       	ldd	r25, Y+2	; 0x02
    4784:	80 3a       	cpi	r24, 0xA0	; 160
    4786:	98 40       	sbci	r25, 0x08	; 8
    4788:	29 f4       	brne	.+10     	; 0x4794 <sysclk_enable_peripheral_clock+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    478a:	60 e1       	ldi	r22, 0x10	; 16
    478c:	83 e0       	ldi	r24, 0x03	; 3
    478e:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    4792:	3b c0       	rjmp	.+118    	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    4794:	89 81       	ldd	r24, Y+1	; 0x01
    4796:	9a 81       	ldd	r25, Y+2	; 0x02
    4798:	80 3a       	cpi	r24, 0xA0	; 160
    479a:	99 40       	sbci	r25, 0x09	; 9
    479c:	29 f4       	brne	.+10     	; 0x47a8 <sysclk_enable_peripheral_clock+0x194>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    479e:	60 e1       	ldi	r22, 0x10	; 16
    47a0:	84 e0       	ldi	r24, 0x04	; 4
    47a2:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    47a6:	31 c0       	rjmp	.+98     	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    47a8:	89 81       	ldd	r24, Y+1	; 0x01
    47aa:	9a 81       	ldd	r25, Y+2	; 0x02
    47ac:	80 3a       	cpi	r24, 0xA0	; 160
    47ae:	9a 40       	sbci	r25, 0x0A	; 10
    47b0:	29 f4       	brne	.+10     	; 0x47bc <sysclk_enable_peripheral_clock+0x1a8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    47b2:	60 e1       	ldi	r22, 0x10	; 16
    47b4:	85 e0       	ldi	r24, 0x05	; 5
    47b6:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    47ba:	27 c0       	rjmp	.+78     	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    47bc:	89 81       	ldd	r24, Y+1	; 0x01
    47be:	9a 81       	ldd	r25, Y+2	; 0x02
    47c0:	80 3b       	cpi	r24, 0xB0	; 176
    47c2:	98 40       	sbci	r25, 0x08	; 8
    47c4:	29 f4       	brne	.+10     	; 0x47d0 <sysclk_enable_peripheral_clock+0x1bc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    47c6:	60 e2       	ldi	r22, 0x20	; 32
    47c8:	83 e0       	ldi	r24, 0x03	; 3
    47ca:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    47ce:	1d c0       	rjmp	.+58     	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    47d0:	89 81       	ldd	r24, Y+1	; 0x01
    47d2:	9a 81       	ldd	r25, Y+2	; 0x02
    47d4:	80 3b       	cpi	r24, 0xB0	; 176
    47d6:	99 40       	sbci	r25, 0x09	; 9
    47d8:	29 f4       	brne	.+10     	; 0x47e4 <sysclk_enable_peripheral_clock+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    47da:	60 e2       	ldi	r22, 0x20	; 32
    47dc:	84 e0       	ldi	r24, 0x04	; 4
    47de:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    47e2:	13 c0       	rjmp	.+38     	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    47e4:	89 81       	ldd	r24, Y+1	; 0x01
    47e6:	9a 81       	ldd	r25, Y+2	; 0x02
    47e8:	80 38       	cpi	r24, 0x80	; 128
    47ea:	94 40       	sbci	r25, 0x04	; 4
    47ec:	29 f4       	brne	.+10     	; 0x47f8 <sysclk_enable_peripheral_clock+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    47ee:	60 e4       	ldi	r22, 0x40	; 64
    47f0:	83 e0       	ldi	r24, 0x03	; 3
    47f2:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
    47f6:	09 c0       	rjmp	.+18     	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    47f8:	89 81       	ldd	r24, Y+1	; 0x01
    47fa:	9a 81       	ldd	r25, Y+2	; 0x02
    47fc:	80 3a       	cpi	r24, 0xA0	; 160
    47fe:	94 40       	sbci	r25, 0x04	; 4
    4800:	21 f4       	brne	.+8      	; 0x480a <sysclk_enable_peripheral_clock+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    4802:	60 e4       	ldi	r22, 0x40	; 64
    4804:	85 e0       	ldi	r24, 0x05	; 5
    4806:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
	}
#endif
	else {
		Assert(false);
	}
}
    480a:	0f 90       	pop	r0
    480c:	0f 90       	pop	r0
    480e:	df 91       	pop	r29
    4810:	cf 91       	pop	r28
    4812:	08 95       	ret

00004814 <usart_serial_init>:
 * \retval true if the initialization was successful
 * \retval false if initialization failed (error in baud rate calculation)
 */
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
    4814:	cf 93       	push	r28
    4816:	df 93       	push	r29
    4818:	cd b7       	in	r28, 0x3d	; 61
    481a:	de b7       	in	r29, 0x3e	; 62
    481c:	2b 97       	sbiw	r28, 0x0b	; 11
    481e:	cd bf       	out	0x3d, r28	; 61
    4820:	de bf       	out	0x3e, r29	; 62
    4822:	88 87       	std	Y+8, r24	; 0x08
    4824:	99 87       	std	Y+9, r25	; 0x09
    4826:	6a 87       	std	Y+10, r22	; 0x0a
    4828:	7b 87       	std	Y+11, r23	; 0x0b
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    482a:	8a 85       	ldd	r24, Y+10	; 0x0a
    482c:	9b 85       	ldd	r25, Y+11	; 0x0b
    482e:	fc 01       	movw	r30, r24
    4830:	84 81       	ldd	r24, Z+4	; 0x04
    4832:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    4834:	8a 85       	ldd	r24, Y+10	; 0x0a
    4836:	9b 85       	ldd	r25, Y+11	; 0x0b
    4838:	fc 01       	movw	r30, r24
    483a:	85 81       	ldd	r24, Z+5	; 0x05
    483c:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    483e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4840:	9b 85       	ldd	r25, Y+11	; 0x0b
    4842:	fc 01       	movw	r30, r24
    4844:	86 81       	ldd	r24, Z+6	; 0x06
    4846:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    4848:	8a 85       	ldd	r24, Y+10	; 0x0a
    484a:	9b 85       	ldd	r25, Y+11	; 0x0b
    484c:	fc 01       	movw	r30, r24
    484e:	80 81       	ld	r24, Z
    4850:	91 81       	ldd	r25, Z+1	; 0x01
    4852:	a2 81       	ldd	r26, Z+2	; 0x02
    4854:	b3 81       	ldd	r27, Z+3	; 0x03
    4856:	89 83       	std	Y+1, r24	; 0x01
    4858:	9a 83       	std	Y+2, r25	; 0x02
    485a:	ab 83       	std	Y+3, r26	; 0x03
    485c:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
    485e:	88 85       	ldd	r24, Y+8	; 0x08
    4860:	99 85       	ldd	r25, Y+9	; 0x09
    4862:	80 3a       	cpi	r24, 0xA0	; 160
    4864:	98 40       	sbci	r25, 0x08	; 8
    4866:	21 f4       	brne	.+8      	; 0x4870 <usart_serial_init+0x5c>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    4868:	60 e1       	ldi	r22, 0x10	; 16
    486a:	83 e0       	ldi	r24, 0x03	; 3
    486c:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	if((uint16_t)usart == (uint16_t)&USARTC1) {
    4870:	88 85       	ldd	r24, Y+8	; 0x08
    4872:	99 85       	ldd	r25, Y+9	; 0x09
    4874:	80 3b       	cpi	r24, 0xB0	; 176
    4876:	98 40       	sbci	r25, 0x08	; 8
    4878:	21 f4       	brne	.+8      	; 0x4882 <usart_serial_init+0x6e>
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
    487a:	60 e2       	ldi	r22, 0x20	; 32
    487c:	83 e0       	ldi	r24, 0x03	; 3
    487e:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
    4882:	88 85       	ldd	r24, Y+8	; 0x08
    4884:	99 85       	ldd	r25, Y+9	; 0x09
    4886:	80 3a       	cpi	r24, 0xA0	; 160
    4888:	99 40       	sbci	r25, 0x09	; 9
    488a:	21 f4       	brne	.+8      	; 0x4894 <usart_serial_init+0x80>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
    488c:	60 e1       	ldi	r22, 0x10	; 16
    488e:	84 e0       	ldi	r24, 0x04	; 4
    4890:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
    4894:	88 85       	ldd	r24, Y+8	; 0x08
    4896:	99 85       	ldd	r25, Y+9	; 0x09
    4898:	80 3b       	cpi	r24, 0xB0	; 176
    489a:	99 40       	sbci	r25, 0x09	; 9
    489c:	21 f4       	brne	.+8      	; 0x48a6 <usart_serial_init+0x92>
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
    489e:	60 e2       	ldi	r22, 0x20	; 32
    48a0:	84 e0       	ldi	r24, 0x04	; 4
    48a2:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
    48a6:	88 85       	ldd	r24, Y+8	; 0x08
    48a8:	99 85       	ldd	r25, Y+9	; 0x09
    48aa:	80 3a       	cpi	r24, 0xA0	; 160
    48ac:	9a 40       	sbci	r25, 0x0A	; 10
    48ae:	21 f4       	brne	.+8      	; 0x48b8 <usart_serial_init+0xa4>
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    48b0:	60 e1       	ldi	r22, 0x10	; 16
    48b2:	85 e0       	ldi	r24, 0x05	; 5
    48b4:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    48b8:	88 85       	ldd	r24, Y+8	; 0x08
    48ba:	99 85       	ldd	r25, Y+9	; 0x09
    48bc:	9e 01       	movw	r18, r28
    48be:	2f 5f       	subi	r18, 0xFF	; 255
    48c0:	3f 4f       	sbci	r19, 0xFF	; 255
    48c2:	b9 01       	movw	r22, r18
    48c4:	6c dc       	rcall	.-1832   	; 0x419e <usart_init_rs232>
    48c6:	88 23       	and	r24, r24
    48c8:	11 f0       	breq	.+4      	; 0x48ce <usart_serial_init+0xba>
		return true;
    48ca:	81 e0       	ldi	r24, 0x01	; 1
    48cc:	01 c0       	rjmp	.+2      	; 0x48d0 <usart_serial_init+0xbc>
	}
	else {
		return false;
    48ce:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    48d0:	2b 96       	adiw	r28, 0x0b	; 11
    48d2:	cd bf       	out	0x3d, r28	; 61
    48d4:	de bf       	out	0x3e, r29	; 62
    48d6:	df 91       	pop	r29
    48d8:	cf 91       	pop	r28
    48da:	08 95       	ret

000048dc <usart_serial_putchar>:
 * \param c       Character to write.
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
    48dc:	cf 93       	push	r28
    48de:	df 93       	push	r29
    48e0:	00 d0       	rcall	.+0      	; 0x48e2 <usart_serial_putchar+0x6>
    48e2:	1f 92       	push	r1
    48e4:	cd b7       	in	r28, 0x3d	; 61
    48e6:	de b7       	in	r29, 0x3e	; 62
    48e8:	89 83       	std	Y+1, r24	; 0x01
    48ea:	9a 83       	std	Y+2, r25	; 0x02
    48ec:	6b 83       	std	Y+3, r22	; 0x03
	return usart_putchar(usart, c);
    48ee:	89 81       	ldd	r24, Y+1	; 0x01
    48f0:	9a 81       	ldd	r25, Y+2	; 0x02
    48f2:	6b 81       	ldd	r22, Y+3	; 0x03
    48f4:	9a dc       	rcall	.-1740   	; 0x422a <usart_putchar>
}
    48f6:	23 96       	adiw	r28, 0x03	; 3
    48f8:	cd bf       	out	0x3d, r28	; 61
    48fa:	de bf       	out	0x3e, r29	; 62
    48fc:	df 91       	pop	r29
    48fe:	cf 91       	pop	r28
    4900:	08 95       	ret

00004902 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    4902:	cf 93       	push	r28
    4904:	df 93       	push	r29
    4906:	00 d0       	rcall	.+0      	; 0x4908 <usart_serial_getchar+0x6>
    4908:	00 d0       	rcall	.+0      	; 0x490a <usart_serial_getchar+0x8>
    490a:	cd b7       	in	r28, 0x3d	; 61
    490c:	de b7       	in	r29, 0x3e	; 62
    490e:	89 83       	std	Y+1, r24	; 0x01
    4910:	9a 83       	std	Y+2, r25	; 0x02
    4912:	6b 83       	std	Y+3, r22	; 0x03
    4914:	7c 83       	std	Y+4, r23	; 0x04
	*data = usart_getchar(usart);
    4916:	89 81       	ldd	r24, Y+1	; 0x01
    4918:	9a 81       	ldd	r25, Y+2	; 0x02
    491a:	a6 dc       	rcall	.-1716   	; 0x4268 <usart_getchar>
    491c:	28 2f       	mov	r18, r24
    491e:	8b 81       	ldd	r24, Y+3	; 0x03
    4920:	9c 81       	ldd	r25, Y+4	; 0x04
    4922:	fc 01       	movw	r30, r24
    4924:	20 83       	st	Z, r18
}
    4926:	24 96       	adiw	r28, 0x04	; 4
    4928:	cd bf       	out	0x3d, r28	; 61
    492a:	de bf       	out	0x3e, r29	; 62
    492c:	df 91       	pop	r29
    492e:	cf 91       	pop	r28
    4930:	08 95       	ret

00004932 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
    4932:	cf 93       	push	r28
    4934:	df 93       	push	r29
    4936:	00 d0       	rcall	.+0      	; 0x4938 <stdio_serial_init+0x6>
    4938:	00 d0       	rcall	.+0      	; 0x493a <stdio_serial_init+0x8>
    493a:	cd b7       	in	r28, 0x3d	; 61
    493c:	de b7       	in	r29, 0x3e	; 62
    493e:	89 83       	std	Y+1, r24	; 0x01
    4940:	9a 83       	std	Y+2, r25	; 0x02
    4942:	6b 83       	std	Y+3, r22	; 0x03
    4944:	7c 83       	std	Y+4, r23	; 0x04
	stdio_base = (void *)usart;
    4946:	89 81       	ldd	r24, Y+1	; 0x01
    4948:	9a 81       	ldd	r25, Y+2	; 0x02
    494a:	80 93 74 28 	sts	0x2874, r24
    494e:	90 93 75 28 	sts	0x2875, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4952:	8e e6       	ldi	r24, 0x6E	; 110
    4954:	94 e2       	ldi	r25, 0x24	; 36
    4956:	80 93 72 28 	sts	0x2872, r24
    495a:	90 93 73 28 	sts	0x2873, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    495e:	81 e8       	ldi	r24, 0x81	; 129
    4960:	94 e2       	ldi	r25, 0x24	; 36
    4962:	80 93 70 28 	sts	0x2870, r24
    4966:	90 93 71 28 	sts	0x2871, r25
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
    496a:	2b 81       	ldd	r18, Y+3	; 0x03
    496c:	3c 81       	ldd	r19, Y+4	; 0x04
    496e:	89 81       	ldd	r24, Y+1	; 0x01
    4970:	9a 81       	ldd	r25, Y+2	; 0x02
    4972:	b9 01       	movw	r22, r18
    4974:	4f df       	rcall	.-354    	; 0x4814 <usart_serial_init>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    4976:	60 eb       	ldi	r22, 0xB0	; 176
    4978:	79 e1       	ldi	r23, 0x19	; 25
    497a:	80 ed       	ldi	r24, 0xD0	; 208
    497c:	99 e1       	ldi	r25, 0x19	; 25
    497e:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <fdevopen>
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
    4982:	24 96       	adiw	r28, 0x04	; 4
    4984:	cd bf       	out	0x3d, r28	; 61
    4986:	de bf       	out	0x3e, r29	; 62
    4988:	df 91       	pop	r29
    498a:	cf 91       	pop	r28
    498c:	08 95       	ret

0000498e <twi_master_enable>:
/*! \brief Enable Master Mode of the TWI.
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
    498e:	cf 93       	push	r28
    4990:	df 93       	push	r29
    4992:	00 d0       	rcall	.+0      	; 0x4994 <twi_master_enable+0x6>
    4994:	cd b7       	in	r28, 0x3d	; 61
    4996:	de b7       	in	r29, 0x3e	; 62
    4998:	89 83       	std	Y+1, r24	; 0x01
    499a:	9a 83       	std	Y+2, r25	; 0x02
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    499c:	89 81       	ldd	r24, Y+1	; 0x01
    499e:	9a 81       	ldd	r25, Y+2	; 0x02
    49a0:	fc 01       	movw	r30, r24
    49a2:	81 81       	ldd	r24, Z+1	; 0x01
    49a4:	28 2f       	mov	r18, r24
    49a6:	28 60       	ori	r18, 0x08	; 8
    49a8:	89 81       	ldd	r24, Y+1	; 0x01
    49aa:	9a 81       	ldd	r25, Y+2	; 0x02
    49ac:	fc 01       	movw	r30, r24
    49ae:	21 83       	std	Z+1, r18	; 0x01
}
    49b0:	0f 90       	pop	r0
    49b2:	0f 90       	pop	r0
    49b4:	df 91       	pop	r29
    49b6:	cf 91       	pop	r28
    49b8:	08 95       	ret

000049ba <sendTelemetry>:




void sendTelemetry(void)
{
    49ba:	7f 92       	push	r7
    49bc:	8f 92       	push	r8
    49be:	9f 92       	push	r9
    49c0:	af 92       	push	r10
    49c2:	bf 92       	push	r11
    49c4:	cf 92       	push	r12
    49c6:	df 92       	push	r13
    49c8:	ef 92       	push	r14
    49ca:	ff 92       	push	r15
    49cc:	0f 93       	push	r16
    49ce:	1f 93       	push	r17
    49d0:	cf 93       	push	r28
    49d2:	df 93       	push	r29
    49d4:	cd b7       	in	r28, 0x3d	; 61
    49d6:	de b7       	in	r29, 0x3e	; 62
	packetCount++;
    49d8:	80 91 68 28 	lds	r24, 0x2868
    49dc:	90 91 69 28 	lds	r25, 0x2869
    49e0:	01 96       	adiw	r24, 0x01	; 1
    49e2:	80 93 68 28 	sts	0x2868, r24
    49e6:	90 93 69 28 	sts	0x2869, r25
	//adcRead();
	//printf("Hello");
	//delay_ms(1000);
	//updateIMUData();
	//printf("Goodbye");
	updateAltitude();
    49ea:	0e 94 33 11 	call	0x2266	; 0x2266 <updateAltitude>
	//parseGPS();
	//printf("%u,%i,%li,%lu,%s,%s,%s,%s,%i,%i,%i,%i\n",packetCount,currentAltitude,msPressure,msTemp,latitude,longitude,readAlt,satNumber,gpsSpeed,mpuData.acc_x,mpuData.acc_y,mpuData.acc_z);
	printf("%-20u%-20i%-20li%-20li%-20li%-20s%-20s%-20s%-20s%-20i%-20u%-20u\n",packetCount,currentAltitude,msPressure,msTemp,getTemperature(),latitude,longitude,readAlt,satNumber,gpsSpeed,ABG_geiger,BG_geiger);
    49ee:	80 90 b6 21 	lds	r8, 0x21B6
    49f2:	90 90 b7 21 	lds	r9, 0x21B7
    49f6:	a0 90 b4 21 	lds	r10, 0x21B4
    49fa:	b0 90 b5 21 	lds	r11, 0x21B5
    49fe:	c0 90 34 28 	lds	r12, 0x2834
    4a02:	d0 90 35 28 	lds	r13, 0x2835
    4a06:	eb d1       	rcall	.+982    	; 0x4dde <getTemperature>
    4a08:	7b 01       	movw	r14, r22
    4a0a:	8c 01       	movw	r16, r24
    4a0c:	20 91 ff 22 	lds	r18, 0x22FF
    4a10:	30 91 00 23 	lds	r19, 0x2300
    4a14:	40 91 01 23 	lds	r20, 0x2301
    4a18:	50 91 02 23 	lds	r21, 0x2302
    4a1c:	80 91 2b 22 	lds	r24, 0x222B
    4a20:	90 91 2c 22 	lds	r25, 0x222C
    4a24:	a0 91 2d 22 	lds	r26, 0x222D
    4a28:	b0 91 2e 22 	lds	r27, 0x222E
    4a2c:	e0 91 63 28 	lds	r30, 0x2863
    4a30:	f0 91 64 28 	lds	r31, 0x2864
    4a34:	60 91 68 28 	lds	r22, 0x2868
    4a38:	70 91 69 28 	lds	r23, 0x2869
    4a3c:	79 2c       	mov	r7, r9
    4a3e:	7f 92       	push	r7
    4a40:	98 2c       	mov	r9, r8
    4a42:	9f 92       	push	r9
    4a44:	9b 2c       	mov	r9, r11
    4a46:	9f 92       	push	r9
    4a48:	ba 2c       	mov	r11, r10
    4a4a:	bf 92       	push	r11
    4a4c:	bd 2c       	mov	r11, r13
    4a4e:	bf 92       	push	r11
    4a50:	dc 2c       	mov	r13, r12
    4a52:	df 92       	push	r13
    4a54:	0f 2e       	mov	r0, r31
    4a56:	f7 e9       	ldi	r31, 0x97	; 151
    4a58:	cf 2e       	mov	r12, r31
    4a5a:	f2 e2       	ldi	r31, 0x22	; 34
    4a5c:	df 2e       	mov	r13, r31
    4a5e:	f0 2d       	mov	r31, r0
    4a60:	df 92       	push	r13
    4a62:	0f 2e       	mov	r0, r31
    4a64:	f7 e9       	ldi	r31, 0x97	; 151
    4a66:	cf 2e       	mov	r12, r31
    4a68:	f2 e2       	ldi	r31, 0x22	; 34
    4a6a:	df 2e       	mov	r13, r31
    4a6c:	f0 2d       	mov	r31, r0
    4a6e:	dc 2c       	mov	r13, r12
    4a70:	df 92       	push	r13
    4a72:	0f 2e       	mov	r0, r31
    4a74:	f3 e3       	ldi	r31, 0x33	; 51
    4a76:	cf 2e       	mov	r12, r31
    4a78:	f2 e2       	ldi	r31, 0x22	; 34
    4a7a:	df 2e       	mov	r13, r31
    4a7c:	f0 2d       	mov	r31, r0
    4a7e:	df 92       	push	r13
    4a80:	0f 2e       	mov	r0, r31
    4a82:	f3 e3       	ldi	r31, 0x33	; 51
    4a84:	cf 2e       	mov	r12, r31
    4a86:	f2 e2       	ldi	r31, 0x22	; 34
    4a88:	df 2e       	mov	r13, r31
    4a8a:	f0 2d       	mov	r31, r0
    4a8c:	dc 2c       	mov	r13, r12
    4a8e:	df 92       	push	r13
    4a90:	0f 2e       	mov	r0, r31
    4a92:	fc e1       	ldi	r31, 0x1C	; 28
    4a94:	cf 2e       	mov	r12, r31
    4a96:	f3 e2       	ldi	r31, 0x23	; 35
    4a98:	df 2e       	mov	r13, r31
    4a9a:	f0 2d       	mov	r31, r0
    4a9c:	df 92       	push	r13
    4a9e:	0f 2e       	mov	r0, r31
    4aa0:	fc e1       	ldi	r31, 0x1C	; 28
    4aa2:	cf 2e       	mov	r12, r31
    4aa4:	f3 e2       	ldi	r31, 0x23	; 35
    4aa6:	df 2e       	mov	r13, r31
    4aa8:	f0 2d       	mov	r31, r0
    4aaa:	dc 2c       	mov	r13, r12
    4aac:	df 92       	push	r13
    4aae:	0f 2e       	mov	r0, r31
    4ab0:	f0 e8       	ldi	r31, 0x80	; 128
    4ab2:	cf 2e       	mov	r12, r31
    4ab4:	f3 e2       	ldi	r31, 0x23	; 35
    4ab6:	df 2e       	mov	r13, r31
    4ab8:	f0 2d       	mov	r31, r0
    4aba:	df 92       	push	r13
    4abc:	0f 2e       	mov	r0, r31
    4abe:	f0 e8       	ldi	r31, 0x80	; 128
    4ac0:	cf 2e       	mov	r12, r31
    4ac2:	f3 e2       	ldi	r31, 0x23	; 35
    4ac4:	df 2e       	mov	r13, r31
    4ac6:	f0 2d       	mov	r31, r0
    4ac8:	dc 2c       	mov	r13, r12
    4aca:	df 92       	push	r13
    4acc:	d1 2e       	mov	r13, r17
    4ace:	df 92       	push	r13
    4ad0:	d0 2e       	mov	r13, r16
    4ad2:	df 92       	push	r13
    4ad4:	df 2c       	mov	r13, r15
    4ad6:	df 92       	push	r13
    4ad8:	1e 2d       	mov	r17, r14
    4ada:	1f 93       	push	r17
    4adc:	15 2f       	mov	r17, r21
    4ade:	1f 93       	push	r17
    4ae0:	14 2f       	mov	r17, r20
    4ae2:	1f 93       	push	r17
    4ae4:	13 2f       	mov	r17, r19
    4ae6:	1f 93       	push	r17
    4ae8:	2f 93       	push	r18
    4aea:	2b 2f       	mov	r18, r27
    4aec:	2f 93       	push	r18
    4aee:	2a 2f       	mov	r18, r26
    4af0:	2f 93       	push	r18
    4af2:	29 2f       	mov	r18, r25
    4af4:	2f 93       	push	r18
    4af6:	8f 93       	push	r24
    4af8:	8f 2f       	mov	r24, r31
    4afa:	8f 93       	push	r24
    4afc:	8e 2f       	mov	r24, r30
    4afe:	8f 93       	push	r24
    4b00:	87 2f       	mov	r24, r23
    4b02:	8f 93       	push	r24
    4b04:	86 2f       	mov	r24, r22
    4b06:	8f 93       	push	r24
    4b08:	82 e4       	ldi	r24, 0x42	; 66
    4b0a:	91 e2       	ldi	r25, 0x21	; 33
    4b0c:	89 2f       	mov	r24, r25
    4b0e:	8f 93       	push	r24
    4b10:	82 e4       	ldi	r24, 0x42	; 66
    4b12:	91 e2       	ldi	r25, 0x21	; 33
    4b14:	8f 93       	push	r24
    4b16:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <printf>
    4b1a:	8d b7       	in	r24, 0x3d	; 61
    4b1c:	9e b7       	in	r25, 0x3e	; 62
    4b1e:	80 96       	adiw	r24, 0x20	; 32
    4b20:	cd bf       	out	0x3d, r28	; 61
    4b22:	de bf       	out	0x3e, r29	; 62
}
    4b24:	df 91       	pop	r29
    4b26:	cf 91       	pop	r28
    4b28:	1f 91       	pop	r17
    4b2a:	0f 91       	pop	r16
    4b2c:	ff 90       	pop	r15
    4b2e:	ef 90       	pop	r14
    4b30:	df 90       	pop	r13
    4b32:	cf 90       	pop	r12
    4b34:	bf 90       	pop	r11
    4b36:	af 90       	pop	r10
    4b38:	9f 90       	pop	r9
    4b3a:	8f 90       	pop	r8
    4b3c:	7f 90       	pop	r7
    4b3e:	08 95       	ret

00004b40 <data_init>:


void data_init(void){
    4b40:	cf 93       	push	r28
    4b42:	df 93       	push	r29
    4b44:	cd b7       	in	r28, 0x3d	; 61
    4b46:	de b7       	in	r29, 0x3e	; 62
	sysclk_enable_peripheral_clock(&USARTD0);
    4b48:	80 ea       	ldi	r24, 0xA0	; 160
    4b4a:	99 e0       	ldi	r25, 0x09	; 9
    4b4c:	63 dd       	rcall	.-1338   	; 0x4614 <sysclk_enable_peripheral_clock>
		.baudrate = 9600,
		.charlength = USART_CHSIZE_8BIT_gc,
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits = true
	};
	stdio_serial_init(&USARTD0, &usart_options); //ASF function that initializes the UART peripheral
    4b4e:	66 e0       	ldi	r22, 0x06	; 6
    4b50:	70 e2       	ldi	r23, 0x20	; 32
    4b52:	80 ea       	ldi	r24, 0xA0	; 160
    4b54:	99 e0       	ldi	r25, 0x09	; 9
    4b56:	ed de       	rcall	.-550    	; 0x4932 <stdio_serial_init>
}
    4b58:	df 91       	pop	r29
    4b5a:	cf 91       	pop	r28
    4b5c:	08 95       	ret

00004b5e <clock_init>:


void clock_init(void){
    4b5e:	cf 93       	push	r28
    4b60:	df 93       	push	r29
    4b62:	cd b7       	in	r28, 0x3d	; 61
    4b64:	de b7       	in	r29, 0x3e	; 62
    4b66:	29 97       	sbiw	r28, 0x09	; 9
    4b68:	cd bf       	out	0x3d, r28	; 61
    4b6a:	de bf       	out	0x3e, r29	; 62
	sysclk_init(); //Initializes the system clock to 32MHz, also turns off all peripheral clocks.
    4b6c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <sysclk_init>
		
	// Calibrate oscillator 32MHz internal oscillator, fix implemented from http://www.avrfreaks.net/forum/cant-get-xmega-usart-work-32-mhz
	OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    4b70:	80 e5       	ldi	r24, 0x50	; 80
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	20 e5       	ldi	r18, 0x50	; 80
    4b76:	30 e0       	ldi	r19, 0x00	; 0
    4b78:	f9 01       	movw	r30, r18
    4b7a:	26 81       	ldd	r18, Z+6	; 0x06
    4b7c:	29 7f       	andi	r18, 0xF9	; 249
    4b7e:	fc 01       	movw	r30, r24
    4b80:	26 83       	std	Z+6, r18	; 0x06
	OSC.DFLLCTRL |= OSC_RC32MCREF_RC32K_gc;
    4b82:	80 e5       	ldi	r24, 0x50	; 80
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	20 e5       	ldi	r18, 0x50	; 80
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	f9 01       	movw	r30, r18
    4b8c:	26 81       	ldd	r18, Z+6	; 0x06
    4b8e:	fc 01       	movw	r30, r24
    4b90:	26 83       	std	Z+6, r18	; 0x06
	OSC.CTRL |= OSC_RC32MEN_bm|OSC_RC32KEN_bm;
    4b92:	80 e5       	ldi	r24, 0x50	; 80
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	20 e5       	ldi	r18, 0x50	; 80
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	f9 01       	movw	r30, r18
    4b9c:	20 81       	ld	r18, Z
    4b9e:	26 60       	ori	r18, 0x06	; 6
    4ba0:	fc 01       	movw	r30, r24
    4ba2:	20 83       	st	Z, r18
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    4ba4:	00 00       	nop
    4ba6:	80 e5       	ldi	r24, 0x50	; 80
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	fc 01       	movw	r30, r24
    4bac:	81 81       	ldd	r24, Z+1	; 0x01
    4bae:	88 2f       	mov	r24, r24
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	82 70       	andi	r24, 0x02	; 2
    4bb4:	99 27       	eor	r25, r25
    4bb6:	89 2b       	or	r24, r25
    4bb8:	b1 f3       	breq	.-20     	; 0x4ba6 <clock_init+0x48>
	while(!(OSC.STATUS & OSC_RC32KRDY_bm));
    4bba:	00 00       	nop
    4bbc:	80 e5       	ldi	r24, 0x50	; 80
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	fc 01       	movw	r30, r24
    4bc2:	81 81       	ldd	r24, Z+1	; 0x01
    4bc4:	88 2f       	mov	r24, r24
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	84 70       	andi	r24, 0x04	; 4
    4bca:	99 27       	eor	r25, r25
    4bcc:	89 2b       	or	r24, r25
    4bce:	b1 f3       	breq	.-20     	; 0x4bbc <clock_init+0x5e>
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    4bd0:	80 e6       	ldi	r24, 0x60	; 96
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	20 e6       	ldi	r18, 0x60	; 96
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	f9 01       	movw	r30, r18
    4bda:	20 81       	ld	r18, Z
    4bdc:	21 60       	ori	r18, 0x01	; 1
    4bde:	fc 01       	movw	r30, r24
    4be0:	20 83       	st	Z, r18
	CCP = CCP_IOREG_gc;
    4be2:	84 e3       	ldi	r24, 0x34	; 52
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	28 ed       	ldi	r18, 0xD8	; 216
    4be8:	fc 01       	movw	r30, r24
    4bea:	20 83       	st	Z, r18
	CLK.PSCTRL = 0;
    4bec:	80 e4       	ldi	r24, 0x40	; 64
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	fc 01       	movw	r30, r24
    4bf2:	11 82       	std	Z+1, r1	; 0x01
	
		
	/* Peripheral Clock Initializations */
	sysclk_enable_peripheral_clock(&ADCA); //ADC clock for therm
    4bf4:	80 e0       	ldi	r24, 0x00	; 0
    4bf6:	92 e0       	ldi	r25, 0x02	; 2
    4bf8:	0d dd       	rcall	.-1510   	; 0x4614 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTD0); //USART comms clock init for SD reader.
    4bfa:	80 ea       	ldi	r24, 0xA0	; 160
    4bfc:	99 e0       	ldi	r25, 0x09	; 9
    4bfe:	0a dd       	rcall	.-1516   	; 0x4614 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCC0); //LED timer counter
    4c00:	80 e0       	ldi	r24, 0x00	; 0
    4c02:	98 e0       	ldi	r25, 0x08	; 8
    4c04:	07 dd       	rcall	.-1522   	; 0x4614 <sysclk_enable_peripheral_clock>
	//sysclk_enable_peripheral_clock(&SPIC); //SPI init for pressure sensor.
		
	sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    4c06:	64 e0       	ldi	r22, 0x04	; 4
    4c08:	83 e0       	ldi	r24, 0x03	; 3
    4c0a:	0e 94 8c 19 	call	0x3318	; 0x3318 <sysclk_enable_module>
	
	twi_options_t m_options = {
    4c0e:	29 e0       	ldi	r18, 0x09	; 9
    4c10:	ce 01       	movw	r24, r28
    4c12:	01 96       	adiw	r24, 0x01	; 1
    4c14:	fc 01       	movw	r30, r24
    4c16:	32 2f       	mov	r19, r18
    4c18:	11 92       	st	Z+, r1
    4c1a:	3a 95       	dec	r19
    4c1c:	e9 f7       	brne	.-6      	; 0x4c18 <clock_init+0xba>
    4c1e:	80 e8       	ldi	r24, 0x80	; 128
    4c20:	9a e1       	ldi	r25, 0x1A	; 26
    4c22:	a6 e0       	ldi	r26, 0x06	; 6
    4c24:	b0 e0       	ldi	r27, 0x00	; 0
    4c26:	89 83       	std	Y+1, r24	; 0x01
    4c28:	9a 83       	std	Y+2, r25	; 0x02
    4c2a:	ab 83       	std	Y+3, r26	; 0x03
    4c2c:	bc 83       	std	Y+4, r27	; 0x04
    4c2e:	83 e2       	ldi	r24, 0x23	; 35
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	a0 e0       	ldi	r26, 0x00	; 0
    4c34:	b0 e0       	ldi	r27, 0x00	; 0
    4c36:	8d 83       	std	Y+5, r24	; 0x05
    4c38:	9e 83       	std	Y+6, r25	; 0x06
    4c3a:	af 83       	std	Y+7, r26	; 0x07
    4c3c:	b8 87       	std	Y+8, r27	; 0x08
		.speed = 400000,
		.speed_reg = TWI_BAUD(32000000, 400000),
	};
		
	sysclk_enable_peripheral_clock(&TWIE);
    4c3e:	80 ea       	ldi	r24, 0xA0	; 160
    4c40:	94 e0       	ldi	r25, 0x04	; 4
    4c42:	e8 dc       	rcall	.-1584   	; 0x4614 <sysclk_enable_peripheral_clock>
	twi_master_init(&TWIE, &m_options);
    4c44:	ce 01       	movw	r24, r28
    4c46:	01 96       	adiw	r24, 0x01	; 1
    4c48:	bc 01       	movw	r22, r24
    4c4a:	80 ea       	ldi	r24, 0xA0	; 160
    4c4c:	94 e0       	ldi	r25, 0x04	; 4
    4c4e:	ad d8       	rcall	.-3750   	; 0x3daa <twi_master_init>
	twi_master_enable(&TWIE);
    4c50:	80 ea       	ldi	r24, 0xA0	; 160
    4c52:	94 e0       	ldi	r25, 0x04	; 4
    4c54:	9c de       	rcall	.-712    	; 0x498e <twi_master_enable>
		
}
    4c56:	29 96       	adiw	r28, 0x09	; 9
    4c58:	cd bf       	out	0x3d, r28	; 61
    4c5a:	de bf       	out	0x3e, r29	; 62
    4c5c:	df 91       	pop	r29
    4c5e:	cf 91       	pop	r28
    4c60:	08 95       	ret

00004c62 <int_init>:


void int_init(void){
    4c62:	cf 93       	push	r28
    4c64:	df 93       	push	r29
    4c66:	cd b7       	in	r28, 0x3d	; 61
    4c68:	de b7       	in	r29, 0x3e	; 62
	
	
	Enable_global_interrupt();
    4c6a:	78 94       	sei
	
	PORTA.PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc; //Enable interrupts for porta
    4c6c:	80 e0       	ldi	r24, 0x00	; 0
    4c6e:	96 e0       	ldi	r25, 0x06	; 6
    4c70:	2a e1       	ldi	r18, 0x1A	; 26
    4c72:	fc 01       	movw	r30, r24
    4c74:	22 8b       	std	Z+18, r18	; 0x12
	PORTA.PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
    4c76:	80 e0       	ldi	r24, 0x00	; 0
    4c78:	96 e0       	ldi	r25, 0x06	; 6
    4c7a:	2a e1       	ldi	r18, 0x1A	; 26
    4c7c:	fc 01       	movw	r30, r24
    4c7e:	23 8b       	std	Z+19, r18	; 0x13
	PORTA.INT0MASK = PIN2_bm; //some masking stuff that should probably help pin interrupts work
    4c80:	80 e0       	ldi	r24, 0x00	; 0
    4c82:	96 e0       	ldi	r25, 0x06	; 6
    4c84:	24 e0       	ldi	r18, 0x04	; 4
    4c86:	fc 01       	movw	r30, r24
    4c88:	22 87       	std	Z+10, r18	; 0x0a
	PORTA.INT1MASK = PIN3_bm;
    4c8a:	80 e0       	ldi	r24, 0x00	; 0
    4c8c:	96 e0       	ldi	r25, 0x06	; 6
    4c8e:	28 e0       	ldi	r18, 0x08	; 8
    4c90:	fc 01       	movw	r30, r24
    4c92:	23 87       	std	Z+11, r18	; 0x0b
	PORTA.INTCTRL = PORT_INT0LVL_LO_gc | PORT_INT1LVL_LO_gc; //enable porta interrupts low level for interrupt0
    4c94:	80 e0       	ldi	r24, 0x00	; 0
    4c96:	96 e0       	ldi	r25, 0x06	; 6
    4c98:	25 e0       	ldi	r18, 0x05	; 5
    4c9a:	fc 01       	movw	r30, r24
    4c9c:	21 87       	std	Z+9, r18	; 0x09
	
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_LOLVLEN_bm; //Enable high level interrupts.
    4c9e:	80 ea       	ldi	r24, 0xA0	; 160
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	25 e0       	ldi	r18, 0x05	; 5
    4ca4:	fc 01       	movw	r30, r24
    4ca6:	22 83       	std	Z+2, r18	; 0x02
	
	//Allows the PORTE timer counter to be used for the main flight code things
	TCC0.CTRLA = 0b00000111; //prescalar 256
    4ca8:	80 e0       	ldi	r24, 0x00	; 0
    4caa:	98 e0       	ldi	r25, 0x08	; 8
    4cac:	27 e0       	ldi	r18, 0x07	; 7
    4cae:	fc 01       	movw	r30, r24
    4cb0:	20 83       	st	Z, r18
	TCC0.PER = 31249;
    4cb2:	80 e0       	ldi	r24, 0x00	; 0
    4cb4:	98 e0       	ldi	r25, 0x08	; 8
    4cb6:	21 e1       	ldi	r18, 0x11	; 17
    4cb8:	3a e7       	ldi	r19, 0x7A	; 122
    4cba:	fc 01       	movw	r30, r24
    4cbc:	26 a3       	std	Z+38, r18	; 0x26
    4cbe:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; // Enable interrupts for this timer counter
    4cc0:	80 e0       	ldi	r24, 0x00	; 0
    4cc2:	98 e0       	ldi	r25, 0x08	; 8
    4cc4:	21 e0       	ldi	r18, 0x01	; 1
    4cc6:	fc 01       	movw	r30, r24
    4cc8:	26 83       	std	Z+6, r18	; 0x06
}
    4cca:	df 91       	pop	r29
    4ccc:	cf 91       	pop	r28
    4cce:	08 95       	ret

00004cd0 <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
    4cd0:	cf 93       	push	r28
    4cd2:	df 93       	push	r29
    4cd4:	1f 92       	push	r1
    4cd6:	cd b7       	in	r28, 0x3d	; 61
    4cd8:	de b7       	in	r29, 0x3e	; 62
    4cda:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    4cdc:	89 81       	ldd	r24, Y+1	; 0x01
    4cde:	88 2f       	mov	r24, r24
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	bc 01       	movw	r22, r24
    4ce4:	82 e0       	ldi	r24, 0x02	; 2
    4ce6:	0e 94 80 1c 	call	0x3900	; 0x3900 <nvm_read_byte>
}
    4cea:	0f 90       	pop	r0
    4cec:	df 91       	pop	r29
    4cee:	cf 91       	pop	r28
    4cf0:	08 95       	ret

00004cf2 <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
    4cf2:	cf 93       	push	r28
    4cf4:	df 93       	push	r29
    4cf6:	00 d0       	rcall	.+0      	; 0x4cf8 <adc_get_calibration_data+0x6>
    4cf8:	1f 92       	push	r1
    4cfa:	cd b7       	in	r28, 0x3d	; 61
    4cfc:	de b7       	in	r29, 0x3e	; 62
    4cfe:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t data;

	switch (cal) {
    4d00:	8b 81       	ldd	r24, Y+3	; 0x03
    4d02:	88 2f       	mov	r24, r24
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	00 97       	sbiw	r24, 0x00	; 0
    4d08:	19 f0       	breq	.+6      	; 0x4d10 <adc_get_calibration_data+0x1e>
    4d0a:	02 97       	sbiw	r24, 0x02	; 2
    4d0c:	c1 f0       	breq	.+48     	; 0x4d3e <adc_get_calibration_data+0x4c>
    4d0e:	2e c0       	rjmp	.+92     	; 0x4d6c <adc_get_calibration_data+0x7a>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    4d10:	81 e2       	ldi	r24, 0x21	; 33
    4d12:	de df       	rcall	.-68     	; 0x4cd0 <nvm_read_production_signature_row>
    4d14:	88 2f       	mov	r24, r24
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	89 83       	std	Y+1, r24	; 0x01
    4d1a:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
    4d1c:	89 81       	ldd	r24, Y+1	; 0x01
    4d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d20:	98 2f       	mov	r25, r24
    4d22:	88 27       	eor	r24, r24
    4d24:	89 83       	std	Y+1, r24	; 0x01
    4d26:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCACAL0);
    4d28:	80 e2       	ldi	r24, 0x20	; 32
    4d2a:	d2 df       	rcall	.-92     	; 0x4cd0 <nvm_read_production_signature_row>
    4d2c:	88 2f       	mov	r24, r24
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	29 81       	ldd	r18, Y+1	; 0x01
    4d32:	3a 81       	ldd	r19, Y+2	; 0x02
    4d34:	82 2b       	or	r24, r18
    4d36:	93 2b       	or	r25, r19
    4d38:	89 83       	std	Y+1, r24	; 0x01
    4d3a:	9a 83       	std	Y+2, r25	; 0x02
		break;
    4d3c:	19 c0       	rjmp	.+50     	; 0x4d70 <adc_get_calibration_data+0x7e>
		break;
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
    4d3e:	8f e2       	ldi	r24, 0x2F	; 47
    4d40:	c7 df       	rcall	.-114    	; 0x4cd0 <nvm_read_production_signature_row>
    4d42:	88 2f       	mov	r24, r24
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	89 83       	std	Y+1, r24	; 0x01
    4d48:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
    4d4a:	89 81       	ldd	r24, Y+1	; 0x01
    4d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d4e:	98 2f       	mov	r25, r24
    4d50:	88 27       	eor	r24, r24
    4d52:	89 83       	std	Y+1, r24	; 0x01
    4d54:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(TEMPSENSE0);
    4d56:	8e e2       	ldi	r24, 0x2E	; 46
    4d58:	bb df       	rcall	.-138    	; 0x4cd0 <nvm_read_production_signature_row>
    4d5a:	88 2f       	mov	r24, r24
    4d5c:	90 e0       	ldi	r25, 0x00	; 0
    4d5e:	29 81       	ldd	r18, Y+1	; 0x01
    4d60:	3a 81       	ldd	r19, Y+2	; 0x02
    4d62:	82 2b       	or	r24, r18
    4d64:	93 2b       	or	r25, r19
    4d66:	89 83       	std	Y+1, r24	; 0x01
    4d68:	9a 83       	std	Y+2, r25	; 0x02
		break;
    4d6a:	02 c0       	rjmp	.+4      	; 0x4d70 <adc_get_calibration_data+0x7e>
		break;
#endif

	default:
		Assert(0);
		data = 0;
    4d6c:	19 82       	std	Y+1, r1	; 0x01
    4d6e:	1a 82       	std	Y+2, r1	; 0x02
	}

	return data;
    4d70:	89 81       	ldd	r24, Y+1	; 0x01
    4d72:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4d74:	23 96       	adiw	r28, 0x03	; 3
    4d76:	cd bf       	out	0x3d, r28	; 61
    4d78:	de bf       	out	0x3e, r29	; 62
    4d7a:	df 91       	pop	r29
    4d7c:	cf 91       	pop	r28
    4d7e:	08 95       	ret

00004d80 <ADC_init>:
#include "drivers/driver.h"
#include <math.h>
//#define DEBUG_TEMP

 void ADC_init(void)
 {
    4d80:	0f 93       	push	r16
    4d82:	1f 93       	push	r17
    4d84:	cf 93       	push	r28
    4d86:	df 93       	push	r29
    4d88:	cd b7       	in	r28, 0x3d	; 61
    4d8a:	de b7       	in	r29, 0x3e	; 62
	 ADCA.CTRLA = 0b00000001; //Enables the ADC
    4d8c:	80 e0       	ldi	r24, 0x00	; 0
    4d8e:	92 e0       	ldi	r25, 0x02	; 2
    4d90:	21 e0       	ldi	r18, 0x01	; 1
    4d92:	fc 01       	movw	r30, r24
    4d94:	20 83       	st	Z, r18
	 ADCA.CTRLB = 0b00000000; //Sets ADC to unsigned int mode
    4d96:	80 e0       	ldi	r24, 0x00	; 0
    4d98:	92 e0       	ldi	r25, 0x02	; 2
    4d9a:	fc 01       	movw	r30, r24
    4d9c:	11 82       	std	Z+1, r1	; 0x01
	 ADCA.REFCTRL = 0b00010000; //Voltage reference of Vcc/1.6V
    4d9e:	80 e0       	ldi	r24, 0x00	; 0
    4da0:	92 e0       	ldi	r25, 0x02	; 2
    4da2:	20 e1       	ldi	r18, 0x10	; 16
    4da4:	fc 01       	movw	r30, r24
    4da6:	22 83       	std	Z+2, r18	; 0x02
	 ADCA.PRESCALER = 0b00000101; //Automatic clock prescaler of 128
    4da8:	80 e0       	ldi	r24, 0x00	; 0
    4daa:	92 e0       	ldi	r25, 0x02	; 2
    4dac:	25 e0       	ldi	r18, 0x05	; 5
    4dae:	fc 01       	movw	r30, r24
    4db0:	24 83       	std	Z+4, r18	; 0x04
	 ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA); //gets calibration data about the ADC
    4db2:	00 e0       	ldi	r16, 0x00	; 0
    4db4:	12 e0       	ldi	r17, 0x02	; 2
    4db6:	80 e0       	ldi	r24, 0x00	; 0
    4db8:	9c df       	rcall	.-200    	; 0x4cf2 <adc_get_calibration_data>
    4dba:	f8 01       	movw	r30, r16
    4dbc:	84 87       	std	Z+12, r24	; 0x0c
    4dbe:	95 87       	std	Z+13, r25	; 0x0d

	 ADCA.CH0.CTRL = 0b00000001; //sets ADC to single ended input
    4dc0:	80 e0       	ldi	r24, 0x00	; 0
    4dc2:	92 e0       	ldi	r25, 0x02	; 2
    4dc4:	21 e0       	ldi	r18, 0x01	; 1
    4dc6:	fc 01       	movw	r30, r24
    4dc8:	20 a3       	std	Z+32, r18	; 0x20
	 ADCA.CH0.MUXCTRL = 0b00001000; //select pin 1
    4dca:	80 e0       	ldi	r24, 0x00	; 0
    4dcc:	92 e0       	ldi	r25, 0x02	; 2
    4dce:	28 e0       	ldi	r18, 0x08	; 8
    4dd0:	fc 01       	movw	r30, r24
    4dd2:	21 a3       	std	Z+33, r18	; 0x21
 }
    4dd4:	df 91       	pop	r29
    4dd6:	cf 91       	pop	r28
    4dd8:	1f 91       	pop	r17
    4dda:	0f 91       	pop	r16
    4ddc:	08 95       	ret

00004dde <getTemperature>:

int32_t getTemperature(void)
 {
    4dde:	8f 92       	push	r8
    4de0:	9f 92       	push	r9
    4de2:	af 92       	push	r10
    4de4:	bf 92       	push	r11
    4de6:	cf 92       	push	r12
    4de8:	df 92       	push	r13
    4dea:	ef 92       	push	r14
    4dec:	ff 92       	push	r15
    4dee:	cf 93       	push	r28
    4df0:	df 93       	push	r29
    4df2:	cd b7       	in	r28, 0x3d	; 61
    4df4:	de b7       	in	r29, 0x3e	; 62
    4df6:	6c 97       	sbiw	r28, 0x1c	; 28
    4df8:	cd bf       	out	0x3d, r28	; 61
    4dfa:	de bf       	out	0x3e, r29	; 62
	ADCA.CH0.CTRL |= 0b10000000; //Start conversion
    4dfc:	80 e0       	ldi	r24, 0x00	; 0
    4dfe:	92 e0       	ldi	r25, 0x02	; 2
    4e00:	20 e0       	ldi	r18, 0x00	; 0
    4e02:	32 e0       	ldi	r19, 0x02	; 2
    4e04:	f9 01       	movw	r30, r18
    4e06:	20 a1       	ldd	r18, Z+32	; 0x20
    4e08:	20 68       	ori	r18, 0x80	; 128
    4e0a:	fc 01       	movw	r30, r24
    4e0c:	20 a3       	std	Z+32, r18	; 0x20
	
	while(ADCA.CH0.INTFLAGS == 0); //do nothing until conversion is done
    4e0e:	00 00       	nop
    4e10:	80 e0       	ldi	r24, 0x00	; 0
    4e12:	92 e0       	ldi	r25, 0x02	; 2
    4e14:	fc 01       	movw	r30, r24
    4e16:	83 a1       	ldd	r24, Z+35	; 0x23
    4e18:	88 23       	and	r24, r24
    4e1a:	d1 f3       	breq	.-12     	; 0x4e10 <getTemperature+0x32>
	uint16_t adcReading = ADCA.CH0.RES;
    4e1c:	80 e0       	ldi	r24, 0x00	; 0
    4e1e:	92 e0       	ldi	r25, 0x02	; 2
    4e20:	fc 01       	movw	r30, r24
    4e22:	84 a1       	ldd	r24, Z+36	; 0x24
    4e24:	95 a1       	ldd	r25, Z+37	; 0x25
    4e26:	89 83       	std	Y+1, r24	; 0x01
    4e28:	9a 83       	std	Y+2, r25	; 0x02

	//Steinhart constants:
	//float const A1 = 0.003354016;
	float const A1 = 0.001125;
    4e2a:	8c eb       	ldi	r24, 0xBC	; 188
    4e2c:	94 e7       	ldi	r25, 0x74	; 116
    4e2e:	a3 e9       	ldi	r26, 0x93	; 147
    4e30:	ba e3       	ldi	r27, 0x3A	; 58
    4e32:	8b 83       	std	Y+3, r24	; 0x03
    4e34:	9c 83       	std	Y+4, r25	; 0x04
    4e36:	ad 83       	std	Y+5, r26	; 0x05
    4e38:	be 83       	std	Y+6, r27	; 0x06
	//float const B1 = 0.000256985;
	float const B1 = 0.0002347;
    4e3a:	8d ec       	ldi	r24, 0xCD	; 205
    4e3c:	99 e1       	ldi	r25, 0x19	; 25
    4e3e:	a6 e7       	ldi	r26, 0x76	; 118
    4e40:	b9 e3       	ldi	r27, 0x39	; 57
    4e42:	8f 83       	std	Y+7, r24	; 0x07
    4e44:	98 87       	std	Y+8, r25	; 0x08
    4e46:	a9 87       	std	Y+9, r26	; 0x09
    4e48:	ba 87       	std	Y+10, r27	; 0x0a
	//float const C1 = 0.000002620131;
	//float const D1 = 0.00000006383091;
	float const D1 = 0.00000008566;
    4e4a:	85 e1       	ldi	r24, 0x15	; 21
    4e4c:	94 ef       	ldi	r25, 0xF4	; 244
    4e4e:	a7 eb       	ldi	r26, 0xB7	; 183
    4e50:	b3 e3       	ldi	r27, 0x33	; 51
    4e52:	8b 87       	std	Y+11, r24	; 0x0b
    4e54:	9c 87       	std	Y+12, r25	; 0x0c
    4e56:	ad 87       	std	Y+13, r26	; 0x0d
    4e58:	be 87       	std	Y+14, r27	; 0x0e
	
	//Variables:
	float refResistance = 50000; //subject to change
    4e5a:	80 e0       	ldi	r24, 0x00	; 0
    4e5c:	90 e5       	ldi	r25, 0x50	; 80
    4e5e:	a3 e4       	ldi	r26, 0x43	; 67
    4e60:	b7 e4       	ldi	r27, 0x47	; 71
    4e62:	8f 87       	std	Y+15, r24	; 0x0f
    4e64:	98 8b       	std	Y+16, r25	; 0x10
    4e66:	a9 8b       	std	Y+17, r26	; 0x11
    4e68:	ba 8b       	std	Y+18, r27	; 0x12
	float voltage = 1000*(0.0005*adcReading - 0.088); //this is (m*read_adc)+b which is obtained experimentally
    4e6a:	89 81       	ldd	r24, Y+1	; 0x01
    4e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e6e:	cc 01       	movw	r24, r24
    4e70:	a0 e0       	ldi	r26, 0x00	; 0
    4e72:	b0 e0       	ldi	r27, 0x00	; 0
    4e74:	bc 01       	movw	r22, r24
    4e76:	cd 01       	movw	r24, r26
    4e78:	c6 d2       	rcall	.+1420   	; 0x5406 <__floatunsisf>
    4e7a:	dc 01       	movw	r26, r24
    4e7c:	cb 01       	movw	r24, r22
    4e7e:	2f e6       	ldi	r18, 0x6F	; 111
    4e80:	32 e1       	ldi	r19, 0x12	; 18
    4e82:	43 e0       	ldi	r20, 0x03	; 3
    4e84:	5a e3       	ldi	r21, 0x3A	; 58
    4e86:	bc 01       	movw	r22, r24
    4e88:	cd 01       	movw	r24, r26
    4e8a:	de d3       	rcall	.+1980   	; 0x5648 <__mulsf3>
    4e8c:	dc 01       	movw	r26, r24
    4e8e:	cb 01       	movw	r24, r22
    4e90:	28 e5       	ldi	r18, 0x58	; 88
    4e92:	39 e3       	ldi	r19, 0x39	; 57
    4e94:	44 eb       	ldi	r20, 0xB4	; 180
    4e96:	5d e3       	ldi	r21, 0x3D	; 61
    4e98:	bc 01       	movw	r22, r24
    4e9a:	cd 01       	movw	r24, r26
    4e9c:	78 d1       	rcall	.+752    	; 0x518e <__subsf3>
    4e9e:	dc 01       	movw	r26, r24
    4ea0:	cb 01       	movw	r24, r22
    4ea2:	20 e0       	ldi	r18, 0x00	; 0
    4ea4:	30 e0       	ldi	r19, 0x00	; 0
    4ea6:	4a e7       	ldi	r20, 0x7A	; 122
    4ea8:	54 e4       	ldi	r21, 0x44	; 68
    4eaa:	bc 01       	movw	r22, r24
    4eac:	cd 01       	movw	r24, r26
    4eae:	cc d3       	rcall	.+1944   	; 0x5648 <__mulsf3>
    4eb0:	dc 01       	movw	r26, r24
    4eb2:	cb 01       	movw	r24, r22
    4eb4:	8b 8b       	std	Y+19, r24	; 0x13
    4eb6:	9c 8b       	std	Y+20, r25	; 0x14
    4eb8:	ad 8b       	std	Y+21, r26	; 0x15
    4eba:	be 8b       	std	Y+22, r27	; 0x16
	//float resistance = (3.3*refResistance)/(3.3-voltage) - refResistance; //equation to convert is PH112
	int16_t resistance = (int16_t)(voltage/1000*refResistance)/(3.3-voltage/1000);
    4ebc:	20 e0       	ldi	r18, 0x00	; 0
    4ebe:	30 e0       	ldi	r19, 0x00	; 0
    4ec0:	4a e7       	ldi	r20, 0x7A	; 122
    4ec2:	54 e4       	ldi	r21, 0x44	; 68
    4ec4:	6b 89       	ldd	r22, Y+19	; 0x13
    4ec6:	7c 89       	ldd	r23, Y+20	; 0x14
    4ec8:	8d 89       	ldd	r24, Y+21	; 0x15
    4eca:	9e 89       	ldd	r25, Y+22	; 0x16
    4ecc:	c5 d1       	rcall	.+906    	; 0x5258 <__divsf3>
    4ece:	dc 01       	movw	r26, r24
    4ed0:	cb 01       	movw	r24, r22
    4ed2:	2f 85       	ldd	r18, Y+15	; 0x0f
    4ed4:	38 89       	ldd	r19, Y+16	; 0x10
    4ed6:	49 89       	ldd	r20, Y+17	; 0x11
    4ed8:	5a 89       	ldd	r21, Y+18	; 0x12
    4eda:	bc 01       	movw	r22, r24
    4edc:	cd 01       	movw	r24, r26
    4ede:	b4 d3       	rcall	.+1896   	; 0x5648 <__mulsf3>
    4ee0:	dc 01       	movw	r26, r24
    4ee2:	cb 01       	movw	r24, r22
    4ee4:	bc 01       	movw	r22, r24
    4ee6:	cd 01       	movw	r24, r26
    4ee8:	59 d2       	rcall	.+1202   	; 0x539c <__fixsfsi>
    4eea:	dc 01       	movw	r26, r24
    4eec:	cb 01       	movw	r24, r22
    4eee:	09 2e       	mov	r0, r25
    4ef0:	00 0c       	add	r0, r0
    4ef2:	aa 0b       	sbc	r26, r26
    4ef4:	bb 0b       	sbc	r27, r27
    4ef6:	bc 01       	movw	r22, r24
    4ef8:	cd 01       	movw	r24, r26
    4efa:	87 d2       	rcall	.+1294   	; 0x540a <__floatsisf>
    4efc:	6b 01       	movw	r12, r22
    4efe:	7c 01       	movw	r14, r24
    4f00:	20 e0       	ldi	r18, 0x00	; 0
    4f02:	30 e0       	ldi	r19, 0x00	; 0
    4f04:	4a e7       	ldi	r20, 0x7A	; 122
    4f06:	54 e4       	ldi	r21, 0x44	; 68
    4f08:	6b 89       	ldd	r22, Y+19	; 0x13
    4f0a:	7c 89       	ldd	r23, Y+20	; 0x14
    4f0c:	8d 89       	ldd	r24, Y+21	; 0x15
    4f0e:	9e 89       	ldd	r25, Y+22	; 0x16
    4f10:	a3 d1       	rcall	.+838    	; 0x5258 <__divsf3>
    4f12:	dc 01       	movw	r26, r24
    4f14:	cb 01       	movw	r24, r22
    4f16:	9c 01       	movw	r18, r24
    4f18:	ad 01       	movw	r20, r26
    4f1a:	63 e3       	ldi	r22, 0x33	; 51
    4f1c:	73 e3       	ldi	r23, 0x33	; 51
    4f1e:	83 e5       	ldi	r24, 0x53	; 83
    4f20:	90 e4       	ldi	r25, 0x40	; 64
    4f22:	35 d1       	rcall	.+618    	; 0x518e <__subsf3>
    4f24:	dc 01       	movw	r26, r24
    4f26:	cb 01       	movw	r24, r22
    4f28:	9c 01       	movw	r18, r24
    4f2a:	ad 01       	movw	r20, r26
    4f2c:	c7 01       	movw	r24, r14
    4f2e:	b6 01       	movw	r22, r12
    4f30:	93 d1       	rcall	.+806    	; 0x5258 <__divsf3>
    4f32:	dc 01       	movw	r26, r24
    4f34:	cb 01       	movw	r24, r22
    4f36:	bc 01       	movw	r22, r24
    4f38:	cd 01       	movw	r24, r26
    4f3a:	30 d2       	rcall	.+1120   	; 0x539c <__fixsfsi>
    4f3c:	dc 01       	movw	r26, r24
    4f3e:	cb 01       	movw	r24, r22
    4f40:	8f 8b       	std	Y+23, r24	; 0x17
    4f42:	98 8f       	std	Y+24, r25	; 0x18
	
	//Below is the Steinhart equation
	int32_t externalTemp = (int32_t) 1000*((1/((float)(A1 + B1*log(resistance) + D1*log(resistance)*log(resistance)*log(resistance))))-273.15); //10,000 is a temp fix, need to use refResistance but that appears to be wrong.
    4f44:	8f 89       	ldd	r24, Y+23	; 0x17
    4f46:	98 8d       	ldd	r25, Y+24	; 0x18
    4f48:	09 2e       	mov	r0, r25
    4f4a:	00 0c       	add	r0, r0
    4f4c:	aa 0b       	sbc	r26, r26
    4f4e:	bb 0b       	sbc	r27, r27
    4f50:	bc 01       	movw	r22, r24
    4f52:	cd 01       	movw	r24, r26
    4f54:	5a d2       	rcall	.+1204   	; 0x540a <__floatsisf>
    4f56:	dc 01       	movw	r26, r24
    4f58:	cb 01       	movw	r24, r22
    4f5a:	bc 01       	movw	r22, r24
    4f5c:	cd 01       	movw	r24, r26
    4f5e:	34 d3       	rcall	.+1640   	; 0x55c8 <log>
    4f60:	dc 01       	movw	r26, r24
    4f62:	cb 01       	movw	r24, r22
    4f64:	2f 81       	ldd	r18, Y+7	; 0x07
    4f66:	38 85       	ldd	r19, Y+8	; 0x08
    4f68:	49 85       	ldd	r20, Y+9	; 0x09
    4f6a:	5a 85       	ldd	r21, Y+10	; 0x0a
    4f6c:	bc 01       	movw	r22, r24
    4f6e:	cd 01       	movw	r24, r26
    4f70:	6b d3       	rcall	.+1750   	; 0x5648 <__mulsf3>
    4f72:	dc 01       	movw	r26, r24
    4f74:	cb 01       	movw	r24, r22
    4f76:	2b 81       	ldd	r18, Y+3	; 0x03
    4f78:	3c 81       	ldd	r19, Y+4	; 0x04
    4f7a:	4d 81       	ldd	r20, Y+5	; 0x05
    4f7c:	5e 81       	ldd	r21, Y+6	; 0x06
    4f7e:	bc 01       	movw	r22, r24
    4f80:	cd 01       	movw	r24, r26
    4f82:	06 d1       	rcall	.+524    	; 0x5190 <__addsf3>
    4f84:	dc 01       	movw	r26, r24
    4f86:	cb 01       	movw	r24, r22
    4f88:	6c 01       	movw	r12, r24
    4f8a:	7d 01       	movw	r14, r26
    4f8c:	8f 89       	ldd	r24, Y+23	; 0x17
    4f8e:	98 8d       	ldd	r25, Y+24	; 0x18
    4f90:	09 2e       	mov	r0, r25
    4f92:	00 0c       	add	r0, r0
    4f94:	aa 0b       	sbc	r26, r26
    4f96:	bb 0b       	sbc	r27, r27
    4f98:	bc 01       	movw	r22, r24
    4f9a:	cd 01       	movw	r24, r26
    4f9c:	36 d2       	rcall	.+1132   	; 0x540a <__floatsisf>
    4f9e:	dc 01       	movw	r26, r24
    4fa0:	cb 01       	movw	r24, r22
    4fa2:	bc 01       	movw	r22, r24
    4fa4:	cd 01       	movw	r24, r26
    4fa6:	10 d3       	rcall	.+1568   	; 0x55c8 <log>
    4fa8:	dc 01       	movw	r26, r24
    4faa:	cb 01       	movw	r24, r22
    4fac:	2b 85       	ldd	r18, Y+11	; 0x0b
    4fae:	3c 85       	ldd	r19, Y+12	; 0x0c
    4fb0:	4d 85       	ldd	r20, Y+13	; 0x0d
    4fb2:	5e 85       	ldd	r21, Y+14	; 0x0e
    4fb4:	bc 01       	movw	r22, r24
    4fb6:	cd 01       	movw	r24, r26
    4fb8:	47 d3       	rcall	.+1678   	; 0x5648 <__mulsf3>
    4fba:	dc 01       	movw	r26, r24
    4fbc:	cb 01       	movw	r24, r22
    4fbe:	4c 01       	movw	r8, r24
    4fc0:	5d 01       	movw	r10, r26
    4fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    4fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    4fc6:	09 2e       	mov	r0, r25
    4fc8:	00 0c       	add	r0, r0
    4fca:	aa 0b       	sbc	r26, r26
    4fcc:	bb 0b       	sbc	r27, r27
    4fce:	bc 01       	movw	r22, r24
    4fd0:	cd 01       	movw	r24, r26
    4fd2:	1b d2       	rcall	.+1078   	; 0x540a <__floatsisf>
    4fd4:	dc 01       	movw	r26, r24
    4fd6:	cb 01       	movw	r24, r22
    4fd8:	bc 01       	movw	r22, r24
    4fda:	cd 01       	movw	r24, r26
    4fdc:	f5 d2       	rcall	.+1514   	; 0x55c8 <log>
    4fde:	dc 01       	movw	r26, r24
    4fe0:	cb 01       	movw	r24, r22
    4fe2:	9c 01       	movw	r18, r24
    4fe4:	ad 01       	movw	r20, r26
    4fe6:	c5 01       	movw	r24, r10
    4fe8:	b4 01       	movw	r22, r8
    4fea:	2e d3       	rcall	.+1628   	; 0x5648 <__mulsf3>
    4fec:	dc 01       	movw	r26, r24
    4fee:	cb 01       	movw	r24, r22
    4ff0:	4c 01       	movw	r8, r24
    4ff2:	5d 01       	movw	r10, r26
    4ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ff8:	09 2e       	mov	r0, r25
    4ffa:	00 0c       	add	r0, r0
    4ffc:	aa 0b       	sbc	r26, r26
    4ffe:	bb 0b       	sbc	r27, r27
    5000:	bc 01       	movw	r22, r24
    5002:	cd 01       	movw	r24, r26
    5004:	02 d2       	rcall	.+1028   	; 0x540a <__floatsisf>
    5006:	dc 01       	movw	r26, r24
    5008:	cb 01       	movw	r24, r22
    500a:	bc 01       	movw	r22, r24
    500c:	cd 01       	movw	r24, r26
    500e:	dc d2       	rcall	.+1464   	; 0x55c8 <log>
    5010:	dc 01       	movw	r26, r24
    5012:	cb 01       	movw	r24, r22
    5014:	9c 01       	movw	r18, r24
    5016:	ad 01       	movw	r20, r26
    5018:	c5 01       	movw	r24, r10
    501a:	b4 01       	movw	r22, r8
    501c:	15 d3       	rcall	.+1578   	; 0x5648 <__mulsf3>
    501e:	dc 01       	movw	r26, r24
    5020:	cb 01       	movw	r24, r22
    5022:	9c 01       	movw	r18, r24
    5024:	ad 01       	movw	r20, r26
    5026:	c7 01       	movw	r24, r14
    5028:	b6 01       	movw	r22, r12
    502a:	b2 d0       	rcall	.+356    	; 0x5190 <__addsf3>
    502c:	dc 01       	movw	r26, r24
    502e:	cb 01       	movw	r24, r22
    5030:	9c 01       	movw	r18, r24
    5032:	ad 01       	movw	r20, r26
    5034:	60 e0       	ldi	r22, 0x00	; 0
    5036:	70 e0       	ldi	r23, 0x00	; 0
    5038:	80 e8       	ldi	r24, 0x80	; 128
    503a:	9f e3       	ldi	r25, 0x3F	; 63
    503c:	0d d1       	rcall	.+538    	; 0x5258 <__divsf3>
    503e:	dc 01       	movw	r26, r24
    5040:	cb 01       	movw	r24, r22
    5042:	23 e3       	ldi	r18, 0x33	; 51
    5044:	33 e9       	ldi	r19, 0x93	; 147
    5046:	48 e8       	ldi	r20, 0x88	; 136
    5048:	53 e4       	ldi	r21, 0x43	; 67
    504a:	bc 01       	movw	r22, r24
    504c:	cd 01       	movw	r24, r26
    504e:	9f d0       	rcall	.+318    	; 0x518e <__subsf3>
    5050:	dc 01       	movw	r26, r24
    5052:	cb 01       	movw	r24, r22
    5054:	20 e0       	ldi	r18, 0x00	; 0
    5056:	30 e0       	ldi	r19, 0x00	; 0
    5058:	4a e7       	ldi	r20, 0x7A	; 122
    505a:	54 e4       	ldi	r21, 0x44	; 68
    505c:	bc 01       	movw	r22, r24
    505e:	cd 01       	movw	r24, r26
    5060:	f3 d2       	rcall	.+1510   	; 0x5648 <__mulsf3>
    5062:	dc 01       	movw	r26, r24
    5064:	cb 01       	movw	r24, r22
    5066:	bc 01       	movw	r22, r24
    5068:	cd 01       	movw	r24, r26
    506a:	98 d1       	rcall	.+816    	; 0x539c <__fixsfsi>
    506c:	dc 01       	movw	r26, r24
    506e:	cb 01       	movw	r24, r22
    5070:	89 8f       	std	Y+25, r24	; 0x19
    5072:	9a 8f       	std	Y+26, r25	; 0x1a
    5074:	ab 8f       	std	Y+27, r26	; 0x1b
    5076:	bc 8f       	std	Y+28, r27	; 0x1c
	return externalTemp;
    5078:	89 8d       	ldd	r24, Y+25	; 0x19
    507a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    507c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    507e:	bc 8d       	ldd	r27, Y+28	; 0x1c
// #ifdef DEBUG_TEMP
// 	printf("adcReading: %u, volt: %i, res: %li, temp: %li\n", adcReading, (int16_t)voltage, resistance, externalTemp);
// #endif
    5080:	bc 01       	movw	r22, r24
    5082:	cd 01       	movw	r24, r26
    5084:	6c 96       	adiw	r28, 0x1c	; 28
    5086:	cd bf       	out	0x3d, r28	; 61
    5088:	de bf       	out	0x3e, r29	; 62
    508a:	df 91       	pop	r29
    508c:	cf 91       	pop	r28
    508e:	ff 90       	pop	r15
    5090:	ef 90       	pop	r14
    5092:	df 90       	pop	r13
    5094:	cf 90       	pop	r12
    5096:	bf 90       	pop	r11
    5098:	af 90       	pop	r10
    509a:	9f 90       	pop	r9
    509c:	8f 90       	pop	r8
    509e:	08 95       	ret

000050a0 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    50a0:	cf 93       	push	r28
    50a2:	df 93       	push	r29
    50a4:	cd b7       	in	r28, 0x3d	; 61
    50a6:	de b7       	in	r29, 0x3e	; 62
    50a8:	26 97       	sbiw	r28, 0x06	; 6
    50aa:	cd bf       	out	0x3d, r28	; 61
    50ac:	de bf       	out	0x3e, r29	; 62
    50ae:	8a 83       	std	Y+2, r24	; 0x02
    50b0:	9b 83       	std	Y+3, r25	; 0x03
    50b2:	6c 83       	std	Y+4, r22	; 0x04
    50b4:	4d 83       	std	Y+5, r20	; 0x05
    50b6:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    50b8:	19 82       	std	Y+1, r1	; 0x01
    50ba:	20 c0       	rjmp	.+64     	; 0x50fc <ioport_configure_port_pin+0x5c>
		if (pin_mask & (1 << pin)) {
    50bc:	8c 81       	ldd	r24, Y+4	; 0x04
    50be:	88 2f       	mov	r24, r24
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	29 81       	ldd	r18, Y+1	; 0x01
    50c4:	22 2f       	mov	r18, r18
    50c6:	30 e0       	ldi	r19, 0x00	; 0
    50c8:	02 c0       	rjmp	.+4      	; 0x50ce <ioport_configure_port_pin+0x2e>
    50ca:	95 95       	asr	r25
    50cc:	87 95       	ror	r24
    50ce:	2a 95       	dec	r18
    50d0:	e2 f7       	brpl	.-8      	; 0x50ca <ioport_configure_port_pin+0x2a>
    50d2:	81 70       	andi	r24, 0x01	; 1
    50d4:	99 27       	eor	r25, r25
    50d6:	89 2b       	or	r24, r25
    50d8:	71 f0       	breq	.+28     	; 0x50f6 <ioport_configure_port_pin+0x56>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    50da:	89 81       	ldd	r24, Y+1	; 0x01
    50dc:	88 2f       	mov	r24, r24
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	40 96       	adiw	r24, 0x10	; 16
    50e2:	2a 81       	ldd	r18, Y+2	; 0x02
    50e4:	3b 81       	ldd	r19, Y+3	; 0x03
    50e6:	82 0f       	add	r24, r18
    50e8:	93 1f       	adc	r25, r19
    50ea:	2d 81       	ldd	r18, Y+5	; 0x05
    50ec:	3e 81       	ldd	r19, Y+6	; 0x06
    50ee:	23 2f       	mov	r18, r19
    50f0:	33 27       	eor	r19, r19
    50f2:	fc 01       	movw	r30, r24
    50f4:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    50f6:	89 81       	ldd	r24, Y+1	; 0x01
    50f8:	8f 5f       	subi	r24, 0xFF	; 255
    50fa:	89 83       	std	Y+1, r24	; 0x01
    50fc:	89 81       	ldd	r24, Y+1	; 0x01
    50fe:	88 30       	cpi	r24, 0x08	; 8
    5100:	e8 f2       	brcs	.-70     	; 0x50bc <ioport_configure_port_pin+0x1c>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    5102:	8d 81       	ldd	r24, Y+5	; 0x05
    5104:	9e 81       	ldd	r25, Y+6	; 0x06
    5106:	81 70       	andi	r24, 0x01	; 1
    5108:	99 27       	eor	r25, r25
    510a:	89 2b       	or	r24, r25
    510c:	d1 f0       	breq	.+52     	; 0x5142 <ioport_configure_port_pin+0xa2>
		if (flags & IOPORT_INIT_HIGH) {
    510e:	8d 81       	ldd	r24, Y+5	; 0x05
    5110:	9e 81       	ldd	r25, Y+6	; 0x06
    5112:	82 70       	andi	r24, 0x02	; 2
    5114:	99 27       	eor	r25, r25
    5116:	89 2b       	or	r24, r25
    5118:	39 f0       	breq	.+14     	; 0x5128 <ioport_configure_port_pin+0x88>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    511a:	8a 81       	ldd	r24, Y+2	; 0x02
    511c:	9b 81       	ldd	r25, Y+3	; 0x03
    511e:	05 96       	adiw	r24, 0x05	; 5
    5120:	2c 81       	ldd	r18, Y+4	; 0x04
    5122:	fc 01       	movw	r30, r24
    5124:	20 83       	st	Z, r18
    5126:	06 c0       	rjmp	.+12     	; 0x5134 <ioport_configure_port_pin+0x94>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    5128:	8a 81       	ldd	r24, Y+2	; 0x02
    512a:	9b 81       	ldd	r25, Y+3	; 0x03
    512c:	06 96       	adiw	r24, 0x06	; 6
    512e:	2c 81       	ldd	r18, Y+4	; 0x04
    5130:	fc 01       	movw	r30, r24
    5132:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    5134:	8a 81       	ldd	r24, Y+2	; 0x02
    5136:	9b 81       	ldd	r25, Y+3	; 0x03
    5138:	01 96       	adiw	r24, 0x01	; 1
    513a:	2c 81       	ldd	r18, Y+4	; 0x04
    513c:	fc 01       	movw	r30, r24
    513e:	20 83       	st	Z, r18
    5140:	06 c0       	rjmp	.+12     	; 0x514e <ioport_configure_port_pin+0xae>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    5142:	8a 81       	ldd	r24, Y+2	; 0x02
    5144:	9b 81       	ldd	r25, Y+3	; 0x03
    5146:	02 96       	adiw	r24, 0x02	; 2
    5148:	2c 81       	ldd	r18, Y+4	; 0x04
    514a:	fc 01       	movw	r30, r24
    514c:	20 83       	st	Z, r18
	}
}
    514e:	26 96       	adiw	r28, 0x06	; 6
    5150:	cd bf       	out	0x3d, r28	; 61
    5152:	de bf       	out	0x3e, r29	; 62
    5154:	df 91       	pop	r29
    5156:	cf 91       	pop	r28
    5158:	08 95       	ret

0000515a <board_init>:
#include "stk600_rc044x.h"
#include "conf_board.h"
#include "ioport.h"

void board_init(void)
{
    515a:	cf 93       	push	r28
    515c:	df 93       	push	r29
    515e:	cd b7       	in	r28, 0x3d	; 61
    5160:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = 0b00000000;
    5162:	80 e0       	ldi	r24, 0x00	; 0
    5164:	96 e0       	ldi	r25, 0x06	; 6
    5166:	fc 01       	movw	r30, r24
    5168:	11 82       	std	Z+1, r1	; 0x01
	PIN 1: Thermistor
	PIN 2: Geiger Counter 1
	PIN 3: Geiger Counter 2
	*/
	
	PORTC.DIRSET = 0b10111001;
    516a:	80 e4       	ldi	r24, 0x40	; 64
    516c:	96 e0       	ldi	r25, 0x06	; 6
    516e:	29 eb       	ldi	r18, 0xB9	; 185
    5170:	fc 01       	movw	r30, r24
    5172:	21 83       	std	Z+1, r18	; 0x01
	PIN 6: MS5607 Master In
	PIN 7: MS5607 Serial Clock
	*/
	
	//PORTD.DIRSET = 0b11111011;
	PORTD.DIRSET = 0b00001000;
    5174:	80 e6       	ldi	r24, 0x60	; 96
    5176:	96 e0       	ldi	r25, 0x06	; 6
    5178:	28 e0       	ldi	r18, 0x08	; 8
    517a:	fc 01       	movw	r30, r24
    517c:	21 83       	std	Z+1, r18	; 0x01
	/*
	PIN 2: SD Card Open Logger RX
	PIN 3: SD Card Open Logger TX
	*/
	
	PORTE.DIRSET = 0b00001010;
    517e:	80 e8       	ldi	r24, 0x80	; 128
    5180:	96 e0       	ldi	r25, 0x06	; 6
    5182:	2a e0       	ldi	r18, 0x0A	; 10
    5184:	fc 01       	movw	r30, r24
    5186:	21 83       	std	Z+1, r18	; 0x01
	PIN 2: Radio RX
	PIN 3: Radio TX
	*/
	
	
}
    5188:	df 91       	pop	r29
    518a:	cf 91       	pop	r28
    518c:	08 95       	ret

0000518e <__subsf3>:
    518e:	50 58       	subi	r21, 0x80	; 128

00005190 <__addsf3>:
    5190:	bb 27       	eor	r27, r27
    5192:	aa 27       	eor	r26, r26
    5194:	0e d0       	rcall	.+28     	; 0x51b2 <__addsf3x>
    5196:	d9 c1       	rjmp	.+946    	; 0x554a <__fp_round>
    5198:	ca d1       	rcall	.+916    	; 0x552e <__fp_pscA>
    519a:	30 f0       	brcs	.+12     	; 0x51a8 <__addsf3+0x18>
    519c:	cf d1       	rcall	.+926    	; 0x553c <__fp_pscB>
    519e:	20 f0       	brcs	.+8      	; 0x51a8 <__addsf3+0x18>
    51a0:	31 f4       	brne	.+12     	; 0x51ae <__addsf3+0x1e>
    51a2:	9f 3f       	cpi	r25, 0xFF	; 255
    51a4:	11 f4       	brne	.+4      	; 0x51aa <__addsf3+0x1a>
    51a6:	1e f4       	brtc	.+6      	; 0x51ae <__addsf3+0x1e>
    51a8:	af c1       	rjmp	.+862    	; 0x5508 <__fp_nan>
    51aa:	0e f4       	brtc	.+2      	; 0x51ae <__addsf3+0x1e>
    51ac:	e0 95       	com	r30
    51ae:	e7 fb       	bst	r30, 7
    51b0:	a5 c1       	rjmp	.+842    	; 0x54fc <__fp_inf>

000051b2 <__addsf3x>:
    51b2:	e9 2f       	mov	r30, r25
    51b4:	db d1       	rcall	.+950    	; 0x556c <__fp_split3>
    51b6:	80 f3       	brcs	.-32     	; 0x5198 <__addsf3+0x8>
    51b8:	ba 17       	cp	r27, r26
    51ba:	62 07       	cpc	r22, r18
    51bc:	73 07       	cpc	r23, r19
    51be:	84 07       	cpc	r24, r20
    51c0:	95 07       	cpc	r25, r21
    51c2:	18 f0       	brcs	.+6      	; 0x51ca <__addsf3x+0x18>
    51c4:	71 f4       	brne	.+28     	; 0x51e2 <__addsf3x+0x30>
    51c6:	9e f5       	brtc	.+102    	; 0x522e <__addsf3x+0x7c>
    51c8:	f3 c1       	rjmp	.+998    	; 0x55b0 <__fp_zero>
    51ca:	0e f4       	brtc	.+2      	; 0x51ce <__addsf3x+0x1c>
    51cc:	e0 95       	com	r30
    51ce:	0b 2e       	mov	r0, r27
    51d0:	ba 2f       	mov	r27, r26
    51d2:	a0 2d       	mov	r26, r0
    51d4:	0b 01       	movw	r0, r22
    51d6:	b9 01       	movw	r22, r18
    51d8:	90 01       	movw	r18, r0
    51da:	0c 01       	movw	r0, r24
    51dc:	ca 01       	movw	r24, r20
    51de:	a0 01       	movw	r20, r0
    51e0:	11 24       	eor	r1, r1
    51e2:	ff 27       	eor	r31, r31
    51e4:	59 1b       	sub	r21, r25
    51e6:	99 f0       	breq	.+38     	; 0x520e <__addsf3x+0x5c>
    51e8:	59 3f       	cpi	r21, 0xF9	; 249
    51ea:	50 f4       	brcc	.+20     	; 0x5200 <__addsf3x+0x4e>
    51ec:	50 3e       	cpi	r21, 0xE0	; 224
    51ee:	68 f1       	brcs	.+90     	; 0x524a <__addsf3x+0x98>
    51f0:	1a 16       	cp	r1, r26
    51f2:	f0 40       	sbci	r31, 0x00	; 0
    51f4:	a2 2f       	mov	r26, r18
    51f6:	23 2f       	mov	r18, r19
    51f8:	34 2f       	mov	r19, r20
    51fa:	44 27       	eor	r20, r20
    51fc:	58 5f       	subi	r21, 0xF8	; 248
    51fe:	f3 cf       	rjmp	.-26     	; 0x51e6 <__addsf3x+0x34>
    5200:	46 95       	lsr	r20
    5202:	37 95       	ror	r19
    5204:	27 95       	ror	r18
    5206:	a7 95       	ror	r26
    5208:	f0 40       	sbci	r31, 0x00	; 0
    520a:	53 95       	inc	r21
    520c:	c9 f7       	brne	.-14     	; 0x5200 <__addsf3x+0x4e>
    520e:	7e f4       	brtc	.+30     	; 0x522e <__addsf3x+0x7c>
    5210:	1f 16       	cp	r1, r31
    5212:	ba 0b       	sbc	r27, r26
    5214:	62 0b       	sbc	r22, r18
    5216:	73 0b       	sbc	r23, r19
    5218:	84 0b       	sbc	r24, r20
    521a:	ba f0       	brmi	.+46     	; 0x524a <__addsf3x+0x98>
    521c:	91 50       	subi	r25, 0x01	; 1
    521e:	a1 f0       	breq	.+40     	; 0x5248 <__addsf3x+0x96>
    5220:	ff 0f       	add	r31, r31
    5222:	bb 1f       	adc	r27, r27
    5224:	66 1f       	adc	r22, r22
    5226:	77 1f       	adc	r23, r23
    5228:	88 1f       	adc	r24, r24
    522a:	c2 f7       	brpl	.-16     	; 0x521c <__addsf3x+0x6a>
    522c:	0e c0       	rjmp	.+28     	; 0x524a <__addsf3x+0x98>
    522e:	ba 0f       	add	r27, r26
    5230:	62 1f       	adc	r22, r18
    5232:	73 1f       	adc	r23, r19
    5234:	84 1f       	adc	r24, r20
    5236:	48 f4       	brcc	.+18     	; 0x524a <__addsf3x+0x98>
    5238:	87 95       	ror	r24
    523a:	77 95       	ror	r23
    523c:	67 95       	ror	r22
    523e:	b7 95       	ror	r27
    5240:	f7 95       	ror	r31
    5242:	9e 3f       	cpi	r25, 0xFE	; 254
    5244:	08 f0       	brcs	.+2      	; 0x5248 <__addsf3x+0x96>
    5246:	b3 cf       	rjmp	.-154    	; 0x51ae <__addsf3+0x1e>
    5248:	93 95       	inc	r25
    524a:	88 0f       	add	r24, r24
    524c:	08 f0       	brcs	.+2      	; 0x5250 <__addsf3x+0x9e>
    524e:	99 27       	eor	r25, r25
    5250:	ee 0f       	add	r30, r30
    5252:	97 95       	ror	r25
    5254:	87 95       	ror	r24
    5256:	08 95       	ret

00005258 <__divsf3>:
    5258:	0c d0       	rcall	.+24     	; 0x5272 <__divsf3x>
    525a:	77 c1       	rjmp	.+750    	; 0x554a <__fp_round>
    525c:	6f d1       	rcall	.+734    	; 0x553c <__fp_pscB>
    525e:	40 f0       	brcs	.+16     	; 0x5270 <__divsf3+0x18>
    5260:	66 d1       	rcall	.+716    	; 0x552e <__fp_pscA>
    5262:	30 f0       	brcs	.+12     	; 0x5270 <__divsf3+0x18>
    5264:	21 f4       	brne	.+8      	; 0x526e <__divsf3+0x16>
    5266:	5f 3f       	cpi	r21, 0xFF	; 255
    5268:	19 f0       	breq	.+6      	; 0x5270 <__divsf3+0x18>
    526a:	48 c1       	rjmp	.+656    	; 0x54fc <__fp_inf>
    526c:	51 11       	cpse	r21, r1
    526e:	a1 c1       	rjmp	.+834    	; 0x55b2 <__fp_szero>
    5270:	4b c1       	rjmp	.+662    	; 0x5508 <__fp_nan>

00005272 <__divsf3x>:
    5272:	7c d1       	rcall	.+760    	; 0x556c <__fp_split3>
    5274:	98 f3       	brcs	.-26     	; 0x525c <__divsf3+0x4>

00005276 <__divsf3_pse>:
    5276:	99 23       	and	r25, r25
    5278:	c9 f3       	breq	.-14     	; 0x526c <__divsf3+0x14>
    527a:	55 23       	and	r21, r21
    527c:	b1 f3       	breq	.-20     	; 0x526a <__divsf3+0x12>
    527e:	95 1b       	sub	r25, r21
    5280:	55 0b       	sbc	r21, r21
    5282:	bb 27       	eor	r27, r27
    5284:	aa 27       	eor	r26, r26
    5286:	62 17       	cp	r22, r18
    5288:	73 07       	cpc	r23, r19
    528a:	84 07       	cpc	r24, r20
    528c:	38 f0       	brcs	.+14     	; 0x529c <__divsf3_pse+0x26>
    528e:	9f 5f       	subi	r25, 0xFF	; 255
    5290:	5f 4f       	sbci	r21, 0xFF	; 255
    5292:	22 0f       	add	r18, r18
    5294:	33 1f       	adc	r19, r19
    5296:	44 1f       	adc	r20, r20
    5298:	aa 1f       	adc	r26, r26
    529a:	a9 f3       	breq	.-22     	; 0x5286 <__divsf3_pse+0x10>
    529c:	33 d0       	rcall	.+102    	; 0x5304 <__divsf3_pse+0x8e>
    529e:	0e 2e       	mov	r0, r30
    52a0:	3a f0       	brmi	.+14     	; 0x52b0 <__divsf3_pse+0x3a>
    52a2:	e0 e8       	ldi	r30, 0x80	; 128
    52a4:	30 d0       	rcall	.+96     	; 0x5306 <__divsf3_pse+0x90>
    52a6:	91 50       	subi	r25, 0x01	; 1
    52a8:	50 40       	sbci	r21, 0x00	; 0
    52aa:	e6 95       	lsr	r30
    52ac:	00 1c       	adc	r0, r0
    52ae:	ca f7       	brpl	.-14     	; 0x52a2 <__divsf3_pse+0x2c>
    52b0:	29 d0       	rcall	.+82     	; 0x5304 <__divsf3_pse+0x8e>
    52b2:	fe 2f       	mov	r31, r30
    52b4:	27 d0       	rcall	.+78     	; 0x5304 <__divsf3_pse+0x8e>
    52b6:	66 0f       	add	r22, r22
    52b8:	77 1f       	adc	r23, r23
    52ba:	88 1f       	adc	r24, r24
    52bc:	bb 1f       	adc	r27, r27
    52be:	26 17       	cp	r18, r22
    52c0:	37 07       	cpc	r19, r23
    52c2:	48 07       	cpc	r20, r24
    52c4:	ab 07       	cpc	r26, r27
    52c6:	b0 e8       	ldi	r27, 0x80	; 128
    52c8:	09 f0       	breq	.+2      	; 0x52cc <__divsf3_pse+0x56>
    52ca:	bb 0b       	sbc	r27, r27
    52cc:	80 2d       	mov	r24, r0
    52ce:	bf 01       	movw	r22, r30
    52d0:	ff 27       	eor	r31, r31
    52d2:	93 58       	subi	r25, 0x83	; 131
    52d4:	5f 4f       	sbci	r21, 0xFF	; 255
    52d6:	2a f0       	brmi	.+10     	; 0x52e2 <__divsf3_pse+0x6c>
    52d8:	9e 3f       	cpi	r25, 0xFE	; 254
    52da:	51 05       	cpc	r21, r1
    52dc:	68 f0       	brcs	.+26     	; 0x52f8 <__divsf3_pse+0x82>
    52de:	0e c1       	rjmp	.+540    	; 0x54fc <__fp_inf>
    52e0:	68 c1       	rjmp	.+720    	; 0x55b2 <__fp_szero>
    52e2:	5f 3f       	cpi	r21, 0xFF	; 255
    52e4:	ec f3       	brlt	.-6      	; 0x52e0 <__divsf3_pse+0x6a>
    52e6:	98 3e       	cpi	r25, 0xE8	; 232
    52e8:	dc f3       	brlt	.-10     	; 0x52e0 <__divsf3_pse+0x6a>
    52ea:	86 95       	lsr	r24
    52ec:	77 95       	ror	r23
    52ee:	67 95       	ror	r22
    52f0:	b7 95       	ror	r27
    52f2:	f7 95       	ror	r31
    52f4:	9f 5f       	subi	r25, 0xFF	; 255
    52f6:	c9 f7       	brne	.-14     	; 0x52ea <__divsf3_pse+0x74>
    52f8:	88 0f       	add	r24, r24
    52fa:	91 1d       	adc	r25, r1
    52fc:	96 95       	lsr	r25
    52fe:	87 95       	ror	r24
    5300:	97 f9       	bld	r25, 7
    5302:	08 95       	ret
    5304:	e1 e0       	ldi	r30, 0x01	; 1
    5306:	66 0f       	add	r22, r22
    5308:	77 1f       	adc	r23, r23
    530a:	88 1f       	adc	r24, r24
    530c:	bb 1f       	adc	r27, r27
    530e:	62 17       	cp	r22, r18
    5310:	73 07       	cpc	r23, r19
    5312:	84 07       	cpc	r24, r20
    5314:	ba 07       	cpc	r27, r26
    5316:	20 f0       	brcs	.+8      	; 0x5320 <__divsf3_pse+0xaa>
    5318:	62 1b       	sub	r22, r18
    531a:	73 0b       	sbc	r23, r19
    531c:	84 0b       	sbc	r24, r20
    531e:	ba 0b       	sbc	r27, r26
    5320:	ee 1f       	adc	r30, r30
    5322:	88 f7       	brcc	.-30     	; 0x5306 <__divsf3_pse+0x90>
    5324:	e0 95       	com	r30
    5326:	08 95       	ret

00005328 <__fixsfdi>:
    5328:	be e3       	ldi	r27, 0x3E	; 62
    532a:	04 d0       	rcall	.+8      	; 0x5334 <__fixunssfdi+0x2>
    532c:	08 f4       	brcc	.+2      	; 0x5330 <__fixsfdi+0x8>
    532e:	90 e8       	ldi	r25, 0x80	; 128
    5330:	08 95       	ret

00005332 <__fixunssfdi>:
    5332:	bf e3       	ldi	r27, 0x3F	; 63
    5334:	22 27       	eor	r18, r18
    5336:	33 27       	eor	r19, r19
    5338:	a9 01       	movw	r20, r18
    533a:	20 d1       	rcall	.+576    	; 0x557c <__fp_splitA>
    533c:	58 f1       	brcs	.+86     	; 0x5394 <__fixunssfdi+0x62>
    533e:	9f 57       	subi	r25, 0x7F	; 127
    5340:	40 f1       	brcs	.+80     	; 0x5392 <__fixunssfdi+0x60>
    5342:	b9 17       	cp	r27, r25
    5344:	38 f1       	brcs	.+78     	; 0x5394 <__fixunssfdi+0x62>
    5346:	bf e3       	ldi	r27, 0x3F	; 63
    5348:	b9 1b       	sub	r27, r25
    534a:	99 27       	eor	r25, r25
    534c:	b8 50       	subi	r27, 0x08	; 8
    534e:	3a f4       	brpl	.+14     	; 0x535e <__fixunssfdi+0x2c>
    5350:	66 0f       	add	r22, r22
    5352:	77 1f       	adc	r23, r23
    5354:	88 1f       	adc	r24, r24
    5356:	99 1f       	adc	r25, r25
    5358:	b3 95       	inc	r27
    535a:	d2 f3       	brmi	.-12     	; 0x5350 <__fixunssfdi+0x1e>
    535c:	16 c0       	rjmp	.+44     	; 0x538a <__fixunssfdi+0x58>
    535e:	b8 50       	subi	r27, 0x08	; 8
    5360:	4a f0       	brmi	.+18     	; 0x5374 <__fixunssfdi+0x42>
    5362:	23 2f       	mov	r18, r19
    5364:	34 2f       	mov	r19, r20
    5366:	45 2f       	mov	r20, r21
    5368:	56 2f       	mov	r21, r22
    536a:	67 2f       	mov	r22, r23
    536c:	78 2f       	mov	r23, r24
    536e:	88 27       	eor	r24, r24
    5370:	b8 50       	subi	r27, 0x08	; 8
    5372:	ba f7       	brpl	.-18     	; 0x5362 <__fixunssfdi+0x30>
    5374:	b8 5f       	subi	r27, 0xF8	; 248
    5376:	49 f0       	breq	.+18     	; 0x538a <__fixunssfdi+0x58>
    5378:	86 95       	lsr	r24
    537a:	77 95       	ror	r23
    537c:	67 95       	ror	r22
    537e:	57 95       	ror	r21
    5380:	47 95       	ror	r20
    5382:	37 95       	ror	r19
    5384:	27 95       	ror	r18
    5386:	ba 95       	dec	r27
    5388:	b9 f7       	brne	.-18     	; 0x5378 <__fixunssfdi+0x46>
    538a:	0e f4       	brtc	.+2      	; 0x538e <__fixunssfdi+0x5c>
    538c:	c0 d0       	rcall	.+384    	; 0x550e <__fp_negdi>
    538e:	88 94       	clc
    5390:	08 95       	ret
    5392:	88 94       	clc
    5394:	60 e0       	ldi	r22, 0x00	; 0
    5396:	70 e0       	ldi	r23, 0x00	; 0
    5398:	cb 01       	movw	r24, r22
    539a:	08 95       	ret

0000539c <__fixsfsi>:
    539c:	04 d0       	rcall	.+8      	; 0x53a6 <__fixunssfsi>
    539e:	68 94       	set
    53a0:	b1 11       	cpse	r27, r1
    53a2:	07 c1       	rjmp	.+526    	; 0x55b2 <__fp_szero>
    53a4:	08 95       	ret

000053a6 <__fixunssfsi>:
    53a6:	ea d0       	rcall	.+468    	; 0x557c <__fp_splitA>
    53a8:	88 f0       	brcs	.+34     	; 0x53cc <__fixunssfsi+0x26>
    53aa:	9f 57       	subi	r25, 0x7F	; 127
    53ac:	90 f0       	brcs	.+36     	; 0x53d2 <__fixunssfsi+0x2c>
    53ae:	b9 2f       	mov	r27, r25
    53b0:	99 27       	eor	r25, r25
    53b2:	b7 51       	subi	r27, 0x17	; 23
    53b4:	a0 f0       	brcs	.+40     	; 0x53de <__fixunssfsi+0x38>
    53b6:	d1 f0       	breq	.+52     	; 0x53ec <__fixunssfsi+0x46>
    53b8:	66 0f       	add	r22, r22
    53ba:	77 1f       	adc	r23, r23
    53bc:	88 1f       	adc	r24, r24
    53be:	99 1f       	adc	r25, r25
    53c0:	1a f0       	brmi	.+6      	; 0x53c8 <__fixunssfsi+0x22>
    53c2:	ba 95       	dec	r27
    53c4:	c9 f7       	brne	.-14     	; 0x53b8 <__fixunssfsi+0x12>
    53c6:	12 c0       	rjmp	.+36     	; 0x53ec <__fixunssfsi+0x46>
    53c8:	b1 30       	cpi	r27, 0x01	; 1
    53ca:	81 f0       	breq	.+32     	; 0x53ec <__fixunssfsi+0x46>
    53cc:	f1 d0       	rcall	.+482    	; 0x55b0 <__fp_zero>
    53ce:	b1 e0       	ldi	r27, 0x01	; 1
    53d0:	08 95       	ret
    53d2:	ee c0       	rjmp	.+476    	; 0x55b0 <__fp_zero>
    53d4:	67 2f       	mov	r22, r23
    53d6:	78 2f       	mov	r23, r24
    53d8:	88 27       	eor	r24, r24
    53da:	b8 5f       	subi	r27, 0xF8	; 248
    53dc:	39 f0       	breq	.+14     	; 0x53ec <__fixunssfsi+0x46>
    53de:	b9 3f       	cpi	r27, 0xF9	; 249
    53e0:	cc f3       	brlt	.-14     	; 0x53d4 <__fixunssfsi+0x2e>
    53e2:	86 95       	lsr	r24
    53e4:	77 95       	ror	r23
    53e6:	67 95       	ror	r22
    53e8:	b3 95       	inc	r27
    53ea:	d9 f7       	brne	.-10     	; 0x53e2 <__fixunssfsi+0x3c>
    53ec:	3e f4       	brtc	.+14     	; 0x53fc <__fixunssfsi+0x56>
    53ee:	90 95       	com	r25
    53f0:	80 95       	com	r24
    53f2:	70 95       	com	r23
    53f4:	61 95       	neg	r22
    53f6:	7f 4f       	sbci	r23, 0xFF	; 255
    53f8:	8f 4f       	sbci	r24, 0xFF	; 255
    53fa:	9f 4f       	sbci	r25, 0xFF	; 255
    53fc:	08 95       	ret

000053fe <__floatdisf>:
    53fe:	97 fb       	bst	r25, 7
    5400:	0e f4       	brtc	.+2      	; 0x5404 <__floatdisf+0x6>
    5402:	85 d0       	rcall	.+266    	; 0x550e <__fp_negdi>
    5404:	3e c0       	rjmp	.+124    	; 0x5482 <__fp_di2sf>

00005406 <__floatunsisf>:
    5406:	e8 94       	clt
    5408:	09 c0       	rjmp	.+18     	; 0x541c <__floatsisf+0x12>

0000540a <__floatsisf>:
    540a:	97 fb       	bst	r25, 7
    540c:	3e f4       	brtc	.+14     	; 0x541c <__floatsisf+0x12>
    540e:	90 95       	com	r25
    5410:	80 95       	com	r24
    5412:	70 95       	com	r23
    5414:	61 95       	neg	r22
    5416:	7f 4f       	sbci	r23, 0xFF	; 255
    5418:	8f 4f       	sbci	r24, 0xFF	; 255
    541a:	9f 4f       	sbci	r25, 0xFF	; 255
    541c:	99 23       	and	r25, r25
    541e:	a9 f0       	breq	.+42     	; 0x544a <__floatsisf+0x40>
    5420:	f9 2f       	mov	r31, r25
    5422:	96 e9       	ldi	r25, 0x96	; 150
    5424:	bb 27       	eor	r27, r27
    5426:	93 95       	inc	r25
    5428:	f6 95       	lsr	r31
    542a:	87 95       	ror	r24
    542c:	77 95       	ror	r23
    542e:	67 95       	ror	r22
    5430:	b7 95       	ror	r27
    5432:	f1 11       	cpse	r31, r1
    5434:	f8 cf       	rjmp	.-16     	; 0x5426 <__floatsisf+0x1c>
    5436:	fa f4       	brpl	.+62     	; 0x5476 <__floatsisf+0x6c>
    5438:	bb 0f       	add	r27, r27
    543a:	11 f4       	brne	.+4      	; 0x5440 <__floatsisf+0x36>
    543c:	60 ff       	sbrs	r22, 0
    543e:	1b c0       	rjmp	.+54     	; 0x5476 <__floatsisf+0x6c>
    5440:	6f 5f       	subi	r22, 0xFF	; 255
    5442:	7f 4f       	sbci	r23, 0xFF	; 255
    5444:	8f 4f       	sbci	r24, 0xFF	; 255
    5446:	9f 4f       	sbci	r25, 0xFF	; 255
    5448:	16 c0       	rjmp	.+44     	; 0x5476 <__floatsisf+0x6c>
    544a:	88 23       	and	r24, r24
    544c:	11 f0       	breq	.+4      	; 0x5452 <__floatsisf+0x48>
    544e:	96 e9       	ldi	r25, 0x96	; 150
    5450:	11 c0       	rjmp	.+34     	; 0x5474 <__floatsisf+0x6a>
    5452:	77 23       	and	r23, r23
    5454:	21 f0       	breq	.+8      	; 0x545e <__floatsisf+0x54>
    5456:	9e e8       	ldi	r25, 0x8E	; 142
    5458:	87 2f       	mov	r24, r23
    545a:	76 2f       	mov	r23, r22
    545c:	05 c0       	rjmp	.+10     	; 0x5468 <__floatsisf+0x5e>
    545e:	66 23       	and	r22, r22
    5460:	71 f0       	breq	.+28     	; 0x547e <__floatsisf+0x74>
    5462:	96 e8       	ldi	r25, 0x86	; 134
    5464:	86 2f       	mov	r24, r22
    5466:	70 e0       	ldi	r23, 0x00	; 0
    5468:	60 e0       	ldi	r22, 0x00	; 0
    546a:	2a f0       	brmi	.+10     	; 0x5476 <__floatsisf+0x6c>
    546c:	9a 95       	dec	r25
    546e:	66 0f       	add	r22, r22
    5470:	77 1f       	adc	r23, r23
    5472:	88 1f       	adc	r24, r24
    5474:	da f7       	brpl	.-10     	; 0x546c <__floatsisf+0x62>
    5476:	88 0f       	add	r24, r24
    5478:	96 95       	lsr	r25
    547a:	87 95       	ror	r24
    547c:	97 f9       	bld	r25, 7
    547e:	08 95       	ret

00005480 <__floatundisf>:
    5480:	e8 94       	clt

00005482 <__fp_di2sf>:
    5482:	f9 2f       	mov	r31, r25
    5484:	96 eb       	ldi	r25, 0xB6	; 182
    5486:	ff 23       	and	r31, r31
    5488:	81 f0       	breq	.+32     	; 0x54aa <__fp_di2sf+0x28>
    548a:	12 16       	cp	r1, r18
    548c:	13 06       	cpc	r1, r19
    548e:	14 06       	cpc	r1, r20
    5490:	44 0b       	sbc	r20, r20
    5492:	93 95       	inc	r25
    5494:	f6 95       	lsr	r31
    5496:	87 95       	ror	r24
    5498:	77 95       	ror	r23
    549a:	67 95       	ror	r22
    549c:	57 95       	ror	r21
    549e:	40 40       	sbci	r20, 0x00	; 0
    54a0:	ff 23       	and	r31, r31
    54a2:	b9 f7       	brne	.-18     	; 0x5492 <__fp_di2sf+0x10>
    54a4:	1b c0       	rjmp	.+54     	; 0x54dc <__fp_di2sf+0x5a>
    54a6:	99 27       	eor	r25, r25
    54a8:	08 95       	ret
    54aa:	88 23       	and	r24, r24
    54ac:	51 f4       	brne	.+20     	; 0x54c2 <__fp_di2sf+0x40>
    54ae:	98 50       	subi	r25, 0x08	; 8
    54b0:	d2 f7       	brpl	.-12     	; 0x54a6 <__fp_di2sf+0x24>
    54b2:	87 2b       	or	r24, r23
    54b4:	76 2f       	mov	r23, r22
    54b6:	65 2f       	mov	r22, r21
    54b8:	54 2f       	mov	r21, r20
    54ba:	43 2f       	mov	r20, r19
    54bc:	32 2f       	mov	r19, r18
    54be:	20 e0       	ldi	r18, 0x00	; 0
    54c0:	b1 f3       	breq	.-20     	; 0x54ae <__fp_di2sf+0x2c>
    54c2:	12 16       	cp	r1, r18
    54c4:	13 06       	cpc	r1, r19
    54c6:	14 06       	cpc	r1, r20
    54c8:	44 0b       	sbc	r20, r20
    54ca:	88 23       	and	r24, r24
    54cc:	3a f0       	brmi	.+14     	; 0x54dc <__fp_di2sf+0x5a>
    54ce:	9a 95       	dec	r25
    54d0:	44 0f       	add	r20, r20
    54d2:	55 1f       	adc	r21, r21
    54d4:	66 1f       	adc	r22, r22
    54d6:	77 1f       	adc	r23, r23
    54d8:	88 1f       	adc	r24, r24
    54da:	ca f7       	brpl	.-14     	; 0x54ce <__fp_di2sf+0x4c>
    54dc:	55 23       	and	r21, r21
    54de:	4a f4       	brpl	.+18     	; 0x54f2 <__fp_di2sf+0x70>
    54e0:	44 0f       	add	r20, r20
    54e2:	55 1f       	adc	r21, r21
    54e4:	11 f4       	brne	.+4      	; 0x54ea <__fp_di2sf+0x68>
    54e6:	60 ff       	sbrs	r22, 0
    54e8:	04 c0       	rjmp	.+8      	; 0x54f2 <__fp_di2sf+0x70>
    54ea:	6f 5f       	subi	r22, 0xFF	; 255
    54ec:	7f 4f       	sbci	r23, 0xFF	; 255
    54ee:	8f 4f       	sbci	r24, 0xFF	; 255
    54f0:	9f 4f       	sbci	r25, 0xFF	; 255
    54f2:	88 0f       	add	r24, r24
    54f4:	96 95       	lsr	r25
    54f6:	87 95       	ror	r24
    54f8:	97 f9       	bld	r25, 7
    54fa:	08 95       	ret

000054fc <__fp_inf>:
    54fc:	97 f9       	bld	r25, 7
    54fe:	9f 67       	ori	r25, 0x7F	; 127
    5500:	80 e8       	ldi	r24, 0x80	; 128
    5502:	70 e0       	ldi	r23, 0x00	; 0
    5504:	60 e0       	ldi	r22, 0x00	; 0
    5506:	08 95       	ret

00005508 <__fp_nan>:
    5508:	9f ef       	ldi	r25, 0xFF	; 255
    550a:	80 ec       	ldi	r24, 0xC0	; 192
    550c:	08 95       	ret

0000550e <__fp_negdi>:
    550e:	90 95       	com	r25
    5510:	80 95       	com	r24
    5512:	70 95       	com	r23
    5514:	60 95       	com	r22
    5516:	50 95       	com	r21
    5518:	40 95       	com	r20
    551a:	30 95       	com	r19
    551c:	21 95       	neg	r18
    551e:	3f 4f       	sbci	r19, 0xFF	; 255
    5520:	4f 4f       	sbci	r20, 0xFF	; 255
    5522:	5f 4f       	sbci	r21, 0xFF	; 255
    5524:	6f 4f       	sbci	r22, 0xFF	; 255
    5526:	7f 4f       	sbci	r23, 0xFF	; 255
    5528:	8f 4f       	sbci	r24, 0xFF	; 255
    552a:	9f 4f       	sbci	r25, 0xFF	; 255
    552c:	08 95       	ret

0000552e <__fp_pscA>:
    552e:	00 24       	eor	r0, r0
    5530:	0a 94       	dec	r0
    5532:	16 16       	cp	r1, r22
    5534:	17 06       	cpc	r1, r23
    5536:	18 06       	cpc	r1, r24
    5538:	09 06       	cpc	r0, r25
    553a:	08 95       	ret

0000553c <__fp_pscB>:
    553c:	00 24       	eor	r0, r0
    553e:	0a 94       	dec	r0
    5540:	12 16       	cp	r1, r18
    5542:	13 06       	cpc	r1, r19
    5544:	14 06       	cpc	r1, r20
    5546:	05 06       	cpc	r0, r21
    5548:	08 95       	ret

0000554a <__fp_round>:
    554a:	09 2e       	mov	r0, r25
    554c:	03 94       	inc	r0
    554e:	00 0c       	add	r0, r0
    5550:	11 f4       	brne	.+4      	; 0x5556 <__fp_round+0xc>
    5552:	88 23       	and	r24, r24
    5554:	52 f0       	brmi	.+20     	; 0x556a <__fp_round+0x20>
    5556:	bb 0f       	add	r27, r27
    5558:	40 f4       	brcc	.+16     	; 0x556a <__fp_round+0x20>
    555a:	bf 2b       	or	r27, r31
    555c:	11 f4       	brne	.+4      	; 0x5562 <__fp_round+0x18>
    555e:	60 ff       	sbrs	r22, 0
    5560:	04 c0       	rjmp	.+8      	; 0x556a <__fp_round+0x20>
    5562:	6f 5f       	subi	r22, 0xFF	; 255
    5564:	7f 4f       	sbci	r23, 0xFF	; 255
    5566:	8f 4f       	sbci	r24, 0xFF	; 255
    5568:	9f 4f       	sbci	r25, 0xFF	; 255
    556a:	08 95       	ret

0000556c <__fp_split3>:
    556c:	57 fd       	sbrc	r21, 7
    556e:	90 58       	subi	r25, 0x80	; 128
    5570:	44 0f       	add	r20, r20
    5572:	55 1f       	adc	r21, r21
    5574:	59 f0       	breq	.+22     	; 0x558c <__fp_splitA+0x10>
    5576:	5f 3f       	cpi	r21, 0xFF	; 255
    5578:	71 f0       	breq	.+28     	; 0x5596 <__fp_splitA+0x1a>
    557a:	47 95       	ror	r20

0000557c <__fp_splitA>:
    557c:	88 0f       	add	r24, r24
    557e:	97 fb       	bst	r25, 7
    5580:	99 1f       	adc	r25, r25
    5582:	61 f0       	breq	.+24     	; 0x559c <__fp_splitA+0x20>
    5584:	9f 3f       	cpi	r25, 0xFF	; 255
    5586:	79 f0       	breq	.+30     	; 0x55a6 <__fp_splitA+0x2a>
    5588:	87 95       	ror	r24
    558a:	08 95       	ret
    558c:	12 16       	cp	r1, r18
    558e:	13 06       	cpc	r1, r19
    5590:	14 06       	cpc	r1, r20
    5592:	55 1f       	adc	r21, r21
    5594:	f2 cf       	rjmp	.-28     	; 0x557a <__fp_split3+0xe>
    5596:	46 95       	lsr	r20
    5598:	f1 df       	rcall	.-30     	; 0x557c <__fp_splitA>
    559a:	08 c0       	rjmp	.+16     	; 0x55ac <__fp_splitA+0x30>
    559c:	16 16       	cp	r1, r22
    559e:	17 06       	cpc	r1, r23
    55a0:	18 06       	cpc	r1, r24
    55a2:	99 1f       	adc	r25, r25
    55a4:	f1 cf       	rjmp	.-30     	; 0x5588 <__fp_splitA+0xc>
    55a6:	86 95       	lsr	r24
    55a8:	71 05       	cpc	r23, r1
    55aa:	61 05       	cpc	r22, r1
    55ac:	08 94       	sec
    55ae:	08 95       	ret

000055b0 <__fp_zero>:
    55b0:	e8 94       	clt

000055b2 <__fp_szero>:
    55b2:	bb 27       	eor	r27, r27
    55b4:	66 27       	eor	r22, r22
    55b6:	77 27       	eor	r23, r23
    55b8:	cb 01       	movw	r24, r22
    55ba:	97 f9       	bld	r25, 7
    55bc:	08 95       	ret
    55be:	0e f0       	brts	.+2      	; 0x55c2 <__fp_szero+0x10>
    55c0:	23 c1       	rjmp	.+582    	; 0x5808 <__fp_mpack>
    55c2:	a2 cf       	rjmp	.-188    	; 0x5508 <__fp_nan>
    55c4:	68 94       	set
    55c6:	9a cf       	rjmp	.-204    	; 0x54fc <__fp_inf>

000055c8 <log>:
    55c8:	d9 df       	rcall	.-78     	; 0x557c <__fp_splitA>
    55ca:	c8 f3       	brcs	.-14     	; 0x55be <__fp_szero+0xc>
    55cc:	99 23       	and	r25, r25
    55ce:	d1 f3       	breq	.-12     	; 0x55c4 <__fp_szero+0x12>
    55d0:	c6 f3       	brts	.-16     	; 0x55c2 <__fp_szero+0x10>
    55d2:	df 93       	push	r29
    55d4:	cf 93       	push	r28
    55d6:	1f 93       	push	r17
    55d8:	0f 93       	push	r16
    55da:	ff 92       	push	r15
    55dc:	c9 2f       	mov	r28, r25
    55de:	dd 27       	eor	r29, r29
    55e0:	88 23       	and	r24, r24
    55e2:	2a f0       	brmi	.+10     	; 0x55ee <log+0x26>
    55e4:	21 97       	sbiw	r28, 0x01	; 1
    55e6:	66 0f       	add	r22, r22
    55e8:	77 1f       	adc	r23, r23
    55ea:	88 1f       	adc	r24, r24
    55ec:	da f7       	brpl	.-10     	; 0x55e4 <log+0x1c>
    55ee:	20 e0       	ldi	r18, 0x00	; 0
    55f0:	30 e0       	ldi	r19, 0x00	; 0
    55f2:	40 e8       	ldi	r20, 0x80	; 128
    55f4:	5f eb       	ldi	r21, 0xBF	; 191
    55f6:	9f e3       	ldi	r25, 0x3F	; 63
    55f8:	88 39       	cpi	r24, 0x98	; 152
    55fa:	20 f0       	brcs	.+8      	; 0x5604 <log+0x3c>
    55fc:	80 3e       	cpi	r24, 0xE0	; 224
    55fe:	30 f0       	brcs	.+12     	; 0x560c <log+0x44>
    5600:	21 96       	adiw	r28, 0x01	; 1
    5602:	8f 77       	andi	r24, 0x7F	; 127
    5604:	c5 dd       	rcall	.-1142   	; 0x5190 <__addsf3>
    5606:	ec ef       	ldi	r30, 0xFC	; 252
    5608:	f1 e0       	ldi	r31, 0x01	; 1
    560a:	03 c0       	rjmp	.+6      	; 0x5612 <log+0x4a>
    560c:	c1 dd       	rcall	.-1150   	; 0x5190 <__addsf3>
    560e:	e9 e2       	ldi	r30, 0x29	; 41
    5610:	f2 e0       	ldi	r31, 0x02	; 2
    5612:	08 d1       	rcall	.+528    	; 0x5824 <__fp_powser>
    5614:	8b 01       	movw	r16, r22
    5616:	be 01       	movw	r22, r28
    5618:	ec 01       	movw	r28, r24
    561a:	fb 2e       	mov	r15, r27
    561c:	6f 57       	subi	r22, 0x7F	; 127
    561e:	71 09       	sbc	r23, r1
    5620:	75 95       	asr	r23
    5622:	77 1f       	adc	r23, r23
    5624:	88 0b       	sbc	r24, r24
    5626:	99 0b       	sbc	r25, r25
    5628:	f0 de       	rcall	.-544    	; 0x540a <__floatsisf>
    562a:	28 e1       	ldi	r18, 0x18	; 24
    562c:	32 e7       	ldi	r19, 0x72	; 114
    562e:	41 e3       	ldi	r20, 0x31	; 49
    5630:	5f e3       	ldi	r21, 0x3F	; 63
    5632:	16 d0       	rcall	.+44     	; 0x5660 <__mulsf3x>
    5634:	af 2d       	mov	r26, r15
    5636:	98 01       	movw	r18, r16
    5638:	ae 01       	movw	r20, r28
    563a:	ff 90       	pop	r15
    563c:	0f 91       	pop	r16
    563e:	1f 91       	pop	r17
    5640:	cf 91       	pop	r28
    5642:	df 91       	pop	r29
    5644:	b6 dd       	rcall	.-1172   	; 0x51b2 <__addsf3x>
    5646:	81 cf       	rjmp	.-254    	; 0x554a <__fp_round>

00005648 <__mulsf3>:
    5648:	0b d0       	rcall	.+22     	; 0x5660 <__mulsf3x>
    564a:	7f cf       	rjmp	.-258    	; 0x554a <__fp_round>
    564c:	70 df       	rcall	.-288    	; 0x552e <__fp_pscA>
    564e:	28 f0       	brcs	.+10     	; 0x565a <__mulsf3+0x12>
    5650:	75 df       	rcall	.-278    	; 0x553c <__fp_pscB>
    5652:	18 f0       	brcs	.+6      	; 0x565a <__mulsf3+0x12>
    5654:	95 23       	and	r25, r21
    5656:	09 f0       	breq	.+2      	; 0x565a <__mulsf3+0x12>
    5658:	51 cf       	rjmp	.-350    	; 0x54fc <__fp_inf>
    565a:	56 cf       	rjmp	.-340    	; 0x5508 <__fp_nan>
    565c:	11 24       	eor	r1, r1
    565e:	a9 cf       	rjmp	.-174    	; 0x55b2 <__fp_szero>

00005660 <__mulsf3x>:
    5660:	85 df       	rcall	.-246    	; 0x556c <__fp_split3>
    5662:	a0 f3       	brcs	.-24     	; 0x564c <__mulsf3+0x4>

00005664 <__mulsf3_pse>:
    5664:	95 9f       	mul	r25, r21
    5666:	d1 f3       	breq	.-12     	; 0x565c <__mulsf3+0x14>
    5668:	95 0f       	add	r25, r21
    566a:	50 e0       	ldi	r21, 0x00	; 0
    566c:	55 1f       	adc	r21, r21
    566e:	62 9f       	mul	r22, r18
    5670:	f0 01       	movw	r30, r0
    5672:	72 9f       	mul	r23, r18
    5674:	bb 27       	eor	r27, r27
    5676:	f0 0d       	add	r31, r0
    5678:	b1 1d       	adc	r27, r1
    567a:	63 9f       	mul	r22, r19
    567c:	aa 27       	eor	r26, r26
    567e:	f0 0d       	add	r31, r0
    5680:	b1 1d       	adc	r27, r1
    5682:	aa 1f       	adc	r26, r26
    5684:	64 9f       	mul	r22, r20
    5686:	66 27       	eor	r22, r22
    5688:	b0 0d       	add	r27, r0
    568a:	a1 1d       	adc	r26, r1
    568c:	66 1f       	adc	r22, r22
    568e:	82 9f       	mul	r24, r18
    5690:	22 27       	eor	r18, r18
    5692:	b0 0d       	add	r27, r0
    5694:	a1 1d       	adc	r26, r1
    5696:	62 1f       	adc	r22, r18
    5698:	73 9f       	mul	r23, r19
    569a:	b0 0d       	add	r27, r0
    569c:	a1 1d       	adc	r26, r1
    569e:	62 1f       	adc	r22, r18
    56a0:	83 9f       	mul	r24, r19
    56a2:	a0 0d       	add	r26, r0
    56a4:	61 1d       	adc	r22, r1
    56a6:	22 1f       	adc	r18, r18
    56a8:	74 9f       	mul	r23, r20
    56aa:	33 27       	eor	r19, r19
    56ac:	a0 0d       	add	r26, r0
    56ae:	61 1d       	adc	r22, r1
    56b0:	23 1f       	adc	r18, r19
    56b2:	84 9f       	mul	r24, r20
    56b4:	60 0d       	add	r22, r0
    56b6:	21 1d       	adc	r18, r1
    56b8:	82 2f       	mov	r24, r18
    56ba:	76 2f       	mov	r23, r22
    56bc:	6a 2f       	mov	r22, r26
    56be:	11 24       	eor	r1, r1
    56c0:	9f 57       	subi	r25, 0x7F	; 127
    56c2:	50 40       	sbci	r21, 0x00	; 0
    56c4:	8a f0       	brmi	.+34     	; 0x56e8 <__mulsf3_pse+0x84>
    56c6:	e1 f0       	breq	.+56     	; 0x5700 <__mulsf3_pse+0x9c>
    56c8:	88 23       	and	r24, r24
    56ca:	4a f0       	brmi	.+18     	; 0x56de <__mulsf3_pse+0x7a>
    56cc:	ee 0f       	add	r30, r30
    56ce:	ff 1f       	adc	r31, r31
    56d0:	bb 1f       	adc	r27, r27
    56d2:	66 1f       	adc	r22, r22
    56d4:	77 1f       	adc	r23, r23
    56d6:	88 1f       	adc	r24, r24
    56d8:	91 50       	subi	r25, 0x01	; 1
    56da:	50 40       	sbci	r21, 0x00	; 0
    56dc:	a9 f7       	brne	.-22     	; 0x56c8 <__mulsf3_pse+0x64>
    56de:	9e 3f       	cpi	r25, 0xFE	; 254
    56e0:	51 05       	cpc	r21, r1
    56e2:	70 f0       	brcs	.+28     	; 0x5700 <__mulsf3_pse+0x9c>
    56e4:	0b cf       	rjmp	.-490    	; 0x54fc <__fp_inf>
    56e6:	65 cf       	rjmp	.-310    	; 0x55b2 <__fp_szero>
    56e8:	5f 3f       	cpi	r21, 0xFF	; 255
    56ea:	ec f3       	brlt	.-6      	; 0x56e6 <__mulsf3_pse+0x82>
    56ec:	98 3e       	cpi	r25, 0xE8	; 232
    56ee:	dc f3       	brlt	.-10     	; 0x56e6 <__mulsf3_pse+0x82>
    56f0:	86 95       	lsr	r24
    56f2:	77 95       	ror	r23
    56f4:	67 95       	ror	r22
    56f6:	b7 95       	ror	r27
    56f8:	f7 95       	ror	r31
    56fa:	e7 95       	ror	r30
    56fc:	9f 5f       	subi	r25, 0xFF	; 255
    56fe:	c1 f7       	brne	.-16     	; 0x56f0 <__mulsf3_pse+0x8c>
    5700:	fe 2b       	or	r31, r30
    5702:	88 0f       	add	r24, r24
    5704:	91 1d       	adc	r25, r1
    5706:	96 95       	lsr	r25
    5708:	87 95       	ror	r24
    570a:	97 f9       	bld	r25, 7
    570c:	08 95       	ret

0000570e <pow>:
    570e:	fa 01       	movw	r30, r20
    5710:	ee 0f       	add	r30, r30
    5712:	ff 1f       	adc	r31, r31
    5714:	30 96       	adiw	r30, 0x00	; 0
    5716:	21 05       	cpc	r18, r1
    5718:	31 05       	cpc	r19, r1
    571a:	99 f1       	breq	.+102    	; 0x5782 <pow+0x74>
    571c:	61 15       	cp	r22, r1
    571e:	71 05       	cpc	r23, r1
    5720:	61 f4       	brne	.+24     	; 0x573a <pow+0x2c>
    5722:	80 38       	cpi	r24, 0x80	; 128
    5724:	bf e3       	ldi	r27, 0x3F	; 63
    5726:	9b 07       	cpc	r25, r27
    5728:	49 f1       	breq	.+82     	; 0x577c <pow+0x6e>
    572a:	68 94       	set
    572c:	90 38       	cpi	r25, 0x80	; 128
    572e:	81 05       	cpc	r24, r1
    5730:	61 f0       	breq	.+24     	; 0x574a <pow+0x3c>
    5732:	80 38       	cpi	r24, 0x80	; 128
    5734:	bf ef       	ldi	r27, 0xFF	; 255
    5736:	9b 07       	cpc	r25, r27
    5738:	41 f0       	breq	.+16     	; 0x574a <pow+0x3c>
    573a:	99 23       	and	r25, r25
    573c:	42 f5       	brpl	.+80     	; 0x578e <pow+0x80>
    573e:	ff 3f       	cpi	r31, 0xFF	; 255
    5740:	e1 05       	cpc	r30, r1
    5742:	31 05       	cpc	r19, r1
    5744:	21 05       	cpc	r18, r1
    5746:	11 f1       	breq	.+68     	; 0x578c <pow+0x7e>
    5748:	e8 94       	clt
    574a:	08 94       	sec
    574c:	e7 95       	ror	r30
    574e:	d9 01       	movw	r26, r18
    5750:	aa 23       	and	r26, r26
    5752:	29 f4       	brne	.+10     	; 0x575e <pow+0x50>
    5754:	ab 2f       	mov	r26, r27
    5756:	be 2f       	mov	r27, r30
    5758:	f8 5f       	subi	r31, 0xF8	; 248
    575a:	d0 f3       	brcs	.-12     	; 0x5750 <pow+0x42>
    575c:	10 c0       	rjmp	.+32     	; 0x577e <pow+0x70>
    575e:	ff 5f       	subi	r31, 0xFF	; 255
    5760:	70 f4       	brcc	.+28     	; 0x577e <pow+0x70>
    5762:	a6 95       	lsr	r26
    5764:	e0 f7       	brcc	.-8      	; 0x575e <pow+0x50>
    5766:	f7 39       	cpi	r31, 0x97	; 151
    5768:	50 f0       	brcs	.+20     	; 0x577e <pow+0x70>
    576a:	19 f0       	breq	.+6      	; 0x5772 <pow+0x64>
    576c:	ff 3a       	cpi	r31, 0xAF	; 175
    576e:	38 f4       	brcc	.+14     	; 0x577e <pow+0x70>
    5770:	9f 77       	andi	r25, 0x7F	; 127
    5772:	9f 93       	push	r25
    5774:	0c d0       	rcall	.+24     	; 0x578e <pow+0x80>
    5776:	0f 90       	pop	r0
    5778:	07 fc       	sbrc	r0, 7
    577a:	90 58       	subi	r25, 0x80	; 128
    577c:	08 95       	ret
    577e:	3e f0       	brts	.+14     	; 0x578e <pow+0x80>
    5780:	c3 ce       	rjmp	.-634    	; 0x5508 <__fp_nan>
    5782:	60 e0       	ldi	r22, 0x00	; 0
    5784:	70 e0       	ldi	r23, 0x00	; 0
    5786:	80 e8       	ldi	r24, 0x80	; 128
    5788:	9f e3       	ldi	r25, 0x3F	; 63
    578a:	08 95       	ret
    578c:	4f e7       	ldi	r20, 0x7F	; 127
    578e:	9f 77       	andi	r25, 0x7F	; 127
    5790:	5f 93       	push	r21
    5792:	4f 93       	push	r20
    5794:	3f 93       	push	r19
    5796:	2f 93       	push	r18
    5798:	17 df       	rcall	.-466    	; 0x55c8 <log>
    579a:	2f 91       	pop	r18
    579c:	3f 91       	pop	r19
    579e:	4f 91       	pop	r20
    57a0:	5f 91       	pop	r21
    57a2:	52 df       	rcall	.-348    	; 0x5648 <__mulsf3>
    57a4:	05 c0       	rjmp	.+10     	; 0x57b0 <exp>
    57a6:	19 f4       	brne	.+6      	; 0x57ae <pow+0xa0>
    57a8:	0e f0       	brts	.+2      	; 0x57ac <pow+0x9e>
    57aa:	a8 ce       	rjmp	.-688    	; 0x54fc <__fp_inf>
    57ac:	01 cf       	rjmp	.-510    	; 0x55b0 <__fp_zero>
    57ae:	ac ce       	rjmp	.-680    	; 0x5508 <__fp_nan>

000057b0 <exp>:
    57b0:	e5 de       	rcall	.-566    	; 0x557c <__fp_splitA>
    57b2:	c8 f3       	brcs	.-14     	; 0x57a6 <pow+0x98>
    57b4:	96 38       	cpi	r25, 0x86	; 134
    57b6:	c0 f7       	brcc	.-16     	; 0x57a8 <pow+0x9a>
    57b8:	07 f8       	bld	r0, 7
    57ba:	0f 92       	push	r0
    57bc:	e8 94       	clt
    57be:	2b e3       	ldi	r18, 0x3B	; 59
    57c0:	3a ea       	ldi	r19, 0xAA	; 170
    57c2:	48 eb       	ldi	r20, 0xB8	; 184
    57c4:	5f e7       	ldi	r21, 0x7F	; 127
    57c6:	4e df       	rcall	.-356    	; 0x5664 <__mulsf3_pse>
    57c8:	0f 92       	push	r0
    57ca:	0f 92       	push	r0
    57cc:	0f 92       	push	r0
    57ce:	4d b7       	in	r20, 0x3d	; 61
    57d0:	5e b7       	in	r21, 0x3e	; 62
    57d2:	0f 92       	push	r0
    57d4:	89 d0       	rcall	.+274    	; 0x58e8 <modf>
    57d6:	e6 e5       	ldi	r30, 0x56	; 86
    57d8:	f2 e0       	ldi	r31, 0x02	; 2
    57da:	24 d0       	rcall	.+72     	; 0x5824 <__fp_powser>
    57dc:	4f 91       	pop	r20
    57de:	5f 91       	pop	r21
    57e0:	ef 91       	pop	r30
    57e2:	ff 91       	pop	r31
    57e4:	e5 95       	asr	r30
    57e6:	ee 1f       	adc	r30, r30
    57e8:	ff 1f       	adc	r31, r31
    57ea:	49 f0       	breq	.+18     	; 0x57fe <exp+0x4e>
    57ec:	fe 57       	subi	r31, 0x7E	; 126
    57ee:	e0 68       	ori	r30, 0x80	; 128
    57f0:	44 27       	eor	r20, r20
    57f2:	ee 0f       	add	r30, r30
    57f4:	44 1f       	adc	r20, r20
    57f6:	fa 95       	dec	r31
    57f8:	e1 f7       	brne	.-8      	; 0x57f2 <exp+0x42>
    57fa:	41 95       	neg	r20
    57fc:	55 0b       	sbc	r21, r21
    57fe:	40 d0       	rcall	.+128    	; 0x5880 <ldexp>
    5800:	0f 90       	pop	r0
    5802:	07 fe       	sbrs	r0, 7
    5804:	34 c0       	rjmp	.+104    	; 0x586e <inverse>
    5806:	08 95       	ret

00005808 <__fp_mpack>:
    5808:	9f 3f       	cpi	r25, 0xFF	; 255
    580a:	31 f0       	breq	.+12     	; 0x5818 <__fp_mpack_finite+0xc>

0000580c <__fp_mpack_finite>:
    580c:	91 50       	subi	r25, 0x01	; 1
    580e:	20 f4       	brcc	.+8      	; 0x5818 <__fp_mpack_finite+0xc>
    5810:	87 95       	ror	r24
    5812:	77 95       	ror	r23
    5814:	67 95       	ror	r22
    5816:	b7 95       	ror	r27
    5818:	88 0f       	add	r24, r24
    581a:	91 1d       	adc	r25, r1
    581c:	96 95       	lsr	r25
    581e:	87 95       	ror	r24
    5820:	97 f9       	bld	r25, 7
    5822:	08 95       	ret

00005824 <__fp_powser>:
    5824:	df 93       	push	r29
    5826:	cf 93       	push	r28
    5828:	1f 93       	push	r17
    582a:	0f 93       	push	r16
    582c:	ff 92       	push	r15
    582e:	ef 92       	push	r14
    5830:	df 92       	push	r13
    5832:	7b 01       	movw	r14, r22
    5834:	8c 01       	movw	r16, r24
    5836:	68 94       	set
    5838:	05 c0       	rjmp	.+10     	; 0x5844 <__fp_powser+0x20>
    583a:	da 2e       	mov	r13, r26
    583c:	ef 01       	movw	r28, r30
    583e:	10 df       	rcall	.-480    	; 0x5660 <__mulsf3x>
    5840:	fe 01       	movw	r30, r28
    5842:	e8 94       	clt
    5844:	a5 91       	lpm	r26, Z+
    5846:	25 91       	lpm	r18, Z+
    5848:	35 91       	lpm	r19, Z+
    584a:	45 91       	lpm	r20, Z+
    584c:	55 91       	lpm	r21, Z+
    584e:	ae f3       	brts	.-22     	; 0x583a <__fp_powser+0x16>
    5850:	ef 01       	movw	r28, r30
    5852:	af dc       	rcall	.-1698   	; 0x51b2 <__addsf3x>
    5854:	fe 01       	movw	r30, r28
    5856:	97 01       	movw	r18, r14
    5858:	a8 01       	movw	r20, r16
    585a:	da 94       	dec	r13
    585c:	79 f7       	brne	.-34     	; 0x583c <__fp_powser+0x18>
    585e:	df 90       	pop	r13
    5860:	ef 90       	pop	r14
    5862:	ff 90       	pop	r15
    5864:	0f 91       	pop	r16
    5866:	1f 91       	pop	r17
    5868:	cf 91       	pop	r28
    586a:	df 91       	pop	r29
    586c:	08 95       	ret

0000586e <inverse>:
    586e:	9b 01       	movw	r18, r22
    5870:	ac 01       	movw	r20, r24
    5872:	60 e0       	ldi	r22, 0x00	; 0
    5874:	70 e0       	ldi	r23, 0x00	; 0
    5876:	80 e8       	ldi	r24, 0x80	; 128
    5878:	9f e3       	ldi	r25, 0x3F	; 63
    587a:	ee cc       	rjmp	.-1572   	; 0x5258 <__divsf3>
    587c:	3f ce       	rjmp	.-898    	; 0x54fc <__fp_inf>
    587e:	c4 cf       	rjmp	.-120    	; 0x5808 <__fp_mpack>

00005880 <ldexp>:
    5880:	7d de       	rcall	.-774    	; 0x557c <__fp_splitA>
    5882:	e8 f3       	brcs	.-6      	; 0x587e <inverse+0x10>
    5884:	99 23       	and	r25, r25
    5886:	d9 f3       	breq	.-10     	; 0x587e <inverse+0x10>
    5888:	94 0f       	add	r25, r20
    588a:	51 1d       	adc	r21, r1
    588c:	bb f3       	brvs	.-18     	; 0x587c <inverse+0xe>
    588e:	91 50       	subi	r25, 0x01	; 1
    5890:	50 40       	sbci	r21, 0x00	; 0
    5892:	94 f0       	brlt	.+36     	; 0x58b8 <ldexp+0x38>
    5894:	59 f0       	breq	.+22     	; 0x58ac <ldexp+0x2c>
    5896:	88 23       	and	r24, r24
    5898:	32 f0       	brmi	.+12     	; 0x58a6 <ldexp+0x26>
    589a:	66 0f       	add	r22, r22
    589c:	77 1f       	adc	r23, r23
    589e:	88 1f       	adc	r24, r24
    58a0:	91 50       	subi	r25, 0x01	; 1
    58a2:	50 40       	sbci	r21, 0x00	; 0
    58a4:	c1 f7       	brne	.-16     	; 0x5896 <ldexp+0x16>
    58a6:	9e 3f       	cpi	r25, 0xFE	; 254
    58a8:	51 05       	cpc	r21, r1
    58aa:	44 f7       	brge	.-48     	; 0x587c <inverse+0xe>
    58ac:	88 0f       	add	r24, r24
    58ae:	91 1d       	adc	r25, r1
    58b0:	96 95       	lsr	r25
    58b2:	87 95       	ror	r24
    58b4:	97 f9       	bld	r25, 7
    58b6:	08 95       	ret
    58b8:	5f 3f       	cpi	r21, 0xFF	; 255
    58ba:	ac f0       	brlt	.+42     	; 0x58e6 <ldexp+0x66>
    58bc:	98 3e       	cpi	r25, 0xE8	; 232
    58be:	9c f0       	brlt	.+38     	; 0x58e6 <ldexp+0x66>
    58c0:	bb 27       	eor	r27, r27
    58c2:	86 95       	lsr	r24
    58c4:	77 95       	ror	r23
    58c6:	67 95       	ror	r22
    58c8:	b7 95       	ror	r27
    58ca:	08 f4       	brcc	.+2      	; 0x58ce <ldexp+0x4e>
    58cc:	b1 60       	ori	r27, 0x01	; 1
    58ce:	93 95       	inc	r25
    58d0:	c1 f7       	brne	.-16     	; 0x58c2 <ldexp+0x42>
    58d2:	bb 0f       	add	r27, r27
    58d4:	58 f7       	brcc	.-42     	; 0x58ac <ldexp+0x2c>
    58d6:	11 f4       	brne	.+4      	; 0x58dc <ldexp+0x5c>
    58d8:	60 ff       	sbrs	r22, 0
    58da:	e8 cf       	rjmp	.-48     	; 0x58ac <ldexp+0x2c>
    58dc:	6f 5f       	subi	r22, 0xFF	; 255
    58de:	7f 4f       	sbci	r23, 0xFF	; 255
    58e0:	8f 4f       	sbci	r24, 0xFF	; 255
    58e2:	9f 4f       	sbci	r25, 0xFF	; 255
    58e4:	e3 cf       	rjmp	.-58     	; 0x58ac <ldexp+0x2c>
    58e6:	65 ce       	rjmp	.-822    	; 0x55b2 <__fp_szero>

000058e8 <modf>:
    58e8:	fa 01       	movw	r30, r20
    58ea:	dc 01       	movw	r26, r24
    58ec:	aa 0f       	add	r26, r26
    58ee:	bb 1f       	adc	r27, r27
    58f0:	9b 01       	movw	r18, r22
    58f2:	ac 01       	movw	r20, r24
    58f4:	bf 57       	subi	r27, 0x7F	; 127
    58f6:	28 f4       	brcc	.+10     	; 0x5902 <modf+0x1a>
    58f8:	22 27       	eor	r18, r18
    58fa:	33 27       	eor	r19, r19
    58fc:	44 27       	eor	r20, r20
    58fe:	50 78       	andi	r21, 0x80	; 128
    5900:	1f c0       	rjmp	.+62     	; 0x5940 <modf+0x58>
    5902:	b7 51       	subi	r27, 0x17	; 23
    5904:	88 f4       	brcc	.+34     	; 0x5928 <modf+0x40>
    5906:	ab 2f       	mov	r26, r27
    5908:	00 24       	eor	r0, r0
    590a:	46 95       	lsr	r20
    590c:	37 95       	ror	r19
    590e:	27 95       	ror	r18
    5910:	01 1c       	adc	r0, r1
    5912:	a3 95       	inc	r26
    5914:	d2 f3       	brmi	.-12     	; 0x590a <modf+0x22>
    5916:	00 20       	and	r0, r0
    5918:	69 f0       	breq	.+26     	; 0x5934 <modf+0x4c>
    591a:	22 0f       	add	r18, r18
    591c:	33 1f       	adc	r19, r19
    591e:	44 1f       	adc	r20, r20
    5920:	b3 95       	inc	r27
    5922:	da f3       	brmi	.-10     	; 0x591a <modf+0x32>
    5924:	0d d0       	rcall	.+26     	; 0x5940 <modf+0x58>
    5926:	33 cc       	rjmp	.-1946   	; 0x518e <__subsf3>
    5928:	61 30       	cpi	r22, 0x01	; 1
    592a:	71 05       	cpc	r23, r1
    592c:	a0 e8       	ldi	r26, 0x80	; 128
    592e:	8a 07       	cpc	r24, r26
    5930:	b9 46       	sbci	r27, 0x69	; 105
    5932:	30 f4       	brcc	.+12     	; 0x5940 <modf+0x58>
    5934:	9b 01       	movw	r18, r22
    5936:	ac 01       	movw	r20, r24
    5938:	66 27       	eor	r22, r22
    593a:	77 27       	eor	r23, r23
    593c:	88 27       	eor	r24, r24
    593e:	90 78       	andi	r25, 0x80	; 128
    5940:	30 96       	adiw	r30, 0x00	; 0
    5942:	21 f0       	breq	.+8      	; 0x594c <modf+0x64>
    5944:	20 83       	st	Z, r18
    5946:	31 83       	std	Z+1, r19	; 0x01
    5948:	42 83       	std	Z+2, r20	; 0x02
    594a:	53 83       	std	Z+3, r21	; 0x03
    594c:	08 95       	ret

0000594e <__udivmodsi4>:
    594e:	a1 e2       	ldi	r26, 0x21	; 33
    5950:	1a 2e       	mov	r1, r26
    5952:	aa 1b       	sub	r26, r26
    5954:	bb 1b       	sub	r27, r27
    5956:	fd 01       	movw	r30, r26
    5958:	0d c0       	rjmp	.+26     	; 0x5974 <__udivmodsi4_ep>

0000595a <__udivmodsi4_loop>:
    595a:	aa 1f       	adc	r26, r26
    595c:	bb 1f       	adc	r27, r27
    595e:	ee 1f       	adc	r30, r30
    5960:	ff 1f       	adc	r31, r31
    5962:	a2 17       	cp	r26, r18
    5964:	b3 07       	cpc	r27, r19
    5966:	e4 07       	cpc	r30, r20
    5968:	f5 07       	cpc	r31, r21
    596a:	20 f0       	brcs	.+8      	; 0x5974 <__udivmodsi4_ep>
    596c:	a2 1b       	sub	r26, r18
    596e:	b3 0b       	sbc	r27, r19
    5970:	e4 0b       	sbc	r30, r20
    5972:	f5 0b       	sbc	r31, r21

00005974 <__udivmodsi4_ep>:
    5974:	66 1f       	adc	r22, r22
    5976:	77 1f       	adc	r23, r23
    5978:	88 1f       	adc	r24, r24
    597a:	99 1f       	adc	r25, r25
    597c:	1a 94       	dec	r1
    597e:	69 f7       	brne	.-38     	; 0x595a <__udivmodsi4_loop>
    5980:	60 95       	com	r22
    5982:	70 95       	com	r23
    5984:	80 95       	com	r24
    5986:	90 95       	com	r25
    5988:	9b 01       	movw	r18, r22
    598a:	ac 01       	movw	r20, r24
    598c:	bd 01       	movw	r22, r26
    598e:	cf 01       	movw	r24, r30
    5990:	08 95       	ret

00005992 <__muldi3>:
    5992:	df 93       	push	r29
    5994:	cf 93       	push	r28
    5996:	1f 93       	push	r17
    5998:	0f 93       	push	r16
    599a:	9a 9d       	mul	r25, r10
    599c:	f0 2d       	mov	r31, r0
    599e:	21 9f       	mul	r18, r17
    59a0:	f0 0d       	add	r31, r0
    59a2:	8b 9d       	mul	r24, r11
    59a4:	f0 0d       	add	r31, r0
    59a6:	8a 9d       	mul	r24, r10
    59a8:	e0 2d       	mov	r30, r0
    59aa:	f1 0d       	add	r31, r1
    59ac:	03 9f       	mul	r16, r19
    59ae:	f0 0d       	add	r31, r0
    59b0:	02 9f       	mul	r16, r18
    59b2:	e0 0d       	add	r30, r0
    59b4:	f1 1d       	adc	r31, r1
    59b6:	4e 9d       	mul	r20, r14
    59b8:	e0 0d       	add	r30, r0
    59ba:	f1 1d       	adc	r31, r1
    59bc:	5e 9d       	mul	r21, r14
    59be:	f0 0d       	add	r31, r0
    59c0:	4f 9d       	mul	r20, r15
    59c2:	f0 0d       	add	r31, r0
    59c4:	7f 93       	push	r23
    59c6:	6f 93       	push	r22
    59c8:	bf 92       	push	r11
    59ca:	af 92       	push	r10
    59cc:	5f 93       	push	r21
    59ce:	4f 93       	push	r20
    59d0:	d5 01       	movw	r26, r10
    59d2:	85 d0       	rcall	.+266    	; 0x5ade <__umulhisi3>
    59d4:	8b 01       	movw	r16, r22
    59d6:	ac 01       	movw	r20, r24
    59d8:	d7 01       	movw	r26, r14
    59da:	81 d0       	rcall	.+258    	; 0x5ade <__umulhisi3>
    59dc:	eb 01       	movw	r28, r22
    59de:	e8 0f       	add	r30, r24
    59e0:	f9 1f       	adc	r31, r25
    59e2:	d6 01       	movw	r26, r12
    59e4:	1f d0       	rcall	.+62     	; 0x5a24 <__muldi3_6>
    59e6:	2f 91       	pop	r18
    59e8:	3f 91       	pop	r19
    59ea:	d6 01       	movw	r26, r12
    59ec:	78 d0       	rcall	.+240    	; 0x5ade <__umulhisi3>
    59ee:	c6 0f       	add	r28, r22
    59f0:	d7 1f       	adc	r29, r23
    59f2:	e8 1f       	adc	r30, r24
    59f4:	f9 1f       	adc	r31, r25
    59f6:	af 91       	pop	r26
    59f8:	bf 91       	pop	r27
    59fa:	14 d0       	rcall	.+40     	; 0x5a24 <__muldi3_6>
    59fc:	2f 91       	pop	r18
    59fe:	3f 91       	pop	r19
    5a00:	6e d0       	rcall	.+220    	; 0x5ade <__umulhisi3>
    5a02:	c6 0f       	add	r28, r22
    5a04:	d7 1f       	adc	r29, r23
    5a06:	e8 1f       	adc	r30, r24
    5a08:	f9 1f       	adc	r31, r25
    5a0a:	d6 01       	movw	r26, r12
    5a0c:	68 d0       	rcall	.+208    	; 0x5ade <__umulhisi3>
    5a0e:	e6 0f       	add	r30, r22
    5a10:	f7 1f       	adc	r31, r23
    5a12:	98 01       	movw	r18, r16
    5a14:	be 01       	movw	r22, r28
    5a16:	cf 01       	movw	r24, r30
    5a18:	11 24       	eor	r1, r1
    5a1a:	0f 91       	pop	r16
    5a1c:	1f 91       	pop	r17
    5a1e:	cf 91       	pop	r28
    5a20:	df 91       	pop	r29
    5a22:	08 95       	ret

00005a24 <__muldi3_6>:
    5a24:	5c d0       	rcall	.+184    	; 0x5ade <__umulhisi3>
    5a26:	46 0f       	add	r20, r22
    5a28:	57 1f       	adc	r21, r23
    5a2a:	c8 1f       	adc	r28, r24
    5a2c:	d9 1f       	adc	r29, r25
    5a2e:	08 f4       	brcc	.+2      	; 0x5a32 <__muldi3_6+0xe>
    5a30:	31 96       	adiw	r30, 0x01	; 1
    5a32:	08 95       	ret

00005a34 <__ashldi3>:
    5a34:	0f 93       	push	r16
    5a36:	08 30       	cpi	r16, 0x08	; 8
    5a38:	90 f0       	brcs	.+36     	; 0x5a5e <__ashldi3+0x2a>
    5a3a:	98 2f       	mov	r25, r24
    5a3c:	87 2f       	mov	r24, r23
    5a3e:	76 2f       	mov	r23, r22
    5a40:	65 2f       	mov	r22, r21
    5a42:	54 2f       	mov	r21, r20
    5a44:	43 2f       	mov	r20, r19
    5a46:	32 2f       	mov	r19, r18
    5a48:	22 27       	eor	r18, r18
    5a4a:	08 50       	subi	r16, 0x08	; 8
    5a4c:	f4 cf       	rjmp	.-24     	; 0x5a36 <__ashldi3+0x2>
    5a4e:	22 0f       	add	r18, r18
    5a50:	33 1f       	adc	r19, r19
    5a52:	44 1f       	adc	r20, r20
    5a54:	55 1f       	adc	r21, r21
    5a56:	66 1f       	adc	r22, r22
    5a58:	77 1f       	adc	r23, r23
    5a5a:	88 1f       	adc	r24, r24
    5a5c:	99 1f       	adc	r25, r25
    5a5e:	0a 95       	dec	r16
    5a60:	b2 f7       	brpl	.-20     	; 0x5a4e <__ashldi3+0x1a>
    5a62:	0f 91       	pop	r16
    5a64:	08 95       	ret

00005a66 <__ashrdi3>:
    5a66:	97 fb       	bst	r25, 7
    5a68:	10 f8       	bld	r1, 0

00005a6a <__lshrdi3>:
    5a6a:	16 94       	lsr	r1
    5a6c:	00 08       	sbc	r0, r0
    5a6e:	0f 93       	push	r16
    5a70:	08 30       	cpi	r16, 0x08	; 8
    5a72:	98 f0       	brcs	.+38     	; 0x5a9a <__lshrdi3+0x30>
    5a74:	08 50       	subi	r16, 0x08	; 8
    5a76:	23 2f       	mov	r18, r19
    5a78:	34 2f       	mov	r19, r20
    5a7a:	45 2f       	mov	r20, r21
    5a7c:	56 2f       	mov	r21, r22
    5a7e:	67 2f       	mov	r22, r23
    5a80:	78 2f       	mov	r23, r24
    5a82:	89 2f       	mov	r24, r25
    5a84:	90 2d       	mov	r25, r0
    5a86:	f4 cf       	rjmp	.-24     	; 0x5a70 <__lshrdi3+0x6>
    5a88:	05 94       	asr	r0
    5a8a:	97 95       	ror	r25
    5a8c:	87 95       	ror	r24
    5a8e:	77 95       	ror	r23
    5a90:	67 95       	ror	r22
    5a92:	57 95       	ror	r21
    5a94:	47 95       	ror	r20
    5a96:	37 95       	ror	r19
    5a98:	27 95       	ror	r18
    5a9a:	0a 95       	dec	r16
    5a9c:	aa f7       	brpl	.-22     	; 0x5a88 <__lshrdi3+0x1e>
    5a9e:	0f 91       	pop	r16
    5aa0:	08 95       	ret

00005aa2 <__adddi3>:
    5aa2:	2a 0d       	add	r18, r10
    5aa4:	3b 1d       	adc	r19, r11
    5aa6:	4c 1d       	adc	r20, r12
    5aa8:	5d 1d       	adc	r21, r13
    5aaa:	6e 1d       	adc	r22, r14
    5aac:	7f 1d       	adc	r23, r15
    5aae:	80 1f       	adc	r24, r16
    5ab0:	91 1f       	adc	r25, r17
    5ab2:	08 95       	ret

00005ab4 <__subdi3>:
    5ab4:	2a 19       	sub	r18, r10
    5ab6:	3b 09       	sbc	r19, r11
    5ab8:	4c 09       	sbc	r20, r12
    5aba:	5d 09       	sbc	r21, r13
    5abc:	6e 09       	sbc	r22, r14
    5abe:	7f 09       	sbc	r23, r15
    5ac0:	80 0b       	sbc	r24, r16
    5ac2:	91 0b       	sbc	r25, r17
    5ac4:	08 95       	ret

00005ac6 <__cmpdi2_s8>:
    5ac6:	00 24       	eor	r0, r0
    5ac8:	a7 fd       	sbrc	r26, 7
    5aca:	00 94       	com	r0
    5acc:	2a 17       	cp	r18, r26
    5ace:	30 05       	cpc	r19, r0
    5ad0:	40 05       	cpc	r20, r0
    5ad2:	50 05       	cpc	r21, r0
    5ad4:	60 05       	cpc	r22, r0
    5ad6:	70 05       	cpc	r23, r0
    5ad8:	80 05       	cpc	r24, r0
    5ada:	90 05       	cpc	r25, r0
    5adc:	08 95       	ret

00005ade <__umulhisi3>:
    5ade:	a2 9f       	mul	r26, r18
    5ae0:	b0 01       	movw	r22, r0
    5ae2:	b3 9f       	mul	r27, r19
    5ae4:	c0 01       	movw	r24, r0
    5ae6:	a3 9f       	mul	r26, r19
    5ae8:	70 0d       	add	r23, r0
    5aea:	81 1d       	adc	r24, r1
    5aec:	11 24       	eor	r1, r1
    5aee:	91 1d       	adc	r25, r1
    5af0:	b2 9f       	mul	r27, r18
    5af2:	70 0d       	add	r23, r0
    5af4:	81 1d       	adc	r24, r1
    5af6:	11 24       	eor	r1, r1
    5af8:	91 1d       	adc	r25, r1
    5afa:	08 95       	ret

00005afc <malloc>:
    5afc:	cf 93       	push	r28
    5afe:	df 93       	push	r29
    5b00:	82 30       	cpi	r24, 0x02	; 2
    5b02:	91 05       	cpc	r25, r1
    5b04:	10 f4       	brcc	.+4      	; 0x5b0a <malloc+0xe>
    5b06:	82 e0       	ldi	r24, 0x02	; 2
    5b08:	90 e0       	ldi	r25, 0x00	; 0
    5b0a:	e0 91 82 28 	lds	r30, 0x2882
    5b0e:	f0 91 83 28 	lds	r31, 0x2883
    5b12:	20 e0       	ldi	r18, 0x00	; 0
    5b14:	30 e0       	ldi	r19, 0x00	; 0
    5b16:	c0 e0       	ldi	r28, 0x00	; 0
    5b18:	d0 e0       	ldi	r29, 0x00	; 0
    5b1a:	30 97       	sbiw	r30, 0x00	; 0
    5b1c:	11 f1       	breq	.+68     	; 0x5b62 <malloc+0x66>
    5b1e:	40 81       	ld	r20, Z
    5b20:	51 81       	ldd	r21, Z+1	; 0x01
    5b22:	48 17       	cp	r20, r24
    5b24:	59 07       	cpc	r21, r25
    5b26:	c0 f0       	brcs	.+48     	; 0x5b58 <malloc+0x5c>
    5b28:	48 17       	cp	r20, r24
    5b2a:	59 07       	cpc	r21, r25
    5b2c:	61 f4       	brne	.+24     	; 0x5b46 <malloc+0x4a>
    5b2e:	82 81       	ldd	r24, Z+2	; 0x02
    5b30:	93 81       	ldd	r25, Z+3	; 0x03
    5b32:	20 97       	sbiw	r28, 0x00	; 0
    5b34:	19 f0       	breq	.+6      	; 0x5b3c <malloc+0x40>
    5b36:	8a 83       	std	Y+2, r24	; 0x02
    5b38:	9b 83       	std	Y+3, r25	; 0x03
    5b3a:	2b c0       	rjmp	.+86     	; 0x5b92 <malloc+0x96>
    5b3c:	80 93 82 28 	sts	0x2882, r24
    5b40:	90 93 83 28 	sts	0x2883, r25
    5b44:	26 c0       	rjmp	.+76     	; 0x5b92 <malloc+0x96>
    5b46:	21 15       	cp	r18, r1
    5b48:	31 05       	cpc	r19, r1
    5b4a:	19 f0       	breq	.+6      	; 0x5b52 <malloc+0x56>
    5b4c:	42 17       	cp	r20, r18
    5b4e:	53 07       	cpc	r21, r19
    5b50:	18 f4       	brcc	.+6      	; 0x5b58 <malloc+0x5c>
    5b52:	9a 01       	movw	r18, r20
    5b54:	be 01       	movw	r22, r28
    5b56:	df 01       	movw	r26, r30
    5b58:	ef 01       	movw	r28, r30
    5b5a:	02 80       	ldd	r0, Z+2	; 0x02
    5b5c:	f3 81       	ldd	r31, Z+3	; 0x03
    5b5e:	e0 2d       	mov	r30, r0
    5b60:	dc cf       	rjmp	.-72     	; 0x5b1a <malloc+0x1e>
    5b62:	21 15       	cp	r18, r1
    5b64:	31 05       	cpc	r19, r1
    5b66:	09 f1       	breq	.+66     	; 0x5baa <malloc+0xae>
    5b68:	28 1b       	sub	r18, r24
    5b6a:	39 0b       	sbc	r19, r25
    5b6c:	24 30       	cpi	r18, 0x04	; 4
    5b6e:	31 05       	cpc	r19, r1
    5b70:	90 f4       	brcc	.+36     	; 0x5b96 <malloc+0x9a>
    5b72:	12 96       	adiw	r26, 0x02	; 2
    5b74:	8d 91       	ld	r24, X+
    5b76:	9c 91       	ld	r25, X
    5b78:	13 97       	sbiw	r26, 0x03	; 3
    5b7a:	61 15       	cp	r22, r1
    5b7c:	71 05       	cpc	r23, r1
    5b7e:	21 f0       	breq	.+8      	; 0x5b88 <malloc+0x8c>
    5b80:	fb 01       	movw	r30, r22
    5b82:	82 83       	std	Z+2, r24	; 0x02
    5b84:	93 83       	std	Z+3, r25	; 0x03
    5b86:	04 c0       	rjmp	.+8      	; 0x5b90 <malloc+0x94>
    5b88:	80 93 82 28 	sts	0x2882, r24
    5b8c:	90 93 83 28 	sts	0x2883, r25
    5b90:	fd 01       	movw	r30, r26
    5b92:	32 96       	adiw	r30, 0x02	; 2
    5b94:	44 c0       	rjmp	.+136    	; 0x5c1e <malloc+0x122>
    5b96:	fd 01       	movw	r30, r26
    5b98:	e2 0f       	add	r30, r18
    5b9a:	f3 1f       	adc	r31, r19
    5b9c:	81 93       	st	Z+, r24
    5b9e:	91 93       	st	Z+, r25
    5ba0:	22 50       	subi	r18, 0x02	; 2
    5ba2:	31 09       	sbc	r19, r1
    5ba4:	2d 93       	st	X+, r18
    5ba6:	3c 93       	st	X, r19
    5ba8:	3a c0       	rjmp	.+116    	; 0x5c1e <malloc+0x122>
    5baa:	20 91 80 28 	lds	r18, 0x2880
    5bae:	30 91 81 28 	lds	r19, 0x2881
    5bb2:	23 2b       	or	r18, r19
    5bb4:	41 f4       	brne	.+16     	; 0x5bc6 <malloc+0xca>
    5bb6:	20 91 02 20 	lds	r18, 0x2002
    5bba:	30 91 03 20 	lds	r19, 0x2003
    5bbe:	20 93 80 28 	sts	0x2880, r18
    5bc2:	30 93 81 28 	sts	0x2881, r19
    5bc6:	20 91 00 20 	lds	r18, 0x2000
    5bca:	30 91 01 20 	lds	r19, 0x2001
    5bce:	21 15       	cp	r18, r1
    5bd0:	31 05       	cpc	r19, r1
    5bd2:	41 f4       	brne	.+16     	; 0x5be4 <malloc+0xe8>
    5bd4:	2d b7       	in	r18, 0x3d	; 61
    5bd6:	3e b7       	in	r19, 0x3e	; 62
    5bd8:	40 91 04 20 	lds	r20, 0x2004
    5bdc:	50 91 05 20 	lds	r21, 0x2005
    5be0:	24 1b       	sub	r18, r20
    5be2:	35 0b       	sbc	r19, r21
    5be4:	e0 91 80 28 	lds	r30, 0x2880
    5be8:	f0 91 81 28 	lds	r31, 0x2881
    5bec:	e2 17       	cp	r30, r18
    5bee:	f3 07       	cpc	r31, r19
    5bf0:	a0 f4       	brcc	.+40     	; 0x5c1a <malloc+0x11e>
    5bf2:	2e 1b       	sub	r18, r30
    5bf4:	3f 0b       	sbc	r19, r31
    5bf6:	28 17       	cp	r18, r24
    5bf8:	39 07       	cpc	r19, r25
    5bfa:	78 f0       	brcs	.+30     	; 0x5c1a <malloc+0x11e>
    5bfc:	ac 01       	movw	r20, r24
    5bfe:	4e 5f       	subi	r20, 0xFE	; 254
    5c00:	5f 4f       	sbci	r21, 0xFF	; 255
    5c02:	24 17       	cp	r18, r20
    5c04:	35 07       	cpc	r19, r21
    5c06:	48 f0       	brcs	.+18     	; 0x5c1a <malloc+0x11e>
    5c08:	4e 0f       	add	r20, r30
    5c0a:	5f 1f       	adc	r21, r31
    5c0c:	40 93 80 28 	sts	0x2880, r20
    5c10:	50 93 81 28 	sts	0x2881, r21
    5c14:	81 93       	st	Z+, r24
    5c16:	91 93       	st	Z+, r25
    5c18:	02 c0       	rjmp	.+4      	; 0x5c1e <malloc+0x122>
    5c1a:	e0 e0       	ldi	r30, 0x00	; 0
    5c1c:	f0 e0       	ldi	r31, 0x00	; 0
    5c1e:	cf 01       	movw	r24, r30
    5c20:	df 91       	pop	r29
    5c22:	cf 91       	pop	r28
    5c24:	08 95       	ret

00005c26 <free>:
    5c26:	0f 93       	push	r16
    5c28:	1f 93       	push	r17
    5c2a:	cf 93       	push	r28
    5c2c:	df 93       	push	r29
    5c2e:	00 97       	sbiw	r24, 0x00	; 0
    5c30:	09 f4       	brne	.+2      	; 0x5c34 <free+0xe>
    5c32:	8c c0       	rjmp	.+280    	; 0x5d4c <free+0x126>
    5c34:	fc 01       	movw	r30, r24
    5c36:	32 97       	sbiw	r30, 0x02	; 2
    5c38:	12 82       	std	Z+2, r1	; 0x02
    5c3a:	13 82       	std	Z+3, r1	; 0x03
    5c3c:	00 91 82 28 	lds	r16, 0x2882
    5c40:	10 91 83 28 	lds	r17, 0x2883
    5c44:	01 15       	cp	r16, r1
    5c46:	11 05       	cpc	r17, r1
    5c48:	81 f4       	brne	.+32     	; 0x5c6a <free+0x44>
    5c4a:	20 81       	ld	r18, Z
    5c4c:	31 81       	ldd	r19, Z+1	; 0x01
    5c4e:	82 0f       	add	r24, r18
    5c50:	93 1f       	adc	r25, r19
    5c52:	20 91 80 28 	lds	r18, 0x2880
    5c56:	30 91 81 28 	lds	r19, 0x2881
    5c5a:	28 17       	cp	r18, r24
    5c5c:	39 07       	cpc	r19, r25
    5c5e:	79 f5       	brne	.+94     	; 0x5cbe <free+0x98>
    5c60:	e0 93 80 28 	sts	0x2880, r30
    5c64:	f0 93 81 28 	sts	0x2881, r31
    5c68:	71 c0       	rjmp	.+226    	; 0x5d4c <free+0x126>
    5c6a:	d8 01       	movw	r26, r16
    5c6c:	40 e0       	ldi	r20, 0x00	; 0
    5c6e:	50 e0       	ldi	r21, 0x00	; 0
    5c70:	ae 17       	cp	r26, r30
    5c72:	bf 07       	cpc	r27, r31
    5c74:	50 f4       	brcc	.+20     	; 0x5c8a <free+0x64>
    5c76:	12 96       	adiw	r26, 0x02	; 2
    5c78:	2d 91       	ld	r18, X+
    5c7a:	3c 91       	ld	r19, X
    5c7c:	13 97       	sbiw	r26, 0x03	; 3
    5c7e:	ad 01       	movw	r20, r26
    5c80:	21 15       	cp	r18, r1
    5c82:	31 05       	cpc	r19, r1
    5c84:	09 f1       	breq	.+66     	; 0x5cc8 <free+0xa2>
    5c86:	d9 01       	movw	r26, r18
    5c88:	f3 cf       	rjmp	.-26     	; 0x5c70 <free+0x4a>
    5c8a:	9d 01       	movw	r18, r26
    5c8c:	da 01       	movw	r26, r20
    5c8e:	22 83       	std	Z+2, r18	; 0x02
    5c90:	33 83       	std	Z+3, r19	; 0x03
    5c92:	60 81       	ld	r22, Z
    5c94:	71 81       	ldd	r23, Z+1	; 0x01
    5c96:	86 0f       	add	r24, r22
    5c98:	97 1f       	adc	r25, r23
    5c9a:	82 17       	cp	r24, r18
    5c9c:	93 07       	cpc	r25, r19
    5c9e:	69 f4       	brne	.+26     	; 0x5cba <free+0x94>
    5ca0:	ec 01       	movw	r28, r24
    5ca2:	28 81       	ld	r18, Y
    5ca4:	39 81       	ldd	r19, Y+1	; 0x01
    5ca6:	26 0f       	add	r18, r22
    5ca8:	37 1f       	adc	r19, r23
    5caa:	2e 5f       	subi	r18, 0xFE	; 254
    5cac:	3f 4f       	sbci	r19, 0xFF	; 255
    5cae:	20 83       	st	Z, r18
    5cb0:	31 83       	std	Z+1, r19	; 0x01
    5cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    5cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    5cb6:	82 83       	std	Z+2, r24	; 0x02
    5cb8:	93 83       	std	Z+3, r25	; 0x03
    5cba:	45 2b       	or	r20, r21
    5cbc:	29 f4       	brne	.+10     	; 0x5cc8 <free+0xa2>
    5cbe:	e0 93 82 28 	sts	0x2882, r30
    5cc2:	f0 93 83 28 	sts	0x2883, r31
    5cc6:	42 c0       	rjmp	.+132    	; 0x5d4c <free+0x126>
    5cc8:	12 96       	adiw	r26, 0x02	; 2
    5cca:	ed 93       	st	X+, r30
    5ccc:	fc 93       	st	X, r31
    5cce:	13 97       	sbiw	r26, 0x03	; 3
    5cd0:	ed 01       	movw	r28, r26
    5cd2:	49 91       	ld	r20, Y+
    5cd4:	59 91       	ld	r21, Y+
    5cd6:	9e 01       	movw	r18, r28
    5cd8:	24 0f       	add	r18, r20
    5cda:	35 1f       	adc	r19, r21
    5cdc:	e2 17       	cp	r30, r18
    5cde:	f3 07       	cpc	r31, r19
    5ce0:	71 f4       	brne	.+28     	; 0x5cfe <free+0xd8>
    5ce2:	80 81       	ld	r24, Z
    5ce4:	91 81       	ldd	r25, Z+1	; 0x01
    5ce6:	84 0f       	add	r24, r20
    5ce8:	95 1f       	adc	r25, r21
    5cea:	02 96       	adiw	r24, 0x02	; 2
    5cec:	8d 93       	st	X+, r24
    5cee:	9c 93       	st	X, r25
    5cf0:	11 97       	sbiw	r26, 0x01	; 1
    5cf2:	82 81       	ldd	r24, Z+2	; 0x02
    5cf4:	93 81       	ldd	r25, Z+3	; 0x03
    5cf6:	12 96       	adiw	r26, 0x02	; 2
    5cf8:	8d 93       	st	X+, r24
    5cfa:	9c 93       	st	X, r25
    5cfc:	13 97       	sbiw	r26, 0x03	; 3
    5cfe:	e0 e0       	ldi	r30, 0x00	; 0
    5d00:	f0 e0       	ldi	r31, 0x00	; 0
    5d02:	d8 01       	movw	r26, r16
    5d04:	12 96       	adiw	r26, 0x02	; 2
    5d06:	8d 91       	ld	r24, X+
    5d08:	9c 91       	ld	r25, X
    5d0a:	13 97       	sbiw	r26, 0x03	; 3
    5d0c:	00 97       	sbiw	r24, 0x00	; 0
    5d0e:	19 f0       	breq	.+6      	; 0x5d16 <free+0xf0>
    5d10:	f8 01       	movw	r30, r16
    5d12:	8c 01       	movw	r16, r24
    5d14:	f6 cf       	rjmp	.-20     	; 0x5d02 <free+0xdc>
    5d16:	8d 91       	ld	r24, X+
    5d18:	9c 91       	ld	r25, X
    5d1a:	98 01       	movw	r18, r16
    5d1c:	2e 5f       	subi	r18, 0xFE	; 254
    5d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d20:	82 0f       	add	r24, r18
    5d22:	93 1f       	adc	r25, r19
    5d24:	20 91 80 28 	lds	r18, 0x2880
    5d28:	30 91 81 28 	lds	r19, 0x2881
    5d2c:	28 17       	cp	r18, r24
    5d2e:	39 07       	cpc	r19, r25
    5d30:	69 f4       	brne	.+26     	; 0x5d4c <free+0x126>
    5d32:	30 97       	sbiw	r30, 0x00	; 0
    5d34:	29 f4       	brne	.+10     	; 0x5d40 <free+0x11a>
    5d36:	10 92 82 28 	sts	0x2882, r1
    5d3a:	10 92 83 28 	sts	0x2883, r1
    5d3e:	02 c0       	rjmp	.+4      	; 0x5d44 <free+0x11e>
    5d40:	12 82       	std	Z+2, r1	; 0x02
    5d42:	13 82       	std	Z+3, r1	; 0x03
    5d44:	00 93 80 28 	sts	0x2880, r16
    5d48:	10 93 81 28 	sts	0x2881, r17
    5d4c:	df 91       	pop	r29
    5d4e:	cf 91       	pop	r28
    5d50:	1f 91       	pop	r17
    5d52:	0f 91       	pop	r16
    5d54:	08 95       	ret

00005d56 <fdevopen>:
    5d56:	0f 93       	push	r16
    5d58:	1f 93       	push	r17
    5d5a:	cf 93       	push	r28
    5d5c:	df 93       	push	r29
    5d5e:	00 97       	sbiw	r24, 0x00	; 0
    5d60:	31 f4       	brne	.+12     	; 0x5d6e <fdevopen+0x18>
    5d62:	61 15       	cp	r22, r1
    5d64:	71 05       	cpc	r23, r1
    5d66:	19 f4       	brne	.+6      	; 0x5d6e <fdevopen+0x18>
    5d68:	80 e0       	ldi	r24, 0x00	; 0
    5d6a:	90 e0       	ldi	r25, 0x00	; 0
    5d6c:	39 c0       	rjmp	.+114    	; 0x5de0 <fdevopen+0x8a>
    5d6e:	8b 01       	movw	r16, r22
    5d70:	ec 01       	movw	r28, r24
    5d72:	6e e0       	ldi	r22, 0x0E	; 14
    5d74:	70 e0       	ldi	r23, 0x00	; 0
    5d76:	81 e0       	ldi	r24, 0x01	; 1
    5d78:	90 e0       	ldi	r25, 0x00	; 0
    5d7a:	3d d2       	rcall	.+1146   	; 0x61f6 <calloc>
    5d7c:	fc 01       	movw	r30, r24
    5d7e:	89 2b       	or	r24, r25
    5d80:	99 f3       	breq	.-26     	; 0x5d68 <fdevopen+0x12>
    5d82:	80 e8       	ldi	r24, 0x80	; 128
    5d84:	83 83       	std	Z+3, r24	; 0x03
    5d86:	01 15       	cp	r16, r1
    5d88:	11 05       	cpc	r17, r1
    5d8a:	71 f0       	breq	.+28     	; 0x5da8 <fdevopen+0x52>
    5d8c:	02 87       	std	Z+10, r16	; 0x0a
    5d8e:	13 87       	std	Z+11, r17	; 0x0b
    5d90:	81 e8       	ldi	r24, 0x81	; 129
    5d92:	83 83       	std	Z+3, r24	; 0x03
    5d94:	80 91 84 28 	lds	r24, 0x2884
    5d98:	90 91 85 28 	lds	r25, 0x2885
    5d9c:	89 2b       	or	r24, r25
    5d9e:	21 f4       	brne	.+8      	; 0x5da8 <fdevopen+0x52>
    5da0:	e0 93 84 28 	sts	0x2884, r30
    5da4:	f0 93 85 28 	sts	0x2885, r31
    5da8:	20 97       	sbiw	r28, 0x00	; 0
    5daa:	c9 f0       	breq	.+50     	; 0x5dde <fdevopen+0x88>
    5dac:	c0 87       	std	Z+8, r28	; 0x08
    5dae:	d1 87       	std	Z+9, r29	; 0x09
    5db0:	83 81       	ldd	r24, Z+3	; 0x03
    5db2:	82 60       	ori	r24, 0x02	; 2
    5db4:	83 83       	std	Z+3, r24	; 0x03
    5db6:	80 91 86 28 	lds	r24, 0x2886
    5dba:	90 91 87 28 	lds	r25, 0x2887
    5dbe:	89 2b       	or	r24, r25
    5dc0:	71 f4       	brne	.+28     	; 0x5dde <fdevopen+0x88>
    5dc2:	e0 93 86 28 	sts	0x2886, r30
    5dc6:	f0 93 87 28 	sts	0x2887, r31
    5dca:	80 91 88 28 	lds	r24, 0x2888
    5dce:	90 91 89 28 	lds	r25, 0x2889
    5dd2:	89 2b       	or	r24, r25
    5dd4:	21 f4       	brne	.+8      	; 0x5dde <fdevopen+0x88>
    5dd6:	e0 93 88 28 	sts	0x2888, r30
    5dda:	f0 93 89 28 	sts	0x2889, r31
    5dde:	cf 01       	movw	r24, r30
    5de0:	df 91       	pop	r29
    5de2:	cf 91       	pop	r28
    5de4:	1f 91       	pop	r17
    5de6:	0f 91       	pop	r16
    5de8:	08 95       	ret

00005dea <printf>:
    5dea:	a0 e0       	ldi	r26, 0x00	; 0
    5dec:	b0 e0       	ldi	r27, 0x00	; 0
    5dee:	ea ef       	ldi	r30, 0xFA	; 250
    5df0:	fe e2       	ldi	r31, 0x2E	; 46
    5df2:	de c2       	rjmp	.+1468   	; 0x63b0 <__prologue_saves__+0x20>
    5df4:	ae 01       	movw	r20, r28
    5df6:	4b 5f       	subi	r20, 0xFB	; 251
    5df8:	5f 4f       	sbci	r21, 0xFF	; 255
    5dfa:	fa 01       	movw	r30, r20
    5dfc:	61 91       	ld	r22, Z+
    5dfe:	71 91       	ld	r23, Z+
    5e00:	af 01       	movw	r20, r30
    5e02:	80 91 86 28 	lds	r24, 0x2886
    5e06:	90 91 87 28 	lds	r25, 0x2887
    5e0a:	32 d0       	rcall	.+100    	; 0x5e70 <vfprintf>
    5e0c:	e2 e0       	ldi	r30, 0x02	; 2
    5e0e:	e9 c2       	rjmp	.+1490   	; 0x63e2 <__epilogue_restores__+0x20>

00005e10 <puts>:
    5e10:	0f 93       	push	r16
    5e12:	1f 93       	push	r17
    5e14:	cf 93       	push	r28
    5e16:	df 93       	push	r29
    5e18:	e0 91 86 28 	lds	r30, 0x2886
    5e1c:	f0 91 87 28 	lds	r31, 0x2887
    5e20:	23 81       	ldd	r18, Z+3	; 0x03
    5e22:	21 ff       	sbrs	r18, 1
    5e24:	1b c0       	rjmp	.+54     	; 0x5e5c <puts+0x4c>
    5e26:	8c 01       	movw	r16, r24
    5e28:	d0 e0       	ldi	r29, 0x00	; 0
    5e2a:	c0 e0       	ldi	r28, 0x00	; 0
    5e2c:	f8 01       	movw	r30, r16
    5e2e:	81 91       	ld	r24, Z+
    5e30:	8f 01       	movw	r16, r30
    5e32:	60 91 86 28 	lds	r22, 0x2886
    5e36:	70 91 87 28 	lds	r23, 0x2887
    5e3a:	db 01       	movw	r26, r22
    5e3c:	18 96       	adiw	r26, 0x08	; 8
    5e3e:	ed 91       	ld	r30, X+
    5e40:	fc 91       	ld	r31, X
    5e42:	19 97       	sbiw	r26, 0x09	; 9
    5e44:	88 23       	and	r24, r24
    5e46:	31 f0       	breq	.+12     	; 0x5e54 <puts+0x44>
    5e48:	09 95       	icall
    5e4a:	89 2b       	or	r24, r25
    5e4c:	79 f3       	breq	.-34     	; 0x5e2c <puts+0x1c>
    5e4e:	df ef       	ldi	r29, 0xFF	; 255
    5e50:	cf ef       	ldi	r28, 0xFF	; 255
    5e52:	ec cf       	rjmp	.-40     	; 0x5e2c <puts+0x1c>
    5e54:	8a e0       	ldi	r24, 0x0A	; 10
    5e56:	09 95       	icall
    5e58:	89 2b       	or	r24, r25
    5e5a:	19 f0       	breq	.+6      	; 0x5e62 <puts+0x52>
    5e5c:	8f ef       	ldi	r24, 0xFF	; 255
    5e5e:	9f ef       	ldi	r25, 0xFF	; 255
    5e60:	02 c0       	rjmp	.+4      	; 0x5e66 <puts+0x56>
    5e62:	8d 2f       	mov	r24, r29
    5e64:	9c 2f       	mov	r25, r28
    5e66:	df 91       	pop	r29
    5e68:	cf 91       	pop	r28
    5e6a:	1f 91       	pop	r17
    5e6c:	0f 91       	pop	r16
    5e6e:	08 95       	ret

00005e70 <vfprintf>:
    5e70:	ac e0       	ldi	r26, 0x0C	; 12
    5e72:	b0 e0       	ldi	r27, 0x00	; 0
    5e74:	ed e3       	ldi	r30, 0x3D	; 61
    5e76:	ff e2       	ldi	r31, 0x2F	; 47
    5e78:	8b c2       	rjmp	.+1302   	; 0x6390 <__prologue_saves__>
    5e7a:	7c 01       	movw	r14, r24
    5e7c:	6b 01       	movw	r12, r22
    5e7e:	8a 01       	movw	r16, r20
    5e80:	fc 01       	movw	r30, r24
    5e82:	16 82       	std	Z+6, r1	; 0x06
    5e84:	17 82       	std	Z+7, r1	; 0x07
    5e86:	83 81       	ldd	r24, Z+3	; 0x03
    5e88:	81 ff       	sbrs	r24, 1
    5e8a:	b0 c1       	rjmp	.+864    	; 0x61ec <vfprintf+0x37c>
    5e8c:	ce 01       	movw	r24, r28
    5e8e:	01 96       	adiw	r24, 0x01	; 1
    5e90:	4c 01       	movw	r8, r24
    5e92:	f7 01       	movw	r30, r14
    5e94:	93 81       	ldd	r25, Z+3	; 0x03
    5e96:	f6 01       	movw	r30, r12
    5e98:	93 fd       	sbrc	r25, 3
    5e9a:	85 91       	lpm	r24, Z+
    5e9c:	93 ff       	sbrs	r25, 3
    5e9e:	81 91       	ld	r24, Z+
    5ea0:	6f 01       	movw	r12, r30
    5ea2:	88 23       	and	r24, r24
    5ea4:	09 f4       	brne	.+2      	; 0x5ea8 <vfprintf+0x38>
    5ea6:	9e c1       	rjmp	.+828    	; 0x61e4 <vfprintf+0x374>
    5ea8:	85 32       	cpi	r24, 0x25	; 37
    5eaa:	39 f4       	brne	.+14     	; 0x5eba <vfprintf+0x4a>
    5eac:	93 fd       	sbrc	r25, 3
    5eae:	85 91       	lpm	r24, Z+
    5eb0:	93 ff       	sbrs	r25, 3
    5eb2:	81 91       	ld	r24, Z+
    5eb4:	6f 01       	movw	r12, r30
    5eb6:	85 32       	cpi	r24, 0x25	; 37
    5eb8:	21 f4       	brne	.+8      	; 0x5ec2 <vfprintf+0x52>
    5eba:	b7 01       	movw	r22, r14
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	d2 d1       	rcall	.+932    	; 0x6264 <fputc>
    5ec0:	e8 cf       	rjmp	.-48     	; 0x5e92 <vfprintf+0x22>
    5ec2:	51 2c       	mov	r5, r1
    5ec4:	31 2c       	mov	r3, r1
    5ec6:	20 e0       	ldi	r18, 0x00	; 0
    5ec8:	20 32       	cpi	r18, 0x20	; 32
    5eca:	a0 f4       	brcc	.+40     	; 0x5ef4 <vfprintf+0x84>
    5ecc:	8b 32       	cpi	r24, 0x2B	; 43
    5ece:	69 f0       	breq	.+26     	; 0x5eea <vfprintf+0x7a>
    5ed0:	30 f4       	brcc	.+12     	; 0x5ede <vfprintf+0x6e>
    5ed2:	80 32       	cpi	r24, 0x20	; 32
    5ed4:	59 f0       	breq	.+22     	; 0x5eec <vfprintf+0x7c>
    5ed6:	83 32       	cpi	r24, 0x23	; 35
    5ed8:	69 f4       	brne	.+26     	; 0x5ef4 <vfprintf+0x84>
    5eda:	20 61       	ori	r18, 0x10	; 16
    5edc:	2c c0       	rjmp	.+88     	; 0x5f36 <vfprintf+0xc6>
    5ede:	8d 32       	cpi	r24, 0x2D	; 45
    5ee0:	39 f0       	breq	.+14     	; 0x5ef0 <vfprintf+0x80>
    5ee2:	80 33       	cpi	r24, 0x30	; 48
    5ee4:	39 f4       	brne	.+14     	; 0x5ef4 <vfprintf+0x84>
    5ee6:	21 60       	ori	r18, 0x01	; 1
    5ee8:	26 c0       	rjmp	.+76     	; 0x5f36 <vfprintf+0xc6>
    5eea:	22 60       	ori	r18, 0x02	; 2
    5eec:	24 60       	ori	r18, 0x04	; 4
    5eee:	23 c0       	rjmp	.+70     	; 0x5f36 <vfprintf+0xc6>
    5ef0:	28 60       	ori	r18, 0x08	; 8
    5ef2:	21 c0       	rjmp	.+66     	; 0x5f36 <vfprintf+0xc6>
    5ef4:	27 fd       	sbrc	r18, 7
    5ef6:	27 c0       	rjmp	.+78     	; 0x5f46 <vfprintf+0xd6>
    5ef8:	30 ed       	ldi	r19, 0xD0	; 208
    5efa:	38 0f       	add	r19, r24
    5efc:	3a 30       	cpi	r19, 0x0A	; 10
    5efe:	78 f4       	brcc	.+30     	; 0x5f1e <vfprintf+0xae>
    5f00:	26 ff       	sbrs	r18, 6
    5f02:	06 c0       	rjmp	.+12     	; 0x5f10 <vfprintf+0xa0>
    5f04:	fa e0       	ldi	r31, 0x0A	; 10
    5f06:	5f 9e       	mul	r5, r31
    5f08:	30 0d       	add	r19, r0
    5f0a:	11 24       	eor	r1, r1
    5f0c:	53 2e       	mov	r5, r19
    5f0e:	13 c0       	rjmp	.+38     	; 0x5f36 <vfprintf+0xc6>
    5f10:	8a e0       	ldi	r24, 0x0A	; 10
    5f12:	38 9e       	mul	r3, r24
    5f14:	30 0d       	add	r19, r0
    5f16:	11 24       	eor	r1, r1
    5f18:	33 2e       	mov	r3, r19
    5f1a:	20 62       	ori	r18, 0x20	; 32
    5f1c:	0c c0       	rjmp	.+24     	; 0x5f36 <vfprintf+0xc6>
    5f1e:	8e 32       	cpi	r24, 0x2E	; 46
    5f20:	21 f4       	brne	.+8      	; 0x5f2a <vfprintf+0xba>
    5f22:	26 fd       	sbrc	r18, 6
    5f24:	5f c1       	rjmp	.+702    	; 0x61e4 <vfprintf+0x374>
    5f26:	20 64       	ori	r18, 0x40	; 64
    5f28:	06 c0       	rjmp	.+12     	; 0x5f36 <vfprintf+0xc6>
    5f2a:	8c 36       	cpi	r24, 0x6C	; 108
    5f2c:	11 f4       	brne	.+4      	; 0x5f32 <vfprintf+0xc2>
    5f2e:	20 68       	ori	r18, 0x80	; 128
    5f30:	02 c0       	rjmp	.+4      	; 0x5f36 <vfprintf+0xc6>
    5f32:	88 36       	cpi	r24, 0x68	; 104
    5f34:	41 f4       	brne	.+16     	; 0x5f46 <vfprintf+0xd6>
    5f36:	f6 01       	movw	r30, r12
    5f38:	93 fd       	sbrc	r25, 3
    5f3a:	85 91       	lpm	r24, Z+
    5f3c:	93 ff       	sbrs	r25, 3
    5f3e:	81 91       	ld	r24, Z+
    5f40:	6f 01       	movw	r12, r30
    5f42:	81 11       	cpse	r24, r1
    5f44:	c1 cf       	rjmp	.-126    	; 0x5ec8 <vfprintf+0x58>
    5f46:	98 2f       	mov	r25, r24
    5f48:	9f 7d       	andi	r25, 0xDF	; 223
    5f4a:	95 54       	subi	r25, 0x45	; 69
    5f4c:	93 30       	cpi	r25, 0x03	; 3
    5f4e:	28 f4       	brcc	.+10     	; 0x5f5a <vfprintf+0xea>
    5f50:	0c 5f       	subi	r16, 0xFC	; 252
    5f52:	1f 4f       	sbci	r17, 0xFF	; 255
    5f54:	ff e3       	ldi	r31, 0x3F	; 63
    5f56:	f9 83       	std	Y+1, r31	; 0x01
    5f58:	0d c0       	rjmp	.+26     	; 0x5f74 <vfprintf+0x104>
    5f5a:	83 36       	cpi	r24, 0x63	; 99
    5f5c:	31 f0       	breq	.+12     	; 0x5f6a <vfprintf+0xfa>
    5f5e:	83 37       	cpi	r24, 0x73	; 115
    5f60:	71 f0       	breq	.+28     	; 0x5f7e <vfprintf+0x10e>
    5f62:	83 35       	cpi	r24, 0x53	; 83
    5f64:	09 f0       	breq	.+2      	; 0x5f68 <vfprintf+0xf8>
    5f66:	57 c0       	rjmp	.+174    	; 0x6016 <vfprintf+0x1a6>
    5f68:	21 c0       	rjmp	.+66     	; 0x5fac <vfprintf+0x13c>
    5f6a:	f8 01       	movw	r30, r16
    5f6c:	80 81       	ld	r24, Z
    5f6e:	89 83       	std	Y+1, r24	; 0x01
    5f70:	0e 5f       	subi	r16, 0xFE	; 254
    5f72:	1f 4f       	sbci	r17, 0xFF	; 255
    5f74:	44 24       	eor	r4, r4
    5f76:	43 94       	inc	r4
    5f78:	51 2c       	mov	r5, r1
    5f7a:	54 01       	movw	r10, r8
    5f7c:	14 c0       	rjmp	.+40     	; 0x5fa6 <vfprintf+0x136>
    5f7e:	38 01       	movw	r6, r16
    5f80:	f2 e0       	ldi	r31, 0x02	; 2
    5f82:	6f 0e       	add	r6, r31
    5f84:	71 1c       	adc	r7, r1
    5f86:	f8 01       	movw	r30, r16
    5f88:	a0 80       	ld	r10, Z
    5f8a:	b1 80       	ldd	r11, Z+1	; 0x01
    5f8c:	26 ff       	sbrs	r18, 6
    5f8e:	03 c0       	rjmp	.+6      	; 0x5f96 <vfprintf+0x126>
    5f90:	65 2d       	mov	r22, r5
    5f92:	70 e0       	ldi	r23, 0x00	; 0
    5f94:	02 c0       	rjmp	.+4      	; 0x5f9a <vfprintf+0x12a>
    5f96:	6f ef       	ldi	r22, 0xFF	; 255
    5f98:	7f ef       	ldi	r23, 0xFF	; 255
    5f9a:	c5 01       	movw	r24, r10
    5f9c:	2c 87       	std	Y+12, r18	; 0x0c
    5f9e:	57 d1       	rcall	.+686    	; 0x624e <strnlen>
    5fa0:	2c 01       	movw	r4, r24
    5fa2:	83 01       	movw	r16, r6
    5fa4:	2c 85       	ldd	r18, Y+12	; 0x0c
    5fa6:	2f 77       	andi	r18, 0x7F	; 127
    5fa8:	22 2e       	mov	r2, r18
    5faa:	16 c0       	rjmp	.+44     	; 0x5fd8 <vfprintf+0x168>
    5fac:	38 01       	movw	r6, r16
    5fae:	f2 e0       	ldi	r31, 0x02	; 2
    5fb0:	6f 0e       	add	r6, r31
    5fb2:	71 1c       	adc	r7, r1
    5fb4:	f8 01       	movw	r30, r16
    5fb6:	a0 80       	ld	r10, Z
    5fb8:	b1 80       	ldd	r11, Z+1	; 0x01
    5fba:	26 ff       	sbrs	r18, 6
    5fbc:	03 c0       	rjmp	.+6      	; 0x5fc4 <vfprintf+0x154>
    5fbe:	65 2d       	mov	r22, r5
    5fc0:	70 e0       	ldi	r23, 0x00	; 0
    5fc2:	02 c0       	rjmp	.+4      	; 0x5fc8 <vfprintf+0x158>
    5fc4:	6f ef       	ldi	r22, 0xFF	; 255
    5fc6:	7f ef       	ldi	r23, 0xFF	; 255
    5fc8:	c5 01       	movw	r24, r10
    5fca:	2c 87       	std	Y+12, r18	; 0x0c
    5fcc:	2e d1       	rcall	.+604    	; 0x622a <strnlen_P>
    5fce:	2c 01       	movw	r4, r24
    5fd0:	2c 85       	ldd	r18, Y+12	; 0x0c
    5fd2:	20 68       	ori	r18, 0x80	; 128
    5fd4:	22 2e       	mov	r2, r18
    5fd6:	83 01       	movw	r16, r6
    5fd8:	23 fc       	sbrc	r2, 3
    5fda:	19 c0       	rjmp	.+50     	; 0x600e <vfprintf+0x19e>
    5fdc:	83 2d       	mov	r24, r3
    5fde:	90 e0       	ldi	r25, 0x00	; 0
    5fe0:	48 16       	cp	r4, r24
    5fe2:	59 06       	cpc	r5, r25
    5fe4:	a0 f4       	brcc	.+40     	; 0x600e <vfprintf+0x19e>
    5fe6:	b7 01       	movw	r22, r14
    5fe8:	80 e2       	ldi	r24, 0x20	; 32
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	3b d1       	rcall	.+630    	; 0x6264 <fputc>
    5fee:	3a 94       	dec	r3
    5ff0:	f5 cf       	rjmp	.-22     	; 0x5fdc <vfprintf+0x16c>
    5ff2:	f5 01       	movw	r30, r10
    5ff4:	27 fc       	sbrc	r2, 7
    5ff6:	85 91       	lpm	r24, Z+
    5ff8:	27 fe       	sbrs	r2, 7
    5ffa:	81 91       	ld	r24, Z+
    5ffc:	5f 01       	movw	r10, r30
    5ffe:	b7 01       	movw	r22, r14
    6000:	90 e0       	ldi	r25, 0x00	; 0
    6002:	30 d1       	rcall	.+608    	; 0x6264 <fputc>
    6004:	31 10       	cpse	r3, r1
    6006:	3a 94       	dec	r3
    6008:	f1 e0       	ldi	r31, 0x01	; 1
    600a:	4f 1a       	sub	r4, r31
    600c:	51 08       	sbc	r5, r1
    600e:	41 14       	cp	r4, r1
    6010:	51 04       	cpc	r5, r1
    6012:	79 f7       	brne	.-34     	; 0x5ff2 <vfprintf+0x182>
    6014:	de c0       	rjmp	.+444    	; 0x61d2 <vfprintf+0x362>
    6016:	84 36       	cpi	r24, 0x64	; 100
    6018:	11 f0       	breq	.+4      	; 0x601e <vfprintf+0x1ae>
    601a:	89 36       	cpi	r24, 0x69	; 105
    601c:	31 f5       	brne	.+76     	; 0x606a <vfprintf+0x1fa>
    601e:	f8 01       	movw	r30, r16
    6020:	27 ff       	sbrs	r18, 7
    6022:	07 c0       	rjmp	.+14     	; 0x6032 <vfprintf+0x1c2>
    6024:	60 81       	ld	r22, Z
    6026:	71 81       	ldd	r23, Z+1	; 0x01
    6028:	82 81       	ldd	r24, Z+2	; 0x02
    602a:	93 81       	ldd	r25, Z+3	; 0x03
    602c:	0c 5f       	subi	r16, 0xFC	; 252
    602e:	1f 4f       	sbci	r17, 0xFF	; 255
    6030:	08 c0       	rjmp	.+16     	; 0x6042 <vfprintf+0x1d2>
    6032:	60 81       	ld	r22, Z
    6034:	71 81       	ldd	r23, Z+1	; 0x01
    6036:	07 2e       	mov	r0, r23
    6038:	00 0c       	add	r0, r0
    603a:	88 0b       	sbc	r24, r24
    603c:	99 0b       	sbc	r25, r25
    603e:	0e 5f       	subi	r16, 0xFE	; 254
    6040:	1f 4f       	sbci	r17, 0xFF	; 255
    6042:	2f 76       	andi	r18, 0x6F	; 111
    6044:	72 2e       	mov	r7, r18
    6046:	97 ff       	sbrs	r25, 7
    6048:	09 c0       	rjmp	.+18     	; 0x605c <vfprintf+0x1ec>
    604a:	90 95       	com	r25
    604c:	80 95       	com	r24
    604e:	70 95       	com	r23
    6050:	61 95       	neg	r22
    6052:	7f 4f       	sbci	r23, 0xFF	; 255
    6054:	8f 4f       	sbci	r24, 0xFF	; 255
    6056:	9f 4f       	sbci	r25, 0xFF	; 255
    6058:	20 68       	ori	r18, 0x80	; 128
    605a:	72 2e       	mov	r7, r18
    605c:	2a e0       	ldi	r18, 0x0A	; 10
    605e:	30 e0       	ldi	r19, 0x00	; 0
    6060:	a4 01       	movw	r20, r8
    6062:	38 d1       	rcall	.+624    	; 0x62d4 <__ultoa_invert>
    6064:	a8 2e       	mov	r10, r24
    6066:	a8 18       	sub	r10, r8
    6068:	43 c0       	rjmp	.+134    	; 0x60f0 <vfprintf+0x280>
    606a:	85 37       	cpi	r24, 0x75	; 117
    606c:	29 f4       	brne	.+10     	; 0x6078 <vfprintf+0x208>
    606e:	2f 7e       	andi	r18, 0xEF	; 239
    6070:	b2 2e       	mov	r11, r18
    6072:	2a e0       	ldi	r18, 0x0A	; 10
    6074:	30 e0       	ldi	r19, 0x00	; 0
    6076:	25 c0       	rjmp	.+74     	; 0x60c2 <vfprintf+0x252>
    6078:	f2 2f       	mov	r31, r18
    607a:	f9 7f       	andi	r31, 0xF9	; 249
    607c:	bf 2e       	mov	r11, r31
    607e:	8f 36       	cpi	r24, 0x6F	; 111
    6080:	c1 f0       	breq	.+48     	; 0x60b2 <vfprintf+0x242>
    6082:	18 f4       	brcc	.+6      	; 0x608a <vfprintf+0x21a>
    6084:	88 35       	cpi	r24, 0x58	; 88
    6086:	79 f0       	breq	.+30     	; 0x60a6 <vfprintf+0x236>
    6088:	ad c0       	rjmp	.+346    	; 0x61e4 <vfprintf+0x374>
    608a:	80 37       	cpi	r24, 0x70	; 112
    608c:	19 f0       	breq	.+6      	; 0x6094 <vfprintf+0x224>
    608e:	88 37       	cpi	r24, 0x78	; 120
    6090:	21 f0       	breq	.+8      	; 0x609a <vfprintf+0x22a>
    6092:	a8 c0       	rjmp	.+336    	; 0x61e4 <vfprintf+0x374>
    6094:	2f 2f       	mov	r18, r31
    6096:	20 61       	ori	r18, 0x10	; 16
    6098:	b2 2e       	mov	r11, r18
    609a:	b4 fe       	sbrs	r11, 4
    609c:	0d c0       	rjmp	.+26     	; 0x60b8 <vfprintf+0x248>
    609e:	8b 2d       	mov	r24, r11
    60a0:	84 60       	ori	r24, 0x04	; 4
    60a2:	b8 2e       	mov	r11, r24
    60a4:	09 c0       	rjmp	.+18     	; 0x60b8 <vfprintf+0x248>
    60a6:	24 ff       	sbrs	r18, 4
    60a8:	0a c0       	rjmp	.+20     	; 0x60be <vfprintf+0x24e>
    60aa:	9f 2f       	mov	r25, r31
    60ac:	96 60       	ori	r25, 0x06	; 6
    60ae:	b9 2e       	mov	r11, r25
    60b0:	06 c0       	rjmp	.+12     	; 0x60be <vfprintf+0x24e>
    60b2:	28 e0       	ldi	r18, 0x08	; 8
    60b4:	30 e0       	ldi	r19, 0x00	; 0
    60b6:	05 c0       	rjmp	.+10     	; 0x60c2 <vfprintf+0x252>
    60b8:	20 e1       	ldi	r18, 0x10	; 16
    60ba:	30 e0       	ldi	r19, 0x00	; 0
    60bc:	02 c0       	rjmp	.+4      	; 0x60c2 <vfprintf+0x252>
    60be:	20 e1       	ldi	r18, 0x10	; 16
    60c0:	32 e0       	ldi	r19, 0x02	; 2
    60c2:	f8 01       	movw	r30, r16
    60c4:	b7 fe       	sbrs	r11, 7
    60c6:	07 c0       	rjmp	.+14     	; 0x60d6 <vfprintf+0x266>
    60c8:	60 81       	ld	r22, Z
    60ca:	71 81       	ldd	r23, Z+1	; 0x01
    60cc:	82 81       	ldd	r24, Z+2	; 0x02
    60ce:	93 81       	ldd	r25, Z+3	; 0x03
    60d0:	0c 5f       	subi	r16, 0xFC	; 252
    60d2:	1f 4f       	sbci	r17, 0xFF	; 255
    60d4:	06 c0       	rjmp	.+12     	; 0x60e2 <vfprintf+0x272>
    60d6:	60 81       	ld	r22, Z
    60d8:	71 81       	ldd	r23, Z+1	; 0x01
    60da:	80 e0       	ldi	r24, 0x00	; 0
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	0e 5f       	subi	r16, 0xFE	; 254
    60e0:	1f 4f       	sbci	r17, 0xFF	; 255
    60e2:	a4 01       	movw	r20, r8
    60e4:	f7 d0       	rcall	.+494    	; 0x62d4 <__ultoa_invert>
    60e6:	a8 2e       	mov	r10, r24
    60e8:	a8 18       	sub	r10, r8
    60ea:	fb 2d       	mov	r31, r11
    60ec:	ff 77       	andi	r31, 0x7F	; 127
    60ee:	7f 2e       	mov	r7, r31
    60f0:	76 fe       	sbrs	r7, 6
    60f2:	0b c0       	rjmp	.+22     	; 0x610a <vfprintf+0x29a>
    60f4:	37 2d       	mov	r19, r7
    60f6:	3e 7f       	andi	r19, 0xFE	; 254
    60f8:	a5 14       	cp	r10, r5
    60fa:	50 f4       	brcc	.+20     	; 0x6110 <vfprintf+0x2a0>
    60fc:	74 fe       	sbrs	r7, 4
    60fe:	0a c0       	rjmp	.+20     	; 0x6114 <vfprintf+0x2a4>
    6100:	72 fc       	sbrc	r7, 2
    6102:	08 c0       	rjmp	.+16     	; 0x6114 <vfprintf+0x2a4>
    6104:	37 2d       	mov	r19, r7
    6106:	3e 7e       	andi	r19, 0xEE	; 238
    6108:	05 c0       	rjmp	.+10     	; 0x6114 <vfprintf+0x2a4>
    610a:	ba 2c       	mov	r11, r10
    610c:	37 2d       	mov	r19, r7
    610e:	03 c0       	rjmp	.+6      	; 0x6116 <vfprintf+0x2a6>
    6110:	ba 2c       	mov	r11, r10
    6112:	01 c0       	rjmp	.+2      	; 0x6116 <vfprintf+0x2a6>
    6114:	b5 2c       	mov	r11, r5
    6116:	34 ff       	sbrs	r19, 4
    6118:	0d c0       	rjmp	.+26     	; 0x6134 <vfprintf+0x2c4>
    611a:	fe 01       	movw	r30, r28
    611c:	ea 0d       	add	r30, r10
    611e:	f1 1d       	adc	r31, r1
    6120:	80 81       	ld	r24, Z
    6122:	80 33       	cpi	r24, 0x30	; 48
    6124:	11 f4       	brne	.+4      	; 0x612a <vfprintf+0x2ba>
    6126:	39 7e       	andi	r19, 0xE9	; 233
    6128:	09 c0       	rjmp	.+18     	; 0x613c <vfprintf+0x2cc>
    612a:	32 ff       	sbrs	r19, 2
    612c:	06 c0       	rjmp	.+12     	; 0x613a <vfprintf+0x2ca>
    612e:	b3 94       	inc	r11
    6130:	b3 94       	inc	r11
    6132:	04 c0       	rjmp	.+8      	; 0x613c <vfprintf+0x2cc>
    6134:	83 2f       	mov	r24, r19
    6136:	86 78       	andi	r24, 0x86	; 134
    6138:	09 f0       	breq	.+2      	; 0x613c <vfprintf+0x2cc>
    613a:	b3 94       	inc	r11
    613c:	33 fd       	sbrc	r19, 3
    613e:	12 c0       	rjmp	.+36     	; 0x6164 <vfprintf+0x2f4>
    6140:	30 ff       	sbrs	r19, 0
    6142:	06 c0       	rjmp	.+12     	; 0x6150 <vfprintf+0x2e0>
    6144:	5a 2c       	mov	r5, r10
    6146:	b3 14       	cp	r11, r3
    6148:	18 f4       	brcc	.+6      	; 0x6150 <vfprintf+0x2e0>
    614a:	53 0c       	add	r5, r3
    614c:	5b 18       	sub	r5, r11
    614e:	b3 2c       	mov	r11, r3
    6150:	b3 14       	cp	r11, r3
    6152:	60 f4       	brcc	.+24     	; 0x616c <vfprintf+0x2fc>
    6154:	b7 01       	movw	r22, r14
    6156:	80 e2       	ldi	r24, 0x20	; 32
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	3c 87       	std	Y+12, r19	; 0x0c
    615c:	83 d0       	rcall	.+262    	; 0x6264 <fputc>
    615e:	b3 94       	inc	r11
    6160:	3c 85       	ldd	r19, Y+12	; 0x0c
    6162:	f6 cf       	rjmp	.-20     	; 0x6150 <vfprintf+0x2e0>
    6164:	b3 14       	cp	r11, r3
    6166:	10 f4       	brcc	.+4      	; 0x616c <vfprintf+0x2fc>
    6168:	3b 18       	sub	r3, r11
    616a:	01 c0       	rjmp	.+2      	; 0x616e <vfprintf+0x2fe>
    616c:	31 2c       	mov	r3, r1
    616e:	34 ff       	sbrs	r19, 4
    6170:	11 c0       	rjmp	.+34     	; 0x6194 <vfprintf+0x324>
    6172:	b7 01       	movw	r22, r14
    6174:	80 e3       	ldi	r24, 0x30	; 48
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	3c 87       	std	Y+12, r19	; 0x0c
    617a:	74 d0       	rcall	.+232    	; 0x6264 <fputc>
    617c:	3c 85       	ldd	r19, Y+12	; 0x0c
    617e:	32 ff       	sbrs	r19, 2
    6180:	16 c0       	rjmp	.+44     	; 0x61ae <vfprintf+0x33e>
    6182:	31 fd       	sbrc	r19, 1
    6184:	03 c0       	rjmp	.+6      	; 0x618c <vfprintf+0x31c>
    6186:	88 e7       	ldi	r24, 0x78	; 120
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	02 c0       	rjmp	.+4      	; 0x6190 <vfprintf+0x320>
    618c:	88 e5       	ldi	r24, 0x58	; 88
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	b7 01       	movw	r22, r14
    6192:	0c c0       	rjmp	.+24     	; 0x61ac <vfprintf+0x33c>
    6194:	83 2f       	mov	r24, r19
    6196:	86 78       	andi	r24, 0x86	; 134
    6198:	51 f0       	breq	.+20     	; 0x61ae <vfprintf+0x33e>
    619a:	31 ff       	sbrs	r19, 1
    619c:	02 c0       	rjmp	.+4      	; 0x61a2 <vfprintf+0x332>
    619e:	8b e2       	ldi	r24, 0x2B	; 43
    61a0:	01 c0       	rjmp	.+2      	; 0x61a4 <vfprintf+0x334>
    61a2:	80 e2       	ldi	r24, 0x20	; 32
    61a4:	37 fd       	sbrc	r19, 7
    61a6:	8d e2       	ldi	r24, 0x2D	; 45
    61a8:	b7 01       	movw	r22, r14
    61aa:	90 e0       	ldi	r25, 0x00	; 0
    61ac:	5b d0       	rcall	.+182    	; 0x6264 <fputc>
    61ae:	a5 14       	cp	r10, r5
    61b0:	30 f4       	brcc	.+12     	; 0x61be <vfprintf+0x34e>
    61b2:	b7 01       	movw	r22, r14
    61b4:	80 e3       	ldi	r24, 0x30	; 48
    61b6:	90 e0       	ldi	r25, 0x00	; 0
    61b8:	55 d0       	rcall	.+170    	; 0x6264 <fputc>
    61ba:	5a 94       	dec	r5
    61bc:	f8 cf       	rjmp	.-16     	; 0x61ae <vfprintf+0x33e>
    61be:	aa 94       	dec	r10
    61c0:	f4 01       	movw	r30, r8
    61c2:	ea 0d       	add	r30, r10
    61c4:	f1 1d       	adc	r31, r1
    61c6:	80 81       	ld	r24, Z
    61c8:	b7 01       	movw	r22, r14
    61ca:	90 e0       	ldi	r25, 0x00	; 0
    61cc:	4b d0       	rcall	.+150    	; 0x6264 <fputc>
    61ce:	a1 10       	cpse	r10, r1
    61d0:	f6 cf       	rjmp	.-20     	; 0x61be <vfprintf+0x34e>
    61d2:	33 20       	and	r3, r3
    61d4:	09 f4       	brne	.+2      	; 0x61d8 <vfprintf+0x368>
    61d6:	5d ce       	rjmp	.-838    	; 0x5e92 <vfprintf+0x22>
    61d8:	b7 01       	movw	r22, r14
    61da:	80 e2       	ldi	r24, 0x20	; 32
    61dc:	90 e0       	ldi	r25, 0x00	; 0
    61de:	42 d0       	rcall	.+132    	; 0x6264 <fputc>
    61e0:	3a 94       	dec	r3
    61e2:	f7 cf       	rjmp	.-18     	; 0x61d2 <vfprintf+0x362>
    61e4:	f7 01       	movw	r30, r14
    61e6:	86 81       	ldd	r24, Z+6	; 0x06
    61e8:	97 81       	ldd	r25, Z+7	; 0x07
    61ea:	02 c0       	rjmp	.+4      	; 0x61f0 <vfprintf+0x380>
    61ec:	8f ef       	ldi	r24, 0xFF	; 255
    61ee:	9f ef       	ldi	r25, 0xFF	; 255
    61f0:	2c 96       	adiw	r28, 0x0c	; 12
    61f2:	e2 e1       	ldi	r30, 0x12	; 18
    61f4:	e6 c0       	rjmp	.+460    	; 0x63c2 <__epilogue_restores__>

000061f6 <calloc>:
    61f6:	0f 93       	push	r16
    61f8:	1f 93       	push	r17
    61fa:	cf 93       	push	r28
    61fc:	df 93       	push	r29
    61fe:	86 9f       	mul	r24, r22
    6200:	80 01       	movw	r16, r0
    6202:	87 9f       	mul	r24, r23
    6204:	10 0d       	add	r17, r0
    6206:	96 9f       	mul	r25, r22
    6208:	10 0d       	add	r17, r0
    620a:	11 24       	eor	r1, r1
    620c:	c8 01       	movw	r24, r16
    620e:	76 dc       	rcall	.-1812   	; 0x5afc <malloc>
    6210:	ec 01       	movw	r28, r24
    6212:	00 97       	sbiw	r24, 0x00	; 0
    6214:	21 f0       	breq	.+8      	; 0x621e <calloc+0x28>
    6216:	a8 01       	movw	r20, r16
    6218:	60 e0       	ldi	r22, 0x00	; 0
    621a:	70 e0       	ldi	r23, 0x00	; 0
    621c:	11 d0       	rcall	.+34     	; 0x6240 <memset>
    621e:	ce 01       	movw	r24, r28
    6220:	df 91       	pop	r29
    6222:	cf 91       	pop	r28
    6224:	1f 91       	pop	r17
    6226:	0f 91       	pop	r16
    6228:	08 95       	ret

0000622a <strnlen_P>:
    622a:	fc 01       	movw	r30, r24
    622c:	05 90       	lpm	r0, Z+
    622e:	61 50       	subi	r22, 0x01	; 1
    6230:	70 40       	sbci	r23, 0x00	; 0
    6232:	01 10       	cpse	r0, r1
    6234:	d8 f7       	brcc	.-10     	; 0x622c <strnlen_P+0x2>
    6236:	80 95       	com	r24
    6238:	90 95       	com	r25
    623a:	8e 0f       	add	r24, r30
    623c:	9f 1f       	adc	r25, r31
    623e:	08 95       	ret

00006240 <memset>:
    6240:	dc 01       	movw	r26, r24
    6242:	01 c0       	rjmp	.+2      	; 0x6246 <memset+0x6>
    6244:	6d 93       	st	X+, r22
    6246:	41 50       	subi	r20, 0x01	; 1
    6248:	50 40       	sbci	r21, 0x00	; 0
    624a:	e0 f7       	brcc	.-8      	; 0x6244 <memset+0x4>
    624c:	08 95       	ret

0000624e <strnlen>:
    624e:	fc 01       	movw	r30, r24
    6250:	61 50       	subi	r22, 0x01	; 1
    6252:	70 40       	sbci	r23, 0x00	; 0
    6254:	01 90       	ld	r0, Z+
    6256:	01 10       	cpse	r0, r1
    6258:	d8 f7       	brcc	.-10     	; 0x6250 <strnlen+0x2>
    625a:	80 95       	com	r24
    625c:	90 95       	com	r25
    625e:	8e 0f       	add	r24, r30
    6260:	9f 1f       	adc	r25, r31
    6262:	08 95       	ret

00006264 <fputc>:
    6264:	0f 93       	push	r16
    6266:	1f 93       	push	r17
    6268:	cf 93       	push	r28
    626a:	df 93       	push	r29
    626c:	fb 01       	movw	r30, r22
    626e:	23 81       	ldd	r18, Z+3	; 0x03
    6270:	21 fd       	sbrc	r18, 1
    6272:	03 c0       	rjmp	.+6      	; 0x627a <fputc+0x16>
    6274:	8f ef       	ldi	r24, 0xFF	; 255
    6276:	9f ef       	ldi	r25, 0xFF	; 255
    6278:	28 c0       	rjmp	.+80     	; 0x62ca <fputc+0x66>
    627a:	22 ff       	sbrs	r18, 2
    627c:	16 c0       	rjmp	.+44     	; 0x62aa <fputc+0x46>
    627e:	46 81       	ldd	r20, Z+6	; 0x06
    6280:	57 81       	ldd	r21, Z+7	; 0x07
    6282:	24 81       	ldd	r18, Z+4	; 0x04
    6284:	35 81       	ldd	r19, Z+5	; 0x05
    6286:	42 17       	cp	r20, r18
    6288:	53 07       	cpc	r21, r19
    628a:	44 f4       	brge	.+16     	; 0x629c <fputc+0x38>
    628c:	a0 81       	ld	r26, Z
    628e:	b1 81       	ldd	r27, Z+1	; 0x01
    6290:	9d 01       	movw	r18, r26
    6292:	2f 5f       	subi	r18, 0xFF	; 255
    6294:	3f 4f       	sbci	r19, 0xFF	; 255
    6296:	20 83       	st	Z, r18
    6298:	31 83       	std	Z+1, r19	; 0x01
    629a:	8c 93       	st	X, r24
    629c:	26 81       	ldd	r18, Z+6	; 0x06
    629e:	37 81       	ldd	r19, Z+7	; 0x07
    62a0:	2f 5f       	subi	r18, 0xFF	; 255
    62a2:	3f 4f       	sbci	r19, 0xFF	; 255
    62a4:	26 83       	std	Z+6, r18	; 0x06
    62a6:	37 83       	std	Z+7, r19	; 0x07
    62a8:	10 c0       	rjmp	.+32     	; 0x62ca <fputc+0x66>
    62aa:	eb 01       	movw	r28, r22
    62ac:	09 2f       	mov	r16, r25
    62ae:	18 2f       	mov	r17, r24
    62b0:	00 84       	ldd	r0, Z+8	; 0x08
    62b2:	f1 85       	ldd	r31, Z+9	; 0x09
    62b4:	e0 2d       	mov	r30, r0
    62b6:	09 95       	icall
    62b8:	89 2b       	or	r24, r25
    62ba:	e1 f6       	brne	.-72     	; 0x6274 <fputc+0x10>
    62bc:	8e 81       	ldd	r24, Y+6	; 0x06
    62be:	9f 81       	ldd	r25, Y+7	; 0x07
    62c0:	01 96       	adiw	r24, 0x01	; 1
    62c2:	8e 83       	std	Y+6, r24	; 0x06
    62c4:	9f 83       	std	Y+7, r25	; 0x07
    62c6:	81 2f       	mov	r24, r17
    62c8:	90 2f       	mov	r25, r16
    62ca:	df 91       	pop	r29
    62cc:	cf 91       	pop	r28
    62ce:	1f 91       	pop	r17
    62d0:	0f 91       	pop	r16
    62d2:	08 95       	ret

000062d4 <__ultoa_invert>:
    62d4:	fa 01       	movw	r30, r20
    62d6:	aa 27       	eor	r26, r26
    62d8:	28 30       	cpi	r18, 0x08	; 8
    62da:	51 f1       	breq	.+84     	; 0x6330 <__ultoa_invert+0x5c>
    62dc:	20 31       	cpi	r18, 0x10	; 16
    62de:	81 f1       	breq	.+96     	; 0x6340 <__ultoa_invert+0x6c>
    62e0:	e8 94       	clt
    62e2:	6f 93       	push	r22
    62e4:	6e 7f       	andi	r22, 0xFE	; 254
    62e6:	6e 5f       	subi	r22, 0xFE	; 254
    62e8:	7f 4f       	sbci	r23, 0xFF	; 255
    62ea:	8f 4f       	sbci	r24, 0xFF	; 255
    62ec:	9f 4f       	sbci	r25, 0xFF	; 255
    62ee:	af 4f       	sbci	r26, 0xFF	; 255
    62f0:	b1 e0       	ldi	r27, 0x01	; 1
    62f2:	3e d0       	rcall	.+124    	; 0x6370 <__ultoa_invert+0x9c>
    62f4:	b4 e0       	ldi	r27, 0x04	; 4
    62f6:	3c d0       	rcall	.+120    	; 0x6370 <__ultoa_invert+0x9c>
    62f8:	67 0f       	add	r22, r23
    62fa:	78 1f       	adc	r23, r24
    62fc:	89 1f       	adc	r24, r25
    62fe:	9a 1f       	adc	r25, r26
    6300:	a1 1d       	adc	r26, r1
    6302:	68 0f       	add	r22, r24
    6304:	79 1f       	adc	r23, r25
    6306:	8a 1f       	adc	r24, r26
    6308:	91 1d       	adc	r25, r1
    630a:	a1 1d       	adc	r26, r1
    630c:	6a 0f       	add	r22, r26
    630e:	71 1d       	adc	r23, r1
    6310:	81 1d       	adc	r24, r1
    6312:	91 1d       	adc	r25, r1
    6314:	a1 1d       	adc	r26, r1
    6316:	20 d0       	rcall	.+64     	; 0x6358 <__ultoa_invert+0x84>
    6318:	09 f4       	brne	.+2      	; 0x631c <__ultoa_invert+0x48>
    631a:	68 94       	set
    631c:	3f 91       	pop	r19
    631e:	2a e0       	ldi	r18, 0x0A	; 10
    6320:	26 9f       	mul	r18, r22
    6322:	11 24       	eor	r1, r1
    6324:	30 19       	sub	r19, r0
    6326:	30 5d       	subi	r19, 0xD0	; 208
    6328:	31 93       	st	Z+, r19
    632a:	de f6       	brtc	.-74     	; 0x62e2 <__ultoa_invert+0xe>
    632c:	cf 01       	movw	r24, r30
    632e:	08 95       	ret
    6330:	46 2f       	mov	r20, r22
    6332:	47 70       	andi	r20, 0x07	; 7
    6334:	40 5d       	subi	r20, 0xD0	; 208
    6336:	41 93       	st	Z+, r20
    6338:	b3 e0       	ldi	r27, 0x03	; 3
    633a:	0f d0       	rcall	.+30     	; 0x635a <__ultoa_invert+0x86>
    633c:	c9 f7       	brne	.-14     	; 0x6330 <__ultoa_invert+0x5c>
    633e:	f6 cf       	rjmp	.-20     	; 0x632c <__ultoa_invert+0x58>
    6340:	46 2f       	mov	r20, r22
    6342:	4f 70       	andi	r20, 0x0F	; 15
    6344:	40 5d       	subi	r20, 0xD0	; 208
    6346:	4a 33       	cpi	r20, 0x3A	; 58
    6348:	18 f0       	brcs	.+6      	; 0x6350 <__ultoa_invert+0x7c>
    634a:	49 5d       	subi	r20, 0xD9	; 217
    634c:	31 fd       	sbrc	r19, 1
    634e:	40 52       	subi	r20, 0x20	; 32
    6350:	41 93       	st	Z+, r20
    6352:	02 d0       	rcall	.+4      	; 0x6358 <__ultoa_invert+0x84>
    6354:	a9 f7       	brne	.-22     	; 0x6340 <__ultoa_invert+0x6c>
    6356:	ea cf       	rjmp	.-44     	; 0x632c <__ultoa_invert+0x58>
    6358:	b4 e0       	ldi	r27, 0x04	; 4
    635a:	a6 95       	lsr	r26
    635c:	97 95       	ror	r25
    635e:	87 95       	ror	r24
    6360:	77 95       	ror	r23
    6362:	67 95       	ror	r22
    6364:	ba 95       	dec	r27
    6366:	c9 f7       	brne	.-14     	; 0x635a <__ultoa_invert+0x86>
    6368:	00 97       	sbiw	r24, 0x00	; 0
    636a:	61 05       	cpc	r22, r1
    636c:	71 05       	cpc	r23, r1
    636e:	08 95       	ret
    6370:	9b 01       	movw	r18, r22
    6372:	ac 01       	movw	r20, r24
    6374:	0a 2e       	mov	r0, r26
    6376:	06 94       	lsr	r0
    6378:	57 95       	ror	r21
    637a:	47 95       	ror	r20
    637c:	37 95       	ror	r19
    637e:	27 95       	ror	r18
    6380:	ba 95       	dec	r27
    6382:	c9 f7       	brne	.-14     	; 0x6376 <__ultoa_invert+0xa2>
    6384:	62 0f       	add	r22, r18
    6386:	73 1f       	adc	r23, r19
    6388:	84 1f       	adc	r24, r20
    638a:	95 1f       	adc	r25, r21
    638c:	a0 1d       	adc	r26, r0
    638e:	08 95       	ret

00006390 <__prologue_saves__>:
    6390:	2f 92       	push	r2
    6392:	3f 92       	push	r3
    6394:	4f 92       	push	r4
    6396:	5f 92       	push	r5
    6398:	6f 92       	push	r6
    639a:	7f 92       	push	r7
    639c:	8f 92       	push	r8
    639e:	9f 92       	push	r9
    63a0:	af 92       	push	r10
    63a2:	bf 92       	push	r11
    63a4:	cf 92       	push	r12
    63a6:	df 92       	push	r13
    63a8:	ef 92       	push	r14
    63aa:	ff 92       	push	r15
    63ac:	0f 93       	push	r16
    63ae:	1f 93       	push	r17
    63b0:	cf 93       	push	r28
    63b2:	df 93       	push	r29
    63b4:	cd b7       	in	r28, 0x3d	; 61
    63b6:	de b7       	in	r29, 0x3e	; 62
    63b8:	ca 1b       	sub	r28, r26
    63ba:	db 0b       	sbc	r29, r27
    63bc:	cd bf       	out	0x3d, r28	; 61
    63be:	de bf       	out	0x3e, r29	; 62
    63c0:	09 94       	ijmp

000063c2 <__epilogue_restores__>:
    63c2:	2a 88       	ldd	r2, Y+18	; 0x12
    63c4:	39 88       	ldd	r3, Y+17	; 0x11
    63c6:	48 88       	ldd	r4, Y+16	; 0x10
    63c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    63ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    63cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    63ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    63d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    63d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    63d4:	b9 84       	ldd	r11, Y+9	; 0x09
    63d6:	c8 84       	ldd	r12, Y+8	; 0x08
    63d8:	df 80       	ldd	r13, Y+7	; 0x07
    63da:	ee 80       	ldd	r14, Y+6	; 0x06
    63dc:	fd 80       	ldd	r15, Y+5	; 0x05
    63de:	0c 81       	ldd	r16, Y+4	; 0x04
    63e0:	1b 81       	ldd	r17, Y+3	; 0x03
    63e2:	aa 81       	ldd	r26, Y+2	; 0x02
    63e4:	b9 81       	ldd	r27, Y+1	; 0x01
    63e6:	ce 0f       	add	r28, r30
    63e8:	d1 1d       	adc	r29, r1
    63ea:	cd bf       	out	0x3d, r28	; 61
    63ec:	de bf       	out	0x3e, r29	; 62
    63ee:	ed 01       	movw	r28, r26
    63f0:	08 95       	ret

000063f2 <_exit>:
    63f2:	f8 94       	cli

000063f4 <__stop_program>:
    63f4:	ff cf       	rjmp	.-2      	; 0x63f4 <__stop_program>
