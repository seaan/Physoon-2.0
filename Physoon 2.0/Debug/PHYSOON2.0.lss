
PHYSOON2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00802000  000031f4  00003288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008020e0  008020e0  00003368  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  00003408  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d594  00000000  00000000  00003878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002911  00000000  00000000  00010e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009e2c  00000000  00000000  0001371d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001080  00000000  00000000  0001d54c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002c83a  00000000  00000000  0001e5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d90  00000000  00000000  0004ae06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0004fb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f6d  00000000  00000000  0004ff70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	26 c1       	rjmp	.+588    	; 0x24e <__ctors_end>
       2:	00 00       	nop
       4:	4a c1       	rjmp	.+660    	; 0x29a <__bad_interrupt>
       6:	00 00       	nop
       8:	48 c1       	rjmp	.+656    	; 0x29a <__bad_interrupt>
       a:	00 00       	nop
       c:	46 c1       	rjmp	.+652    	; 0x29a <__bad_interrupt>
       e:	00 00       	nop
      10:	44 c1       	rjmp	.+648    	; 0x29a <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__bad_interrupt>
      16:	00 00       	nop
      18:	40 c1       	rjmp	.+640    	; 0x29a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3e c1       	rjmp	.+636    	; 0x29a <__bad_interrupt>
      1e:	00 00       	nop
      20:	3c c1       	rjmp	.+632    	; 0x29a <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__bad_interrupt>
      26:	00 00       	nop
      28:	38 c1       	rjmp	.+624    	; 0x29a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	36 c1       	rjmp	.+620    	; 0x29a <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c1       	rjmp	.+616    	; 0x29a <__bad_interrupt>
      32:	00 00       	nop
      34:	89 c3       	rjmp	.+1810   	; 0x748 <__vector_13>
      36:	00 00       	nop
      38:	30 c1       	rjmp	.+608    	; 0x29a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2e c1       	rjmp	.+604    	; 0x29a <__bad_interrupt>
      3e:	00 00       	nop
      40:	2c c1       	rjmp	.+600    	; 0x29a <__bad_interrupt>
      42:	00 00       	nop
      44:	2a c1       	rjmp	.+596    	; 0x29a <__bad_interrupt>
      46:	00 00       	nop
      48:	28 c1       	rjmp	.+592    	; 0x29a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	26 c1       	rjmp	.+588    	; 0x29a <__bad_interrupt>
      4e:	00 00       	nop
      50:	24 c1       	rjmp	.+584    	; 0x29a <__bad_interrupt>
      52:	00 00       	nop
      54:	22 c1       	rjmp	.+580    	; 0x29a <__bad_interrupt>
      56:	00 00       	nop
      58:	20 c1       	rjmp	.+576    	; 0x29a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1e c1       	rjmp	.+572    	; 0x29a <__bad_interrupt>
      5e:	00 00       	nop
      60:	1c c1       	rjmp	.+568    	; 0x29a <__bad_interrupt>
      62:	00 00       	nop
      64:	de c4       	rjmp	.+2492   	; 0xa22 <__vector_25>
      66:	00 00       	nop
      68:	18 c1       	rjmp	.+560    	; 0x29a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	16 c1       	rjmp	.+556    	; 0x29a <__bad_interrupt>
      6e:	00 00       	nop
      70:	14 c1       	rjmp	.+552    	; 0x29a <__bad_interrupt>
      72:	00 00       	nop
      74:	12 c1       	rjmp	.+548    	; 0x29a <__bad_interrupt>
      76:	00 00       	nop
      78:	10 c1       	rjmp	.+544    	; 0x29a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0e c1       	rjmp	.+540    	; 0x29a <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c c1       	rjmp	.+536    	; 0x29a <__bad_interrupt>
      82:	00 00       	nop
      84:	0a c1       	rjmp	.+532    	; 0x29a <__bad_interrupt>
      86:	00 00       	nop
      88:	08 c1       	rjmp	.+528    	; 0x29a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 c1       	rjmp	.+524    	; 0x29a <__bad_interrupt>
      8e:	00 00       	nop
      90:	fa c1       	rjmp	.+1012   	; 0x486 <__vector_36>
      92:	00 00       	nop
      94:	3e c2       	rjmp	.+1148   	; 0x512 <__vector_37>
      96:	00 00       	nop
      98:	82 c2       	rjmp	.+1284   	; 0x59e <__vector_38>
      9a:	00 00       	nop
      9c:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_39>
      a0:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_40>
      a4:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__vector_41>
      a8:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_42>
      ac:	f6 c0       	rjmp	.+492    	; 0x29a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f4 c0       	rjmp	.+488    	; 0x29a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f2 c0       	rjmp	.+484    	; 0x29a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ab c3       	rjmp	.+1878   	; 0x810 <__vector_46>
      ba:	00 00       	nop
      bc:	ee c0       	rjmp	.+476    	; 0x29a <__bad_interrupt>
      be:	00 00       	nop
      c0:	ec c0       	rjmp	.+472    	; 0x29a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ea c0       	rjmp	.+468    	; 0x29a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e8 c0       	rjmp	.+464    	; 0x29a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e6 c0       	rjmp	.+460    	; 0x29a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e4 c0       	rjmp	.+456    	; 0x29a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__vector_53>
      d8:	e0 c0       	rjmp	.+448    	; 0x29a <__bad_interrupt>
      da:	00 00       	nop
      dc:	de c0       	rjmp	.+444    	; 0x29a <__bad_interrupt>
      de:	00 00       	nop
      e0:	dc c0       	rjmp	.+440    	; 0x29a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	da c0       	rjmp	.+436    	; 0x29a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	d8 c0       	rjmp	.+432    	; 0x29a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d6 c0       	rjmp	.+428    	; 0x29a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d4 c0       	rjmp	.+424    	; 0x29a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d2 c0       	rjmp	.+420    	; 0x29a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d0 c0       	rjmp	.+416    	; 0x29a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ce c0       	rjmp	.+412    	; 0x29a <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__vector_64>
     104:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__vector_65>
     108:	c8 c0       	rjmp	.+400    	; 0x29a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c6 c0       	rjmp	.+396    	; 0x29a <__bad_interrupt>
     10e:	00 00       	nop
     110:	f0 c0       	rjmp	.+480    	; 0x2f2 <__vector_68>
     112:	00 00       	nop
     114:	34 c1       	rjmp	.+616    	; 0x37e <__vector_69>
     116:	00 00       	nop
     118:	78 c1       	rjmp	.+752    	; 0x40a <__vector_70>
     11a:	00 00       	nop
     11c:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_71>
     120:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__vector_72>
     124:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__vector_73>
     128:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__vector_74>
     12c:	b6 c0       	rjmp	.+364    	; 0x29a <__bad_interrupt>
     12e:	00 00       	nop
     130:	3d c3       	rjmp	.+1658   	; 0x7ac <__vector_76>
     132:	00 00       	nop
     134:	b2 c0       	rjmp	.+356    	; 0x29a <__bad_interrupt>
     136:	00 00       	nop
     138:	b0 c0       	rjmp	.+352    	; 0x29a <__bad_interrupt>
     13a:	00 00       	nop
     13c:	ae c0       	rjmp	.+348    	; 0x29a <__bad_interrupt>
     13e:	00 00       	nop
     140:	ac c0       	rjmp	.+344    	; 0x29a <__bad_interrupt>
     142:	00 00       	nop
     144:	aa c0       	rjmp	.+340    	; 0x29a <__bad_interrupt>
     146:	00 00       	nop
     148:	a8 c0       	rjmp	.+336    	; 0x29a <__bad_interrupt>
     14a:	00 00       	nop
     14c:	a6 c0       	rjmp	.+332    	; 0x29a <__bad_interrupt>
     14e:	00 00       	nop
     150:	a4 c0       	rjmp	.+328    	; 0x29a <__bad_interrupt>
     152:	00 00       	nop
     154:	a2 c0       	rjmp	.+324    	; 0x29a <__bad_interrupt>
     156:	00 00       	nop
     158:	a0 c0       	rjmp	.+320    	; 0x29a <__bad_interrupt>
     15a:	00 00       	nop
     15c:	9e c0       	rjmp	.+316    	; 0x29a <__bad_interrupt>
     15e:	00 00       	nop
     160:	9c c0       	rjmp	.+312    	; 0x29a <__bad_interrupt>
     162:	00 00       	nop
     164:	9a c0       	rjmp	.+308    	; 0x29a <__bad_interrupt>
     166:	00 00       	nop
     168:	98 c0       	rjmp	.+304    	; 0x29a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	96 c0       	rjmp	.+300    	; 0x29a <__bad_interrupt>
     16e:	00 00       	nop
     170:	94 c0       	rjmp	.+296    	; 0x29a <__bad_interrupt>
     172:	00 00       	nop
     174:	92 c0       	rjmp	.+292    	; 0x29a <__bad_interrupt>
     176:	00 00       	nop
     178:	90 c0       	rjmp	.+288    	; 0x29a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	8e c0       	rjmp	.+284    	; 0x29a <__bad_interrupt>
     17e:	00 00       	nop
     180:	8c c0       	rjmp	.+280    	; 0x29a <__bad_interrupt>
     182:	00 00       	nop
     184:	8a c0       	rjmp	.+276    	; 0x29a <__bad_interrupt>
     186:	00 00       	nop
     188:	88 c0       	rjmp	.+272    	; 0x29a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	86 c0       	rjmp	.+268    	; 0x29a <__bad_interrupt>
     18e:	00 00       	nop
     190:	84 c0       	rjmp	.+264    	; 0x29a <__bad_interrupt>
     192:	00 00       	nop
     194:	82 c0       	rjmp	.+260    	; 0x29a <__bad_interrupt>
     196:	00 00       	nop
     198:	80 c0       	rjmp	.+256    	; 0x29a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	7e c0       	rjmp	.+252    	; 0x29a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	7c c0       	rjmp	.+248    	; 0x29a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	7a c0       	rjmp	.+244    	; 0x29a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	78 c0       	rjmp	.+240    	; 0x29a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	63 c3       	rjmp	.+1734   	; 0x874 <__vector_107>
     1ae:	00 00       	nop
     1b0:	74 c0       	rjmp	.+232    	; 0x29a <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	72 c0       	rjmp	.+228    	; 0x29a <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	70 c0       	rjmp	.+224    	; 0x29a <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	6e c0       	rjmp	.+220    	; 0x29a <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	6c c0       	rjmp	.+216    	; 0x29a <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	6a c0       	rjmp	.+212    	; 0x29a <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	68 c0       	rjmp	.+208    	; 0x29a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	66 c0       	rjmp	.+204    	; 0x29a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	64 c0       	rjmp	.+200    	; 0x29a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	62 c0       	rjmp	.+196    	; 0x29a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	60 c0       	rjmp	.+192    	; 0x29a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	5e c0       	rjmp	.+188    	; 0x29a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	5c c0       	rjmp	.+184    	; 0x29a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	5a c0       	rjmp	.+180    	; 0x29a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	58 c0       	rjmp	.+176    	; 0x29a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	56 c0       	rjmp	.+172    	; 0x29a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	54 c0       	rjmp	.+168    	; 0x29a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	08 00       	.word	0x0008	; ????
     1f6:	00 00       	nop
     1f8:	be 92       	st	-X, r11
     1fa:	24 49       	sbci	r18, 0x94	; 148
     1fc:	12 3e       	cpi	r17, 0xE2	; 226
     1fe:	ab aa       	std	Y+51, r10	; 0x33
     200:	aa 2a       	or	r10, r26
     202:	be cd       	rjmp	.-1156   	; 0xfffffd80 <__eeprom_end+0xff7efd80>
     204:	cc cc       	rjmp	.-1640   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     206:	4c 3e       	cpi	r20, 0xEC	; 236
     208:	00 00       	nop
     20a:	00 80       	ld	r0, Z
     20c:	be ab       	std	Y+54, r27	; 0x36
     20e:	aa aa       	std	Y+50, r10	; 0x32
     210:	aa 3e       	cpi	r26, 0xEA	; 234
     212:	00 00       	nop
     214:	00 00       	nop
     216:	bf 00       	.word	0x00bf	; ????
     218:	00 00       	nop
     21a:	80 3f       	cpi	r24, 0xF0	; 240
     21c:	00 00       	nop
     21e:	00 00       	nop
     220:	00 08       	sbc	r0, r0
     222:	41 78       	andi	r20, 0x81	; 129
     224:	d3 bb       	out	0x13, r29	; 19
     226:	43 87       	std	Z+11, r20	; 0x0b
     228:	d1 13       	cpse	r29, r17
     22a:	3d 19       	sub	r19, r13
     22c:	0e 3c       	cpi	r16, 0xCE	; 206
     22e:	c3 bd       	out	0x23, r28	; 35
     230:	42 82       	std	Z+2, r4	; 0x02
     232:	ad 2b       	or	r26, r29
     234:	3e 68       	ori	r19, 0x8E	; 142
     236:	ec 82       	std	Y+4, r14	; 0x04
     238:	76 be       	out	0x36, r7	; 54
     23a:	d9 8f       	std	Y+25, r29	; 0x19
     23c:	e1 a9       	ldd	r30, Z+49	; 0x31
     23e:	3e 4c       	sbci	r19, 0xCE	; 206
     240:	80 ef       	ldi	r24, 0xF0	; 240
     242:	ff be       	out	0x3f, r15	; 63
     244:	01 c4       	rjmp	.+2050   	; 0xa48 <__vector_25+0x26>
     246:	ff 7f       	andi	r31, 0xFF	; 255
     248:	3f 00       	.word	0x003f	; ????
     24a:	00 00       	nop
	...

0000024e <__ctors_end>:
     24e:	11 24       	eor	r1, r1
     250:	1f be       	out	0x3f, r1	; 63
     252:	cf ef       	ldi	r28, 0xFF	; 255
     254:	cd bf       	out	0x3d, r28	; 61
     256:	df e3       	ldi	r29, 0x3F	; 63
     258:	de bf       	out	0x3e, r29	; 62
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	0c bf       	out	0x3c, r16	; 60
     25e:	18 be       	out	0x38, r1	; 56
     260:	19 be       	out	0x39, r1	; 57
     262:	1a be       	out	0x3a, r1	; 58
     264:	1b be       	out	0x3b, r1	; 59

00000266 <__do_copy_data>:
     266:	10 e2       	ldi	r17, 0x20	; 32
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e2       	ldi	r27, 0x20	; 32
     26c:	e4 ef       	ldi	r30, 0xF4	; 244
     26e:	f1 e3       	ldi	r31, 0x31	; 49
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	0b bf       	out	0x3b, r16	; 59
     274:	02 c0       	rjmp	.+4      	; 0x27a <__do_copy_data+0x14>
     276:	07 90       	elpm	r0, Z+
     278:	0d 92       	st	X+, r0
     27a:	a0 3e       	cpi	r26, 0xE0	; 224
     27c:	b1 07       	cpc	r27, r17
     27e:	d9 f7       	brne	.-10     	; 0x276 <__do_copy_data+0x10>
     280:	1b be       	out	0x3b, r1	; 59

00000282 <__do_clear_bss>:
     282:	21 e2       	ldi	r18, 0x21	; 33
     284:	a0 ee       	ldi	r26, 0xE0	; 224
     286:	b0 e2       	ldi	r27, 0x20	; 32
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	a8 31       	cpi	r26, 0x18	; 24
     28e:	b2 07       	cpc	r27, r18
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
     292:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <main>
     296:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <_exit>

0000029a <__bad_interrupt>:
     29a:	b2 ce       	rjmp	.-668    	; 0x0 <__vectors>

0000029c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	1f 92       	push	r1
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2a6:	80 91 fc 20 	lds	r24, 0x20FC
     2aa:	90 91 fd 20 	lds	r25, 0x20FD
     2ae:	e0 91 f8 20 	lds	r30, 0x20F8
     2b2:	f0 91 f9 20 	lds	r31, 0x20F9
     2b6:	be 01       	movw	r22, r28
     2b8:	6f 5f       	subi	r22, 0xFF	; 255
     2ba:	7f 4f       	sbci	r23, 0xFF	; 255
     2bc:	19 95       	eicall
	return c;
     2be:	89 81       	ldd	r24, Y+1	; 0x01
}
     2c0:	08 2e       	mov	r0, r24
     2c2:	00 0c       	add	r0, r0
     2c4:	99 0b       	sbc	r25, r25
     2c6:	0f 90       	pop	r0
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     2ce:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     2d0:	80 91 fc 20 	lds	r24, 0x20FC
     2d4:	90 91 fd 20 	lds	r25, 0x20FD
     2d8:	e0 91 fa 20 	lds	r30, 0x20FA
     2dc:	f0 91 fb 20 	lds	r31, 0x20FB
     2e0:	19 95       	eicall
     2e2:	99 23       	and	r25, r25
     2e4:	1c f0       	brlt	.+6      	; 0x2ec <_write+0x1e>
		return -1;
	}
	return 1;
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     2f0:	08 95       	ret

000002f2 <__vector_68>:
 *
 * This function will handle interrupt on analog comparator A channel 0 and
 * call the analog comparator channel A callback function.
 */
ISR(ACA_AC0_vect)
{
     2f2:	1f 92       	push	r1
     2f4:	0f 92       	push	r0
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	0f 92       	push	r0
     2fa:	11 24       	eor	r1, r1
     2fc:	08 b6       	in	r0, 0x38	; 56
     2fe:	0f 92       	push	r0
     300:	18 be       	out	0x38, r1	; 56
     302:	09 b6       	in	r0, 0x39	; 57
     304:	0f 92       	push	r0
     306:	19 be       	out	0x39, r1	; 57
     308:	0b b6       	in	r0, 0x3b	; 59
     30a:	0f 92       	push	r0
     30c:	1b be       	out	0x3b, r1	; 59
     30e:	2f 93       	push	r18
     310:	3f 93       	push	r19
     312:	4f 93       	push	r20
     314:	5f 93       	push	r21
     316:	6f 93       	push	r22
     318:	7f 93       	push	r23
     31a:	8f 93       	push	r24
     31c:	9f 93       	push	r25
     31e:	af 93       	push	r26
     320:	bf 93       	push	r27
     322:	ef 93       	push	r30
     324:	ff 93       	push	r31
	if (ac_aca_callback) {
     326:	e0 91 e2 20 	lds	r30, 0x20E2
     32a:	f0 91 e3 20 	lds	r31, 0x20E3
     32e:	30 97       	sbiw	r30, 0x00	; 0
     330:	79 f0       	breq	.+30     	; 0x350 <__vector_68+0x5e>
		if (ACA.STATUS & AC_AC0STATE_bm) {
     332:	80 91 87 03 	lds	r24, 0x0387
     336:	84 ff       	sbrs	r24, 4
     338:	06 c0       	rjmp	.+12     	; 0x346 <__vector_68+0x54>
			ac_aca_callback(&ACA, 0, AC_STATUS_ABOVE);
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	80 e8       	ldi	r24, 0x80	; 128
     340:	93 e0       	ldi	r25, 0x03	; 3
     342:	19 95       	eicall
     344:	05 c0       	rjmp	.+10     	; 0x350 <__vector_68+0x5e>
		}
		else {
			ac_aca_callback(&ACA, 0, AC_STATUS_BELOW);
     346:	40 e8       	ldi	r20, 0x80	; 128
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	80 e8       	ldi	r24, 0x80	; 128
     34c:	93 e0       	ldi	r25, 0x03	; 3
     34e:	19 95       	eicall
		}
	}
}
     350:	ff 91       	pop	r31
     352:	ef 91       	pop	r30
     354:	bf 91       	pop	r27
     356:	af 91       	pop	r26
     358:	9f 91       	pop	r25
     35a:	8f 91       	pop	r24
     35c:	7f 91       	pop	r23
     35e:	6f 91       	pop	r22
     360:	5f 91       	pop	r21
     362:	4f 91       	pop	r20
     364:	3f 91       	pop	r19
     366:	2f 91       	pop	r18
     368:	0f 90       	pop	r0
     36a:	0b be       	out	0x3b, r0	; 59
     36c:	0f 90       	pop	r0
     36e:	09 be       	out	0x39, r0	; 57
     370:	0f 90       	pop	r0
     372:	08 be       	out	0x38, r0	; 56
     374:	0f 90       	pop	r0
     376:	0f be       	out	0x3f, r0	; 63
     378:	0f 90       	pop	r0
     37a:	1f 90       	pop	r1
     37c:	18 95       	reti

0000037e <__vector_69>:
 *
 * This function will handle interrupt on analog comparator A channel 1 and
 * call the analog comparator channel A callback function.
 */
ISR(ACA_AC1_vect)
{
     37e:	1f 92       	push	r1
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	08 b6       	in	r0, 0x38	; 56
     38a:	0f 92       	push	r0
     38c:	18 be       	out	0x38, r1	; 56
     38e:	09 b6       	in	r0, 0x39	; 57
     390:	0f 92       	push	r0
     392:	19 be       	out	0x39, r1	; 57
     394:	0b b6       	in	r0, 0x3b	; 59
     396:	0f 92       	push	r0
     398:	1b be       	out	0x3b, r1	; 59
     39a:	2f 93       	push	r18
     39c:	3f 93       	push	r19
     39e:	4f 93       	push	r20
     3a0:	5f 93       	push	r21
     3a2:	6f 93       	push	r22
     3a4:	7f 93       	push	r23
     3a6:	8f 93       	push	r24
     3a8:	9f 93       	push	r25
     3aa:	af 93       	push	r26
     3ac:	bf 93       	push	r27
     3ae:	ef 93       	push	r30
     3b0:	ff 93       	push	r31
	if (ac_aca_callback) {
     3b2:	e0 91 e2 20 	lds	r30, 0x20E2
     3b6:	f0 91 e3 20 	lds	r31, 0x20E3
     3ba:	30 97       	sbiw	r30, 0x00	; 0
     3bc:	79 f0       	breq	.+30     	; 0x3dc <__vector_69+0x5e>
		if (ACA.STATUS & AC_AC1STATE_bm) {
     3be:	80 91 87 03 	lds	r24, 0x0387
     3c2:	85 ff       	sbrs	r24, 5
     3c4:	06 c0       	rjmp	.+12     	; 0x3d2 <__vector_69+0x54>
			ac_aca_callback(&ACA, 1, AC_STATUS_ABOVE);
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	80 e8       	ldi	r24, 0x80	; 128
     3cc:	93 e0       	ldi	r25, 0x03	; 3
     3ce:	19 95       	eicall
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <__vector_69+0x5e>
		}
		else {
			ac_aca_callback(&ACA, 1, AC_STATUS_BELOW);
     3d2:	40 e8       	ldi	r20, 0x80	; 128
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	80 e8       	ldi	r24, 0x80	; 128
     3d8:	93 e0       	ldi	r25, 0x03	; 3
     3da:	19 95       	eicall
		}
	}
}
     3dc:	ff 91       	pop	r31
     3de:	ef 91       	pop	r30
     3e0:	bf 91       	pop	r27
     3e2:	af 91       	pop	r26
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	7f 91       	pop	r23
     3ea:	6f 91       	pop	r22
     3ec:	5f 91       	pop	r21
     3ee:	4f 91       	pop	r20
     3f0:	3f 91       	pop	r19
     3f2:	2f 91       	pop	r18
     3f4:	0f 90       	pop	r0
     3f6:	0b be       	out	0x3b, r0	; 59
     3f8:	0f 90       	pop	r0
     3fa:	09 be       	out	0x39, r0	; 57
     3fc:	0f 90       	pop	r0
     3fe:	08 be       	out	0x38, r0	; 56
     400:	0f 90       	pop	r0
     402:	0f be       	out	0x3f, r0	; 63
     404:	0f 90       	pop	r0
     406:	1f 90       	pop	r1
     408:	18 95       	reti

0000040a <__vector_70>:
 *
 * This function will handle interrupt on analog comparator A in window mode
 * and call the analog comparator channel A callback function.
 */
ISR(ACA_ACW_vect)
{
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	08 b6       	in	r0, 0x38	; 56
     416:	0f 92       	push	r0
     418:	18 be       	out	0x38, r1	; 56
     41a:	09 b6       	in	r0, 0x39	; 57
     41c:	0f 92       	push	r0
     41e:	19 be       	out	0x39, r1	; 57
     420:	0b b6       	in	r0, 0x3b	; 59
     422:	0f 92       	push	r0
     424:	1b be       	out	0x3b, r1	; 59
     426:	2f 93       	push	r18
     428:	3f 93       	push	r19
     42a:	4f 93       	push	r20
     42c:	5f 93       	push	r21
     42e:	6f 93       	push	r22
     430:	7f 93       	push	r23
     432:	8f 93       	push	r24
     434:	9f 93       	push	r25
     436:	af 93       	push	r26
     438:	bf 93       	push	r27
     43a:	ef 93       	push	r30
     43c:	ff 93       	push	r31
	if (ac_aca_callback) {
     43e:	e0 91 e2 20 	lds	r30, 0x20E2
     442:	f0 91 e3 20 	lds	r31, 0x20E3
     446:	30 97       	sbiw	r30, 0x00	; 0
     448:	39 f0       	breq	.+14     	; 0x458 <__vector_70+0x4e>
		ac_aca_callback(&ACA, 0, (enum ac_status_t)(ACA.STATUS &
     44a:	40 91 87 03 	lds	r20, 0x0387
     44e:	40 7c       	andi	r20, 0xC0	; 192
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	80 e8       	ldi	r24, 0x80	; 128
     454:	93 e0       	ldi	r25, 0x03	; 3
     456:	19 95       	eicall
					AC_WSTATE_gm));
	}
}
     458:	ff 91       	pop	r31
     45a:	ef 91       	pop	r30
     45c:	bf 91       	pop	r27
     45e:	af 91       	pop	r26
     460:	9f 91       	pop	r25
     462:	8f 91       	pop	r24
     464:	7f 91       	pop	r23
     466:	6f 91       	pop	r22
     468:	5f 91       	pop	r21
     46a:	4f 91       	pop	r20
     46c:	3f 91       	pop	r19
     46e:	2f 91       	pop	r18
     470:	0f 90       	pop	r0
     472:	0b be       	out	0x3b, r0	; 59
     474:	0f 90       	pop	r0
     476:	09 be       	out	0x39, r0	; 57
     478:	0f 90       	pop	r0
     47a:	08 be       	out	0x38, r0	; 56
     47c:	0f 90       	pop	r0
     47e:	0f be       	out	0x3f, r0	; 63
     480:	0f 90       	pop	r0
     482:	1f 90       	pop	r1
     484:	18 95       	reti

00000486 <__vector_36>:
 *
 * This function will handle interrupt on analog comparator B channel 0 and
 * call the analog comparator channel B callback function.
 */
ISR(ACB_AC0_vect)
{
     486:	1f 92       	push	r1
     488:	0f 92       	push	r0
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	0f 92       	push	r0
     48e:	11 24       	eor	r1, r1
     490:	08 b6       	in	r0, 0x38	; 56
     492:	0f 92       	push	r0
     494:	18 be       	out	0x38, r1	; 56
     496:	09 b6       	in	r0, 0x39	; 57
     498:	0f 92       	push	r0
     49a:	19 be       	out	0x39, r1	; 57
     49c:	0b b6       	in	r0, 0x3b	; 59
     49e:	0f 92       	push	r0
     4a0:	1b be       	out	0x3b, r1	; 59
     4a2:	2f 93       	push	r18
     4a4:	3f 93       	push	r19
     4a6:	4f 93       	push	r20
     4a8:	5f 93       	push	r21
     4aa:	6f 93       	push	r22
     4ac:	7f 93       	push	r23
     4ae:	8f 93       	push	r24
     4b0:	9f 93       	push	r25
     4b2:	af 93       	push	r26
     4b4:	bf 93       	push	r27
     4b6:	ef 93       	push	r30
     4b8:	ff 93       	push	r31
	if (ac_acb_callback) {
     4ba:	e0 91 e0 20 	lds	r30, 0x20E0
     4be:	f0 91 e1 20 	lds	r31, 0x20E1
     4c2:	30 97       	sbiw	r30, 0x00	; 0
     4c4:	79 f0       	breq	.+30     	; 0x4e4 <__vector_36+0x5e>
		if (ACB.STATUS & AC_AC0STATE_bm) {
     4c6:	80 91 97 03 	lds	r24, 0x0397
     4ca:	84 ff       	sbrs	r24, 4
     4cc:	06 c0       	rjmp	.+12     	; 0x4da <__vector_36+0x54>
			ac_acb_callback(&ACB, 0, AC_STATUS_ABOVE);
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	80 e9       	ldi	r24, 0x90	; 144
     4d4:	93 e0       	ldi	r25, 0x03	; 3
     4d6:	19 95       	eicall
     4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <__vector_36+0x5e>
		}
		else {
			ac_acb_callback(&ACB, 0, AC_STATUS_BELOW);
     4da:	40 e8       	ldi	r20, 0x80	; 128
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	80 e9       	ldi	r24, 0x90	; 144
     4e0:	93 e0       	ldi	r25, 0x03	; 3
     4e2:	19 95       	eicall
		}
	}
}
     4e4:	ff 91       	pop	r31
     4e6:	ef 91       	pop	r30
     4e8:	bf 91       	pop	r27
     4ea:	af 91       	pop	r26
     4ec:	9f 91       	pop	r25
     4ee:	8f 91       	pop	r24
     4f0:	7f 91       	pop	r23
     4f2:	6f 91       	pop	r22
     4f4:	5f 91       	pop	r21
     4f6:	4f 91       	pop	r20
     4f8:	3f 91       	pop	r19
     4fa:	2f 91       	pop	r18
     4fc:	0f 90       	pop	r0
     4fe:	0b be       	out	0x3b, r0	; 59
     500:	0f 90       	pop	r0
     502:	09 be       	out	0x39, r0	; 57
     504:	0f 90       	pop	r0
     506:	08 be       	out	0x38, r0	; 56
     508:	0f 90       	pop	r0
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	0f 90       	pop	r0
     50e:	1f 90       	pop	r1
     510:	18 95       	reti

00000512 <__vector_37>:
 *
 * This function will handle interrupt on analog comparator B channel 1 and
 * call the analog comparator channel B callback function.
 */
ISR(ACB_AC1_vect)
{
     512:	1f 92       	push	r1
     514:	0f 92       	push	r0
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	0f 92       	push	r0
     51a:	11 24       	eor	r1, r1
     51c:	08 b6       	in	r0, 0x38	; 56
     51e:	0f 92       	push	r0
     520:	18 be       	out	0x38, r1	; 56
     522:	09 b6       	in	r0, 0x39	; 57
     524:	0f 92       	push	r0
     526:	19 be       	out	0x39, r1	; 57
     528:	0b b6       	in	r0, 0x3b	; 59
     52a:	0f 92       	push	r0
     52c:	1b be       	out	0x3b, r1	; 59
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	4f 93       	push	r20
     534:	5f 93       	push	r21
     536:	6f 93       	push	r22
     538:	7f 93       	push	r23
     53a:	8f 93       	push	r24
     53c:	9f 93       	push	r25
     53e:	af 93       	push	r26
     540:	bf 93       	push	r27
     542:	ef 93       	push	r30
     544:	ff 93       	push	r31
	if (ac_acb_callback) {
     546:	e0 91 e0 20 	lds	r30, 0x20E0
     54a:	f0 91 e1 20 	lds	r31, 0x20E1
     54e:	30 97       	sbiw	r30, 0x00	; 0
     550:	79 f0       	breq	.+30     	; 0x570 <__vector_37+0x5e>
		if (ACB.STATUS & AC_AC1STATE_bm) {
     552:	80 91 97 03 	lds	r24, 0x0397
     556:	85 ff       	sbrs	r24, 5
     558:	06 c0       	rjmp	.+12     	; 0x566 <__vector_37+0x54>
			ac_acb_callback(&ACB, 1, AC_STATUS_ABOVE);
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	80 e9       	ldi	r24, 0x90	; 144
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	19 95       	eicall
     564:	05 c0       	rjmp	.+10     	; 0x570 <__vector_37+0x5e>
		}
		else {
			ac_acb_callback(&ACB, 1, AC_STATUS_BELOW);
     566:	40 e8       	ldi	r20, 0x80	; 128
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	80 e9       	ldi	r24, 0x90	; 144
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	19 95       	eicall
		}
	}
}
     570:	ff 91       	pop	r31
     572:	ef 91       	pop	r30
     574:	bf 91       	pop	r27
     576:	af 91       	pop	r26
     578:	9f 91       	pop	r25
     57a:	8f 91       	pop	r24
     57c:	7f 91       	pop	r23
     57e:	6f 91       	pop	r22
     580:	5f 91       	pop	r21
     582:	4f 91       	pop	r20
     584:	3f 91       	pop	r19
     586:	2f 91       	pop	r18
     588:	0f 90       	pop	r0
     58a:	0b be       	out	0x3b, r0	; 59
     58c:	0f 90       	pop	r0
     58e:	09 be       	out	0x39, r0	; 57
     590:	0f 90       	pop	r0
     592:	08 be       	out	0x38, r0	; 56
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti

0000059e <__vector_38>:
 *
 * This function will handle interrupt on analog comparator B in window mode
 * and call the analog comparator channel B callback function.
 */
ISR(ACB_ACW_vect)
{
     59e:	1f 92       	push	r1
     5a0:	0f 92       	push	r0
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	0f 92       	push	r0
     5a6:	11 24       	eor	r1, r1
     5a8:	08 b6       	in	r0, 0x38	; 56
     5aa:	0f 92       	push	r0
     5ac:	18 be       	out	0x38, r1	; 56
     5ae:	09 b6       	in	r0, 0x39	; 57
     5b0:	0f 92       	push	r0
     5b2:	19 be       	out	0x39, r1	; 57
     5b4:	0b b6       	in	r0, 0x3b	; 59
     5b6:	0f 92       	push	r0
     5b8:	1b be       	out	0x3b, r1	; 59
     5ba:	2f 93       	push	r18
     5bc:	3f 93       	push	r19
     5be:	4f 93       	push	r20
     5c0:	5f 93       	push	r21
     5c2:	6f 93       	push	r22
     5c4:	7f 93       	push	r23
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	af 93       	push	r26
     5cc:	bf 93       	push	r27
     5ce:	ef 93       	push	r30
     5d0:	ff 93       	push	r31
	if (ac_acb_callback) {
     5d2:	e0 91 e0 20 	lds	r30, 0x20E0
     5d6:	f0 91 e1 20 	lds	r31, 0x20E1
     5da:	30 97       	sbiw	r30, 0x00	; 0
     5dc:	39 f0       	breq	.+14     	; 0x5ec <__vector_38+0x4e>
		ac_acb_callback(&ACB, 0, (enum ac_status_t)(ACB.STATUS &
     5de:	40 91 97 03 	lds	r20, 0x0397
     5e2:	40 7c       	andi	r20, 0xC0	; 192
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	80 e9       	ldi	r24, 0x90	; 144
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	19 95       	eicall
					AC_WSTATE_gm));
	}
}
     5ec:	ff 91       	pop	r31
     5ee:	ef 91       	pop	r30
     5f0:	bf 91       	pop	r27
     5f2:	af 91       	pop	r26
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	7f 91       	pop	r23
     5fa:	6f 91       	pop	r22
     5fc:	5f 91       	pop	r21
     5fe:	4f 91       	pop	r20
     600:	3f 91       	pop	r19
     602:	2f 91       	pop	r18
     604:	0f 90       	pop	r0
     606:	0b be       	out	0x3b, r0	; 59
     608:	0f 90       	pop	r0
     60a:	09 be       	out	0x39, r0	; 57
     60c:	0f 90       	pop	r0
     60e:	08 be       	out	0x38, r0	; 56
     610:	0f 90       	pop	r0
     612:	0f be       	out	0x3f, r0	; 63
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     61e:	e0 91 e4 20 	lds	r30, 0x20E4
     622:	f0 91 e5 20 	lds	r31, 0x20E5
     626:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     628:	83 ff       	sbrs	r24, 3
     62a:	08 c0       	rjmp	.+16     	; 0x63c <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     62c:	88 60       	ori	r24, 0x08	; 8
     62e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     634:	86 ef       	ldi	r24, 0xF6	; 246
     636:	80 93 ee 20 	sts	0x20EE, r24
     63a:	83 c0       	rjmp	.+262    	; 0x742 <twim_interrupt_handler+0x128>
     63c:	98 2f       	mov	r25, r24
     63e:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     640:	31 f0       	breq	.+12     	; 0x64e <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     642:	83 e0       	ldi	r24, 0x03	; 3
     644:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     646:	8f ef       	ldi	r24, 0xFF	; 255
     648:	80 93 ee 20 	sts	0x20EE, r24
     64c:	7a c0       	rjmp	.+244    	; 0x742 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     64e:	86 ff       	sbrs	r24, 6
     650:	43 c0       	rjmp	.+134    	; 0x6d8 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     652:	c4 ee       	ldi	r28, 0xE4	; 228
     654:	d0 e2       	ldi	r29, 0x20	; 32
     656:	aa 81       	ldd	r26, Y+2	; 0x02
     658:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     65a:	8c 81       	ldd	r24, Y+4	; 0x04
     65c:	9d 81       	ldd	r25, Y+5	; 0x05
     65e:	14 96       	adiw	r26, 0x04	; 4
     660:	2d 91       	ld	r18, X+
     662:	3c 91       	ld	r19, X
     664:	15 97       	sbiw	r26, 0x05	; 5
     666:	82 17       	cp	r24, r18
     668:	93 07       	cpc	r25, r19
     66a:	6c f4       	brge	.+26     	; 0x686 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     66c:	9c 01       	movw	r18, r24
     66e:	2f 5f       	subi	r18, 0xFF	; 255
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	20 93 e8 20 	sts	0x20E8, r18
     676:	30 93 e9 20 	sts	0x20E9, r19
     67a:	a8 0f       	add	r26, r24
     67c:	b9 1f       	adc	r27, r25
     67e:	11 96       	adiw	r26, 0x01	; 1
     680:	8c 91       	ld	r24, X
     682:	87 83       	std	Z+7, r24	; 0x07
     684:	5e c0       	rjmp	.+188    	; 0x742 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     686:	80 91 ea 20 	lds	r24, 0x20EA
     68a:	90 91 eb 20 	lds	r25, 0x20EB
     68e:	18 96       	adiw	r26, 0x08	; 8
     690:	2d 91       	ld	r18, X+
     692:	3c 91       	ld	r19, X
     694:	19 97       	sbiw	r26, 0x09	; 9
     696:	82 17       	cp	r24, r18
     698:	93 07       	cpc	r25, r19
     69a:	c8 f4       	brcc	.+50     	; 0x6ce <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     69c:	20 91 ec 20 	lds	r18, 0x20EC
     6a0:	22 23       	and	r18, r18
     6a2:	21 f0       	breq	.+8      	; 0x6ac <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     6a4:	86 81       	ldd	r24, Z+6	; 0x06
     6a6:	81 60       	ori	r24, 0x01	; 1
     6a8:	86 83       	std	Z+6, r24	; 0x06
     6aa:	4b c0       	rjmp	.+150    	; 0x742 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     6ac:	16 96       	adiw	r26, 0x06	; 6
     6ae:	2d 91       	ld	r18, X+
     6b0:	3c 91       	ld	r19, X
     6b2:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     6b4:	ac 01       	movw	r20, r24
     6b6:	4f 5f       	subi	r20, 0xFF	; 255
     6b8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ba:	40 93 ea 20 	sts	0x20EA, r20
     6be:	50 93 eb 20 	sts	0x20EB, r21
     6c2:	d9 01       	movw	r26, r18
     6c4:	a8 0f       	add	r26, r24
     6c6:	b9 1f       	adc	r27, r25
     6c8:	8c 91       	ld	r24, X
     6ca:	87 83       	std	Z+7, r24	; 0x07
     6cc:	3a c0       	rjmp	.+116    	; 0x742 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     6d2:	10 92 ee 20 	sts	0x20EE, r1
     6d6:	35 c0       	rjmp	.+106    	; 0x742 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     6d8:	88 23       	and	r24, r24
     6da:	84 f5       	brge	.+96     	; 0x73c <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     6dc:	a4 ee       	ldi	r26, 0xE4	; 228
     6de:	b0 e2       	ldi	r27, 0x20	; 32
     6e0:	12 96       	adiw	r26, 0x02	; 2
     6e2:	cd 91       	ld	r28, X+
     6e4:	dc 91       	ld	r29, X
     6e6:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     6e8:	16 96       	adiw	r26, 0x06	; 6
     6ea:	8d 91       	ld	r24, X+
     6ec:	9c 91       	ld	r25, X
     6ee:	17 97       	sbiw	r26, 0x07	; 7
     6f0:	28 85       	ldd	r18, Y+8	; 0x08
     6f2:	39 85       	ldd	r19, Y+9	; 0x09
     6f4:	82 17       	cp	r24, r18
     6f6:	93 07       	cpc	r25, r19
     6f8:	d8 f4       	brcc	.+54     	; 0x730 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     6fa:	6e 81       	ldd	r22, Y+6	; 0x06
     6fc:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     6fe:	9c 01       	movw	r18, r24
     700:	2f 5f       	subi	r18, 0xFF	; 255
     702:	3f 4f       	sbci	r19, 0xFF	; 255
     704:	20 93 ea 20 	sts	0x20EA, r18
     708:	30 93 eb 20 	sts	0x20EB, r19
     70c:	47 81       	ldd	r20, Z+7	; 0x07
     70e:	db 01       	movw	r26, r22
     710:	a8 0f       	add	r26, r24
     712:	b9 1f       	adc	r27, r25
     714:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     716:	88 85       	ldd	r24, Y+8	; 0x08
     718:	99 85       	ldd	r25, Y+9	; 0x09
     71a:	28 17       	cp	r18, r24
     71c:	39 07       	cpc	r19, r25
     71e:	18 f4       	brcc	.+6      	; 0x726 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	83 83       	std	Z+3, r24	; 0x03
     724:	0e c0       	rjmp	.+28     	; 0x742 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     726:	87 e0       	ldi	r24, 0x07	; 7
     728:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     72a:	10 92 ee 20 	sts	0x20EE, r1
     72e:	09 c0       	rjmp	.+18     	; 0x742 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     734:	89 ef       	ldi	r24, 0xF9	; 249
     736:	80 93 ee 20 	sts	0x20EE, r24
     73a:	03 c0       	rjmp	.+6      	; 0x742 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     73c:	8b ef       	ldi	r24, 0xFB	; 251
     73e:	80 93 ee 20 	sts	0x20EE, r24
	}
}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     748:	1f 92       	push	r1
     74a:	0f 92       	push	r0
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
     752:	08 b6       	in	r0, 0x38	; 56
     754:	0f 92       	push	r0
     756:	18 be       	out	0x38, r1	; 56
     758:	09 b6       	in	r0, 0x39	; 57
     75a:	0f 92       	push	r0
     75c:	19 be       	out	0x39, r1	; 57
     75e:	0b b6       	in	r0, 0x3b	; 59
     760:	0f 92       	push	r0
     762:	1b be       	out	0x3b, r1	; 59
     764:	2f 93       	push	r18
     766:	3f 93       	push	r19
     768:	4f 93       	push	r20
     76a:	5f 93       	push	r21
     76c:	6f 93       	push	r22
     76e:	7f 93       	push	r23
     770:	8f 93       	push	r24
     772:	9f 93       	push	r25
     774:	af 93       	push	r26
     776:	bf 93       	push	r27
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31
     77c:	4e df       	rcall	.-356    	; 0x61a <twim_interrupt_handler>
     77e:	ff 91       	pop	r31
     780:	ef 91       	pop	r30
     782:	bf 91       	pop	r27
     784:	af 91       	pop	r26
     786:	9f 91       	pop	r25
     788:	8f 91       	pop	r24
     78a:	7f 91       	pop	r23
     78c:	6f 91       	pop	r22
     78e:	5f 91       	pop	r21
     790:	4f 91       	pop	r20
     792:	3f 91       	pop	r19
     794:	2f 91       	pop	r18
     796:	0f 90       	pop	r0
     798:	0b be       	out	0x3b, r0	; 59
     79a:	0f 90       	pop	r0
     79c:	09 be       	out	0x39, r0	; 57
     79e:	0f 90       	pop	r0
     7a0:	08 be       	out	0x38, r0	; 56
     7a2:	0f 90       	pop	r0
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	11 24       	eor	r1, r1
     7b6:	08 b6       	in	r0, 0x38	; 56
     7b8:	0f 92       	push	r0
     7ba:	18 be       	out	0x38, r1	; 56
     7bc:	09 b6       	in	r0, 0x39	; 57
     7be:	0f 92       	push	r0
     7c0:	19 be       	out	0x39, r1	; 57
     7c2:	0b b6       	in	r0, 0x3b	; 59
     7c4:	0f 92       	push	r0
     7c6:	1b be       	out	0x3b, r1	; 59
     7c8:	2f 93       	push	r18
     7ca:	3f 93       	push	r19
     7cc:	4f 93       	push	r20
     7ce:	5f 93       	push	r21
     7d0:	6f 93       	push	r22
     7d2:	7f 93       	push	r23
     7d4:	8f 93       	push	r24
     7d6:	9f 93       	push	r25
     7d8:	af 93       	push	r26
     7da:	bf 93       	push	r27
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31
     7e0:	1c df       	rcall	.-456    	; 0x61a <twim_interrupt_handler>
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	0b be       	out	0x3b, r0	; 59
     7fe:	0f 90       	pop	r0
     800:	09 be       	out	0x39, r0	; 57
     802:	0f 90       	pop	r0
     804:	08 be       	out	0x38, r0	; 56
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	08 b6       	in	r0, 0x38	; 56
     81c:	0f 92       	push	r0
     81e:	18 be       	out	0x38, r1	; 56
     820:	09 b6       	in	r0, 0x39	; 57
     822:	0f 92       	push	r0
     824:	19 be       	out	0x39, r1	; 57
     826:	0b b6       	in	r0, 0x3b	; 59
     828:	0f 92       	push	r0
     82a:	1b be       	out	0x3b, r1	; 59
     82c:	2f 93       	push	r18
     82e:	3f 93       	push	r19
     830:	4f 93       	push	r20
     832:	5f 93       	push	r21
     834:	6f 93       	push	r22
     836:	7f 93       	push	r23
     838:	8f 93       	push	r24
     83a:	9f 93       	push	r25
     83c:	af 93       	push	r26
     83e:	bf 93       	push	r27
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31
     844:	ea de       	rcall	.-556    	; 0x61a <twim_interrupt_handler>
     846:	ff 91       	pop	r31
     848:	ef 91       	pop	r30
     84a:	bf 91       	pop	r27
     84c:	af 91       	pop	r26
     84e:	9f 91       	pop	r25
     850:	8f 91       	pop	r24
     852:	7f 91       	pop	r23
     854:	6f 91       	pop	r22
     856:	5f 91       	pop	r21
     858:	4f 91       	pop	r20
     85a:	3f 91       	pop	r19
     85c:	2f 91       	pop	r18
     85e:	0f 90       	pop	r0
     860:	0b be       	out	0x3b, r0	; 59
     862:	0f 90       	pop	r0
     864:	09 be       	out	0x39, r0	; 57
     866:	0f 90       	pop	r0
     868:	08 be       	out	0x38, r0	; 56
     86a:	0f 90       	pop	r0
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	0f 90       	pop	r0
     870:	1f 90       	pop	r1
     872:	18 95       	reti

00000874 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     874:	1f 92       	push	r1
     876:	0f 92       	push	r0
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	0f 92       	push	r0
     87c:	11 24       	eor	r1, r1
     87e:	08 b6       	in	r0, 0x38	; 56
     880:	0f 92       	push	r0
     882:	18 be       	out	0x38, r1	; 56
     884:	09 b6       	in	r0, 0x39	; 57
     886:	0f 92       	push	r0
     888:	19 be       	out	0x39, r1	; 57
     88a:	0b b6       	in	r0, 0x3b	; 59
     88c:	0f 92       	push	r0
     88e:	1b be       	out	0x3b, r1	; 59
     890:	2f 93       	push	r18
     892:	3f 93       	push	r19
     894:	4f 93       	push	r20
     896:	5f 93       	push	r21
     898:	6f 93       	push	r22
     89a:	7f 93       	push	r23
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
     8a0:	af 93       	push	r26
     8a2:	bf 93       	push	r27
     8a4:	ef 93       	push	r30
     8a6:	ff 93       	push	r31
     8a8:	b8 de       	rcall	.-656    	; 0x61a <twim_interrupt_handler>
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0b be       	out	0x3b, r0	; 59
     8c6:	0f 90       	pop	r0
     8c8:	09 be       	out	0x39, r0	; 57
     8ca:	0f 90       	pop	r0
     8cc:	08 be       	out	0x38, r0	; 56
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <getAltitude>:
#include "driver/driver.h"
#include <math.h>
/*********************************************************************************/
							/* Altitude Methods */
/* Method that uses temperature and pressure w/ Hypsometric Equation. */
float getAltitude(float temperature, uint32_t inputpressure){
     8d8:	8f 92       	push	r8
     8da:	9f 92       	push	r9
     8dc:	af 92       	push	r10
     8de:	bf 92       	push	r11
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	4b 01       	movw	r8, r22
     8ea:	5c 01       	movw	r10, r24
	float pressure = (float)inputpressure;
     8ec:	ca 01       	movw	r24, r20
     8ee:	b9 01       	movw	r22, r18
     8f0:	0e 94 1d 12 	call	0x243a	; 0x243a <__floatunsisf>
     8f4:	9b 01       	movw	r18, r22
     8f6:	ac 01       	movw	r20, r24
	float R = 287;
	float g = 9.80665;
	float pconst = 101325;
	//printf("Temperature: %.2f\nPressure: %.2f\n",temperature,pressure);
	return (uint16_t)(((R * temperature)/g)*log(pconst/pressure)) * 3.28084; //return altitude in feet
     8f8:	60 e8       	ldi	r22, 0x80	; 128
     8fa:	76 ee       	ldi	r23, 0xE6	; 230
     8fc:	85 ec       	ldi	r24, 0xC5	; 197
     8fe:	97 e4       	ldi	r25, 0x47	; 71
     900:	0e 94 46 11 	call	0x228c	; 0x228c <__divsf3>
     904:	0e 94 fe 12 	call	0x25fc	; 0x25fc <log>
     908:	6b 01       	movw	r12, r22
     90a:	7c 01       	movw	r14, r24
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e8       	ldi	r19, 0x80	; 128
     910:	4f e8       	ldi	r20, 0x8F	; 143
     912:	53 e4       	ldi	r21, 0x43	; 67
     914:	c5 01       	movw	r24, r10
     916:	b4 01       	movw	r22, r8
     918:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3>
     91c:	2a e0       	ldi	r18, 0x0A	; 10
     91e:	38 ee       	ldi	r19, 0xE8	; 232
     920:	4c e1       	ldi	r20, 0x1C	; 28
     922:	51 e4       	ldi	r21, 0x41	; 65
     924:	0e 94 46 11 	call	0x228c	; 0x228c <__divsf3>
     928:	a7 01       	movw	r20, r14
     92a:	96 01       	movw	r18, r12
     92c:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3>
     930:	0e 94 ed 11 	call	0x23da	; 0x23da <__fixunssfsi>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 1d 12 	call	0x243a	; 0x243a <__floatunsisf>
     93c:	28 e4       	ldi	r18, 0x48	; 72
     93e:	39 ef       	ldi	r19, 0xF9	; 249
     940:	41 e5       	ldi	r20, 0x51	; 81
     942:	50 e4       	ldi	r21, 0x40	; 64
     944:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3>
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	08 95       	ret

0000095a <saveData>:
	
	usart_tx_enable(&USARTD0); //enable transmit (TX) pin for USART on Port D
	PORTD.DIR = 0b00000100; //input for pin 3
	usart_serial_init(&USARTD0,&usart_options); //initialize USART on port D from struct
}
void saveData(uint32_t timestamp, uint16_t alpha_geiger, uint16_t beta_geiger, uint16_t gamma_geiger, float altitude){ //this shit is justa complete guess right now lol
     95a:	4f 92       	push	r4
     95c:	5f 92       	push	r5
     95e:	6f 92       	push	r6
     960:	7f 92       	push	r7
     962:	8f 92       	push	r8
     964:	9f 92       	push	r9
     966:	af 92       	push	r10
     968:	bf 92       	push	r11
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	c4 56       	subi	r28, 0x64	; 100
     980:	d1 09       	sbc	r29, r1
     982:	cd bf       	out	0x3d, r28	; 61
     984:	de bf       	out	0x3e, r29	; 62
     986:	b6 2e       	mov	r11, r22
     988:	a7 2e       	mov	r10, r23
     98a:	98 2e       	mov	r9, r24
     98c:	89 2e       	mov	r8, r25
     98e:	74 2e       	mov	r7, r20
     990:	65 2e       	mov	r6, r21
     992:	52 2e       	mov	r5, r18
     994:	43 2e       	mov	r4, r19
     996:	c7 01       	movw	r24, r14
     998:	b6 01       	movw	r22, r12
	// From Daniel: 
	// using buffer(array) to store each series of readings as string characters (string longer than needed for safety)
	//printf("%i, %i, %i, %i, %.2f\n", timestamp, alpha_geiger, beta_geiger, gamma_geiger, altitude);
	uint8_t buffer[100] = {0};
     99a:	9e 01       	movw	r18, r28
     99c:	2f 5f       	subi	r18, 0xFF	; 255
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	79 01       	movw	r14, r18
     9a2:	24 e6       	ldi	r18, 0x64	; 100
     9a4:	f7 01       	movw	r30, r14
     9a6:	11 92       	st	Z+, r1
     9a8:	2a 95       	dec	r18
     9aa:	e9 f7       	brne	.-6      	; 0x9a6 <saveData+0x4c>

	//sprintf used because printf was already used?
	uint32_t fixedAlt = (uint32_t)(altitude*100);
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	48 ec       	ldi	r20, 0xC8	; 200
     9b2:	52 e4       	ldi	r21, 0x42	; 66
     9b4:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3>
     9b8:	0e 94 ed 11 	call	0x23da	; 0x23da <__fixunssfsi>
	sprintf(buffer, "%lu, %u, %u, %u, %lu\n", timestamp, alpha_geiger, beta_geiger, gamma_geiger, fixedAlt);
     9bc:	9f 93       	push	r25
     9be:	8f 93       	push	r24
     9c0:	7f 93       	push	r23
     9c2:	6f 93       	push	r22
     9c4:	1f 93       	push	r17
     9c6:	0f 93       	push	r16
     9c8:	4f 92       	push	r4
     9ca:	5f 92       	push	r5
     9cc:	6f 92       	push	r6
     9ce:	7f 92       	push	r7
     9d0:	8f 92       	push	r8
     9d2:	9f 92       	push	r9
     9d4:	af 92       	push	r10
     9d6:	bf 92       	push	r11
     9d8:	8d e0       	ldi	r24, 0x0D	; 13
     9da:	90 e2       	ldi	r25, 0x20	; 32
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	ff 92       	push	r15
     9e2:	ef 92       	push	r14
     9e4:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <sprintf>
	UART_Comms_Init();
     9e8:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <UART_Comms_Init>
	printf(buffer);
     9ec:	ff 92       	push	r15
     9ee:	ef 92       	push	r14
     9f0:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <printf>
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	de bf       	out	0x3e, r29	; 62
	//data_Init();
	//usart_serial_write_packet(&USARTF0, buffer,strlen(buffer));
     9f8:	cc 59       	subi	r28, 0x9C	; 156
     9fa:	df 4f       	sbci	r29, 0xFF	; 255
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	df 90       	pop	r13
     a0e:	cf 90       	pop	r12
     a10:	bf 90       	pop	r11
     a12:	af 90       	pop	r10
     a14:	9f 90       	pop	r9
     a16:	8f 90       	pop	r8
     a18:	7f 90       	pop	r7
     a1a:	6f 90       	pop	r6
     a1c:	5f 90       	pop	r5
     a1e:	4f 90       	pop	r4
     a20:	08 95       	ret

00000a22 <__vector_25>:
		readAlt[0]=48;
	}
}

ISR(USARTC0_RXC_vect)//Interrupt
{
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	08 b6       	in	r0, 0x38	; 56
     a2e:	0f 92       	push	r0
     a30:	18 be       	out	0x38, r1	; 56
     a32:	09 b6       	in	r0, 0x39	; 57
     a34:	0f 92       	push	r0
     a36:	19 be       	out	0x39, r1	; 57
     a38:	0b b6       	in	r0, 0x3b	; 59
     a3a:	0f 92       	push	r0
     a3c:	1b be       	out	0x3b, r1	; 59
     a3e:	2f 93       	push	r18
     a40:	3f 93       	push	r19
     a42:	4f 93       	push	r20
     a44:	5f 93       	push	r21
     a46:	6f 93       	push	r22
     a48:	7f 93       	push	r23
     a4a:	8f 93       	push	r24
     a4c:	9f 93       	push	r25
     a4e:	af 93       	push	r26
     a50:	bf 93       	push	r27
     a52:	ef 93       	push	r30
     a54:	ff 93       	push	r31
	StringRingWrite(gps, USARTC0.DATA);
     a56:	60 91 a0 08 	lds	r22, 0x08A0
     a5a:	80 91 ef 20 	lds	r24, 0x20EF
     a5e:	90 91 f0 20 	lds	r25, 0x20F0
     a62:	40 d0       	rcall	.+128    	; 0xae4 <StringRingWrite>
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0b be       	out	0x3b, r0	; 59
     a80:	0f 90       	pop	r0
     a82:	09 be       	out	0x39, r0	; 57
     a84:	0f 90       	pop	r0
     a86:	08 be       	out	0x38, r0	; 56
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti

00000a92 <StringRingSeekNextReadableString>:
}

// Makes current string fail the IsStringRingReadyForParse function, like marking an email as having been read
// Moves the tail to the next string if possible; returns whether or not it was successful
bool StringRingSeekNextReadableString(StringRing * const sr)
{
     a92:	fc 01       	movw	r30, r24
	*(sr->readTail) = '\0';
     a94:	a0 81       	ld	r26, Z
     a96:	b1 81       	ldd	r27, Z+1	; 0x01
     a98:	1c 92       	st	X, r1
	
	// explicitly deny this; where you can start reading a string that hasn't been finalized
	// if this happens enough you can probably lower the buffer size
	if(SR_TAIL_WILL_POINT_TO_HEAD)
     a9a:	20 81       	ld	r18, Z
     a9c:	31 81       	ldd	r19, Z+1	; 0x01
     a9e:	84 81       	ldd	r24, Z+4	; 0x04
     aa0:	a9 01       	movw	r20, r18
     aa2:	48 0f       	add	r20, r24
     aa4:	51 1d       	adc	r21, r1
     aa6:	63 81       	ldd	r22, Z+3	; 0x03
     aa8:	85 81       	ldd	r24, Z+5	; 0x05
     aaa:	96 81       	ldd	r25, Z+6	; 0x06
     aac:	86 1b       	sub	r24, r22
     aae:	91 09       	sbc	r25, r1
     ab0:	48 17       	cp	r20, r24
     ab2:	59 07       	cpc	r21, r25
     ab4:	99 f0       	breq	.+38     	; 0xadc <StringRingSeekNextReadableString+0x4a>
     ab6:	67 81       	ldd	r22, Z+7	; 0x07
     ab8:	70 85       	ldd	r23, Z+8	; 0x08
     aba:	26 17       	cp	r18, r22
     abc:	37 07       	cpc	r19, r23
     abe:	51 f4       	brne	.+20     	; 0xad4 <StringRingSeekNextReadableString+0x42>
     ac0:	9f 01       	movw	r18, r30
     ac2:	27 5f       	subi	r18, 0xF7	; 247
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	82 17       	cp	r24, r18
     ac8:	93 07       	cpc	r25, r19
     aca:	51 f0       	breq	.+20     	; 0xae0 <StringRingSeekNextReadableString+0x4e>
// Moves the tail to the next string
static inline void StringRingIncrementTail(StringRing * const sr)
{
	if(sr->readTail == SR_FINAL_STRING)
	{
		sr->readTail = SR_FIRST_STRING;
     acc:	20 83       	st	Z, r18
     ace:	31 83       	std	Z+1, r19	; 0x01
	{
		return false;
	}
	
	StringRingIncrementTail(sr);
	return true;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	08 95       	ret
	{
		sr->readTail = SR_FIRST_STRING;
	}
	else
	{
		sr->readTail = SR_NEXT_TAIL;
     ad4:	40 83       	st	Z, r20
     ad6:	51 83       	std	Z+1, r21	; 0x01
	{
		return false;
	}
	
	StringRingIncrementTail(sr);
	return true;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	08 95       	ret
	
	// explicitly deny this; where you can start reading a string that hasn't been finalized
	// if this happens enough you can probably lower the buffer size
	if(SR_TAIL_WILL_POINT_TO_HEAD)
	{
		return false;
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	08 95       	ret
     ae0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	StringRingIncrementTail(sr);
	return true;
}
     ae2:	08 95       	ret

00000ae4 <StringRingWrite>:
	*(sr->writeHead) = DATA;
	StringRingIncrementHead(sr);
}

void StringRingWrite(StringRing * const sr, const char DATA)
{
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	fc 01       	movw	r30, r24
	return DATA;
}
#else
static inline void StringRingPush(StringRing * const sr, const char DATA)
{
	*(sr->writeHead) = DATA;
     aea:	a5 81       	ldd	r26, Z+5	; 0x05
     aec:	b6 81       	ldd	r27, Z+6	; 0x06
     aee:	6c 93       	st	X, r22
}

// Moves the write head forward by 1 character
static inline void StringRingIncrementHead(StringRing * const sr)
{
	sr->headLen++;
     af0:	83 81       	ldd	r24, Z+3	; 0x03
     af2:	8f 5f       	subi	r24, 0xFF	; 255
     af4:	83 83       	std	Z+3, r24	; 0x03
	sr->writeHead++;
     af6:	a5 81       	ldd	r26, Z+5	; 0x05
     af8:	b6 81       	ldd	r27, Z+6	; 0x06
     afa:	cd 01       	movw	r24, r26
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	85 83       	std	Z+5, r24	; 0x05
     b00:	96 83       	std	Z+6, r25	; 0x06

void StringRingWrite(StringRing * const sr, const char DATA)
{
	StringRingPush(sr, DATA);

	if(DATA == '\n')
     b02:	6a 30       	cpi	r22, 0x0A	; 10
     b04:	09 f0       	breq	.+2      	; 0xb08 <StringRingWrite+0x24>
     b06:	64 c0       	rjmp	.+200    	; 0xbd0 <StringRingWrite+0xec>

// Moves the head to the next string
// Returns 0 if nothing is going to be clobbered, 1 if it clobbered something newer, or -1 if it clobbered something older
static inline int8_t StringRingMoveHeadToNextString(StringRing * const sr)
{
	*(sr->writeHead) = '\0';
     b08:	11 96       	adiw	r26, 0x01	; 1
     b0a:	1c 92       	st	X, r1

	if(SR_HEAD_WILL_CLOBBER_TAIL)
     b0c:	a5 81       	ldd	r26, Z+5	; 0x05
     b0e:	b6 81       	ldd	r27, Z+6	; 0x06
     b10:	23 81       	ldd	r18, Z+3	; 0x03
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	84 81       	ldd	r24, Z+4	; 0x04
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	82 1b       	sub	r24, r18
     b1a:	93 0b       	sbc	r25, r19
     b1c:	8a 0f       	add	r24, r26
     b1e:	9b 1f       	adc	r25, r27
     b20:	40 81       	ld	r20, Z
     b22:	51 81       	ldd	r21, Z+1	; 0x01
     b24:	84 17       	cp	r24, r20
     b26:	95 07       	cpc	r25, r21
     b28:	09 f4       	brne	.+2      	; 0xb2c <StringRingWrite+0x48>
     b2a:	4e c0       	rjmp	.+156    	; 0xbc8 <StringRingWrite+0xe4>
     b2c:	bf 01       	movw	r22, r30
     b2e:	67 5f       	subi	r22, 0xF7	; 247
     b30:	7f 4f       	sbci	r23, 0xFF	; 255
     b32:	46 17       	cp	r20, r22
     b34:	57 07       	cpc	r21, r23
     b36:	d1 f5       	brne	.+116    	; 0xbac <StringRingWrite+0xc8>
     b38:	c7 81       	ldd	r28, Z+7	; 0x07
     b3a:	d0 85       	ldd	r29, Z+8	; 0x08
     b3c:	ad 01       	movw	r20, r26
     b3e:	42 1b       	sub	r20, r18
     b40:	53 0b       	sbc	r21, r19
     b42:	c4 17       	cp	r28, r20
     b44:	d5 07       	cpc	r29, r21
     b46:	91 f5       	brne	.+100    	; 0xbac <StringRingWrite+0xc8>
	{
		if(sr->clobberOld)
     b48:	82 81       	ldd	r24, Z+2	; 0x02
     b4a:	88 23       	and	r24, r24
     b4c:	49 f1       	breq	.+82     	; 0xba0 <StringRingWrite+0xbc>
     b4e:	ef 01       	movw	r28, r30
		{
			StringRingSeekNextReadableString(sr); // push readtail forward a string
     b50:	cf 01       	movw	r24, r30
     b52:	9f df       	rcall	.-194    	; 0xa92 <StringRingSeekNextReadableString>
// Moves head to next valid position, based on configuration
static inline void StringRingPushHead(StringRing * const sr, const bool WILLCLOBBER)
{
	if(WILLCLOBBER)
	{
		if(sr->clobberOld)
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	88 23       	and	r24, r24
     b58:	d1 f0       	breq	.+52     	; 0xb8e <StringRingWrite+0xaa>
		{
			if(SR_CURRENT_HEAD >= SR_FINAL_STRING)
     b5a:	4d 81       	ldd	r20, Y+5	; 0x05
     b5c:	5e 81       	ldd	r21, Y+6	; 0x06
     b5e:	2b 81       	ldd	r18, Y+3	; 0x03
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	ca 01       	movw	r24, r20
     b64:	82 1b       	sub	r24, r18
     b66:	93 0b       	sbc	r25, r19
     b68:	6f 81       	ldd	r22, Y+7	; 0x07
     b6a:	78 85       	ldd	r23, Y+8	; 0x08
     b6c:	86 17       	cp	r24, r22
     b6e:	97 07       	cpc	r25, r23
     b70:	28 f0       	brcs	.+10     	; 0xb7c <StringRingWrite+0x98>
			{
				sr->writeHead = SR_FIRST_STRING;
     b72:	ce 01       	movw	r24, r28
     b74:	09 96       	adiw	r24, 0x09	; 9
     b76:	8d 83       	std	Y+5, r24	; 0x05
     b78:	9e 83       	std	Y+6, r25	; 0x06
     b7a:	10 c0       	rjmp	.+32     	; 0xb9c <StringRingWrite+0xb8>
			}
			else
			{
				sr->writeHead = SR_NEXT_HEAD;
     b7c:	8c 81       	ldd	r24, Y+4	; 0x04
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	82 1b       	sub	r24, r18
     b82:	93 0b       	sbc	r25, r19
     b84:	84 0f       	add	r24, r20
     b86:	95 1f       	adc	r25, r21
     b88:	8d 83       	std	Y+5, r24	; 0x05
     b8a:	9e 83       	std	Y+6, r25	; 0x06
     b8c:	07 c0       	rjmp	.+14     	; 0xb9c <StringRingWrite+0xb8>
			}
		}
		else
		{
			sr->writeHead = SR_CURRENT_HEAD;
     b8e:	2b 81       	ldd	r18, Y+3	; 0x03
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	82 1b       	sub	r24, r18
     b96:	91 09       	sbc	r25, r1
     b98:	8d 83       	std	Y+5, r24	; 0x05
     b9a:	9e 83       	std	Y+6, r25	; 0x06
		{
			sr->writeHead = SR_NEXT_HEAD;
		}
	}
	
	sr->headLen = 0;
     b9c:	1b 82       	std	Y+3, r1	; 0x03
     b9e:	18 c0       	rjmp	.+48     	; 0xbd0 <StringRingWrite+0xec>
				sr->writeHead = SR_NEXT_HEAD;
			}
		}
		else
		{
			sr->writeHead = SR_CURRENT_HEAD;
     ba0:	a2 1b       	sub	r26, r18
     ba2:	b3 0b       	sbc	r27, r19
     ba4:	a5 83       	std	Z+5, r26	; 0x05
     ba6:	b6 83       	std	Z+6, r27	; 0x06
		{
			sr->writeHead = SR_NEXT_HEAD;
		}
	}
	
	sr->headLen = 0;
     ba8:	13 82       	std	Z+3, r1	; 0x03
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <StringRingWrite+0xec>
			sr->writeHead = SR_CURRENT_HEAD;
		}
	}
	else
	{
		if(SR_CURRENT_HEAD >= SR_FINAL_STRING)
     bac:	a2 1b       	sub	r26, r18
     bae:	b3 0b       	sbc	r27, r19
     bb0:	27 81       	ldd	r18, Z+7	; 0x07
     bb2:	30 85       	ldd	r19, Z+8	; 0x08
     bb4:	a2 17       	cp	r26, r18
     bb6:	b3 07       	cpc	r27, r19
     bb8:	18 f0       	brcs	.+6      	; 0xbc0 <StringRingWrite+0xdc>
		{
			sr->writeHead = SR_FIRST_STRING;
     bba:	65 83       	std	Z+5, r22	; 0x05
     bbc:	76 83       	std	Z+6, r23	; 0x06
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <StringRingWrite+0xe0>
		}
		else
		{
			sr->writeHead = SR_NEXT_HEAD;
     bc0:	85 83       	std	Z+5, r24	; 0x05
     bc2:	96 83       	std	Z+6, r25	; 0x06
		}
	}
	
	sr->headLen = 0;
     bc4:	13 82       	std	Z+3, r1	; 0x03
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <StringRingWrite+0xec>
{
	*(sr->writeHead) = '\0';

	if(SR_HEAD_WILL_CLOBBER_TAIL)
	{
		if(sr->clobberOld)
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	88 23       	and	r24, r24
     bcc:	49 f3       	breq	.-46     	; 0xba0 <StringRingWrite+0xbc>
     bce:	bf cf       	rjmp	.-130    	; 0xb4e <StringRingWrite+0x6a>

	if(DATA == '\n')
	{
		StringRingMoveHeadToNextString(sr);
	}
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <spi_read>:
	SPIC.CTRL = 0b01010000; 
	calibrate_pressure();
 }
uint8_t spi_read(void)
 {
	SPIC.DATA = 0xFF; //Set data to known value
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	80 93 c3 08 	sts	0x08C3, r24
	while(!(SPIC.STATUS>>7)); //Wait until new data has been read in
     bdc:	e0 ec       	ldi	r30, 0xC0	; 192
     bde:	f8 e0       	ldi	r31, 0x08	; 8
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	88 23       	and	r24, r24
     be4:	ec f7       	brge	.-6      	; 0xbe0 <spi_read+0xa>
	return SPIC.DATA; //return the data
     be6:	80 91 c3 08 	lds	r24, 0x08C3
 }
     bea:	08 95       	ret

00000bec <spi_write>:
void spi_write(uint8_t data)
 {
	 SPIC.DATA = data; //Take data from function and write it into data
     bec:	80 93 c3 08 	sts	0x08C3, r24
	 while(!(SPIC.STATUS>>7)); //wait until done sending data
     bf0:	e0 ec       	ldi	r30, 0xC0	; 192
     bf2:	f8 e0       	ldi	r31, 0x08	; 8
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	88 23       	and	r24, r24
     bf8:	ec f7       	brge	.-6      	; 0xbf4 <spi_write+0x8>
 }
     bfa:	08 95       	ret

00000bfc <spi_select>:
void spi_select(void)
{
	PORTC.OUT &= 0b11101111;
     bfc:	e0 e4       	ldi	r30, 0x40	; 64
     bfe:	f6 e0       	ldi	r31, 0x06	; 6
     c00:	84 81       	ldd	r24, Z+4	; 0x04
     c02:	8f 7e       	andi	r24, 0xEF	; 239
     c04:	84 83       	std	Z+4, r24	; 0x04
     c06:	08 95       	ret

00000c08 <spi_deselect>:
}
void spi_deselect(void)
{
	PORTC.OUT |= 0b00010000;
     c08:	e0 e4       	ldi	r30, 0x40	; 64
     c0a:	f6 e0       	ldi	r31, 0x06	; 6
     c0c:	84 81       	ldd	r24, Z+4	; 0x04
     c0e:	80 61       	ori	r24, 0x10	; 16
     c10:	84 83       	std	Z+4, r24	; 0x04
     c12:	08 95       	ret

00000c14 <getPressure>:
 uint16_t cal_pres_c5;
 uint16_t cal_pres_c6;
  

 int32_t getPressure(void)
 {
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	00 d0       	rcall	.+0      	; 0xc3a <getPressure+0x26>
     c3a:	1f 92       	push	r1
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
	 
	
	 //OSR:4096
	 //get D1:
	
	spi_select(); //select the spi device
     c40:	dd df       	rcall	.-70     	; 0xbfc <spi_select>
	spi_write(0b1001000); //write to the spi device. using OSR 4096
     c42:	88 e4       	ldi	r24, 0x48	; 72
     c44:	d3 df       	rcall	.-90     	; 0xbec <spi_write>
	spi_deselect(); //Deselect the device
     c46:	e0 df       	rcall	.-64     	; 0xc08 <spi_deselect>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	85 35       	cpi	r24, 0x55	; 85
     c50:	20 ed       	ldi	r18, 0xD0	; 208
     c52:	92 07       	cpc	r25, r18
     c54:	d9 f7       	brne	.-10     	; 0xc4c <getPressure+0x38>
	delay_ms(10);
	
	
	
	spi_select();
     c56:	d2 df       	rcall	.-92     	; 0xbfc <spi_select>
	spi_write(0b0000000); //Just resets some stuff
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	c8 df       	rcall	.-112    	; 0xbec <spi_write>
	uint32_t D1 = ((uint32_t)spi_read())<<16; //Type cast to 16 bit data, then bit shift to left 8 places
     c5c:	bc df       	rcall	.-136    	; 0xbd6 <spi_read>
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	7c 01       	movw	r14, r24
     c66:	dd 24       	eor	r13, r13
     c68:	cc 24       	eor	r12, r12
	D1 += ((uint32_t)spi_read())<<8; //Type cast to 16 bit data and add to the lower 8 bits of the variable data
     c6a:	b5 df       	rcall	.-150    	; 0xbd6 <spi_read>
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	a0 e0       	ldi	r26, 0x00	; 0
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ba 2f       	mov	r27, r26
     c74:	a9 2f       	mov	r26, r25
     c76:	98 2f       	mov	r25, r24
     c78:	88 27       	eor	r24, r24
     c7a:	c8 0e       	add	r12, r24
     c7c:	d9 1e       	adc	r13, r25
     c7e:	ea 1e       	adc	r14, r26
     c80:	fb 1e       	adc	r15, r27
	D1 += ((uint32_t)spi_read());
     c82:	a9 df       	rcall	.-174    	; 0xbd6 <spi_read>
     c84:	c8 0e       	add	r12, r24
     c86:	d1 1c       	adc	r13, r1
     c88:	e1 1c       	adc	r14, r1
     c8a:	f1 1c       	adc	r15, r1
	spi_deselect();
     c8c:	bd df       	rcall	.-134    	; 0xc08 <spi_deselect>
	
	printf("THING %" PRIu32"\n", D1);
     c8e:	ff 92       	push	r15
     c90:	ef 92       	push	r14
     c92:	df 92       	push	r13
     c94:	cf 92       	push	r12
     c96:	83 e2       	ldi	r24, 0x23	; 35
     c98:	90 e2       	ldi	r25, 0x20	; 32
     c9a:	9f 93       	push	r25
     c9c:	8f 93       	push	r24
     c9e:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <printf>
	
	//get D2:
	uint32_t D2; //declare variable to store digital temp value
	spi_select();
     ca2:	ac df       	rcall	.-168    	; 0xbfc <spi_select>
	spi_write(0x58);
     ca4:	88 e5       	ldi	r24, 0x58	; 88
     ca6:	a2 df       	rcall	.-188    	; 0xbec <spi_write>
	spi_deselect();
     ca8:	af df       	rcall	.-162    	; 0xc08 <spi_deselect>
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	85 35       	cpi	r24, 0x55	; 85
     cbe:	30 ed       	ldi	r19, 0xD0	; 208
     cc0:	93 07       	cpc	r25, r19
     cc2:	d9 f7       	brne	.-10     	; 0xcba <getPressure+0xa6>
	delay_ms(10);
	spi_select();
     cc4:	9b df       	rcall	.-202    	; 0xbfc <spi_select>
	spi_write(0x00);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	91 df       	rcall	.-222    	; 0xbec <spi_write>
	D2 = ((uint32_t)spi_read()<<16);
     cca:	85 df       	rcall	.-246    	; 0xbd6 <spi_read>
     ccc:	48 2e       	mov	r4, r24
     cce:	51 2c       	mov	r5, r1
     cd0:	61 2c       	mov	r6, r1
     cd2:	71 2c       	mov	r7, r1
     cd4:	32 01       	movw	r6, r4
     cd6:	55 24       	eor	r5, r5
     cd8:	44 24       	eor	r4, r4
	D2+=((uint32_t)spi_read()<<8);
     cda:	7d df       	rcall	.-262    	; 0xbd6 <spi_read>
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	ba 2f       	mov	r27, r26
     ce4:	a9 2f       	mov	r26, r25
     ce6:	98 2f       	mov	r25, r24
     ce8:	88 27       	eor	r24, r24
     cea:	48 0e       	add	r4, r24
     cec:	59 1e       	adc	r5, r25
     cee:	6a 1e       	adc	r6, r26
     cf0:	7b 1e       	adc	r7, r27
	D2 += ((uint32_t)spi_read());
     cf2:	71 df       	rcall	.-286    	; 0xbd6 <spi_read>
     cf4:	48 0e       	add	r4, r24
     cf6:	51 1c       	adc	r5, r1
     cf8:	61 1c       	adc	r6, r1
     cfa:	71 1c       	adc	r7, r1
	spi_deselect();
     cfc:	85 df       	rcall	.-246    	; 0xc08 <spi_deselect>
	
	printf("THING2 %" PRIu32"\n", D2);
     cfe:	7f 92       	push	r7
     d00:	6f 92       	push	r6
     d02:	5f 92       	push	r5
     d04:	4f 92       	push	r4
     d06:	8e e2       	ldi	r24, 0x2E	; 46
     d08:	90 e2       	ldi	r25, 0x20	; 32
     d0a:	9f 93       	push	r25
     d0c:	8f 93       	push	r24
     d0e:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <printf>
	int32_t dT = D2 - (cal_pres_c5 * pow(2,8));
     d12:	c3 01       	movw	r24, r6
     d14:	b2 01       	movw	r22, r4
     d16:	0e 94 1d 12 	call	0x243a	; 0x243a <__floatunsisf>
     d1a:	2b 01       	movw	r4, r22
     d1c:	3c 01       	movw	r6, r24
     d1e:	80 91 fe 20 	lds	r24, 0x20FE
     d22:	90 91 ff 20 	lds	r25, 0x20FF
     d26:	bc 01       	movw	r22, r24
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 1d 12 	call	0x243a	; 0x243a <__floatunsisf>
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e8       	ldi	r20, 0x80	; 128
     d36:	53 e4       	ldi	r21, 0x43	; 67
     d38:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3>
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	c3 01       	movw	r24, r6
     d42:	b2 01       	movw	r22, r4
     d44:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__subsf3>
     d48:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fixsfsi>
     d4c:	6c 83       	std	Y+4, r22	; 0x04
     d4e:	7b 83       	std	Y+3, r23	; 0x03
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	9a 83       	std	Y+2, r25	; 0x02
	printf("TEMP %" PRIu32 "\n", dT);
     d54:	9f 93       	push	r25
     d56:	8f 93       	push	r24
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	8f 93       	push	r24
     d5c:	ec 81       	ldd	r30, Y+4	; 0x04
     d5e:	ef 93       	push	r30
     d60:	8a e3       	ldi	r24, 0x3A	; 58
     d62:	90 e2       	ldi	r25, 0x20	; 32
     d64:	9f 93       	push	r25
     d66:	8f 93       	push	r24
     d68:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <printf>
	int32_t temp = 2000 + (dT * (cal_pres_c6/pow(2,23)));
	//printf("TEMP %" PRIu32 "\n", temp);
	int64_t OFF = (cal_pres_c2 * pow(2,17)) + ((cal_pres_c4*dT)/pow(2,6));
	int64_t sens = (cal_pres_c1*pow(2, 16)) + ((cal_pres_c3*dT)/pow(2,7));
	int32_t Pressure = ((D1*sens/pow(2,21))-OFF)/pow(2,15);
     d6c:	16 01       	movw	r2, r12
     d6e:	27 01       	movw	r4, r14
	int32_t dT = D2 - (cal_pres_c5 * pow(2,8));
	printf("TEMP %" PRIu32 "\n", dT);
	int32_t temp = 2000 + (dT * (cal_pres_c6/pow(2,23)));
	//printf("TEMP %" PRIu32 "\n", temp);
	int64_t OFF = (cal_pres_c2 * pow(2,17)) + ((cal_pres_c4*dT)/pow(2,6));
	int64_t sens = (cal_pres_c1*pow(2, 16)) + ((cal_pres_c3*dT)/pow(2,7));
     d70:	60 91 02 21 	lds	r22, 0x2102
     d74:	70 91 03 21 	lds	r23, 0x2103
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 1d 12 	call	0x243a	; 0x243a <__floatunsisf>
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	57 e4       	ldi	r21, 0x47	; 71
     d88:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3>
     d8c:	6b 01       	movw	r12, r22
     d8e:	7c 01       	movw	r14, r24
     d90:	a0 91 00 21 	lds	r26, 0x2100
     d94:	b0 91 01 21 	lds	r27, 0x2101
     d98:	2c 81       	ldd	r18, Y+4	; 0x04
     d9a:	3b 81       	ldd	r19, Y+3	; 0x03
     d9c:	49 81       	ldd	r20, Y+1	; 0x01
     d9e:	5a 81       	ldd	r21, Y+2	; 0x02
     da0:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__muluhisi3>
     da4:	0e 94 1f 12 	call	0x243e	; 0x243e <__floatsisf>
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	5c e3       	ldi	r21, 0x3C	; 60
     db0:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3>
     db4:	9b 01       	movw	r18, r22
     db6:	ac 01       	movw	r20, r24
     db8:	c7 01       	movw	r24, r14
     dba:	b6 01       	movw	r22, r12
     dbc:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__addsf3>
     dc0:	0e 94 ae 11 	call	0x235c	; 0x235c <__fixsfdi>
	int32_t Pressure = ((D1*sens/pow(2,21))-OFF)/pow(2,15);
     dc4:	a2 2e       	mov	r10, r18
     dc6:	b3 2e       	mov	r11, r19
     dc8:	c4 2e       	mov	r12, r20
     dca:	d5 2e       	mov	r13, r21
     dcc:	e6 2e       	mov	r14, r22
     dce:	f7 2e       	mov	r15, r23
     dd0:	08 2f       	mov	r16, r24
     dd2:	19 2f       	mov	r17, r25
     dd4:	22 2d       	mov	r18, r2
     dd6:	33 2d       	mov	r19, r3
     dd8:	44 2d       	mov	r20, r4
     dda:	55 2d       	mov	r21, r5
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 00 14 	call	0x2800	; 0x2800 <__muldi3>
     de8:	0e 94 19 12 	call	0x2432	; 0x2432 <__floatdisf>
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	55 e3       	ldi	r21, 0x35	; 53
     df4:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3>
     df8:	6b 01       	movw	r12, r22
     dfa:	7c 01       	movw	r14, r24
	printf("THING2 %" PRIu32"\n", D2);
	int32_t dT = D2 - (cal_pres_c5 * pow(2,8));
	printf("TEMP %" PRIu32 "\n", dT);
	int32_t temp = 2000 + (dT * (cal_pres_c6/pow(2,23)));
	//printf("TEMP %" PRIu32 "\n", temp);
	int64_t OFF = (cal_pres_c2 * pow(2,17)) + ((cal_pres_c4*dT)/pow(2,6));
     dfc:	80 91 06 21 	lds	r24, 0x2106
     e00:	90 91 07 21 	lds	r25, 0x2107
     e04:	bc 01       	movw	r22, r24
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 1d 12 	call	0x243a	; 0x243a <__floatunsisf>
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	58 e4       	ldi	r21, 0x48	; 72
     e16:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3>
     e1a:	2b 01       	movw	r4, r22
     e1c:	3c 01       	movw	r6, r24
     e1e:	a0 91 04 21 	lds	r26, 0x2104
     e22:	b0 91 05 21 	lds	r27, 0x2105
     e26:	2c 81       	ldd	r18, Y+4	; 0x04
     e28:	3b 81       	ldd	r19, Y+3	; 0x03
     e2a:	49 81       	ldd	r20, Y+1	; 0x01
     e2c:	5a 81       	ldd	r21, Y+2	; 0x02
     e2e:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__muluhisi3>
     e32:	0e 94 1f 12 	call	0x243e	; 0x243e <__floatsisf>
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 e8       	ldi	r20, 0x80	; 128
     e3c:	5c e3       	ldi	r21, 0x3C	; 60
     e3e:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3>
     e42:	9b 01       	movw	r18, r22
     e44:	ac 01       	movw	r20, r24
     e46:	c3 01       	movw	r24, r6
     e48:	b2 01       	movw	r22, r4
     e4a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__addsf3>
     e4e:	0e 94 ae 11 	call	0x235c	; 0x235c <__fixsfdi>
	int64_t sens = (cal_pres_c1*pow(2, 16)) + ((cal_pres_c3*dT)/pow(2,7));
	int32_t Pressure = ((D1*sens/pow(2,21))-OFF)/pow(2,15);
     e52:	0e 94 19 12 	call	0x2432	; 0x2432 <__floatdisf>
     e56:	9b 01       	movw	r18, r22
     e58:	ac 01       	movw	r20, r24
     e5a:	c7 01       	movw	r24, r14
     e5c:	b6 01       	movw	r22, r12
     e5e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__subsf3>
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	58 e3       	ldi	r21, 0x38	; 56
     e6a:	0e 94 3e 13 	call	0x267c	; 0x267c <__mulsf3>
     e6e:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fixsfsi>
	return Pressure;
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	de bf       	out	0x3e, r29	; 62
	
	
 }
     e76:	24 96       	adiw	r28, 0x04	; 4
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	bf 90       	pop	r11
     e8e:	af 90       	pop	r10
     e90:	9f 90       	pop	r9
     e92:	8f 90       	pop	r8
     e94:	7f 90       	pop	r7
     e96:	6f 90       	pop	r6
     e98:	5f 90       	pop	r5
     e9a:	4f 90       	pop	r4
     e9c:	3f 90       	pop	r3
     e9e:	2f 90       	pop	r2
     ea0:	08 95       	ret

00000ea2 <calibrate_pressure>:
 void calibrate_pressure(void)
 {
	 printf("First\n");
     ea2:	84 e4       	ldi	r24, 0x44	; 68
     ea4:	90 e2       	ldi	r25, 0x20	; 32
     ea6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <puts>
	//every time you do set up, read from PROM
	//calibrate c1:
	spi_select();
     eaa:	a8 de       	rcall	.-688    	; 0xbfc <spi_select>
	spi_write(0b10100010);
     eac:	82 ea       	ldi	r24, 0xA2	; 162
     eae:	9e de       	rcall	.-708    	; 0xbec <spi_write>
	cal_pres_c1 = ((uint16_t)spi_read()<<8);
     eb0:	92 de       	rcall	.-732    	; 0xbd6 <spi_read>
     eb2:	10 92 02 21 	sts	0x2102, r1
     eb6:	80 93 03 21 	sts	0x2103, r24
	cal_pres_c1 += ((uint16_t)spi_read());
     eba:	8d de       	rcall	.-742    	; 0xbd6 <spi_read>
     ebc:	20 91 02 21 	lds	r18, 0x2102
     ec0:	30 91 03 21 	lds	r19, 0x2103
     ec4:	28 0f       	add	r18, r24
     ec6:	31 1d       	adc	r19, r1
     ec8:	20 93 02 21 	sts	0x2102, r18
     ecc:	30 93 03 21 	sts	0x2103, r19
	spi_deselect();
     ed0:	9b de       	rcall	.-714    	; 0xc08 <spi_deselect>
	printf("c1: %lu\n",cal_pres_c1);
     ed2:	80 91 03 21 	lds	r24, 0x2103
     ed6:	8f 93       	push	r24
     ed8:	80 91 02 21 	lds	r24, 0x2102
     edc:	8f 93       	push	r24
     ede:	8a e4       	ldi	r24, 0x4A	; 74
     ee0:	90 e2       	ldi	r25, 0x20	; 32
     ee2:	9f 93       	push	r25
     ee4:	8f 93       	push	r24
     ee6:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <printf>
	//calibrate c2:
	spi_select();
     eea:	88 de       	rcall	.-752    	; 0xbfc <spi_select>
	spi_write(0b10100100);
     eec:	84 ea       	ldi	r24, 0xA4	; 164
     eee:	7e de       	rcall	.-772    	; 0xbec <spi_write>
	cal_pres_c2 = ((uint16_t)spi_read()<<8);
     ef0:	72 de       	rcall	.-796    	; 0xbd6 <spi_read>
     ef2:	10 92 06 21 	sts	0x2106, r1
     ef6:	80 93 07 21 	sts	0x2107, r24
	cal_pres_c2 += ((uint16_t)spi_read());
     efa:	6d de       	rcall	.-806    	; 0xbd6 <spi_read>
     efc:	20 91 06 21 	lds	r18, 0x2106
     f00:	30 91 07 21 	lds	r19, 0x2107
     f04:	28 0f       	add	r18, r24
     f06:	31 1d       	adc	r19, r1
     f08:	20 93 06 21 	sts	0x2106, r18
     f0c:	30 93 07 21 	sts	0x2107, r19
	spi_deselect();
     f10:	7b de       	rcall	.-778    	; 0xc08 <spi_deselect>
	printf("c2: %lu \n",cal_pres_c2);
     f12:	80 91 07 21 	lds	r24, 0x2107
     f16:	8f 93       	push	r24
     f18:	80 91 06 21 	lds	r24, 0x2106
     f1c:	8f 93       	push	r24
     f1e:	83 e5       	ldi	r24, 0x53	; 83
     f20:	90 e2       	ldi	r25, 0x20	; 32
     f22:	9f 93       	push	r25
     f24:	8f 93       	push	r24
     f26:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <printf>
	
	//calibrate c3:
	spi_select();
     f2a:	68 de       	rcall	.-816    	; 0xbfc <spi_select>
	spi_write(0b10100110);
     f2c:	86 ea       	ldi	r24, 0xA6	; 166
     f2e:	5e de       	rcall	.-836    	; 0xbec <spi_write>
	cal_pres_c3 = ((uint16_t)spi_read()<<8);
     f30:	52 de       	rcall	.-860    	; 0xbd6 <spi_read>
     f32:	10 92 00 21 	sts	0x2100, r1
     f36:	80 93 01 21 	sts	0x2101, r24
	cal_pres_c3 += ((uint16_t)spi_read());
     f3a:	4d de       	rcall	.-870    	; 0xbd6 <spi_read>
     f3c:	20 91 00 21 	lds	r18, 0x2100
     f40:	30 91 01 21 	lds	r19, 0x2101
     f44:	28 0f       	add	r18, r24
     f46:	31 1d       	adc	r19, r1
     f48:	20 93 00 21 	sts	0x2100, r18
     f4c:	30 93 01 21 	sts	0x2101, r19
	spi_deselect();
     f50:	5b de       	rcall	.-842    	; 0xc08 <spi_deselect>
	printf("c3: %lu \n",cal_pres_c3);
     f52:	80 91 01 21 	lds	r24, 0x2101
     f56:	8f 93       	push	r24
     f58:	80 91 00 21 	lds	r24, 0x2100
     f5c:	8f 93       	push	r24
     f5e:	8d e5       	ldi	r24, 0x5D	; 93
     f60:	90 e2       	ldi	r25, 0x20	; 32
     f62:	9f 93       	push	r25
     f64:	8f 93       	push	r24
     f66:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <printf>
	
	//calibrate c4:
	spi_select();
     f6a:	48 de       	rcall	.-880    	; 0xbfc <spi_select>
	spi_write(0b10101000);
     f6c:	88 ea       	ldi	r24, 0xA8	; 168
     f6e:	3e de       	rcall	.-900    	; 0xbec <spi_write>
	cal_pres_c4 = ((uint16_t)spi_read()<<8);
     f70:	32 de       	rcall	.-924    	; 0xbd6 <spi_read>
     f72:	10 92 04 21 	sts	0x2104, r1
     f76:	80 93 05 21 	sts	0x2105, r24
	cal_pres_c4 += ((uint16_t)spi_read());
     f7a:	2d de       	rcall	.-934    	; 0xbd6 <spi_read>
     f7c:	20 91 04 21 	lds	r18, 0x2104
     f80:	30 91 05 21 	lds	r19, 0x2105
     f84:	28 0f       	add	r18, r24
     f86:	31 1d       	adc	r19, r1
     f88:	20 93 04 21 	sts	0x2104, r18
     f8c:	30 93 05 21 	sts	0x2105, r19
	spi_deselect();
     f90:	3b de       	rcall	.-906    	; 0xc08 <spi_deselect>
	printf("c4: %lu \n",cal_pres_c4);
     f92:	80 91 05 21 	lds	r24, 0x2105
     f96:	8f 93       	push	r24
     f98:	80 91 04 21 	lds	r24, 0x2104
     f9c:	8f 93       	push	r24
     f9e:	87 e6       	ldi	r24, 0x67	; 103
     fa0:	90 e2       	ldi	r25, 0x20	; 32
     fa2:	9f 93       	push	r25
     fa4:	8f 93       	push	r24
     fa6:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <printf>
	
	//calibrate c5:
	spi_select();
     faa:	28 de       	rcall	.-944    	; 0xbfc <spi_select>
	spi_write(0b10101010);
     fac:	8a ea       	ldi	r24, 0xAA	; 170
     fae:	1e de       	rcall	.-964    	; 0xbec <spi_write>
	cal_pres_c5 = ((uint16_t)spi_read()<<8);
     fb0:	12 de       	rcall	.-988    	; 0xbd6 <spi_read>
     fb2:	10 92 fe 20 	sts	0x20FE, r1
     fb6:	80 93 ff 20 	sts	0x20FF, r24
	cal_pres_c5 += ((uint16_t)spi_read());
     fba:	0d de       	rcall	.-998    	; 0xbd6 <spi_read>
     fbc:	20 91 fe 20 	lds	r18, 0x20FE
     fc0:	30 91 ff 20 	lds	r19, 0x20FF
     fc4:	28 0f       	add	r18, r24
     fc6:	31 1d       	adc	r19, r1
     fc8:	20 93 fe 20 	sts	0x20FE, r18
     fcc:	30 93 ff 20 	sts	0x20FF, r19
	spi_deselect();
     fd0:	1b de       	rcall	.-970    	; 0xc08 <spi_deselect>
	printf("c5: %lu \n",cal_pres_c5);
     fd2:	80 91 ff 20 	lds	r24, 0x20FF
     fd6:	8f 93       	push	r24
     fd8:	80 91 fe 20 	lds	r24, 0x20FE
     fdc:	8f 93       	push	r24
     fde:	81 e7       	ldi	r24, 0x71	; 113
     fe0:	90 e2       	ldi	r25, 0x20	; 32
     fe2:	9f 93       	push	r25
     fe4:	8f 93       	push	r24
     fe6:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <printf>
	
	//calibrate c6:
	spi_select();
     fea:	08 de       	rcall	.-1008   	; 0xbfc <spi_select>
	spi_write(0b10101100);
     fec:	8c ea       	ldi	r24, 0xAC	; 172
     fee:	fe dd       	rcall	.-1028   	; 0xbec <spi_write>
	cal_pres_c6 = ((uint16_t)spi_read()<<8);
     ff0:	f2 dd       	rcall	.-1052   	; 0xbd6 <spi_read>
     ff2:	10 92 08 21 	sts	0x2108, r1
     ff6:	80 93 09 21 	sts	0x2109, r24
	cal_pres_c6 += ((uint16_t)spi_read());
     ffa:	ed dd       	rcall	.-1062   	; 0xbd6 <spi_read>
     ffc:	20 91 08 21 	lds	r18, 0x2108
    1000:	30 91 09 21 	lds	r19, 0x2109
    1004:	28 0f       	add	r18, r24
    1006:	31 1d       	adc	r19, r1
    1008:	20 93 08 21 	sts	0x2108, r18
    100c:	30 93 09 21 	sts	0x2109, r19
	spi_deselect();
    1010:	fb dd       	rcall	.-1034   	; 0xc08 <spi_deselect>
	printf("c6: %lu \n ",cal_pres_c6);
    1012:	80 91 09 21 	lds	r24, 0x2109
    1016:	8f 93       	push	r24
    1018:	80 91 08 21 	lds	r24, 0x2108
    101c:	8f 93       	push	r24
    101e:	8b e7       	ldi	r24, 0x7B	; 123
    1020:	90 e2       	ldi	r25, 0x20	; 32
    1022:	9f 93       	push	r25
    1024:	8f 93       	push	r24
    1026:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <printf>
	printf("Cleared Var\n");
    102a:	86 e8       	ldi	r24, 0x86	; 134
    102c:	90 e2       	ldi	r25, 0x20	; 32
    102e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <puts>
    1032:	8d b7       	in	r24, 0x3d	; 61
    1034:	9e b7       	in	r25, 0x3e	; 62
    1036:	48 96       	adiw	r24, 0x18	; 24
    1038:	8d bf       	out	0x3d, r24	; 61
    103a:	9e bf       	out	0x3e, r25	; 62
    103c:	08 95       	ret

0000103e <spi_init>:
 }
 void spi_init(void)
 {
	PORTC.DIR |= 0b10110000;
    103e:	e0 e4       	ldi	r30, 0x40	; 64
    1040:	f6 e0       	ldi	r31, 0x06	; 6
    1042:	80 81       	ld	r24, Z
    1044:	80 6b       	ori	r24, 0xB0	; 176
    1046:	80 83       	st	Z, r24
	//PORTC.OUTSET = 0b10110000;
	PORTC.DIR &= 0b10111111;
    1048:	80 81       	ld	r24, Z
    104a:	8f 7b       	andi	r24, 0xBF	; 191
    104c:	80 83       	st	Z, r24
	SPIC.CTRL = 0b01010000; 
    104e:	80 e5       	ldi	r24, 0x50	; 80
    1050:	80 93 c0 08 	sts	0x08C0, r24
	calibrate_pressure();
    1054:	26 cf       	rjmp	.-436    	; 0xea2 <calibrate_pressure>
    1056:	08 95       	ret

00001058 <ADCinit>:
 */ 
#include "driver/driver.h"
#include <math.h>

 void ADCinit(void)
 {
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
	 ADCA.CTRLA = 0b00000010; //Enables the ADC
    1060:	c0 e0       	ldi	r28, 0x00	; 0
    1062:	d2 e0       	ldi	r29, 0x02	; 2
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	88 83       	st	Y, r24
	 ADCA.CTRLB = 0b00000000; //Sets ADC to unsigned int mode
    1068:	19 82       	std	Y+1, r1	; 0x01
	 ADCA.REFCTRL = 0b00010000; //Voltage reference of Vcc/1.6V
    106a:	80 e1       	ldi	r24, 0x10	; 16
    106c:	8a 83       	std	Y+2, r24	; 0x02
	 ADCA.PRESCALER = 0b00000101; //Automatic clock prescaler of 128
    106e:	85 e0       	ldi	r24, 0x05	; 5
    1070:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1072:	61 e2       	ldi	r22, 0x21	; 33
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	50 d3       	rcall	.+1696   	; 0x171a <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    107a:	08 2f       	mov	r16, r24
    107c:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    107e:	10 2f       	mov	r17, r16
    1080:	00 27       	eor	r16, r16
    1082:	60 e2       	ldi	r22, 0x20	; 32
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	48 d3       	rcall	.+1680   	; 0x171a <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    108a:	08 2b       	or	r16, r24
	 ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA); //gets calibration data about the ADC
    108c:	0c 87       	std	Y+12, r16	; 0x0c
    108e:	1d 87       	std	Y+13, r17	; 0x0d

	 ADCA.CH0.CTRL = 0b00000001; //sets ADC to single ended input
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	88 a3       	std	Y+32, r24	; 0x20
	 ADCA.CH0.MUXCTRL = 0b00000000;
    1094:	19 a2       	std	Y+33, r1	; 0x21
	 printf("Beyaw\n");
    1096:	82 e9       	ldi	r24, 0x92	; 146
    1098:	90 e2       	ldi	r25, 0x20	; 32
    109a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <puts>
 }
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <getTemperature>:
 
 float getTemperature(void)
 {
	printf("pee\n");
    10a8:	88 e9       	ldi	r24, 0x98	; 152
    10aa:	90 e2       	ldi	r25, 0x20	; 32
    10ac:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <puts>
	ADCA.CH0.CTRL |= 0b10000000; //Start conversion
    10b0:	e0 e0       	ldi	r30, 0x00	; 0
    10b2:	f2 e0       	ldi	r31, 0x02	; 2
    10b4:	80 a1       	ldd	r24, Z+32	; 0x20
    10b6:	80 68       	ori	r24, 0x80	; 128
    10b8:	80 a3       	std	Z+32, r24	; 0x20
	printf("gee\n");
    10ba:	8c e9       	ldi	r24, 0x9C	; 156
    10bc:	90 e2       	ldi	r25, 0x20	; 32
    10be:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <puts>
	
	while(ADCA.CH0.INTFLAGS == 0); //do nothing until conversion is done
    10c2:	e0 e0       	ldi	r30, 0x00	; 0
    10c4:	f2 e0       	ldi	r31, 0x02	; 2
    10c6:	83 a1       	ldd	r24, Z+35	; 0x23
    10c8:	88 23       	and	r24, r24
    10ca:	e9 f3       	breq	.-6      	; 0x10c6 <getTemperature+0x1e>
	printf("lee\n");
    10cc:	80 ea       	ldi	r24, 0xA0	; 160
    10ce:	90 e2       	ldi	r25, 0x20	; 32
    10d0:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <puts>
	uint16_t adcReading = ADCA.CH0.RES;
    10d4:	80 91 24 02 	lds	r24, 0x0224
    10d8:	90 91 25 02 	lds	r25, 0x0225
	printf("kee\n");
    10dc:	84 ea       	ldi	r24, 0xA4	; 164
    10de:	90 e2       	ldi	r25, 0x20	; 32
    10e0:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <puts>
	//Steinhart constants:
	float const A1 = 0.00354016;
	float const B1 = 0.0002569850;
	float const C1 = 0.000002620131;
	float const D1 = 0.00000006383091;
	printf("Eat\n");
    10e4:	88 ea       	ldi	r24, 0xA8	; 168
    10e6:	90 e2       	ldi	r25, 0x20	; 32
    10e8:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <puts>
	//Variables:
	unsigned int voltage = 0; //this is (m*read_adc)+b which is obtained experimentally
	float resistance = (3.3*10000.0)/(3.3-(float)voltage); //equation to convert is PH112
	float refResistance = 10000; //subject to change
	float Temp = 0;
	printf("sleep\n");
    10ec:	8c ea       	ldi	r24, 0xAC	; 172
    10ee:	90 e2       	ldi	r25, 0x20	; 32
    10f0:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <puts>
	

	//Below is the Steinhart equation
	Temp = 1.0/(A1 + (B1*log(resistance/refResistance)) + (C1*pow(log(resistance/refResistance),2)) + (D1*pow((log(resistance/refResistance)),3) ));
	printf("Repeat\n");
    10f4:	82 eb       	ldi	r24, 0xB2	; 178
    10f6:	90 e2       	ldi	r25, 0x20	; 32
    10f8:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <puts>
#ifdef DEBUG_TEMP
	printf("res: %f, temp: %f", resistance, Temp);
#endif
	return Temp;
    10fc:	6f e8       	ldi	r22, 0x8F	; 143
    10fe:	7c e3       	ldi	r23, 0x3C	; 60
    1100:	8d e8       	ldi	r24, 0x8D	; 141
    1102:	93 e4       	ldi	r25, 0x43	; 67
    1104:	08 95       	ret

00001106 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	80 93 70 00 	sts	0x0070, r24
    110c:	80 93 71 00 	sts	0x0071, r24
    1110:	80 93 72 00 	sts	0x0072, r24
    1114:	80 93 73 00 	sts	0x0073, r24
    1118:	80 93 74 00 	sts	0x0074, r24
    111c:	80 93 75 00 	sts	0x0075, r24
    1120:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1124:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1126:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1128:	e0 e5       	ldi	r30, 0x50	; 80
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	82 60       	ori	r24, 0x02	; 2
    1130:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1132:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1134:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1136:	81 ff       	sbrs	r24, 1
    1138:	fd cf       	rjmp	.-6      	; 0x1134 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	80 e4       	ldi	r24, 0x40	; 64
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	e6 d2       	rcall	.+1484   	; 0x170e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1142:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1144:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1146:	e0 e5       	ldi	r30, 0x50	; 80
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8e 7f       	andi	r24, 0xFE	; 254
    114e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1150:	9f bf       	out	0x3f, r25	; 63
    1152:	08 95       	ret

00001154 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1154:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1156:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1158:	e8 2f       	mov	r30, r24
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	e0 59       	subi	r30, 0x90	; 144
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	60 95       	com	r22
    1162:	80 81       	ld	r24, Z
    1164:	68 23       	and	r22, r24
    1166:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1168:	9f bf       	out	0x3f, r25	; 63
    116a:	08 95       	ret

0000116c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	fc 01       	movw	r30, r24
    1172:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1178:	c6 2f       	mov	r28, r22
    117a:	d0 e0       	ldi	r29, 0x00	; 0
    117c:	de 01       	movw	r26, r28
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <ioport_configure_port_pin+0x1a>
    1182:	b5 95       	asr	r27
    1184:	a7 95       	ror	r26
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <ioport_configure_port_pin+0x16>
    118a:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    118c:	50 83       	st	Z, r21
    118e:	2f 5f       	subi	r18, 0xFF	; 255
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1194:	28 30       	cpi	r18, 0x08	; 8
    1196:	31 05       	cpc	r19, r1
    1198:	89 f7       	brne	.-30     	; 0x117c <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    119a:	40 ff       	sbrs	r20, 0
    119c:	0a c0       	rjmp	.+20     	; 0x11b2 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    119e:	41 ff       	sbrs	r20, 1
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    11a2:	fc 01       	movw	r30, r24
    11a4:	65 83       	std	Z+5, r22	; 0x05
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    11a8:	fc 01       	movw	r30, r24
    11aa:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    11ac:	fc 01       	movw	r30, r24
    11ae:	61 83       	std	Z+1, r22	; 0x01
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    11b2:	fc 01       	movw	r30, r24
    11b4:	62 83       	std	Z+2, r22	; 0x02
	}
}
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    11bc:	43 e0       	ldi	r20, 0x03	; 3
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	80 e8       	ldi	r24, 0x80	; 128
    11c4:	96 e0       	ldi	r25, 0x06	; 6
    11c6:	d2 df       	rcall	.-92     	; 0x116c <ioport_configure_port_pin>
    11c8:	43 e0       	ldi	r20, 0x03	; 3
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	62 e0       	ldi	r22, 0x02	; 2
    11ce:	80 e8       	ldi	r24, 0x80	; 128
    11d0:	96 e0       	ldi	r25, 0x06	; 6
    11d2:	cc df       	rcall	.-104    	; 0x116c <ioport_configure_port_pin>
    11d4:	43 e0       	ldi	r20, 0x03	; 3
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	64 e0       	ldi	r22, 0x04	; 4
    11da:	80 e8       	ldi	r24, 0x80	; 128
    11dc:	96 e0       	ldi	r25, 0x06	; 6
    11de:	c6 df       	rcall	.-116    	; 0x116c <ioport_configure_port_pin>
    11e0:	43 e0       	ldi	r20, 0x03	; 3
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	68 e0       	ldi	r22, 0x08	; 8
    11e6:	80 e8       	ldi	r24, 0x80	; 128
    11e8:	96 e0       	ldi	r25, 0x06	; 6
    11ea:	c0 df       	rcall	.-128    	; 0x116c <ioport_configure_port_pin>
    11ec:	43 e0       	ldi	r20, 0x03	; 3
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	60 e1       	ldi	r22, 0x10	; 16
    11f2:	80 e8       	ldi	r24, 0x80	; 128
    11f4:	96 e0       	ldi	r25, 0x06	; 6
    11f6:	ba df       	rcall	.-140    	; 0x116c <ioport_configure_port_pin>
    11f8:	43 e0       	ldi	r20, 0x03	; 3
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	60 e2       	ldi	r22, 0x20	; 32
    11fe:	80 e8       	ldi	r24, 0x80	; 128
    1200:	96 e0       	ldi	r25, 0x06	; 6
    1202:	b4 df       	rcall	.-152    	; 0x116c <ioport_configure_port_pin>
    1204:	43 e0       	ldi	r20, 0x03	; 3
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	60 e4       	ldi	r22, 0x40	; 64
    120a:	80 e8       	ldi	r24, 0x80	; 128
    120c:	96 e0       	ldi	r25, 0x06	; 6
    120e:	ae df       	rcall	.-164    	; 0x116c <ioport_configure_port_pin>
    1210:	43 e0       	ldi	r20, 0x03	; 3
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	60 e8       	ldi	r22, 0x80	; 128
    1216:	80 e8       	ldi	r24, 0x80	; 128
    1218:	96 e0       	ldi	r25, 0x06	; 6
    121a:	a8 df       	rcall	.-176    	; 0x116c <ioport_configure_port_pin>
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	58 e1       	ldi	r21, 0x18	; 24
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	80 e6       	ldi	r24, 0x60	; 96
    1224:	96 e0       	ldi	r25, 0x06	; 6
    1226:	a2 df       	rcall	.-188    	; 0x116c <ioport_configure_port_pin>
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	58 e1       	ldi	r21, 0x18	; 24
    122c:	62 e0       	ldi	r22, 0x02	; 2
    122e:	80 e6       	ldi	r24, 0x60	; 96
    1230:	96 e0       	ldi	r25, 0x06	; 6
    1232:	9c df       	rcall	.-200    	; 0x116c <ioport_configure_port_pin>
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	58 e1       	ldi	r21, 0x18	; 24
    1238:	64 e0       	ldi	r22, 0x04	; 4
    123a:	80 e6       	ldi	r24, 0x60	; 96
    123c:	96 e0       	ldi	r25, 0x06	; 6
    123e:	96 df       	rcall	.-212    	; 0x116c <ioport_configure_port_pin>
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	58 e1       	ldi	r21, 0x18	; 24
    1244:	68 e0       	ldi	r22, 0x08	; 8
    1246:	80 e6       	ldi	r24, 0x60	; 96
    1248:	96 e0       	ldi	r25, 0x06	; 6
    124a:	90 df       	rcall	.-224    	; 0x116c <ioport_configure_port_pin>
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	58 e1       	ldi	r21, 0x18	; 24
    1250:	60 e1       	ldi	r22, 0x10	; 16
    1252:	80 e6       	ldi	r24, 0x60	; 96
    1254:	96 e0       	ldi	r25, 0x06	; 6
    1256:	8a df       	rcall	.-236    	; 0x116c <ioport_configure_port_pin>
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	58 e1       	ldi	r21, 0x18	; 24
    125c:	60 e2       	ldi	r22, 0x20	; 32
    125e:	80 e6       	ldi	r24, 0x60	; 96
    1260:	96 e0       	ldi	r25, 0x06	; 6
    1262:	84 df       	rcall	.-248    	; 0x116c <ioport_configure_port_pin>
    1264:	40 e0       	ldi	r20, 0x00	; 0
    1266:	58 e1       	ldi	r21, 0x18	; 24
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	80 ee       	ldi	r24, 0xE0	; 224
    126c:	97 e0       	ldi	r25, 0x07	; 7
    126e:	7e df       	rcall	.-260    	; 0x116c <ioport_configure_port_pin>
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	58 e1       	ldi	r21, 0x18	; 24
    1274:	62 e0       	ldi	r22, 0x02	; 2
    1276:	80 ee       	ldi	r24, 0xE0	; 224
    1278:	97 e0       	ldi	r25, 0x07	; 7
    127a:	78 df       	rcall	.-272    	; 0x116c <ioport_configure_port_pin>
    127c:	43 e0       	ldi	r20, 0x03	; 3
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	60 e8       	ldi	r22, 0x80	; 128
    1282:	80 e4       	ldi	r24, 0x40	; 64
    1284:	96 e0       	ldi	r25, 0x06	; 6
    1286:	72 df       	rcall	.-284    	; 0x116c <ioport_configure_port_pin>
    1288:	43 e0       	ldi	r20, 0x03	; 3
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	60 e2       	ldi	r22, 0x20	; 32
    128e:	80 e4       	ldi	r24, 0x40	; 64
    1290:	96 e0       	ldi	r25, 0x06	; 6
    1292:	6c df       	rcall	.-296    	; 0x116c <ioport_configure_port_pin>
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	60 e4       	ldi	r22, 0x40	; 64
    129a:	80 e4       	ldi	r24, 0x40	; 64
    129c:	96 e0       	ldi	r25, 0x06	; 6
    129e:	66 df       	rcall	.-308    	; 0x116c <ioport_configure_port_pin>
    12a0:	43 e0       	ldi	r20, 0x03	; 3
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	68 e0       	ldi	r22, 0x08	; 8
    12a6:	80 ec       	ldi	r24, 0xC0	; 192
    12a8:	97 e0       	ldi	r25, 0x07	; 7
    12aa:	60 df       	rcall	.-320    	; 0x116c <ioport_configure_port_pin>
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	96 e0       	ldi	r25, 0x06	; 6
    12b6:	5a df       	rcall	.-332    	; 0x116c <ioport_configure_port_pin>
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	64 e0       	ldi	r22, 0x04	; 4
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	96 e0       	ldi	r25, 0x06	; 6
    12c2:	54 df       	rcall	.-344    	; 0x116c <ioport_configure_port_pin>
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	62 e0       	ldi	r22, 0x02	; 2
    12ca:	80 e2       	ldi	r24, 0x20	; 32
    12cc:	96 e0       	ldi	r25, 0x06	; 6
    12ce:	4e df       	rcall	.-356    	; 0x116c <ioport_configure_port_pin>
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	57 e0       	ldi	r21, 0x07	; 7
    12d4:	62 e0       	ldi	r22, 0x02	; 2
    12d6:	80 e2       	ldi	r24, 0x20	; 32
    12d8:	96 e0       	ldi	r25, 0x06	; 6
    12da:	48 df       	rcall	.-368    	; 0x116c <ioport_configure_port_pin>
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	57 e0       	ldi	r21, 0x07	; 7
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	80 e2       	ldi	r24, 0x20	; 32
    12e4:	96 e0       	ldi	r25, 0x06	; 6
    12e6:	42 df       	rcall	.-380    	; 0x116c <ioport_configure_port_pin>
    12e8:	41 e0       	ldi	r20, 0x01	; 1
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	68 e0       	ldi	r22, 0x08	; 8
    12ee:	80 e2       	ldi	r24, 0x20	; 32
    12f0:	96 e0       	ldi	r25, 0x06	; 6
    12f2:	3c df       	rcall	.-392    	; 0x116c <ioport_configure_port_pin>
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	57 e0       	ldi	r21, 0x07	; 7
    12f8:	64 e0       	ldi	r22, 0x04	; 4
    12fa:	80 e2       	ldi	r24, 0x20	; 32
    12fc:	96 e0       	ldi	r25, 0x06	; 6
    12fe:	36 df       	rcall	.-404    	; 0x116c <ioport_configure_port_pin>
    1300:	43 e0       	ldi	r20, 0x03	; 3
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	68 e0       	ldi	r22, 0x08	; 8
    1306:	80 ec       	ldi	r24, 0xC0	; 192
    1308:	97 e0       	ldi	r25, 0x07	; 7
    130a:	30 df       	rcall	.-416    	; 0x116c <ioport_configure_port_pin>
    130c:	43 e0       	ldi	r20, 0x03	; 3
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	68 e0       	ldi	r22, 0x08	; 8
    1312:	80 e4       	ldi	r24, 0x40	; 64
    1314:	96 e0       	ldi	r25, 0x06	; 6
    1316:	2a df       	rcall	.-428    	; 0x116c <ioport_configure_port_pin>
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	64 e0       	ldi	r22, 0x04	; 4
    131e:	80 e4       	ldi	r24, 0x40	; 64
    1320:	96 e0       	ldi	r25, 0x06	; 6
    1322:	24 df       	rcall	.-440    	; 0x116c <ioport_configure_port_pin>
    1324:	43 e0       	ldi	r20, 0x03	; 3
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	68 e0       	ldi	r22, 0x08	; 8
    132a:	80 e6       	ldi	r24, 0x60	; 96
    132c:	96 e0       	ldi	r25, 0x06	; 6
    132e:	1e df       	rcall	.-452    	; 0x116c <ioport_configure_port_pin>
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	64 e0       	ldi	r22, 0x04	; 4
    1336:	80 e6       	ldi	r24, 0x60	; 96
    1338:	96 e0       	ldi	r25, 0x06	; 6
    133a:	18 cf       	rjmp	.-464    	; 0x116c <ioport_configure_port_pin>
    133c:	08 95       	ret

0000133e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    133e:	1f 92       	push	r1
    1340:	0f 92       	push	r0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	0f 92       	push	r0
    1346:	11 24       	eor	r1, r1
    1348:	08 b6       	in	r0, 0x38	; 56
    134a:	0f 92       	push	r0
    134c:	18 be       	out	0x38, r1	; 56
    134e:	09 b6       	in	r0, 0x39	; 57
    1350:	0f 92       	push	r0
    1352:	19 be       	out	0x39, r1	; 57
    1354:	0b b6       	in	r0, 0x3b	; 59
    1356:	0f 92       	push	r0
    1358:	1b be       	out	0x3b, r1	; 59
    135a:	2f 93       	push	r18
    135c:	3f 93       	push	r19
    135e:	4f 93       	push	r20
    1360:	5f 93       	push	r21
    1362:	6f 93       	push	r22
    1364:	7f 93       	push	r23
    1366:	8f 93       	push	r24
    1368:	9f 93       	push	r25
    136a:	af 93       	push	r26
    136c:	bf 93       	push	r27
    136e:	ef 93       	push	r30
    1370:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    1372:	40 91 24 02 	lds	r20, 0x0224
    1376:	50 91 25 02 	lds	r21, 0x0225
    137a:	e0 91 0c 21 	lds	r30, 0x210C
    137e:	f0 91 0d 21 	lds	r31, 0x210D
    1382:	61 e0       	ldi	r22, 0x01	; 1
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	92 e0       	ldi	r25, 0x02	; 2
    1388:	19 95       	eicall
}
    138a:	ff 91       	pop	r31
    138c:	ef 91       	pop	r30
    138e:	bf 91       	pop	r27
    1390:	af 91       	pop	r26
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	7f 91       	pop	r23
    1398:	6f 91       	pop	r22
    139a:	5f 91       	pop	r21
    139c:	4f 91       	pop	r20
    139e:	3f 91       	pop	r19
    13a0:	2f 91       	pop	r18
    13a2:	0f 90       	pop	r0
    13a4:	0b be       	out	0x3b, r0	; 59
    13a6:	0f 90       	pop	r0
    13a8:	09 be       	out	0x39, r0	; 57
    13aa:	0f 90       	pop	r0
    13ac:	08 be       	out	0x38, r0	; 56
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	0f 90       	pop	r0
    13b4:	1f 90       	pop	r1
    13b6:	18 95       	reti

000013b8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	08 b6       	in	r0, 0x38	; 56
    13c4:	0f 92       	push	r0
    13c6:	18 be       	out	0x38, r1	; 56
    13c8:	09 b6       	in	r0, 0x39	; 57
    13ca:	0f 92       	push	r0
    13cc:	19 be       	out	0x39, r1	; 57
    13ce:	0b b6       	in	r0, 0x3b	; 59
    13d0:	0f 92       	push	r0
    13d2:	1b be       	out	0x3b, r1	; 59
    13d4:	2f 93       	push	r18
    13d6:	3f 93       	push	r19
    13d8:	4f 93       	push	r20
    13da:	5f 93       	push	r21
    13dc:	6f 93       	push	r22
    13de:	7f 93       	push	r23
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
    13e4:	af 93       	push	r26
    13e6:	bf 93       	push	r27
    13e8:	ef 93       	push	r30
    13ea:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    13ec:	40 91 2c 02 	lds	r20, 0x022C
    13f0:	50 91 2d 02 	lds	r21, 0x022D
    13f4:	e0 91 0c 21 	lds	r30, 0x210C
    13f8:	f0 91 0d 21 	lds	r31, 0x210D
    13fc:	62 e0       	ldi	r22, 0x02	; 2
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	92 e0       	ldi	r25, 0x02	; 2
    1402:	19 95       	eicall
}
    1404:	ff 91       	pop	r31
    1406:	ef 91       	pop	r30
    1408:	bf 91       	pop	r27
    140a:	af 91       	pop	r26
    140c:	9f 91       	pop	r25
    140e:	8f 91       	pop	r24
    1410:	7f 91       	pop	r23
    1412:	6f 91       	pop	r22
    1414:	5f 91       	pop	r21
    1416:	4f 91       	pop	r20
    1418:	3f 91       	pop	r19
    141a:	2f 91       	pop	r18
    141c:	0f 90       	pop	r0
    141e:	0b be       	out	0x3b, r0	; 59
    1420:	0f 90       	pop	r0
    1422:	09 be       	out	0x39, r0	; 57
    1424:	0f 90       	pop	r0
    1426:	08 be       	out	0x38, r0	; 56
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	0f 90       	pop	r0
    142e:	1f 90       	pop	r1
    1430:	18 95       	reti

00001432 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    1432:	1f 92       	push	r1
    1434:	0f 92       	push	r0
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	0f 92       	push	r0
    143a:	11 24       	eor	r1, r1
    143c:	08 b6       	in	r0, 0x38	; 56
    143e:	0f 92       	push	r0
    1440:	18 be       	out	0x38, r1	; 56
    1442:	09 b6       	in	r0, 0x39	; 57
    1444:	0f 92       	push	r0
    1446:	19 be       	out	0x39, r1	; 57
    1448:	0b b6       	in	r0, 0x3b	; 59
    144a:	0f 92       	push	r0
    144c:	1b be       	out	0x3b, r1	; 59
    144e:	2f 93       	push	r18
    1450:	3f 93       	push	r19
    1452:	4f 93       	push	r20
    1454:	5f 93       	push	r21
    1456:	6f 93       	push	r22
    1458:	7f 93       	push	r23
    145a:	8f 93       	push	r24
    145c:	9f 93       	push	r25
    145e:	af 93       	push	r26
    1460:	bf 93       	push	r27
    1462:	ef 93       	push	r30
    1464:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    1466:	40 91 34 02 	lds	r20, 0x0234
    146a:	50 91 35 02 	lds	r21, 0x0235
    146e:	e0 91 0c 21 	lds	r30, 0x210C
    1472:	f0 91 0d 21 	lds	r31, 0x210D
    1476:	64 e0       	ldi	r22, 0x04	; 4
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	92 e0       	ldi	r25, 0x02	; 2
    147c:	19 95       	eicall
}
    147e:	ff 91       	pop	r31
    1480:	ef 91       	pop	r30
    1482:	bf 91       	pop	r27
    1484:	af 91       	pop	r26
    1486:	9f 91       	pop	r25
    1488:	8f 91       	pop	r24
    148a:	7f 91       	pop	r23
    148c:	6f 91       	pop	r22
    148e:	5f 91       	pop	r21
    1490:	4f 91       	pop	r20
    1492:	3f 91       	pop	r19
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0b be       	out	0x3b, r0	; 59
    149a:	0f 90       	pop	r0
    149c:	09 be       	out	0x39, r0	; 57
    149e:	0f 90       	pop	r0
    14a0:	08 be       	out	0x38, r0	; 56
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	0f 90       	pop	r0
    14a8:	1f 90       	pop	r1
    14aa:	18 95       	reti

000014ac <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    14ac:	1f 92       	push	r1
    14ae:	0f 92       	push	r0
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	0f 92       	push	r0
    14b4:	11 24       	eor	r1, r1
    14b6:	08 b6       	in	r0, 0x38	; 56
    14b8:	0f 92       	push	r0
    14ba:	18 be       	out	0x38, r1	; 56
    14bc:	09 b6       	in	r0, 0x39	; 57
    14be:	0f 92       	push	r0
    14c0:	19 be       	out	0x39, r1	; 57
    14c2:	0b b6       	in	r0, 0x3b	; 59
    14c4:	0f 92       	push	r0
    14c6:	1b be       	out	0x3b, r1	; 59
    14c8:	2f 93       	push	r18
    14ca:	3f 93       	push	r19
    14cc:	4f 93       	push	r20
    14ce:	5f 93       	push	r21
    14d0:	6f 93       	push	r22
    14d2:	7f 93       	push	r23
    14d4:	8f 93       	push	r24
    14d6:	9f 93       	push	r25
    14d8:	af 93       	push	r26
    14da:	bf 93       	push	r27
    14dc:	ef 93       	push	r30
    14de:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    14e0:	40 91 3c 02 	lds	r20, 0x023C
    14e4:	50 91 3d 02 	lds	r21, 0x023D
    14e8:	e0 91 0c 21 	lds	r30, 0x210C
    14ec:	f0 91 0d 21 	lds	r31, 0x210D
    14f0:	68 e0       	ldi	r22, 0x08	; 8
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	92 e0       	ldi	r25, 0x02	; 2
    14f6:	19 95       	eicall
}
    14f8:	ff 91       	pop	r31
    14fa:	ef 91       	pop	r30
    14fc:	bf 91       	pop	r27
    14fe:	af 91       	pop	r26
    1500:	9f 91       	pop	r25
    1502:	8f 91       	pop	r24
    1504:	7f 91       	pop	r23
    1506:	6f 91       	pop	r22
    1508:	5f 91       	pop	r21
    150a:	4f 91       	pop	r20
    150c:	3f 91       	pop	r19
    150e:	2f 91       	pop	r18
    1510:	0f 90       	pop	r0
    1512:	0b be       	out	0x3b, r0	; 59
    1514:	0f 90       	pop	r0
    1516:	09 be       	out	0x39, r0	; 57
    1518:	0f 90       	pop	r0
    151a:	08 be       	out	0x38, r0	; 56
    151c:	0f 90       	pop	r0
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	0f 90       	pop	r0
    1522:	1f 90       	pop	r1
    1524:	18 95       	reti

00001526 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	08 b6       	in	r0, 0x38	; 56
    1532:	0f 92       	push	r0
    1534:	18 be       	out	0x38, r1	; 56
    1536:	09 b6       	in	r0, 0x39	; 57
    1538:	0f 92       	push	r0
    153a:	19 be       	out	0x39, r1	; 57
    153c:	0b b6       	in	r0, 0x3b	; 59
    153e:	0f 92       	push	r0
    1540:	1b be       	out	0x3b, r1	; 59
    1542:	2f 93       	push	r18
    1544:	3f 93       	push	r19
    1546:	4f 93       	push	r20
    1548:	5f 93       	push	r21
    154a:	6f 93       	push	r22
    154c:	7f 93       	push	r23
    154e:	8f 93       	push	r24
    1550:	9f 93       	push	r25
    1552:	af 93       	push	r26
    1554:	bf 93       	push	r27
    1556:	ef 93       	push	r30
    1558:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    155a:	40 91 64 02 	lds	r20, 0x0264
    155e:	50 91 65 02 	lds	r21, 0x0265
    1562:	e0 91 0a 21 	lds	r30, 0x210A
    1566:	f0 91 0b 21 	lds	r31, 0x210B
    156a:	61 e0       	ldi	r22, 0x01	; 1
    156c:	80 e4       	ldi	r24, 0x40	; 64
    156e:	92 e0       	ldi	r25, 0x02	; 2
    1570:	19 95       	eicall
}
    1572:	ff 91       	pop	r31
    1574:	ef 91       	pop	r30
    1576:	bf 91       	pop	r27
    1578:	af 91       	pop	r26
    157a:	9f 91       	pop	r25
    157c:	8f 91       	pop	r24
    157e:	7f 91       	pop	r23
    1580:	6f 91       	pop	r22
    1582:	5f 91       	pop	r21
    1584:	4f 91       	pop	r20
    1586:	3f 91       	pop	r19
    1588:	2f 91       	pop	r18
    158a:	0f 90       	pop	r0
    158c:	0b be       	out	0x3b, r0	; 59
    158e:	0f 90       	pop	r0
    1590:	09 be       	out	0x39, r0	; 57
    1592:	0f 90       	pop	r0
    1594:	08 be       	out	0x38, r0	; 56
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	08 b6       	in	r0, 0x38	; 56
    15ac:	0f 92       	push	r0
    15ae:	18 be       	out	0x38, r1	; 56
    15b0:	09 b6       	in	r0, 0x39	; 57
    15b2:	0f 92       	push	r0
    15b4:	19 be       	out	0x39, r1	; 57
    15b6:	0b b6       	in	r0, 0x3b	; 59
    15b8:	0f 92       	push	r0
    15ba:	1b be       	out	0x3b, r1	; 59
    15bc:	2f 93       	push	r18
    15be:	3f 93       	push	r19
    15c0:	4f 93       	push	r20
    15c2:	5f 93       	push	r21
    15c4:	6f 93       	push	r22
    15c6:	7f 93       	push	r23
    15c8:	8f 93       	push	r24
    15ca:	9f 93       	push	r25
    15cc:	af 93       	push	r26
    15ce:	bf 93       	push	r27
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    15d4:	40 91 6c 02 	lds	r20, 0x026C
    15d8:	50 91 6d 02 	lds	r21, 0x026D
    15dc:	e0 91 0a 21 	lds	r30, 0x210A
    15e0:	f0 91 0b 21 	lds	r31, 0x210B
    15e4:	62 e0       	ldi	r22, 0x02	; 2
    15e6:	80 e4       	ldi	r24, 0x40	; 64
    15e8:	92 e0       	ldi	r25, 0x02	; 2
    15ea:	19 95       	eicall
}
    15ec:	ff 91       	pop	r31
    15ee:	ef 91       	pop	r30
    15f0:	bf 91       	pop	r27
    15f2:	af 91       	pop	r26
    15f4:	9f 91       	pop	r25
    15f6:	8f 91       	pop	r24
    15f8:	7f 91       	pop	r23
    15fa:	6f 91       	pop	r22
    15fc:	5f 91       	pop	r21
    15fe:	4f 91       	pop	r20
    1600:	3f 91       	pop	r19
    1602:	2f 91       	pop	r18
    1604:	0f 90       	pop	r0
    1606:	0b be       	out	0x3b, r0	; 59
    1608:	0f 90       	pop	r0
    160a:	09 be       	out	0x39, r0	; 57
    160c:	0f 90       	pop	r0
    160e:	08 be       	out	0x38, r0	; 56
    1610:	0f 90       	pop	r0
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	0f 90       	pop	r0
    1616:	1f 90       	pop	r1
    1618:	18 95       	reti

0000161a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    161a:	1f 92       	push	r1
    161c:	0f 92       	push	r0
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	0f 92       	push	r0
    1622:	11 24       	eor	r1, r1
    1624:	08 b6       	in	r0, 0x38	; 56
    1626:	0f 92       	push	r0
    1628:	18 be       	out	0x38, r1	; 56
    162a:	09 b6       	in	r0, 0x39	; 57
    162c:	0f 92       	push	r0
    162e:	19 be       	out	0x39, r1	; 57
    1630:	0b b6       	in	r0, 0x3b	; 59
    1632:	0f 92       	push	r0
    1634:	1b be       	out	0x3b, r1	; 59
    1636:	2f 93       	push	r18
    1638:	3f 93       	push	r19
    163a:	4f 93       	push	r20
    163c:	5f 93       	push	r21
    163e:	6f 93       	push	r22
    1640:	7f 93       	push	r23
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
    1646:	af 93       	push	r26
    1648:	bf 93       	push	r27
    164a:	ef 93       	push	r30
    164c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    164e:	40 91 74 02 	lds	r20, 0x0274
    1652:	50 91 75 02 	lds	r21, 0x0275
    1656:	e0 91 0a 21 	lds	r30, 0x210A
    165a:	f0 91 0b 21 	lds	r31, 0x210B
    165e:	64 e0       	ldi	r22, 0x04	; 4
    1660:	80 e4       	ldi	r24, 0x40	; 64
    1662:	92 e0       	ldi	r25, 0x02	; 2
    1664:	19 95       	eicall
}
    1666:	ff 91       	pop	r31
    1668:	ef 91       	pop	r30
    166a:	bf 91       	pop	r27
    166c:	af 91       	pop	r26
    166e:	9f 91       	pop	r25
    1670:	8f 91       	pop	r24
    1672:	7f 91       	pop	r23
    1674:	6f 91       	pop	r22
    1676:	5f 91       	pop	r21
    1678:	4f 91       	pop	r20
    167a:	3f 91       	pop	r19
    167c:	2f 91       	pop	r18
    167e:	0f 90       	pop	r0
    1680:	0b be       	out	0x3b, r0	; 59
    1682:	0f 90       	pop	r0
    1684:	09 be       	out	0x39, r0	; 57
    1686:	0f 90       	pop	r0
    1688:	08 be       	out	0x38, r0	; 56
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	08 b6       	in	r0, 0x38	; 56
    16a0:	0f 92       	push	r0
    16a2:	18 be       	out	0x38, r1	; 56
    16a4:	09 b6       	in	r0, 0x39	; 57
    16a6:	0f 92       	push	r0
    16a8:	19 be       	out	0x39, r1	; 57
    16aa:	0b b6       	in	r0, 0x3b	; 59
    16ac:	0f 92       	push	r0
    16ae:	1b be       	out	0x3b, r1	; 59
    16b0:	2f 93       	push	r18
    16b2:	3f 93       	push	r19
    16b4:	4f 93       	push	r20
    16b6:	5f 93       	push	r21
    16b8:	6f 93       	push	r22
    16ba:	7f 93       	push	r23
    16bc:	8f 93       	push	r24
    16be:	9f 93       	push	r25
    16c0:	af 93       	push	r26
    16c2:	bf 93       	push	r27
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    16c8:	40 91 7c 02 	lds	r20, 0x027C
    16cc:	50 91 7d 02 	lds	r21, 0x027D
    16d0:	e0 91 0a 21 	lds	r30, 0x210A
    16d4:	f0 91 0b 21 	lds	r31, 0x210B
    16d8:	68 e0       	ldi	r22, 0x08	; 8
    16da:	80 e4       	ldi	r24, 0x40	; 64
    16dc:	92 e0       	ldi	r25, 0x02	; 2
    16de:	19 95       	eicall
}
    16e0:	ff 91       	pop	r31
    16e2:	ef 91       	pop	r30
    16e4:	bf 91       	pop	r27
    16e6:	af 91       	pop	r26
    16e8:	9f 91       	pop	r25
    16ea:	8f 91       	pop	r24
    16ec:	7f 91       	pop	r23
    16ee:	6f 91       	pop	r22
    16f0:	5f 91       	pop	r21
    16f2:	4f 91       	pop	r20
    16f4:	3f 91       	pop	r19
    16f6:	2f 91       	pop	r18
    16f8:	0f 90       	pop	r0
    16fa:	0b be       	out	0x3b, r0	; 59
    16fc:	0f 90       	pop	r0
    16fe:	09 be       	out	0x39, r0	; 57
    1700:	0f 90       	pop	r0
    1702:	08 be       	out	0x38, r0	; 56
    1704:	0f 90       	pop	r0
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	0f 90       	pop	r0
    170a:	1f 90       	pop	r1
    170c:	18 95       	reti

0000170e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    170e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1710:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1712:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1714:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1716:	60 83       	st	Z, r22
	ret                             // Return to caller
    1718:	08 95       	ret

0000171a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    171a:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    171e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1720:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1722:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1726:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1728:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    172c:	08 95       	ret

0000172e <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    172e:	fc 01       	movw	r30, r24
    1730:	91 81       	ldd	r25, Z+1	; 0x01
    1732:	95 ff       	sbrs	r25, 5
    1734:	fd cf       	rjmp	.-6      	; 0x1730 <usart_putchar+0x2>
    1736:	60 83       	st	Z, r22
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	08 95       	ret

0000173e <usart_getchar>:
    173e:	fc 01       	movw	r30, r24
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	99 23       	and	r25, r25
    1744:	ec f7       	brge	.-6      	; 0x1740 <usart_getchar+0x2>
    1746:	80 81       	ld	r24, Z
    1748:	08 95       	ret

0000174a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    174a:	2f 92       	push	r2
    174c:	3f 92       	push	r3
    174e:	4f 92       	push	r4
    1750:	5f 92       	push	r5
    1752:	6f 92       	push	r6
    1754:	7f 92       	push	r7
    1756:	8f 92       	push	r8
    1758:	9f 92       	push	r9
    175a:	af 92       	push	r10
    175c:	bf 92       	push	r11
    175e:	cf 92       	push	r12
    1760:	df 92       	push	r13
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	1c 01       	movw	r2, r24
    176e:	2a 01       	movw	r4, r20
    1770:	3b 01       	movw	r6, r22
    1772:	48 01       	movw	r8, r16
    1774:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1776:	d9 01       	movw	r26, r18
    1778:	c8 01       	movw	r24, r16
    177a:	68 94       	set
    177c:	12 f8       	bld	r1, 2
    177e:	b6 95       	lsr	r27
    1780:	a7 95       	ror	r26
    1782:	97 95       	ror	r25
    1784:	87 95       	ror	r24
    1786:	16 94       	lsr	r1
    1788:	d1 f7       	brne	.-12     	; 0x177e <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    178a:	b9 01       	movw	r22, r18
    178c:	a8 01       	movw	r20, r16
    178e:	03 2e       	mov	r0, r19
    1790:	36 e1       	ldi	r19, 0x16	; 22
    1792:	76 95       	lsr	r23
    1794:	67 95       	ror	r22
    1796:	57 95       	ror	r21
    1798:	47 95       	ror	r20
    179a:	3a 95       	dec	r19
    179c:	d1 f7       	brne	.-12     	; 0x1792 <usart_set_baudrate+0x48>
    179e:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    17a0:	f1 01       	movw	r30, r2
    17a2:	24 81       	ldd	r18, Z+4	; 0x04
    17a4:	22 fd       	sbrc	r18, 2
    17a6:	08 c0       	rjmp	.+16     	; 0x17b8 <usart_set_baudrate+0x6e>
		max_rate /= 2;
    17a8:	b6 95       	lsr	r27
    17aa:	a7 95       	ror	r26
    17ac:	97 95       	ror	r25
    17ae:	87 95       	ror	r24
		min_rate /= 2;
    17b0:	76 95       	lsr	r23
    17b2:	67 95       	ror	r22
    17b4:	57 95       	ror	r21
    17b6:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    17b8:	84 15       	cp	r24, r4
    17ba:	95 05       	cpc	r25, r5
    17bc:	a6 05       	cpc	r26, r6
    17be:	b7 05       	cpc	r27, r7
    17c0:	08 f4       	brcc	.+2      	; 0x17c4 <usart_set_baudrate+0x7a>
    17c2:	aa c0       	rjmp	.+340    	; 0x1918 <usart_set_baudrate+0x1ce>
    17c4:	44 16       	cp	r4, r20
    17c6:	55 06       	cpc	r5, r21
    17c8:	66 06       	cpc	r6, r22
    17ca:	77 06       	cpc	r7, r23
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <usart_set_baudrate+0x86>
    17ce:	a6 c0       	rjmp	.+332    	; 0x191c <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    17d0:	f1 01       	movw	r30, r2
    17d2:	84 81       	ldd	r24, Z+4	; 0x04
    17d4:	82 fd       	sbrc	r24, 2
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <usart_set_baudrate+0x96>
		baud *= 2;
    17d8:	44 0c       	add	r4, r4
    17da:	55 1c       	adc	r5, r5
    17dc:	66 1c       	adc	r6, r6
    17de:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    17e0:	c5 01       	movw	r24, r10
    17e2:	b4 01       	movw	r22, r8
    17e4:	a3 01       	movw	r20, r6
    17e6:	92 01       	movw	r18, r4
    17e8:	df d7       	rcall	.+4030   	; 0x27a8 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    17ea:	2f 3f       	cpi	r18, 0xFF	; 255
    17ec:	31 05       	cpc	r19, r1
    17ee:	41 05       	cpc	r20, r1
    17f0:	51 05       	cpc	r21, r1
    17f2:	08 f4       	brcc	.+2      	; 0x17f6 <usart_set_baudrate+0xac>
    17f4:	95 c0       	rjmp	.+298    	; 0x1920 <usart_set_baudrate+0x1d6>
    17f6:	c1 2c       	mov	r12, r1
    17f8:	d1 2c       	mov	r13, r1
    17fa:	76 01       	movw	r14, r12
    17fc:	ca 94       	dec	r12
    17fe:	c9 ef       	ldi	r28, 0xF9	; 249
    1800:	05 c0       	rjmp	.+10     	; 0x180c <usart_set_baudrate+0xc2>
    1802:	2c 15       	cp	r18, r12
    1804:	3d 05       	cpc	r19, r13
    1806:	4e 05       	cpc	r20, r14
    1808:	5f 05       	cpc	r21, r15
    180a:	68 f0       	brcs	.+26     	; 0x1826 <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
    180c:	cc 0c       	add	r12, r12
    180e:	dd 1c       	adc	r13, r13
    1810:	ee 1c       	adc	r14, r14
    1812:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    1814:	cd 3f       	cpi	r28, 0xFD	; 253
    1816:	14 f4       	brge	.+4      	; 0x181c <usart_set_baudrate+0xd2>
			limit |= 1;
    1818:	68 94       	set
    181a:	c0 f8       	bld	r12, 0
    181c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    181e:	c7 30       	cpi	r28, 0x07	; 7
    1820:	81 f7       	brne	.-32     	; 0x1802 <usart_set_baudrate+0xb8>
    1822:	8c 2f       	mov	r24, r28
    1824:	54 c0       	rjmp	.+168    	; 0x18ce <usart_set_baudrate+0x184>
    1826:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1828:	cc 23       	and	r28, r28
    182a:	0c f0       	brlt	.+2      	; 0x182e <usart_set_baudrate+0xe4>
    182c:	50 c0       	rjmp	.+160    	; 0x18ce <usart_set_baudrate+0x184>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    182e:	d3 01       	movw	r26, r6
    1830:	c2 01       	movw	r24, r4
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	aa 1f       	adc	r26, r26
    1838:	bb 1f       	adc	r27, r27
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	aa 1f       	adc	r26, r26
    1840:	bb 1f       	adc	r27, r27
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	aa 1f       	adc	r26, r26
    1848:	bb 1f       	adc	r27, r27
    184a:	85 01       	movw	r16, r10
    184c:	74 01       	movw	r14, r8
    184e:	e8 1a       	sub	r14, r24
    1850:	f9 0a       	sbc	r15, r25
    1852:	0a 0b       	sbc	r16, r26
    1854:	1b 0b       	sbc	r17, r27
    1856:	d8 01       	movw	r26, r16
    1858:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    185a:	ce 3f       	cpi	r28, 0xFE	; 254
    185c:	ec f4       	brge	.+58     	; 0x1898 <usart_set_baudrate+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    185e:	2d ef       	ldi	r18, 0xFD	; 253
    1860:	3f ef       	ldi	r19, 0xFF	; 255
    1862:	2c 1b       	sub	r18, r28
    1864:	31 09       	sbc	r19, r1
    1866:	c7 fd       	sbrc	r28, 7
    1868:	33 95       	inc	r19
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <usart_set_baudrate+0x12a>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	aa 1f       	adc	r26, r26
    1872:	bb 1f       	adc	r27, r27
    1874:	2a 95       	dec	r18
    1876:	d2 f7       	brpl	.-12     	; 0x186c <usart_set_baudrate+0x122>
    1878:	73 01       	movw	r14, r6
    187a:	62 01       	movw	r12, r4
    187c:	f6 94       	lsr	r15
    187e:	e7 94       	ror	r14
    1880:	d7 94       	ror	r13
    1882:	c7 94       	ror	r12
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	6c 0d       	add	r22, r12
    188a:	7d 1d       	adc	r23, r13
    188c:	8e 1d       	adc	r24, r14
    188e:	9f 1d       	adc	r25, r15
    1890:	a3 01       	movw	r20, r6
    1892:	92 01       	movw	r18, r4
    1894:	89 d7       	rcall	.+3858   	; 0x27a8 <__udivmodsi4>
    1896:	36 c0       	rjmp	.+108    	; 0x1904 <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
    1898:	23 e0       	ldi	r18, 0x03	; 3
    189a:	2c 0f       	add	r18, r28
    189c:	83 01       	movw	r16, r6
    189e:	72 01       	movw	r14, r4
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <usart_set_baudrate+0x160>
    18a2:	ee 0c       	add	r14, r14
    18a4:	ff 1c       	adc	r15, r15
    18a6:	00 1f       	adc	r16, r16
    18a8:	11 1f       	adc	r17, r17
    18aa:	2a 95       	dec	r18
    18ac:	d2 f7       	brpl	.-12     	; 0x18a2 <usart_set_baudrate+0x158>
    18ae:	a8 01       	movw	r20, r16
    18b0:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
    18b2:	67 01       	movw	r12, r14
    18b4:	78 01       	movw	r14, r16
    18b6:	f6 94       	lsr	r15
    18b8:	e7 94       	ror	r14
    18ba:	d7 94       	ror	r13
    18bc:	c7 94       	ror	r12
    18be:	bc 01       	movw	r22, r24
    18c0:	cd 01       	movw	r24, r26
    18c2:	6c 0d       	add	r22, r12
    18c4:	7d 1d       	adc	r23, r13
    18c6:	8e 1d       	adc	r24, r14
    18c8:	9f 1d       	adc	r25, r15
    18ca:	6e d7       	rcall	.+3804   	; 0x27a8 <__udivmodsi4>
    18cc:	1b c0       	rjmp	.+54     	; 0x1904 <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    18ce:	8d 5f       	subi	r24, 0xFD	; 253
    18d0:	a3 01       	movw	r20, r6
    18d2:	92 01       	movw	r18, r4
    18d4:	04 c0       	rjmp	.+8      	; 0x18de <usart_set_baudrate+0x194>
    18d6:	22 0f       	add	r18, r18
    18d8:	33 1f       	adc	r19, r19
    18da:	44 1f       	adc	r20, r20
    18dc:	55 1f       	adc	r21, r21
    18de:	8a 95       	dec	r24
    18e0:	d2 f7       	brpl	.-12     	; 0x18d6 <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
    18e2:	da 01       	movw	r26, r20
    18e4:	c9 01       	movw	r24, r18
    18e6:	b6 95       	lsr	r27
    18e8:	a7 95       	ror	r26
    18ea:	97 95       	ror	r25
    18ec:	87 95       	ror	r24
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	68 0d       	add	r22, r8
    18f4:	79 1d       	adc	r23, r9
    18f6:	8a 1d       	adc	r24, r10
    18f8:	9b 1d       	adc	r25, r11
    18fa:	56 d7       	rcall	.+3756   	; 0x27a8 <__udivmodsi4>
    18fc:	21 50       	subi	r18, 0x01	; 1
    18fe:	31 09       	sbc	r19, r1
    1900:	41 09       	sbc	r20, r1
    1902:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1904:	83 2f       	mov	r24, r19
    1906:	8f 70       	andi	r24, 0x0F	; 15
    1908:	c2 95       	swap	r28
    190a:	c0 7f       	andi	r28, 0xF0	; 240
    190c:	c8 2b       	or	r28, r24
    190e:	f1 01       	movw	r30, r2
    1910:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1912:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	1c c0       	rjmp	.+56     	; 0x1950 <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	1a c0       	rjmp	.+52     	; 0x1950 <usart_set_baudrate+0x206>
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	18 c0       	rjmp	.+48     	; 0x1950 <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1920:	d3 01       	movw	r26, r6
    1922:	c2 01       	movw	r24, r4
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	aa 1f       	adc	r26, r26
    192a:	bb 1f       	adc	r27, r27
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	aa 1f       	adc	r26, r26
    1932:	bb 1f       	adc	r27, r27
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	aa 1f       	adc	r26, r26
    193a:	bb 1f       	adc	r27, r27
    193c:	85 01       	movw	r16, r10
    193e:	74 01       	movw	r14, r8
    1940:	e8 1a       	sub	r14, r24
    1942:	f9 0a       	sbc	r15, r25
    1944:	0a 0b       	sbc	r16, r26
    1946:	1b 0b       	sbc	r17, r27
    1948:	d8 01       	movw	r26, r16
    194a:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    194c:	c9 ef       	ldi	r28, 0xF9	; 249
    194e:	87 cf       	rjmp	.-242    	; 0x185e <usart_set_baudrate+0x114>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	df 90       	pop	r13
    195c:	cf 90       	pop	r12
    195e:	bf 90       	pop	r11
    1960:	af 90       	pop	r10
    1962:	9f 90       	pop	r9
    1964:	8f 90       	pop	r8
    1966:	7f 90       	pop	r7
    1968:	6f 90       	pop	r6
    196a:	5f 90       	pop	r5
    196c:	4f 90       	pop	r4
    196e:	3f 90       	pop	r3
    1970:	2f 90       	pop	r2
    1972:	08 95       	ret

00001974 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	ec 01       	movw	r28, r24
    197e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	09 f4       	brne	.+2      	; 0x1986 <usart_init_rs232+0x12>
    1984:	36 c1       	rjmp	.+620    	; 0x1bf2 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1986:	80 3c       	cpi	r24, 0xC0	; 192
    1988:	91 05       	cpc	r25, r1
    198a:	21 f4       	brne	.+8      	; 0x1994 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    198c:	60 e1       	ldi	r22, 0x10	; 16
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	e1 db       	rcall	.-2110   	; 0x1154 <sysclk_enable_module>
    1992:	2f c1       	rjmp	.+606    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1994:	c0 34       	cpi	r28, 0x40	; 64
    1996:	84 e0       	ldi	r24, 0x04	; 4
    1998:	d8 07       	cpc	r29, r24
    199a:	21 f4       	brne	.+8      	; 0x19a4 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    199c:	68 e0       	ldi	r22, 0x08	; 8
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	d9 db       	rcall	.-2126   	; 0x1154 <sysclk_enable_module>
    19a2:	27 c1       	rjmp	.+590    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    19a4:	c1 15       	cp	r28, r1
    19a6:	e4 e0       	ldi	r30, 0x04	; 4
    19a8:	de 07       	cpc	r29, r30
    19aa:	21 f4       	brne	.+8      	; 0x19b4 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    19ac:	64 e0       	ldi	r22, 0x04	; 4
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	d1 db       	rcall	.-2142   	; 0x1154 <sysclk_enable_module>
    19b2:	1f c1       	rjmp	.+574    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    19b4:	c0 38       	cpi	r28, 0x80	; 128
    19b6:	f1 e0       	ldi	r31, 0x01	; 1
    19b8:	df 07       	cpc	r29, r31
    19ba:	21 f4       	brne	.+8      	; 0x19c4 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    19bc:	62 e0       	ldi	r22, 0x02	; 2
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	c9 db       	rcall	.-2158   	; 0x1154 <sysclk_enable_module>
    19c2:	17 c1       	rjmp	.+558    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    19c4:	c1 15       	cp	r28, r1
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	d8 07       	cpc	r29, r24
    19ca:	21 f4       	brne	.+8      	; 0x19d4 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	c1 db       	rcall	.-2174   	; 0x1154 <sysclk_enable_module>
    19d2:	0f c1       	rjmp	.+542    	; 0x1bf2 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    19d4:	c0 38       	cpi	r28, 0x80	; 128
    19d6:	e3 e0       	ldi	r30, 0x03	; 3
    19d8:	de 07       	cpc	r29, r30
    19da:	21 f4       	brne	.+8      	; 0x19e4 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    19dc:	61 e0       	ldi	r22, 0x01	; 1
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	b9 db       	rcall	.-2190   	; 0x1154 <sysclk_enable_module>
    19e2:	07 c1       	rjmp	.+526    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    19e4:	c0 39       	cpi	r28, 0x90	; 144
    19e6:	f3 e0       	ldi	r31, 0x03	; 3
    19e8:	df 07       	cpc	r29, r31
    19ea:	21 f4       	brne	.+8      	; 0x19f4 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	b1 db       	rcall	.-2206   	; 0x1154 <sysclk_enable_module>
    19f2:	ff c0       	rjmp	.+510    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    19f4:	c1 15       	cp	r28, r1
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	d8 07       	cpc	r29, r24
    19fa:	21 f4       	brne	.+8      	; 0x1a04 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    19fc:	62 e0       	ldi	r22, 0x02	; 2
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	a9 db       	rcall	.-2222   	; 0x1154 <sysclk_enable_module>
    1a02:	f7 c0       	rjmp	.+494    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1a04:	c0 34       	cpi	r28, 0x40	; 64
    1a06:	e2 e0       	ldi	r30, 0x02	; 2
    1a08:	de 07       	cpc	r29, r30
    1a0a:	21 f4       	brne	.+8      	; 0x1a14 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1a0c:	62 e0       	ldi	r22, 0x02	; 2
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	a1 db       	rcall	.-2238   	; 0x1154 <sysclk_enable_module>
    1a12:	ef c0       	rjmp	.+478    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1a14:	c1 15       	cp	r28, r1
    1a16:	f3 e0       	ldi	r31, 0x03	; 3
    1a18:	df 07       	cpc	r29, r31
    1a1a:	21 f4       	brne	.+8      	; 0x1a24 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1a1c:	64 e0       	ldi	r22, 0x04	; 4
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	99 db       	rcall	.-2254   	; 0x1154 <sysclk_enable_module>
    1a22:	e7 c0       	rjmp	.+462    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1a24:	c0 32       	cpi	r28, 0x20	; 32
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	d8 07       	cpc	r29, r24
    1a2a:	21 f4       	brne	.+8      	; 0x1a34 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1a2c:	64 e0       	ldi	r22, 0x04	; 4
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	91 db       	rcall	.-2270   	; 0x1154 <sysclk_enable_module>
    1a32:	df c0       	rjmp	.+446    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1a34:	c1 15       	cp	r28, r1
    1a36:	e8 e0       	ldi	r30, 0x08	; 8
    1a38:	de 07       	cpc	r29, r30
    1a3a:	21 f4       	brne	.+8      	; 0x1a44 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1a3c:	61 e0       	ldi	r22, 0x01	; 1
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	89 db       	rcall	.-2286   	; 0x1154 <sysclk_enable_module>
    1a42:	d7 c0       	rjmp	.+430    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1a44:	c1 15       	cp	r28, r1
    1a46:	f9 e0       	ldi	r31, 0x09	; 9
    1a48:	df 07       	cpc	r29, r31
    1a4a:	21 f4       	brne	.+8      	; 0x1a54 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1a4c:	61 e0       	ldi	r22, 0x01	; 1
    1a4e:	84 e0       	ldi	r24, 0x04	; 4
    1a50:	81 db       	rcall	.-2302   	; 0x1154 <sysclk_enable_module>
    1a52:	cf c0       	rjmp	.+414    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1a54:	c1 15       	cp	r28, r1
    1a56:	8a e0       	ldi	r24, 0x0A	; 10
    1a58:	d8 07       	cpc	r29, r24
    1a5a:	21 f4       	brne	.+8      	; 0x1a64 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1a5c:	61 e0       	ldi	r22, 0x01	; 1
    1a5e:	85 e0       	ldi	r24, 0x05	; 5
    1a60:	79 db       	rcall	.-2318   	; 0x1154 <sysclk_enable_module>
    1a62:	c7 c0       	rjmp	.+398    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1a64:	c1 15       	cp	r28, r1
    1a66:	eb e0       	ldi	r30, 0x0B	; 11
    1a68:	de 07       	cpc	r29, r30
    1a6a:	21 f4       	brne	.+8      	; 0x1a74 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	86 e0       	ldi	r24, 0x06	; 6
    1a70:	71 db       	rcall	.-2334   	; 0x1154 <sysclk_enable_module>
    1a72:	bf c0       	rjmp	.+382    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1a74:	c0 34       	cpi	r28, 0x40	; 64
    1a76:	f8 e0       	ldi	r31, 0x08	; 8
    1a78:	df 07       	cpc	r29, r31
    1a7a:	21 f4       	brne	.+8      	; 0x1a84 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1a7c:	62 e0       	ldi	r22, 0x02	; 2
    1a7e:	83 e0       	ldi	r24, 0x03	; 3
    1a80:	69 db       	rcall	.-2350   	; 0x1154 <sysclk_enable_module>
    1a82:	b7 c0       	rjmp	.+366    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1a84:	c0 34       	cpi	r28, 0x40	; 64
    1a86:	89 e0       	ldi	r24, 0x09	; 9
    1a88:	d8 07       	cpc	r29, r24
    1a8a:	21 f4       	brne	.+8      	; 0x1a94 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1a8c:	62 e0       	ldi	r22, 0x02	; 2
    1a8e:	84 e0       	ldi	r24, 0x04	; 4
    1a90:	61 db       	rcall	.-2366   	; 0x1154 <sysclk_enable_module>
    1a92:	af c0       	rjmp	.+350    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1a94:	c0 34       	cpi	r28, 0x40	; 64
    1a96:	ea e0       	ldi	r30, 0x0A	; 10
    1a98:	de 07       	cpc	r29, r30
    1a9a:	21 f4       	brne	.+8      	; 0x1aa4 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1a9c:	62 e0       	ldi	r22, 0x02	; 2
    1a9e:	85 e0       	ldi	r24, 0x05	; 5
    1aa0:	59 db       	rcall	.-2382   	; 0x1154 <sysclk_enable_module>
    1aa2:	a7 c0       	rjmp	.+334    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1aa4:	c0 34       	cpi	r28, 0x40	; 64
    1aa6:	fb e0       	ldi	r31, 0x0B	; 11
    1aa8:	df 07       	cpc	r29, r31
    1aaa:	21 f4       	brne	.+8      	; 0x1ab4 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1aac:	62 e0       	ldi	r22, 0x02	; 2
    1aae:	86 e0       	ldi	r24, 0x06	; 6
    1ab0:	51 db       	rcall	.-2398   	; 0x1154 <sysclk_enable_module>
    1ab2:	9f c0       	rjmp	.+318    	; 0x1bf2 <usart_init_rs232+0x27e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1ab4:	c0 39       	cpi	r28, 0x90	; 144
    1ab6:	88 e0       	ldi	r24, 0x08	; 8
    1ab8:	d8 07       	cpc	r29, r24
    1aba:	21 f4       	brne	.+8      	; 0x1ac4 <usart_init_rs232+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1abc:	64 e0       	ldi	r22, 0x04	; 4
    1abe:	83 e0       	ldi	r24, 0x03	; 3
    1ac0:	49 db       	rcall	.-2414   	; 0x1154 <sysclk_enable_module>
    1ac2:	97 c0       	rjmp	.+302    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1ac4:	c0 39       	cpi	r28, 0x90	; 144
    1ac6:	e9 e0       	ldi	r30, 0x09	; 9
    1ac8:	de 07       	cpc	r29, r30
    1aca:	21 f4       	brne	.+8      	; 0x1ad4 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1acc:	64 e0       	ldi	r22, 0x04	; 4
    1ace:	84 e0       	ldi	r24, 0x04	; 4
    1ad0:	41 db       	rcall	.-2430   	; 0x1154 <sysclk_enable_module>
    1ad2:	8f c0       	rjmp	.+286    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1ad4:	c0 39       	cpi	r28, 0x90	; 144
    1ad6:	fa e0       	ldi	r31, 0x0A	; 10
    1ad8:	df 07       	cpc	r29, r31
    1ada:	21 f4       	brne	.+8      	; 0x1ae4 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1adc:	64 e0       	ldi	r22, 0x04	; 4
    1ade:	85 e0       	ldi	r24, 0x05	; 5
    1ae0:	39 db       	rcall	.-2446   	; 0x1154 <sysclk_enable_module>
    1ae2:	87 c0       	rjmp	.+270    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1ae4:	c0 39       	cpi	r28, 0x90	; 144
    1ae6:	8b e0       	ldi	r24, 0x0B	; 11
    1ae8:	d8 07       	cpc	r29, r24
    1aea:	21 f4       	brne	.+8      	; 0x1af4 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1aec:	64 e0       	ldi	r22, 0x04	; 4
    1aee:	86 e0       	ldi	r24, 0x06	; 6
    1af0:	31 db       	rcall	.-2462   	; 0x1154 <sysclk_enable_module>
    1af2:	7f c0       	rjmp	.+254    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1af4:	c0 3c       	cpi	r28, 0xC0	; 192
    1af6:	e8 e0       	ldi	r30, 0x08	; 8
    1af8:	de 07       	cpc	r29, r30
    1afa:	21 f4       	brne	.+8      	; 0x1b04 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1afc:	68 e0       	ldi	r22, 0x08	; 8
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	29 db       	rcall	.-2478   	; 0x1154 <sysclk_enable_module>
    1b02:	77 c0       	rjmp	.+238    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1b04:	c0 3c       	cpi	r28, 0xC0	; 192
    1b06:	f9 e0       	ldi	r31, 0x09	; 9
    1b08:	df 07       	cpc	r29, r31
    1b0a:	21 f4       	brne	.+8      	; 0x1b14 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1b0c:	68 e0       	ldi	r22, 0x08	; 8
    1b0e:	84 e0       	ldi	r24, 0x04	; 4
    1b10:	21 db       	rcall	.-2494   	; 0x1154 <sysclk_enable_module>
    1b12:	6f c0       	rjmp	.+222    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1b14:	c0 3c       	cpi	r28, 0xC0	; 192
    1b16:	8a e0       	ldi	r24, 0x0A	; 10
    1b18:	d8 07       	cpc	r29, r24
    1b1a:	21 f4       	brne	.+8      	; 0x1b24 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1b1c:	68 e0       	ldi	r22, 0x08	; 8
    1b1e:	85 e0       	ldi	r24, 0x05	; 5
    1b20:	19 db       	rcall	.-2510   	; 0x1154 <sysclk_enable_module>
    1b22:	67 c0       	rjmp	.+206    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1b24:	c0 3c       	cpi	r28, 0xC0	; 192
    1b26:	eb e0       	ldi	r30, 0x0B	; 11
    1b28:	de 07       	cpc	r29, r30
    1b2a:	21 f4       	brne	.+8      	; 0x1b34 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1b2c:	68 e0       	ldi	r22, 0x08	; 8
    1b2e:	86 e0       	ldi	r24, 0x06	; 6
    1b30:	11 db       	rcall	.-2526   	; 0x1154 <sysclk_enable_module>
    1b32:	5f c0       	rjmp	.+190    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1b34:	c0 3a       	cpi	r28, 0xA0	; 160
    1b36:	f8 e0       	ldi	r31, 0x08	; 8
    1b38:	df 07       	cpc	r29, r31
    1b3a:	21 f4       	brne	.+8      	; 0x1b44 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1b3c:	60 e1       	ldi	r22, 0x10	; 16
    1b3e:	83 e0       	ldi	r24, 0x03	; 3
    1b40:	09 db       	rcall	.-2542   	; 0x1154 <sysclk_enable_module>
    1b42:	57 c0       	rjmp	.+174    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1b44:	c0 3a       	cpi	r28, 0xA0	; 160
    1b46:	89 e0       	ldi	r24, 0x09	; 9
    1b48:	d8 07       	cpc	r29, r24
    1b4a:	21 f4       	brne	.+8      	; 0x1b54 <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1b4c:	60 e1       	ldi	r22, 0x10	; 16
    1b4e:	84 e0       	ldi	r24, 0x04	; 4
    1b50:	01 db       	rcall	.-2558   	; 0x1154 <sysclk_enable_module>
    1b52:	4f c0       	rjmp	.+158    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1b54:	c0 3a       	cpi	r28, 0xA0	; 160
    1b56:	ea e0       	ldi	r30, 0x0A	; 10
    1b58:	de 07       	cpc	r29, r30
    1b5a:	21 f4       	brne	.+8      	; 0x1b64 <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1b5c:	60 e1       	ldi	r22, 0x10	; 16
    1b5e:	85 e0       	ldi	r24, 0x05	; 5
    1b60:	f9 da       	rcall	.-2574   	; 0x1154 <sysclk_enable_module>
    1b62:	47 c0       	rjmp	.+142    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1b64:	c0 3a       	cpi	r28, 0xA0	; 160
    1b66:	fb e0       	ldi	r31, 0x0B	; 11
    1b68:	df 07       	cpc	r29, r31
    1b6a:	21 f4       	brne	.+8      	; 0x1b74 <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1b6c:	60 e1       	ldi	r22, 0x10	; 16
    1b6e:	86 e0       	ldi	r24, 0x06	; 6
    1b70:	f1 da       	rcall	.-2590   	; 0x1154 <sysclk_enable_module>
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1b74:	c0 3b       	cpi	r28, 0xB0	; 176
    1b76:	88 e0       	ldi	r24, 0x08	; 8
    1b78:	d8 07       	cpc	r29, r24
    1b7a:	21 f4       	brne	.+8      	; 0x1b84 <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1b7c:	60 e2       	ldi	r22, 0x20	; 32
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	e9 da       	rcall	.-2606   	; 0x1154 <sysclk_enable_module>
    1b82:	37 c0       	rjmp	.+110    	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1b84:	c0 3b       	cpi	r28, 0xB0	; 176
    1b86:	e9 e0       	ldi	r30, 0x09	; 9
    1b88:	de 07       	cpc	r29, r30
    1b8a:	21 f4       	brne	.+8      	; 0x1b94 <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1b8c:	60 e2       	ldi	r22, 0x20	; 32
    1b8e:	84 e0       	ldi	r24, 0x04	; 4
    1b90:	e1 da       	rcall	.-2622   	; 0x1154 <sysclk_enable_module>
    1b92:	2f c0       	rjmp	.+94     	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1b94:	c0 3b       	cpi	r28, 0xB0	; 176
    1b96:	fa e0       	ldi	r31, 0x0A	; 10
    1b98:	df 07       	cpc	r29, r31
    1b9a:	21 f4       	brne	.+8      	; 0x1ba4 <usart_init_rs232+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1b9c:	60 e2       	ldi	r22, 0x20	; 32
    1b9e:	85 e0       	ldi	r24, 0x05	; 5
    1ba0:	d9 da       	rcall	.-2638   	; 0x1154 <sysclk_enable_module>
    1ba2:	27 c0       	rjmp	.+78     	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1ba4:	c0 3b       	cpi	r28, 0xB0	; 176
    1ba6:	8b e0       	ldi	r24, 0x0B	; 11
    1ba8:	d8 07       	cpc	r29, r24
    1baa:	21 f4       	brne	.+8      	; 0x1bb4 <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1bac:	60 e2       	ldi	r22, 0x20	; 32
    1bae:	86 e0       	ldi	r24, 0x06	; 6
    1bb0:	d1 da       	rcall	.-2654   	; 0x1154 <sysclk_enable_module>
    1bb2:	1f c0       	rjmp	.+62     	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1bb4:	c0 38       	cpi	r28, 0x80	; 128
    1bb6:	e4 e0       	ldi	r30, 0x04	; 4
    1bb8:	de 07       	cpc	r29, r30
    1bba:	21 f4       	brne	.+8      	; 0x1bc4 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1bbc:	60 e4       	ldi	r22, 0x40	; 64
    1bbe:	83 e0       	ldi	r24, 0x03	; 3
    1bc0:	c9 da       	rcall	.-2670   	; 0x1154 <sysclk_enable_module>
    1bc2:	17 c0       	rjmp	.+46     	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1bc4:	c0 39       	cpi	r28, 0x90	; 144
    1bc6:	f4 e0       	ldi	r31, 0x04	; 4
    1bc8:	df 07       	cpc	r29, r31
    1bca:	21 f4       	brne	.+8      	; 0x1bd4 <usart_init_rs232+0x260>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1bcc:	60 e4       	ldi	r22, 0x40	; 64
    1bce:	84 e0       	ldi	r24, 0x04	; 4
    1bd0:	c1 da       	rcall	.-2686   	; 0x1154 <sysclk_enable_module>
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1bd4:	c0 3a       	cpi	r28, 0xA0	; 160
    1bd6:	84 e0       	ldi	r24, 0x04	; 4
    1bd8:	d8 07       	cpc	r29, r24
    1bda:	21 f4       	brne	.+8      	; 0x1be4 <usart_init_rs232+0x270>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1bdc:	60 e4       	ldi	r22, 0x40	; 64
    1bde:	85 e0       	ldi	r24, 0x05	; 5
    1be0:	b9 da       	rcall	.-2702   	; 0x1154 <sysclk_enable_module>
    1be2:	07 c0       	rjmp	.+14     	; 0x1bf2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1be4:	c0 3b       	cpi	r28, 0xB0	; 176
    1be6:	e4 e0       	ldi	r30, 0x04	; 4
    1be8:	de 07       	cpc	r29, r30
    1bea:	19 f4       	brne	.+6      	; 0x1bf2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1bec:	60 e4       	ldi	r22, 0x40	; 64
    1bee:	86 e0       	ldi	r24, 0x06	; 6
    1bf0:	b1 da       	rcall	.-2718   	; 0x1154 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	8f 73       	andi	r24, 0x3F	; 63
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	94 81       	ldd	r25, Z+4	; 0x04
    1bfc:	85 81       	ldd	r24, Z+5	; 0x05
    1bfe:	89 2b       	or	r24, r25
    1c00:	96 81       	ldd	r25, Z+6	; 0x06
    1c02:	91 11       	cpse	r25, r1
    1c04:	98 e0       	ldi	r25, 0x08	; 8
    1c06:	89 2b       	or	r24, r25
    1c08:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	40 81       	ld	r20, Z
    1c0e:	51 81       	ldd	r21, Z+1	; 0x01
    1c10:	62 81       	ldd	r22, Z+2	; 0x02
    1c12:	73 81       	ldd	r23, Z+3	; 0x03
    1c14:	00 e0       	ldi	r16, 0x00	; 0
    1c16:	18 e4       	ldi	r17, 0x48	; 72
    1c18:	28 ee       	ldi	r18, 0xE8	; 232
    1c1a:	31 e0       	ldi	r19, 0x01	; 1
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	95 dd       	rcall	.-1238   	; 0x174a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	98 60       	ori	r25, 0x08	; 8
    1c24:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1c26:	9c 81       	ldd	r25, Y+4	; 0x04
    1c28:	90 61       	ori	r25, 0x10	; 16
    1c2a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	08 95       	ret

00001c36 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    1c3c:	80 dd       	rcall	.-1280   	; 0x173e <usart_getchar>
    1c3e:	88 83       	st	Y, r24
}
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	08 95       	ret

00001c46 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1c46:	73 cd       	rjmp	.-1306   	; 0x172e <usart_putchar>
}
    1c48:	08 95       	ret

00001c4a <UART_Comms_Init>:
/* Global Variables */

 /*******************************************************************************************/
								/* Initialization methods */
/* Method to initialize UART communications */
void UART_Comms_Init(void){
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	27 97       	sbiw	r28, 0x07	; 7
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	de bf       	out	0x3e, r29	; 62
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	//Must set TX pin as output
	PORTC.DIRSET=0b00001000;
    1c58:	e0 e4       	ldi	r30, 0x40	; 64
    1c5a:	f6 e0       	ldi	r31, 0x06	; 6
    1c5c:	88 e0       	ldi	r24, 0x08	; 8
    1c5e:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET=0b00001000;
    1c60:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUT=0xFF;
    1c62:	8f ef       	ldi	r24, 0xFF	; 255
    1c64:	84 83       	std	Z+4, r24	; 0x04
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1c66:	80 ea       	ldi	r24, 0xA0	; 160
    1c68:	98 e0       	ldi	r25, 0x08	; 8
    1c6a:	80 93 fc 20 	sts	0x20FC, r24
    1c6e:	90 93 fd 20 	sts	0x20FD, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1c72:	83 e2       	ldi	r24, 0x23	; 35
    1c74:	9e e0       	ldi	r25, 0x0E	; 14
    1c76:	80 93 fa 20 	sts	0x20FA, r24
    1c7a:	90 93 fb 20 	sts	0x20FB, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1c7e:	8b e1       	ldi	r24, 0x1B	; 27
    1c80:	9e e0       	ldi	r25, 0x0E	; 14
    1c82:	80 93 f8 20 	sts	0x20F8, r24
    1c86:	90 93 f9 20 	sts	0x20F9, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1c8a:	e6 e0       	ldi	r30, 0x06	; 6
    1c8c:	f0 e2       	ldi	r31, 0x20	; 32
    1c8e:	84 81       	ldd	r24, Z+4	; 0x04
    1c90:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1c92:	85 81       	ldd	r24, Z+5	; 0x05
    1c94:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1c96:	86 81       	ldd	r24, Z+6	; 0x06
    1c98:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	a2 81       	ldd	r26, Z+2	; 0x02
    1ca0:	b3 81       	ldd	r27, Z+3	; 0x03
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	ab 83       	std	Y+3, r26	; 0x03
    1ca8:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    1caa:	60 e1       	ldi	r22, 0x10	; 16
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	52 da       	rcall	.-2908   	; 0x1154 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1cb0:	be 01       	movw	r22, r28
    1cb2:	6f 5f       	subi	r22, 0xFF	; 255
    1cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb6:	80 ea       	ldi	r24, 0xA0	; 160
    1cb8:	98 e0       	ldi	r25, 0x08	; 8
    1cba:	5c de       	rcall	.-840    	; 0x1974 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1cbc:	6e e4       	ldi	r22, 0x4E	; 78
    1cbe:	71 e0       	ldi	r23, 0x01	; 1
    1cc0:	87 e6       	ldi	r24, 0x67	; 103
    1cc2:	91 e0       	ldi	r25, 0x01	; 1
    1cc4:	4b d7       	rcall	.+3734   	; 0x2b5c <fdevopen>

	stdio_serial_init(&USARTC0, &usart_options); //ASF function that initializes the UART peripheral
    1cc6:	27 96       	adiw	r28, 0x07	; 7
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	08 95       	ret

00001cd2 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <sysclk_enable_peripheral_clock+0x6>
    1cd6:	35 c1       	rjmp	.+618    	; 0x1f42 <sysclk_enable_peripheral_clock+0x270>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1cd8:	80 3c       	cpi	r24, 0xC0	; 192
    1cda:	91 05       	cpc	r25, r1
    1cdc:	21 f4       	brne	.+8      	; 0x1ce6 <sysclk_enable_peripheral_clock+0x14>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1cde:	60 e1       	ldi	r22, 0x10	; 16
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	38 ca       	rjmp	.-2960   	; 0x1154 <sysclk_enable_module>
    1ce4:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1ce6:	80 34       	cpi	r24, 0x40	; 64
    1ce8:	24 e0       	ldi	r18, 0x04	; 4
    1cea:	92 07       	cpc	r25, r18
    1cec:	21 f4       	brne	.+8      	; 0x1cf6 <sysclk_enable_peripheral_clock+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1cee:	68 e0       	ldi	r22, 0x08	; 8
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	30 ca       	rjmp	.-2976   	; 0x1154 <sysclk_enable_module>
    1cf4:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1cf6:	81 15       	cp	r24, r1
    1cf8:	24 e0       	ldi	r18, 0x04	; 4
    1cfa:	92 07       	cpc	r25, r18
    1cfc:	21 f4       	brne	.+8      	; 0x1d06 <sysclk_enable_peripheral_clock+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1cfe:	64 e0       	ldi	r22, 0x04	; 4
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	28 ca       	rjmp	.-2992   	; 0x1154 <sysclk_enable_module>
    1d04:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1d06:	80 38       	cpi	r24, 0x80	; 128
    1d08:	21 e0       	ldi	r18, 0x01	; 1
    1d0a:	92 07       	cpc	r25, r18
    1d0c:	21 f4       	brne	.+8      	; 0x1d16 <sysclk_enable_peripheral_clock+0x44>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1d0e:	62 e0       	ldi	r22, 0x02	; 2
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	20 ca       	rjmp	.-3008   	; 0x1154 <sysclk_enable_module>
    1d14:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1d16:	81 15       	cp	r24, r1
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	92 07       	cpc	r25, r18
    1d1c:	21 f4       	brne	.+8      	; 0x1d26 <sysclk_enable_peripheral_clock+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1d1e:	61 e0       	ldi	r22, 0x01	; 1
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	18 ca       	rjmp	.-3024   	; 0x1154 <sysclk_enable_module>
    1d24:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1d26:	80 38       	cpi	r24, 0x80	; 128
    1d28:	23 e0       	ldi	r18, 0x03	; 3
    1d2a:	92 07       	cpc	r25, r18
    1d2c:	21 f4       	brne	.+8      	; 0x1d36 <sysclk_enable_peripheral_clock+0x64>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1d2e:	61 e0       	ldi	r22, 0x01	; 1
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	10 ca       	rjmp	.-3040   	; 0x1154 <sysclk_enable_module>
    1d34:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1d36:	80 39       	cpi	r24, 0x90	; 144
    1d38:	23 e0       	ldi	r18, 0x03	; 3
    1d3a:	92 07       	cpc	r25, r18
    1d3c:	21 f4       	brne	.+8      	; 0x1d46 <sysclk_enable_peripheral_clock+0x74>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1d3e:	61 e0       	ldi	r22, 0x01	; 1
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	08 ca       	rjmp	.-3056   	; 0x1154 <sysclk_enable_module>
    1d44:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1d46:	81 15       	cp	r24, r1
    1d48:	22 e0       	ldi	r18, 0x02	; 2
    1d4a:	92 07       	cpc	r25, r18
    1d4c:	21 f4       	brne	.+8      	; 0x1d56 <sysclk_enable_peripheral_clock+0x84>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1d4e:	62 e0       	ldi	r22, 0x02	; 2
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	00 ca       	rjmp	.-3072   	; 0x1154 <sysclk_enable_module>
    1d54:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1d56:	80 34       	cpi	r24, 0x40	; 64
    1d58:	22 e0       	ldi	r18, 0x02	; 2
    1d5a:	92 07       	cpc	r25, r18
    1d5c:	21 f4       	brne	.+8      	; 0x1d66 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1d5e:	62 e0       	ldi	r22, 0x02	; 2
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	f8 c9       	rjmp	.-3088   	; 0x1154 <sysclk_enable_module>
    1d64:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1d66:	81 15       	cp	r24, r1
    1d68:	23 e0       	ldi	r18, 0x03	; 3
    1d6a:	92 07       	cpc	r25, r18
    1d6c:	21 f4       	brne	.+8      	; 0x1d76 <sysclk_enable_peripheral_clock+0xa4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1d6e:	64 e0       	ldi	r22, 0x04	; 4
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	f0 c9       	rjmp	.-3104   	; 0x1154 <sysclk_enable_module>
    1d74:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1d76:	80 32       	cpi	r24, 0x20	; 32
    1d78:	23 e0       	ldi	r18, 0x03	; 3
    1d7a:	92 07       	cpc	r25, r18
    1d7c:	21 f4       	brne	.+8      	; 0x1d86 <sysclk_enable_peripheral_clock+0xb4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1d7e:	64 e0       	ldi	r22, 0x04	; 4
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	e8 c9       	rjmp	.-3120   	; 0x1154 <sysclk_enable_module>
    1d84:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1d86:	81 15       	cp	r24, r1
    1d88:	28 e0       	ldi	r18, 0x08	; 8
    1d8a:	92 07       	cpc	r25, r18
    1d8c:	21 f4       	brne	.+8      	; 0x1d96 <sysclk_enable_peripheral_clock+0xc4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1d8e:	61 e0       	ldi	r22, 0x01	; 1
    1d90:	83 e0       	ldi	r24, 0x03	; 3
    1d92:	e0 c9       	rjmp	.-3136   	; 0x1154 <sysclk_enable_module>
    1d94:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1d96:	81 15       	cp	r24, r1
    1d98:	29 e0       	ldi	r18, 0x09	; 9
    1d9a:	92 07       	cpc	r25, r18
    1d9c:	21 f4       	brne	.+8      	; 0x1da6 <sysclk_enable_peripheral_clock+0xd4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1d9e:	61 e0       	ldi	r22, 0x01	; 1
    1da0:	84 e0       	ldi	r24, 0x04	; 4
    1da2:	d8 c9       	rjmp	.-3152   	; 0x1154 <sysclk_enable_module>
    1da4:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1da6:	81 15       	cp	r24, r1
    1da8:	2a e0       	ldi	r18, 0x0A	; 10
    1daa:	92 07       	cpc	r25, r18
    1dac:	21 f4       	brne	.+8      	; 0x1db6 <sysclk_enable_peripheral_clock+0xe4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1dae:	61 e0       	ldi	r22, 0x01	; 1
    1db0:	85 e0       	ldi	r24, 0x05	; 5
    1db2:	d0 c9       	rjmp	.-3168   	; 0x1154 <sysclk_enable_module>
    1db4:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1db6:	81 15       	cp	r24, r1
    1db8:	2b e0       	ldi	r18, 0x0B	; 11
    1dba:	92 07       	cpc	r25, r18
    1dbc:	21 f4       	brne	.+8      	; 0x1dc6 <sysclk_enable_peripheral_clock+0xf4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1dbe:	61 e0       	ldi	r22, 0x01	; 1
    1dc0:	86 e0       	ldi	r24, 0x06	; 6
    1dc2:	c8 c9       	rjmp	.-3184   	; 0x1154 <sysclk_enable_module>
    1dc4:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1dc6:	80 34       	cpi	r24, 0x40	; 64
    1dc8:	28 e0       	ldi	r18, 0x08	; 8
    1dca:	92 07       	cpc	r25, r18
    1dcc:	21 f4       	brne	.+8      	; 0x1dd6 <sysclk_enable_peripheral_clock+0x104>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1dce:	62 e0       	ldi	r22, 0x02	; 2
    1dd0:	83 e0       	ldi	r24, 0x03	; 3
    1dd2:	c0 c9       	rjmp	.-3200   	; 0x1154 <sysclk_enable_module>
    1dd4:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1dd6:	80 34       	cpi	r24, 0x40	; 64
    1dd8:	29 e0       	ldi	r18, 0x09	; 9
    1dda:	92 07       	cpc	r25, r18
    1ddc:	21 f4       	brne	.+8      	; 0x1de6 <sysclk_enable_peripheral_clock+0x114>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1dde:	62 e0       	ldi	r22, 0x02	; 2
    1de0:	84 e0       	ldi	r24, 0x04	; 4
    1de2:	b8 c9       	rjmp	.-3216   	; 0x1154 <sysclk_enable_module>
    1de4:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1de6:	80 34       	cpi	r24, 0x40	; 64
    1de8:	2a e0       	ldi	r18, 0x0A	; 10
    1dea:	92 07       	cpc	r25, r18
    1dec:	21 f4       	brne	.+8      	; 0x1df6 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1dee:	62 e0       	ldi	r22, 0x02	; 2
    1df0:	85 e0       	ldi	r24, 0x05	; 5
    1df2:	b0 c9       	rjmp	.-3232   	; 0x1154 <sysclk_enable_module>
    1df4:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1df6:	80 34       	cpi	r24, 0x40	; 64
    1df8:	2b e0       	ldi	r18, 0x0B	; 11
    1dfa:	92 07       	cpc	r25, r18
    1dfc:	21 f4       	brne	.+8      	; 0x1e06 <sysclk_enable_peripheral_clock+0x134>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1dfe:	62 e0       	ldi	r22, 0x02	; 2
    1e00:	86 e0       	ldi	r24, 0x06	; 6
    1e02:	a8 c9       	rjmp	.-3248   	; 0x1154 <sysclk_enable_module>
    1e04:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1e06:	80 39       	cpi	r24, 0x90	; 144
    1e08:	28 e0       	ldi	r18, 0x08	; 8
    1e0a:	92 07       	cpc	r25, r18
    1e0c:	21 f4       	brne	.+8      	; 0x1e16 <sysclk_enable_peripheral_clock+0x144>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1e0e:	64 e0       	ldi	r22, 0x04	; 4
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	a0 c9       	rjmp	.-3264   	; 0x1154 <sysclk_enable_module>
    1e14:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1e16:	80 39       	cpi	r24, 0x90	; 144
    1e18:	29 e0       	ldi	r18, 0x09	; 9
    1e1a:	92 07       	cpc	r25, r18
    1e1c:	21 f4       	brne	.+8      	; 0x1e26 <sysclk_enable_peripheral_clock+0x154>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1e1e:	64 e0       	ldi	r22, 0x04	; 4
    1e20:	84 e0       	ldi	r24, 0x04	; 4
    1e22:	98 c9       	rjmp	.-3280   	; 0x1154 <sysclk_enable_module>
    1e24:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1e26:	80 39       	cpi	r24, 0x90	; 144
    1e28:	2a e0       	ldi	r18, 0x0A	; 10
    1e2a:	92 07       	cpc	r25, r18
    1e2c:	21 f4       	brne	.+8      	; 0x1e36 <sysclk_enable_peripheral_clock+0x164>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1e2e:	64 e0       	ldi	r22, 0x04	; 4
    1e30:	85 e0       	ldi	r24, 0x05	; 5
    1e32:	90 c9       	rjmp	.-3296   	; 0x1154 <sysclk_enable_module>
    1e34:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1e36:	80 39       	cpi	r24, 0x90	; 144
    1e38:	2b e0       	ldi	r18, 0x0B	; 11
    1e3a:	92 07       	cpc	r25, r18
    1e3c:	21 f4       	brne	.+8      	; 0x1e46 <sysclk_enable_peripheral_clock+0x174>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1e3e:	64 e0       	ldi	r22, 0x04	; 4
    1e40:	86 e0       	ldi	r24, 0x06	; 6
    1e42:	88 c9       	rjmp	.-3312   	; 0x1154 <sysclk_enable_module>
    1e44:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1e46:	80 3c       	cpi	r24, 0xC0	; 192
    1e48:	28 e0       	ldi	r18, 0x08	; 8
    1e4a:	92 07       	cpc	r25, r18
    1e4c:	21 f4       	brne	.+8      	; 0x1e56 <sysclk_enable_peripheral_clock+0x184>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1e4e:	68 e0       	ldi	r22, 0x08	; 8
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	80 c9       	rjmp	.-3328   	; 0x1154 <sysclk_enable_module>
    1e54:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1e56:	80 3c       	cpi	r24, 0xC0	; 192
    1e58:	29 e0       	ldi	r18, 0x09	; 9
    1e5a:	92 07       	cpc	r25, r18
    1e5c:	21 f4       	brne	.+8      	; 0x1e66 <sysclk_enable_peripheral_clock+0x194>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1e5e:	68 e0       	ldi	r22, 0x08	; 8
    1e60:	84 e0       	ldi	r24, 0x04	; 4
    1e62:	78 c9       	rjmp	.-3344   	; 0x1154 <sysclk_enable_module>
    1e64:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1e66:	80 3c       	cpi	r24, 0xC0	; 192
    1e68:	2a e0       	ldi	r18, 0x0A	; 10
    1e6a:	92 07       	cpc	r25, r18
    1e6c:	21 f4       	brne	.+8      	; 0x1e76 <sysclk_enable_peripheral_clock+0x1a4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1e6e:	68 e0       	ldi	r22, 0x08	; 8
    1e70:	85 e0       	ldi	r24, 0x05	; 5
    1e72:	70 c9       	rjmp	.-3360   	; 0x1154 <sysclk_enable_module>
    1e74:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1e76:	80 3c       	cpi	r24, 0xC0	; 192
    1e78:	2b e0       	ldi	r18, 0x0B	; 11
    1e7a:	92 07       	cpc	r25, r18
    1e7c:	21 f4       	brne	.+8      	; 0x1e86 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1e7e:	68 e0       	ldi	r22, 0x08	; 8
    1e80:	86 e0       	ldi	r24, 0x06	; 6
    1e82:	68 c9       	rjmp	.-3376   	; 0x1154 <sysclk_enable_module>
    1e84:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1e86:	80 3a       	cpi	r24, 0xA0	; 160
    1e88:	28 e0       	ldi	r18, 0x08	; 8
    1e8a:	92 07       	cpc	r25, r18
    1e8c:	21 f4       	brne	.+8      	; 0x1e96 <sysclk_enable_peripheral_clock+0x1c4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1e8e:	60 e1       	ldi	r22, 0x10	; 16
    1e90:	83 e0       	ldi	r24, 0x03	; 3
    1e92:	60 c9       	rjmp	.-3392   	; 0x1154 <sysclk_enable_module>
    1e94:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1e96:	80 3a       	cpi	r24, 0xA0	; 160
    1e98:	29 e0       	ldi	r18, 0x09	; 9
    1e9a:	92 07       	cpc	r25, r18
    1e9c:	21 f4       	brne	.+8      	; 0x1ea6 <sysclk_enable_peripheral_clock+0x1d4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1e9e:	60 e1       	ldi	r22, 0x10	; 16
    1ea0:	84 e0       	ldi	r24, 0x04	; 4
    1ea2:	58 c9       	rjmp	.-3408   	; 0x1154 <sysclk_enable_module>
    1ea4:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1ea6:	80 3a       	cpi	r24, 0xA0	; 160
    1ea8:	2a e0       	ldi	r18, 0x0A	; 10
    1eaa:	92 07       	cpc	r25, r18
    1eac:	21 f4       	brne	.+8      	; 0x1eb6 <sysclk_enable_peripheral_clock+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1eae:	60 e1       	ldi	r22, 0x10	; 16
    1eb0:	85 e0       	ldi	r24, 0x05	; 5
    1eb2:	50 c9       	rjmp	.-3424   	; 0x1154 <sysclk_enable_module>
    1eb4:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1eb6:	80 3a       	cpi	r24, 0xA0	; 160
    1eb8:	2b e0       	ldi	r18, 0x0B	; 11
    1eba:	92 07       	cpc	r25, r18
    1ebc:	21 f4       	brne	.+8      	; 0x1ec6 <sysclk_enable_peripheral_clock+0x1f4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1ebe:	60 e1       	ldi	r22, 0x10	; 16
    1ec0:	86 e0       	ldi	r24, 0x06	; 6
    1ec2:	48 c9       	rjmp	.-3440   	; 0x1154 <sysclk_enable_module>
    1ec4:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1ec6:	80 3b       	cpi	r24, 0xB0	; 176
    1ec8:	28 e0       	ldi	r18, 0x08	; 8
    1eca:	92 07       	cpc	r25, r18
    1ecc:	21 f4       	brne	.+8      	; 0x1ed6 <sysclk_enable_peripheral_clock+0x204>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1ece:	60 e2       	ldi	r22, 0x20	; 32
    1ed0:	83 e0       	ldi	r24, 0x03	; 3
    1ed2:	40 c9       	rjmp	.-3456   	; 0x1154 <sysclk_enable_module>
    1ed4:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1ed6:	80 3b       	cpi	r24, 0xB0	; 176
    1ed8:	29 e0       	ldi	r18, 0x09	; 9
    1eda:	92 07       	cpc	r25, r18
    1edc:	21 f4       	brne	.+8      	; 0x1ee6 <sysclk_enable_peripheral_clock+0x214>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1ede:	60 e2       	ldi	r22, 0x20	; 32
    1ee0:	84 e0       	ldi	r24, 0x04	; 4
    1ee2:	38 c9       	rjmp	.-3472   	; 0x1154 <sysclk_enable_module>
    1ee4:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1ee6:	80 3b       	cpi	r24, 0xB0	; 176
    1ee8:	2a e0       	ldi	r18, 0x0A	; 10
    1eea:	92 07       	cpc	r25, r18
    1eec:	21 f4       	brne	.+8      	; 0x1ef6 <sysclk_enable_peripheral_clock+0x224>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1eee:	60 e2       	ldi	r22, 0x20	; 32
    1ef0:	85 e0       	ldi	r24, 0x05	; 5
    1ef2:	30 c9       	rjmp	.-3488   	; 0x1154 <sysclk_enable_module>
    1ef4:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1ef6:	80 3b       	cpi	r24, 0xB0	; 176
    1ef8:	2b e0       	ldi	r18, 0x0B	; 11
    1efa:	92 07       	cpc	r25, r18
    1efc:	21 f4       	brne	.+8      	; 0x1f06 <sysclk_enable_peripheral_clock+0x234>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1efe:	60 e2       	ldi	r22, 0x20	; 32
    1f00:	86 e0       	ldi	r24, 0x06	; 6
    1f02:	28 c9       	rjmp	.-3504   	; 0x1154 <sysclk_enable_module>
    1f04:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1f06:	80 38       	cpi	r24, 0x80	; 128
    1f08:	24 e0       	ldi	r18, 0x04	; 4
    1f0a:	92 07       	cpc	r25, r18
    1f0c:	21 f4       	brne	.+8      	; 0x1f16 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1f0e:	60 e4       	ldi	r22, 0x40	; 64
    1f10:	83 e0       	ldi	r24, 0x03	; 3
    1f12:	20 c9       	rjmp	.-3520   	; 0x1154 <sysclk_enable_module>
    1f14:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1f16:	80 39       	cpi	r24, 0x90	; 144
    1f18:	24 e0       	ldi	r18, 0x04	; 4
    1f1a:	92 07       	cpc	r25, r18
    1f1c:	21 f4       	brne	.+8      	; 0x1f26 <sysclk_enable_peripheral_clock+0x254>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1f1e:	60 e4       	ldi	r22, 0x40	; 64
    1f20:	84 e0       	ldi	r24, 0x04	; 4
    1f22:	18 c9       	rjmp	.-3536   	; 0x1154 <sysclk_enable_module>
    1f24:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1f26:	80 3a       	cpi	r24, 0xA0	; 160
    1f28:	24 e0       	ldi	r18, 0x04	; 4
    1f2a:	92 07       	cpc	r25, r18
    1f2c:	21 f4       	brne	.+8      	; 0x1f36 <sysclk_enable_peripheral_clock+0x264>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1f2e:	60 e4       	ldi	r22, 0x40	; 64
    1f30:	85 e0       	ldi	r24, 0x05	; 5
    1f32:	10 c9       	rjmp	.-3552   	; 0x1154 <sysclk_enable_module>
    1f34:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1f36:	80 3b       	cpi	r24, 0xB0	; 176
    1f38:	94 40       	sbci	r25, 0x04	; 4
    1f3a:	19 f4       	brne	.+6      	; 0x1f42 <sysclk_enable_peripheral_clock+0x270>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1f3c:	60 e4       	ldi	r22, 0x40	; 64
    1f3e:	86 e0       	ldi	r24, 0x06	; 6
    1f40:	09 c9       	rjmp	.-3566   	; 0x1154 <sysclk_enable_module>
    1f42:	08 95       	ret

00001f44 <main>:


/*******************************************************************************************/
										/* Main method */
int main (void){
	board_init();
    1f44:	3b d9       	rcall	.-3466   	; 0x11bc <board_init>
	sysclk_init(); //Initializes the system clock to 32MHz, also turns off all peripheral clocks.
    1f46:	df d8       	rcall	.-3650   	; 0x1106 <sysclk_init>
	
	/* Peripheral Clock Initializations */
	sysclk_enable_peripheral_clock(&ADCA); //USART comms clock init for SD reader.
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	92 e0       	ldi	r25, 0x02	; 2
    1f4c:	c2 de       	rcall	.-636    	; 0x1cd2 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTC0);//If this fixes it imma shit myself it didnt my underwar is speared for another day
    1f4e:	80 ea       	ldi	r24, 0xA0	; 160
    1f50:	98 e0       	ldi	r25, 0x08	; 8
    1f52:	bf de       	rcall	.-642    	; 0x1cd2 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCE0); //LED timer counter, needs to be changed.
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	9a e0       	ldi	r25, 0x0A	; 10
    1f58:	bc de       	rcall	.-648    	; 0x1cd2 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&SPIC); //SPI init for pressure sensor.
    1f5a:	80 ec       	ldi	r24, 0xC0	; 192
    1f5c:	98 e0       	ldi	r25, 0x08	; 8
    1f5e:	b9 de       	rcall	.-654    	; 0x1cd2 <sysclk_enable_peripheral_clock>
	
	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES); //LED timer counter, again needs to be changed.
    1f60:	64 e0       	ldi	r22, 0x04	; 4
    1f62:	85 e0       	ldi	r24, 0x05	; 5
    1f64:	f7 d8       	rcall	.-3602   	; 0x1154 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
    1f66:	68 e0       	ldi	r22, 0x08	; 8
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	f4 d8       	rcall	.-3608   	; 0x1154 <sysclk_enable_module>
	
	UART_Comms_Init();
    1f6c:	6e de       	rcall	.-804    	; 0x1c4a <UART_Comms_Init>
	//data_Init();
	ADCinit();
    1f6e:	74 d8       	rcall	.-3864   	; 0x1058 <ADCinit>
    1f70:	8a ea       	ldi	r24, 0xAA	; 170
    1f72:	90 eb       	ldi	r25, 0xB0	; 176
    1f74:	a8 e2       	ldi	r26, 0x28	; 40
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	a1 09       	sbc	r26, r1
    1f7c:	b1 09       	sbc	r27, r1
    1f7e:	e1 f7       	brne	.-8      	; 0x1f78 <main+0x34>

	//blinkLED();
	 
	//delay_ms(500);
	delay_ms(500);
	printf("Setup finished\n");
    1f80:	89 eb       	ldi	r24, 0xB9	; 185
    1f82:	90 e2       	ldi	r25, 0x20	; 32
    1f84:	48 d6       	rcall	.+3216   	; 0x2c16 <puts>
	spi_init();
    1f86:	5b d8       	rcall	.-3914   	; 0x103e <spi_init>
	//printf("%u\n", time1);
	
	//printf("test2\n");
	/* Insert application code here, after the board has been initialized. */
	while(1){
		printf("%" PRId32 "\n", getPressure());
    1f88:	c8 ec       	ldi	r28, 0xC8	; 200
    1f8a:	d0 e2       	ldi	r29, 0x20	; 32
    1f8c:	0f 2e       	mov	r0, r31
    1f8e:	f4 e5       	ldi	r31, 0x54	; 84
    1f90:	ef 2e       	mov	r14, r31
    1f92:	f0 2d       	mov	r31, r0
    1f94:	0f 2e       	mov	r0, r31
    1f96:	fd ec       	ldi	r31, 0xCD	; 205
    1f98:	ff 2e       	mov	r15, r31
    1f9a:	f0 2d       	mov	r31, r0
    1f9c:	0d e2       	ldi	r16, 0x2D	; 45
    1f9e:	13 e0       	ldi	r17, 0x03	; 3
    1fa0:	0e 94 0a 06 	call	0xc14	; 0xc14 <getPressure>
    1fa4:	9f 93       	push	r25
    1fa6:	8f 93       	push	r24
    1fa8:	7f 93       	push	r23
    1faa:	6f 93       	push	r22
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	1f d6       	rcall	.+3134   	; 0x2bf0 <printf>
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	8e 2d       	mov	r24, r14
    1fc0:	9f 2d       	mov	r25, r15
    1fc2:	a0 2f       	mov	r26, r16
    1fc4:	b1 2f       	mov	r27, r17
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	a1 09       	sbc	r26, r1
    1fca:	b1 09       	sbc	r27, r1
    1fcc:	e1 f7       	brne	.-8      	; 0x1fc6 <main+0x82>
		delay_s(10);
		printf("Test\n");
    1fce:	8d ec       	ldi	r24, 0xCD	; 205
    1fd0:	90 e2       	ldi	r25, 0x20	; 32
    1fd2:	21 d6       	rcall	.+3138   	; 0x2c16 <puts>
		//printf("HEY\n");
		
		
#endif
	//printf("HOLY FUCK\n");
	}
    1fd4:	e5 cf       	rjmp	.-54     	; 0x1fa0 <main+0x5c>

00001fd6 <__vector_53>:
}

ISR(TCE1_OVF_vect){ //Each second throw the interrupt and do this function
    1fd6:	1f 92       	push	r1
    1fd8:	0f 92       	push	r0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	0f 92       	push	r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	08 b6       	in	r0, 0x38	; 56
    1fe2:	0f 92       	push	r0
    1fe4:	18 be       	out	0x38, r1	; 56
    1fe6:	09 b6       	in	r0, 0x39	; 57
    1fe8:	0f 92       	push	r0
    1fea:	19 be       	out	0x39, r1	; 57
    1fec:	0b b6       	in	r0, 0x3b	; 59
    1fee:	0f 92       	push	r0
    1ff0:	1b be       	out	0x3b, r1	; 59
    1ff2:	cf 92       	push	r12
    1ff4:	df 92       	push	r13
    1ff6:	ef 92       	push	r14
    1ff8:	ff 92       	push	r15
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	2f 93       	push	r18
    2000:	3f 93       	push	r19
    2002:	4f 93       	push	r20
    2004:	5f 93       	push	r21
    2006:	6f 93       	push	r22
    2008:	7f 93       	push	r23
    200a:	8f 93       	push	r24
    200c:	9f 93       	push	r25
    200e:	af 93       	push	r26
    2010:	bf 93       	push	r27
    2012:	cf 93       	push	r28
    2014:	ef 93       	push	r30
    2016:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2018:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    201a:	f8 94       	cli
		time++; //time in seconds
    201c:	80 91 f7 20 	lds	r24, 0x20F7
    2020:	8f 5f       	subi	r24, 0xFF	; 255
    2022:	80 93 f7 20 	sts	0x20F7, r24
#ifdef DEBUG_TIMEINT
		test = 1;
		//printf("%u, %u, %u, ", ABG_geiger,BG_geiger,gamma_geiger);
#endif
		
		saveData(time, ABG_geiger, BG_geiger, gamma_geiger,getAltitude(getTemperature(),getPressure())); //sava data packet containing time, alpha, beta, gamma and altitude readings.
    2026:	0e 94 0a 06 	call	0xc14	; 0xc14 <getPressure>
    202a:	6b 01       	movw	r12, r22
    202c:	7c 01       	movw	r14, r24
    202e:	3c d8       	rcall	.-3976   	; 0x10a8 <getTemperature>
    2030:	a7 01       	movw	r20, r14
    2032:	96 01       	movw	r18, r12
    2034:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <getAltitude>
    2038:	6b 01       	movw	r12, r22
    203a:	7c 01       	movw	r14, r24
    203c:	00 91 f1 20 	lds	r16, 0x20F1
    2040:	10 91 f2 20 	lds	r17, 0x20F2
    2044:	20 91 f3 20 	lds	r18, 0x20F3
    2048:	30 91 f4 20 	lds	r19, 0x20F4
    204c:	40 91 f5 20 	lds	r20, 0x20F5
    2050:	50 91 f6 20 	lds	r21, 0x20F6
    2054:	80 91 f7 20 	lds	r24, 0x20F7
    2058:	68 2f       	mov	r22, r24
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 ad 04 	call	0x95a	; 0x95a <saveData>
		ABG_geiger = 0;//reset geiger counter readings to zero
    2064:	10 92 f5 20 	sts	0x20F5, r1
    2068:	10 92 f6 20 	sts	0x20F6, r1
		BG_geiger = 0;
    206c:	10 92 f3 20 	sts	0x20F3, r1
    2070:	10 92 f4 20 	sts	0x20F4, r1
		gamma_geiger = 0;
    2074:	10 92 f1 20 	sts	0x20F1, r1
    2078:	10 92 f2 20 	sts	0x20F2, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    207c:	cf bf       	out	0x3f, r28	; 63
		

	}
}
    207e:	ff 91       	pop	r31
    2080:	ef 91       	pop	r30
    2082:	cf 91       	pop	r28
    2084:	bf 91       	pop	r27
    2086:	af 91       	pop	r26
    2088:	9f 91       	pop	r25
    208a:	8f 91       	pop	r24
    208c:	7f 91       	pop	r23
    208e:	6f 91       	pop	r22
    2090:	5f 91       	pop	r21
    2092:	4f 91       	pop	r20
    2094:	3f 91       	pop	r19
    2096:	2f 91       	pop	r18
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	ff 90       	pop	r15
    209e:	ef 90       	pop	r14
    20a0:	df 90       	pop	r13
    20a2:	cf 90       	pop	r12
    20a4:	0f 90       	pop	r0
    20a6:	0b be       	out	0x3b, r0	; 59
    20a8:	0f 90       	pop	r0
    20aa:	09 be       	out	0x39, r0	; 57
    20ac:	0f 90       	pop	r0
    20ae:	08 be       	out	0x38, r0	; 56
    20b0:	0f 90       	pop	r0
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	0f 90       	pop	r0
    20b6:	1f 90       	pop	r1
    20b8:	18 95       	reti

000020ba <__vector_64>:

ISR(PORTD_INT0_vect){ //Every time alpha geiger sends us a ping, throw this interrupt 
    20ba:	1f 92       	push	r1
    20bc:	0f 92       	push	r0
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	0f 92       	push	r0
    20c2:	11 24       	eor	r1, r1
    20c4:	08 b6       	in	r0, 0x38	; 56
    20c6:	0f 92       	push	r0
    20c8:	18 be       	out	0x38, r1	; 56
    20ca:	09 b6       	in	r0, 0x39	; 57
    20cc:	0f 92       	push	r0
    20ce:	19 be       	out	0x39, r1	; 57
    20d0:	0b b6       	in	r0, 0x3b	; 59
    20d2:	0f 92       	push	r0
    20d4:	1b be       	out	0x3b, r1	; 59
    20d6:	2f 93       	push	r18
    20d8:	3f 93       	push	r19
    20da:	4f 93       	push	r20
    20dc:	5f 93       	push	r21
    20de:	6f 93       	push	r22
    20e0:	7f 93       	push	r23
    20e2:	8f 93       	push	r24
    20e4:	9f 93       	push	r25
    20e6:	af 93       	push	r26
    20e8:	bf 93       	push	r27
    20ea:	cf 93       	push	r28
    20ec:	ef 93       	push	r30
    20ee:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    20f0:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    20f2:	f8 94       	cli
		printf("alpha!\n");
    20f4:	82 ed       	ldi	r24, 0xD2	; 210
    20f6:	90 e2       	ldi	r25, 0x20	; 32
    20f8:	8e d5       	rcall	.+2844   	; 0x2c16 <puts>
		ABG_geiger++; //advance the count for this counter by one.
    20fa:	80 91 f5 20 	lds	r24, 0x20F5
    20fe:	90 91 f6 20 	lds	r25, 0x20F6
    2102:	01 96       	adiw	r24, 0x01	; 1
    2104:	80 93 f5 20 	sts	0x20F5, r24
    2108:	90 93 f6 20 	sts	0x20F6, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    210c:	cf bf       	out	0x3f, r28	; 63
#ifdef DEBUG_GEIGERINT
		//lightChase(50);
#endif
	}
}
    210e:	ff 91       	pop	r31
    2110:	ef 91       	pop	r30
    2112:	cf 91       	pop	r28
    2114:	bf 91       	pop	r27
    2116:	af 91       	pop	r26
    2118:	9f 91       	pop	r25
    211a:	8f 91       	pop	r24
    211c:	7f 91       	pop	r23
    211e:	6f 91       	pop	r22
    2120:	5f 91       	pop	r21
    2122:	4f 91       	pop	r20
    2124:	3f 91       	pop	r19
    2126:	2f 91       	pop	r18
    2128:	0f 90       	pop	r0
    212a:	0b be       	out	0x3b, r0	; 59
    212c:	0f 90       	pop	r0
    212e:	09 be       	out	0x39, r0	; 57
    2130:	0f 90       	pop	r0
    2132:	08 be       	out	0x38, r0	; 56
    2134:	0f 90       	pop	r0
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	0f 90       	pop	r0
    213a:	1f 90       	pop	r1
    213c:	18 95       	reti

0000213e <__vector_65>:

ISR(PORTD_INT1_vect){ //Every time beta geiger sends us a ping, throw this interrupt
    213e:	1f 92       	push	r1
    2140:	0f 92       	push	r0
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	0f 92       	push	r0
    2146:	11 24       	eor	r1, r1
    2148:	08 b6       	in	r0, 0x38	; 56
    214a:	0f 92       	push	r0
    214c:	18 be       	out	0x38, r1	; 56
    214e:	09 b6       	in	r0, 0x39	; 57
    2150:	0f 92       	push	r0
    2152:	19 be       	out	0x39, r1	; 57
    2154:	0b b6       	in	r0, 0x3b	; 59
    2156:	0f 92       	push	r0
    2158:	1b be       	out	0x3b, r1	; 59
    215a:	2f 93       	push	r18
    215c:	3f 93       	push	r19
    215e:	4f 93       	push	r20
    2160:	5f 93       	push	r21
    2162:	6f 93       	push	r22
    2164:	7f 93       	push	r23
    2166:	8f 93       	push	r24
    2168:	9f 93       	push	r25
    216a:	af 93       	push	r26
    216c:	bf 93       	push	r27
    216e:	cf 93       	push	r28
    2170:	ef 93       	push	r30
    2172:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2174:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2176:	f8 94       	cli
		printf("beta!\n");
    2178:	89 ed       	ldi	r24, 0xD9	; 217
    217a:	90 e2       	ldi	r25, 0x20	; 32
    217c:	4c d5       	rcall	.+2712   	; 0x2c16 <puts>
		BG_geiger++;
    217e:	80 91 f3 20 	lds	r24, 0x20F3
    2182:	90 91 f4 20 	lds	r25, 0x20F4
    2186:	01 96       	adiw	r24, 0x01	; 1
    2188:	80 93 f3 20 	sts	0x20F3, r24
    218c:	90 93 f4 20 	sts	0x20F4, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2190:	cf bf       	out	0x3f, r28	; 63
#ifdef DEBUG_GEIGERINT
		//lightChase(50); 
#endif
	}
}
    2192:	ff 91       	pop	r31
    2194:	ef 91       	pop	r30
    2196:	cf 91       	pop	r28
    2198:	bf 91       	pop	r27
    219a:	af 91       	pop	r26
    219c:	9f 91       	pop	r25
    219e:	8f 91       	pop	r24
    21a0:	7f 91       	pop	r23
    21a2:	6f 91       	pop	r22
    21a4:	5f 91       	pop	r21
    21a6:	4f 91       	pop	r20
    21a8:	3f 91       	pop	r19
    21aa:	2f 91       	pop	r18
    21ac:	0f 90       	pop	r0
    21ae:	0b be       	out	0x3b, r0	; 59
    21b0:	0f 90       	pop	r0
    21b2:	09 be       	out	0x39, r0	; 57
    21b4:	0f 90       	pop	r0
    21b6:	08 be       	out	0x38, r0	; 56
    21b8:	0f 90       	pop	r0
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	0f 90       	pop	r0
    21be:	1f 90       	pop	r1
    21c0:	18 95       	reti

000021c2 <__subsf3>:
    21c2:	50 58       	subi	r21, 0x80	; 128

000021c4 <__addsf3>:
    21c4:	bb 27       	eor	r27, r27
    21c6:	aa 27       	eor	r26, r26
    21c8:	0e d0       	rcall	.+28     	; 0x21e6 <__addsf3x>
    21ca:	d9 c1       	rjmp	.+946    	; 0x257e <__fp_round>
    21cc:	ca d1       	rcall	.+916    	; 0x2562 <__fp_pscA>
    21ce:	30 f0       	brcs	.+12     	; 0x21dc <__addsf3+0x18>
    21d0:	cf d1       	rcall	.+926    	; 0x2570 <__fp_pscB>
    21d2:	20 f0       	brcs	.+8      	; 0x21dc <__addsf3+0x18>
    21d4:	31 f4       	brne	.+12     	; 0x21e2 <__addsf3+0x1e>
    21d6:	9f 3f       	cpi	r25, 0xFF	; 255
    21d8:	11 f4       	brne	.+4      	; 0x21de <__addsf3+0x1a>
    21da:	1e f4       	brtc	.+6      	; 0x21e2 <__addsf3+0x1e>
    21dc:	af c1       	rjmp	.+862    	; 0x253c <__fp_nan>
    21de:	0e f4       	brtc	.+2      	; 0x21e2 <__addsf3+0x1e>
    21e0:	e0 95       	com	r30
    21e2:	e7 fb       	bst	r30, 7
    21e4:	a5 c1       	rjmp	.+842    	; 0x2530 <__fp_inf>

000021e6 <__addsf3x>:
    21e6:	e9 2f       	mov	r30, r25
    21e8:	db d1       	rcall	.+950    	; 0x25a0 <__fp_split3>
    21ea:	80 f3       	brcs	.-32     	; 0x21cc <__addsf3+0x8>
    21ec:	ba 17       	cp	r27, r26
    21ee:	62 07       	cpc	r22, r18
    21f0:	73 07       	cpc	r23, r19
    21f2:	84 07       	cpc	r24, r20
    21f4:	95 07       	cpc	r25, r21
    21f6:	18 f0       	brcs	.+6      	; 0x21fe <__addsf3x+0x18>
    21f8:	71 f4       	brne	.+28     	; 0x2216 <__addsf3x+0x30>
    21fa:	9e f5       	brtc	.+102    	; 0x2262 <__addsf3x+0x7c>
    21fc:	f3 c1       	rjmp	.+998    	; 0x25e4 <__fp_zero>
    21fe:	0e f4       	brtc	.+2      	; 0x2202 <__addsf3x+0x1c>
    2200:	e0 95       	com	r30
    2202:	0b 2e       	mov	r0, r27
    2204:	ba 2f       	mov	r27, r26
    2206:	a0 2d       	mov	r26, r0
    2208:	0b 01       	movw	r0, r22
    220a:	b9 01       	movw	r22, r18
    220c:	90 01       	movw	r18, r0
    220e:	0c 01       	movw	r0, r24
    2210:	ca 01       	movw	r24, r20
    2212:	a0 01       	movw	r20, r0
    2214:	11 24       	eor	r1, r1
    2216:	ff 27       	eor	r31, r31
    2218:	59 1b       	sub	r21, r25
    221a:	99 f0       	breq	.+38     	; 0x2242 <__addsf3x+0x5c>
    221c:	59 3f       	cpi	r21, 0xF9	; 249
    221e:	50 f4       	brcc	.+20     	; 0x2234 <__addsf3x+0x4e>
    2220:	50 3e       	cpi	r21, 0xE0	; 224
    2222:	68 f1       	brcs	.+90     	; 0x227e <__addsf3x+0x98>
    2224:	1a 16       	cp	r1, r26
    2226:	f0 40       	sbci	r31, 0x00	; 0
    2228:	a2 2f       	mov	r26, r18
    222a:	23 2f       	mov	r18, r19
    222c:	34 2f       	mov	r19, r20
    222e:	44 27       	eor	r20, r20
    2230:	58 5f       	subi	r21, 0xF8	; 248
    2232:	f3 cf       	rjmp	.-26     	; 0x221a <__addsf3x+0x34>
    2234:	46 95       	lsr	r20
    2236:	37 95       	ror	r19
    2238:	27 95       	ror	r18
    223a:	a7 95       	ror	r26
    223c:	f0 40       	sbci	r31, 0x00	; 0
    223e:	53 95       	inc	r21
    2240:	c9 f7       	brne	.-14     	; 0x2234 <__addsf3x+0x4e>
    2242:	7e f4       	brtc	.+30     	; 0x2262 <__addsf3x+0x7c>
    2244:	1f 16       	cp	r1, r31
    2246:	ba 0b       	sbc	r27, r26
    2248:	62 0b       	sbc	r22, r18
    224a:	73 0b       	sbc	r23, r19
    224c:	84 0b       	sbc	r24, r20
    224e:	ba f0       	brmi	.+46     	; 0x227e <__addsf3x+0x98>
    2250:	91 50       	subi	r25, 0x01	; 1
    2252:	a1 f0       	breq	.+40     	; 0x227c <__addsf3x+0x96>
    2254:	ff 0f       	add	r31, r31
    2256:	bb 1f       	adc	r27, r27
    2258:	66 1f       	adc	r22, r22
    225a:	77 1f       	adc	r23, r23
    225c:	88 1f       	adc	r24, r24
    225e:	c2 f7       	brpl	.-16     	; 0x2250 <__addsf3x+0x6a>
    2260:	0e c0       	rjmp	.+28     	; 0x227e <__addsf3x+0x98>
    2262:	ba 0f       	add	r27, r26
    2264:	62 1f       	adc	r22, r18
    2266:	73 1f       	adc	r23, r19
    2268:	84 1f       	adc	r24, r20
    226a:	48 f4       	brcc	.+18     	; 0x227e <__addsf3x+0x98>
    226c:	87 95       	ror	r24
    226e:	77 95       	ror	r23
    2270:	67 95       	ror	r22
    2272:	b7 95       	ror	r27
    2274:	f7 95       	ror	r31
    2276:	9e 3f       	cpi	r25, 0xFE	; 254
    2278:	08 f0       	brcs	.+2      	; 0x227c <__addsf3x+0x96>
    227a:	b3 cf       	rjmp	.-154    	; 0x21e2 <__addsf3+0x1e>
    227c:	93 95       	inc	r25
    227e:	88 0f       	add	r24, r24
    2280:	08 f0       	brcs	.+2      	; 0x2284 <__addsf3x+0x9e>
    2282:	99 27       	eor	r25, r25
    2284:	ee 0f       	add	r30, r30
    2286:	97 95       	ror	r25
    2288:	87 95       	ror	r24
    228a:	08 95       	ret

0000228c <__divsf3>:
    228c:	0c d0       	rcall	.+24     	; 0x22a6 <__divsf3x>
    228e:	77 c1       	rjmp	.+750    	; 0x257e <__fp_round>
    2290:	6f d1       	rcall	.+734    	; 0x2570 <__fp_pscB>
    2292:	40 f0       	brcs	.+16     	; 0x22a4 <__divsf3+0x18>
    2294:	66 d1       	rcall	.+716    	; 0x2562 <__fp_pscA>
    2296:	30 f0       	brcs	.+12     	; 0x22a4 <__divsf3+0x18>
    2298:	21 f4       	brne	.+8      	; 0x22a2 <__divsf3+0x16>
    229a:	5f 3f       	cpi	r21, 0xFF	; 255
    229c:	19 f0       	breq	.+6      	; 0x22a4 <__divsf3+0x18>
    229e:	48 c1       	rjmp	.+656    	; 0x2530 <__fp_inf>
    22a0:	51 11       	cpse	r21, r1
    22a2:	a1 c1       	rjmp	.+834    	; 0x25e6 <__fp_szero>
    22a4:	4b c1       	rjmp	.+662    	; 0x253c <__fp_nan>

000022a6 <__divsf3x>:
    22a6:	7c d1       	rcall	.+760    	; 0x25a0 <__fp_split3>
    22a8:	98 f3       	brcs	.-26     	; 0x2290 <__divsf3+0x4>

000022aa <__divsf3_pse>:
    22aa:	99 23       	and	r25, r25
    22ac:	c9 f3       	breq	.-14     	; 0x22a0 <__divsf3+0x14>
    22ae:	55 23       	and	r21, r21
    22b0:	b1 f3       	breq	.-20     	; 0x229e <__divsf3+0x12>
    22b2:	95 1b       	sub	r25, r21
    22b4:	55 0b       	sbc	r21, r21
    22b6:	bb 27       	eor	r27, r27
    22b8:	aa 27       	eor	r26, r26
    22ba:	62 17       	cp	r22, r18
    22bc:	73 07       	cpc	r23, r19
    22be:	84 07       	cpc	r24, r20
    22c0:	38 f0       	brcs	.+14     	; 0x22d0 <__divsf3_pse+0x26>
    22c2:	9f 5f       	subi	r25, 0xFF	; 255
    22c4:	5f 4f       	sbci	r21, 0xFF	; 255
    22c6:	22 0f       	add	r18, r18
    22c8:	33 1f       	adc	r19, r19
    22ca:	44 1f       	adc	r20, r20
    22cc:	aa 1f       	adc	r26, r26
    22ce:	a9 f3       	breq	.-22     	; 0x22ba <__divsf3_pse+0x10>
    22d0:	33 d0       	rcall	.+102    	; 0x2338 <__divsf3_pse+0x8e>
    22d2:	0e 2e       	mov	r0, r30
    22d4:	3a f0       	brmi	.+14     	; 0x22e4 <__divsf3_pse+0x3a>
    22d6:	e0 e8       	ldi	r30, 0x80	; 128
    22d8:	30 d0       	rcall	.+96     	; 0x233a <__divsf3_pse+0x90>
    22da:	91 50       	subi	r25, 0x01	; 1
    22dc:	50 40       	sbci	r21, 0x00	; 0
    22de:	e6 95       	lsr	r30
    22e0:	00 1c       	adc	r0, r0
    22e2:	ca f7       	brpl	.-14     	; 0x22d6 <__divsf3_pse+0x2c>
    22e4:	29 d0       	rcall	.+82     	; 0x2338 <__divsf3_pse+0x8e>
    22e6:	fe 2f       	mov	r31, r30
    22e8:	27 d0       	rcall	.+78     	; 0x2338 <__divsf3_pse+0x8e>
    22ea:	66 0f       	add	r22, r22
    22ec:	77 1f       	adc	r23, r23
    22ee:	88 1f       	adc	r24, r24
    22f0:	bb 1f       	adc	r27, r27
    22f2:	26 17       	cp	r18, r22
    22f4:	37 07       	cpc	r19, r23
    22f6:	48 07       	cpc	r20, r24
    22f8:	ab 07       	cpc	r26, r27
    22fa:	b0 e8       	ldi	r27, 0x80	; 128
    22fc:	09 f0       	breq	.+2      	; 0x2300 <__divsf3_pse+0x56>
    22fe:	bb 0b       	sbc	r27, r27
    2300:	80 2d       	mov	r24, r0
    2302:	bf 01       	movw	r22, r30
    2304:	ff 27       	eor	r31, r31
    2306:	93 58       	subi	r25, 0x83	; 131
    2308:	5f 4f       	sbci	r21, 0xFF	; 255
    230a:	2a f0       	brmi	.+10     	; 0x2316 <__divsf3_pse+0x6c>
    230c:	9e 3f       	cpi	r25, 0xFE	; 254
    230e:	51 05       	cpc	r21, r1
    2310:	68 f0       	brcs	.+26     	; 0x232c <__divsf3_pse+0x82>
    2312:	0e c1       	rjmp	.+540    	; 0x2530 <__fp_inf>
    2314:	68 c1       	rjmp	.+720    	; 0x25e6 <__fp_szero>
    2316:	5f 3f       	cpi	r21, 0xFF	; 255
    2318:	ec f3       	brlt	.-6      	; 0x2314 <__divsf3_pse+0x6a>
    231a:	98 3e       	cpi	r25, 0xE8	; 232
    231c:	dc f3       	brlt	.-10     	; 0x2314 <__divsf3_pse+0x6a>
    231e:	86 95       	lsr	r24
    2320:	77 95       	ror	r23
    2322:	67 95       	ror	r22
    2324:	b7 95       	ror	r27
    2326:	f7 95       	ror	r31
    2328:	9f 5f       	subi	r25, 0xFF	; 255
    232a:	c9 f7       	brne	.-14     	; 0x231e <__divsf3_pse+0x74>
    232c:	88 0f       	add	r24, r24
    232e:	91 1d       	adc	r25, r1
    2330:	96 95       	lsr	r25
    2332:	87 95       	ror	r24
    2334:	97 f9       	bld	r25, 7
    2336:	08 95       	ret
    2338:	e1 e0       	ldi	r30, 0x01	; 1
    233a:	66 0f       	add	r22, r22
    233c:	77 1f       	adc	r23, r23
    233e:	88 1f       	adc	r24, r24
    2340:	bb 1f       	adc	r27, r27
    2342:	62 17       	cp	r22, r18
    2344:	73 07       	cpc	r23, r19
    2346:	84 07       	cpc	r24, r20
    2348:	ba 07       	cpc	r27, r26
    234a:	20 f0       	brcs	.+8      	; 0x2354 <__divsf3_pse+0xaa>
    234c:	62 1b       	sub	r22, r18
    234e:	73 0b       	sbc	r23, r19
    2350:	84 0b       	sbc	r24, r20
    2352:	ba 0b       	sbc	r27, r26
    2354:	ee 1f       	adc	r30, r30
    2356:	88 f7       	brcc	.-30     	; 0x233a <__divsf3_pse+0x90>
    2358:	e0 95       	com	r30
    235a:	08 95       	ret

0000235c <__fixsfdi>:
    235c:	be e3       	ldi	r27, 0x3E	; 62
    235e:	04 d0       	rcall	.+8      	; 0x2368 <__fixunssfdi+0x2>
    2360:	08 f4       	brcc	.+2      	; 0x2364 <__fixsfdi+0x8>
    2362:	90 e8       	ldi	r25, 0x80	; 128
    2364:	08 95       	ret

00002366 <__fixunssfdi>:
    2366:	bf e3       	ldi	r27, 0x3F	; 63
    2368:	22 27       	eor	r18, r18
    236a:	33 27       	eor	r19, r19
    236c:	a9 01       	movw	r20, r18
    236e:	20 d1       	rcall	.+576    	; 0x25b0 <__fp_splitA>
    2370:	58 f1       	brcs	.+86     	; 0x23c8 <__fixunssfdi+0x62>
    2372:	9f 57       	subi	r25, 0x7F	; 127
    2374:	40 f1       	brcs	.+80     	; 0x23c6 <__fixunssfdi+0x60>
    2376:	b9 17       	cp	r27, r25
    2378:	38 f1       	brcs	.+78     	; 0x23c8 <__fixunssfdi+0x62>
    237a:	bf e3       	ldi	r27, 0x3F	; 63
    237c:	b9 1b       	sub	r27, r25
    237e:	99 27       	eor	r25, r25
    2380:	b8 50       	subi	r27, 0x08	; 8
    2382:	3a f4       	brpl	.+14     	; 0x2392 <__fixunssfdi+0x2c>
    2384:	66 0f       	add	r22, r22
    2386:	77 1f       	adc	r23, r23
    2388:	88 1f       	adc	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	b3 95       	inc	r27
    238e:	d2 f3       	brmi	.-12     	; 0x2384 <__fixunssfdi+0x1e>
    2390:	16 c0       	rjmp	.+44     	; 0x23be <__fixunssfdi+0x58>
    2392:	b8 50       	subi	r27, 0x08	; 8
    2394:	4a f0       	brmi	.+18     	; 0x23a8 <__fixunssfdi+0x42>
    2396:	23 2f       	mov	r18, r19
    2398:	34 2f       	mov	r19, r20
    239a:	45 2f       	mov	r20, r21
    239c:	56 2f       	mov	r21, r22
    239e:	67 2f       	mov	r22, r23
    23a0:	78 2f       	mov	r23, r24
    23a2:	88 27       	eor	r24, r24
    23a4:	b8 50       	subi	r27, 0x08	; 8
    23a6:	ba f7       	brpl	.-18     	; 0x2396 <__fixunssfdi+0x30>
    23a8:	b8 5f       	subi	r27, 0xF8	; 248
    23aa:	49 f0       	breq	.+18     	; 0x23be <__fixunssfdi+0x58>
    23ac:	86 95       	lsr	r24
    23ae:	77 95       	ror	r23
    23b0:	67 95       	ror	r22
    23b2:	57 95       	ror	r21
    23b4:	47 95       	ror	r20
    23b6:	37 95       	ror	r19
    23b8:	27 95       	ror	r18
    23ba:	ba 95       	dec	r27
    23bc:	b9 f7       	brne	.-18     	; 0x23ac <__fixunssfdi+0x46>
    23be:	0e f4       	brtc	.+2      	; 0x23c2 <__fixunssfdi+0x5c>
    23c0:	c0 d0       	rcall	.+384    	; 0x2542 <__fp_negdi>
    23c2:	88 94       	clc
    23c4:	08 95       	ret
    23c6:	88 94       	clc
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	cb 01       	movw	r24, r22
    23ce:	08 95       	ret

000023d0 <__fixsfsi>:
    23d0:	04 d0       	rcall	.+8      	; 0x23da <__fixunssfsi>
    23d2:	68 94       	set
    23d4:	b1 11       	cpse	r27, r1
    23d6:	07 c1       	rjmp	.+526    	; 0x25e6 <__fp_szero>
    23d8:	08 95       	ret

000023da <__fixunssfsi>:
    23da:	ea d0       	rcall	.+468    	; 0x25b0 <__fp_splitA>
    23dc:	88 f0       	brcs	.+34     	; 0x2400 <__fixunssfsi+0x26>
    23de:	9f 57       	subi	r25, 0x7F	; 127
    23e0:	90 f0       	brcs	.+36     	; 0x2406 <__fixunssfsi+0x2c>
    23e2:	b9 2f       	mov	r27, r25
    23e4:	99 27       	eor	r25, r25
    23e6:	b7 51       	subi	r27, 0x17	; 23
    23e8:	a0 f0       	brcs	.+40     	; 0x2412 <__fixunssfsi+0x38>
    23ea:	d1 f0       	breq	.+52     	; 0x2420 <__fixunssfsi+0x46>
    23ec:	66 0f       	add	r22, r22
    23ee:	77 1f       	adc	r23, r23
    23f0:	88 1f       	adc	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	1a f0       	brmi	.+6      	; 0x23fc <__fixunssfsi+0x22>
    23f6:	ba 95       	dec	r27
    23f8:	c9 f7       	brne	.-14     	; 0x23ec <__fixunssfsi+0x12>
    23fa:	12 c0       	rjmp	.+36     	; 0x2420 <__fixunssfsi+0x46>
    23fc:	b1 30       	cpi	r27, 0x01	; 1
    23fe:	81 f0       	breq	.+32     	; 0x2420 <__fixunssfsi+0x46>
    2400:	f1 d0       	rcall	.+482    	; 0x25e4 <__fp_zero>
    2402:	b1 e0       	ldi	r27, 0x01	; 1
    2404:	08 95       	ret
    2406:	ee c0       	rjmp	.+476    	; 0x25e4 <__fp_zero>
    2408:	67 2f       	mov	r22, r23
    240a:	78 2f       	mov	r23, r24
    240c:	88 27       	eor	r24, r24
    240e:	b8 5f       	subi	r27, 0xF8	; 248
    2410:	39 f0       	breq	.+14     	; 0x2420 <__fixunssfsi+0x46>
    2412:	b9 3f       	cpi	r27, 0xF9	; 249
    2414:	cc f3       	brlt	.-14     	; 0x2408 <__fixunssfsi+0x2e>
    2416:	86 95       	lsr	r24
    2418:	77 95       	ror	r23
    241a:	67 95       	ror	r22
    241c:	b3 95       	inc	r27
    241e:	d9 f7       	brne	.-10     	; 0x2416 <__fixunssfsi+0x3c>
    2420:	3e f4       	brtc	.+14     	; 0x2430 <__fixunssfsi+0x56>
    2422:	90 95       	com	r25
    2424:	80 95       	com	r24
    2426:	70 95       	com	r23
    2428:	61 95       	neg	r22
    242a:	7f 4f       	sbci	r23, 0xFF	; 255
    242c:	8f 4f       	sbci	r24, 0xFF	; 255
    242e:	9f 4f       	sbci	r25, 0xFF	; 255
    2430:	08 95       	ret

00002432 <__floatdisf>:
    2432:	97 fb       	bst	r25, 7
    2434:	0e f4       	brtc	.+2      	; 0x2438 <__floatdisf+0x6>
    2436:	85 d0       	rcall	.+266    	; 0x2542 <__fp_negdi>
    2438:	3e c0       	rjmp	.+124    	; 0x24b6 <__fp_di2sf>

0000243a <__floatunsisf>:
    243a:	e8 94       	clt
    243c:	09 c0       	rjmp	.+18     	; 0x2450 <__floatsisf+0x12>

0000243e <__floatsisf>:
    243e:	97 fb       	bst	r25, 7
    2440:	3e f4       	brtc	.+14     	; 0x2450 <__floatsisf+0x12>
    2442:	90 95       	com	r25
    2444:	80 95       	com	r24
    2446:	70 95       	com	r23
    2448:	61 95       	neg	r22
    244a:	7f 4f       	sbci	r23, 0xFF	; 255
    244c:	8f 4f       	sbci	r24, 0xFF	; 255
    244e:	9f 4f       	sbci	r25, 0xFF	; 255
    2450:	99 23       	and	r25, r25
    2452:	a9 f0       	breq	.+42     	; 0x247e <__floatsisf+0x40>
    2454:	f9 2f       	mov	r31, r25
    2456:	96 e9       	ldi	r25, 0x96	; 150
    2458:	bb 27       	eor	r27, r27
    245a:	93 95       	inc	r25
    245c:	f6 95       	lsr	r31
    245e:	87 95       	ror	r24
    2460:	77 95       	ror	r23
    2462:	67 95       	ror	r22
    2464:	b7 95       	ror	r27
    2466:	f1 11       	cpse	r31, r1
    2468:	f8 cf       	rjmp	.-16     	; 0x245a <__floatsisf+0x1c>
    246a:	fa f4       	brpl	.+62     	; 0x24aa <__floatsisf+0x6c>
    246c:	bb 0f       	add	r27, r27
    246e:	11 f4       	brne	.+4      	; 0x2474 <__floatsisf+0x36>
    2470:	60 ff       	sbrs	r22, 0
    2472:	1b c0       	rjmp	.+54     	; 0x24aa <__floatsisf+0x6c>
    2474:	6f 5f       	subi	r22, 0xFF	; 255
    2476:	7f 4f       	sbci	r23, 0xFF	; 255
    2478:	8f 4f       	sbci	r24, 0xFF	; 255
    247a:	9f 4f       	sbci	r25, 0xFF	; 255
    247c:	16 c0       	rjmp	.+44     	; 0x24aa <__floatsisf+0x6c>
    247e:	88 23       	and	r24, r24
    2480:	11 f0       	breq	.+4      	; 0x2486 <__floatsisf+0x48>
    2482:	96 e9       	ldi	r25, 0x96	; 150
    2484:	11 c0       	rjmp	.+34     	; 0x24a8 <__floatsisf+0x6a>
    2486:	77 23       	and	r23, r23
    2488:	21 f0       	breq	.+8      	; 0x2492 <__floatsisf+0x54>
    248a:	9e e8       	ldi	r25, 0x8E	; 142
    248c:	87 2f       	mov	r24, r23
    248e:	76 2f       	mov	r23, r22
    2490:	05 c0       	rjmp	.+10     	; 0x249c <__floatsisf+0x5e>
    2492:	66 23       	and	r22, r22
    2494:	71 f0       	breq	.+28     	; 0x24b2 <__floatsisf+0x74>
    2496:	96 e8       	ldi	r25, 0x86	; 134
    2498:	86 2f       	mov	r24, r22
    249a:	70 e0       	ldi	r23, 0x00	; 0
    249c:	60 e0       	ldi	r22, 0x00	; 0
    249e:	2a f0       	brmi	.+10     	; 0x24aa <__floatsisf+0x6c>
    24a0:	9a 95       	dec	r25
    24a2:	66 0f       	add	r22, r22
    24a4:	77 1f       	adc	r23, r23
    24a6:	88 1f       	adc	r24, r24
    24a8:	da f7       	brpl	.-10     	; 0x24a0 <__floatsisf+0x62>
    24aa:	88 0f       	add	r24, r24
    24ac:	96 95       	lsr	r25
    24ae:	87 95       	ror	r24
    24b0:	97 f9       	bld	r25, 7
    24b2:	08 95       	ret

000024b4 <__floatundisf>:
    24b4:	e8 94       	clt

000024b6 <__fp_di2sf>:
    24b6:	f9 2f       	mov	r31, r25
    24b8:	96 eb       	ldi	r25, 0xB6	; 182
    24ba:	ff 23       	and	r31, r31
    24bc:	81 f0       	breq	.+32     	; 0x24de <__fp_di2sf+0x28>
    24be:	12 16       	cp	r1, r18
    24c0:	13 06       	cpc	r1, r19
    24c2:	14 06       	cpc	r1, r20
    24c4:	44 0b       	sbc	r20, r20
    24c6:	93 95       	inc	r25
    24c8:	f6 95       	lsr	r31
    24ca:	87 95       	ror	r24
    24cc:	77 95       	ror	r23
    24ce:	67 95       	ror	r22
    24d0:	57 95       	ror	r21
    24d2:	40 40       	sbci	r20, 0x00	; 0
    24d4:	ff 23       	and	r31, r31
    24d6:	b9 f7       	brne	.-18     	; 0x24c6 <__fp_di2sf+0x10>
    24d8:	1b c0       	rjmp	.+54     	; 0x2510 <__fp_di2sf+0x5a>
    24da:	99 27       	eor	r25, r25
    24dc:	08 95       	ret
    24de:	88 23       	and	r24, r24
    24e0:	51 f4       	brne	.+20     	; 0x24f6 <__fp_di2sf+0x40>
    24e2:	98 50       	subi	r25, 0x08	; 8
    24e4:	d2 f7       	brpl	.-12     	; 0x24da <__fp_di2sf+0x24>
    24e6:	87 2b       	or	r24, r23
    24e8:	76 2f       	mov	r23, r22
    24ea:	65 2f       	mov	r22, r21
    24ec:	54 2f       	mov	r21, r20
    24ee:	43 2f       	mov	r20, r19
    24f0:	32 2f       	mov	r19, r18
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	b1 f3       	breq	.-20     	; 0x24e2 <__fp_di2sf+0x2c>
    24f6:	12 16       	cp	r1, r18
    24f8:	13 06       	cpc	r1, r19
    24fa:	14 06       	cpc	r1, r20
    24fc:	44 0b       	sbc	r20, r20
    24fe:	88 23       	and	r24, r24
    2500:	3a f0       	brmi	.+14     	; 0x2510 <__fp_di2sf+0x5a>
    2502:	9a 95       	dec	r25
    2504:	44 0f       	add	r20, r20
    2506:	55 1f       	adc	r21, r21
    2508:	66 1f       	adc	r22, r22
    250a:	77 1f       	adc	r23, r23
    250c:	88 1f       	adc	r24, r24
    250e:	ca f7       	brpl	.-14     	; 0x2502 <__fp_di2sf+0x4c>
    2510:	55 23       	and	r21, r21
    2512:	4a f4       	brpl	.+18     	; 0x2526 <__fp_di2sf+0x70>
    2514:	44 0f       	add	r20, r20
    2516:	55 1f       	adc	r21, r21
    2518:	11 f4       	brne	.+4      	; 0x251e <__fp_di2sf+0x68>
    251a:	60 ff       	sbrs	r22, 0
    251c:	04 c0       	rjmp	.+8      	; 0x2526 <__fp_di2sf+0x70>
    251e:	6f 5f       	subi	r22, 0xFF	; 255
    2520:	7f 4f       	sbci	r23, 0xFF	; 255
    2522:	8f 4f       	sbci	r24, 0xFF	; 255
    2524:	9f 4f       	sbci	r25, 0xFF	; 255
    2526:	88 0f       	add	r24, r24
    2528:	96 95       	lsr	r25
    252a:	87 95       	ror	r24
    252c:	97 f9       	bld	r25, 7
    252e:	08 95       	ret

00002530 <__fp_inf>:
    2530:	97 f9       	bld	r25, 7
    2532:	9f 67       	ori	r25, 0x7F	; 127
    2534:	80 e8       	ldi	r24, 0x80	; 128
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	08 95       	ret

0000253c <__fp_nan>:
    253c:	9f ef       	ldi	r25, 0xFF	; 255
    253e:	80 ec       	ldi	r24, 0xC0	; 192
    2540:	08 95       	ret

00002542 <__fp_negdi>:
    2542:	90 95       	com	r25
    2544:	80 95       	com	r24
    2546:	70 95       	com	r23
    2548:	60 95       	com	r22
    254a:	50 95       	com	r21
    254c:	40 95       	com	r20
    254e:	30 95       	com	r19
    2550:	21 95       	neg	r18
    2552:	3f 4f       	sbci	r19, 0xFF	; 255
    2554:	4f 4f       	sbci	r20, 0xFF	; 255
    2556:	5f 4f       	sbci	r21, 0xFF	; 255
    2558:	6f 4f       	sbci	r22, 0xFF	; 255
    255a:	7f 4f       	sbci	r23, 0xFF	; 255
    255c:	8f 4f       	sbci	r24, 0xFF	; 255
    255e:	9f 4f       	sbci	r25, 0xFF	; 255
    2560:	08 95       	ret

00002562 <__fp_pscA>:
    2562:	00 24       	eor	r0, r0
    2564:	0a 94       	dec	r0
    2566:	16 16       	cp	r1, r22
    2568:	17 06       	cpc	r1, r23
    256a:	18 06       	cpc	r1, r24
    256c:	09 06       	cpc	r0, r25
    256e:	08 95       	ret

00002570 <__fp_pscB>:
    2570:	00 24       	eor	r0, r0
    2572:	0a 94       	dec	r0
    2574:	12 16       	cp	r1, r18
    2576:	13 06       	cpc	r1, r19
    2578:	14 06       	cpc	r1, r20
    257a:	05 06       	cpc	r0, r21
    257c:	08 95       	ret

0000257e <__fp_round>:
    257e:	09 2e       	mov	r0, r25
    2580:	03 94       	inc	r0
    2582:	00 0c       	add	r0, r0
    2584:	11 f4       	brne	.+4      	; 0x258a <__fp_round+0xc>
    2586:	88 23       	and	r24, r24
    2588:	52 f0       	brmi	.+20     	; 0x259e <__fp_round+0x20>
    258a:	bb 0f       	add	r27, r27
    258c:	40 f4       	brcc	.+16     	; 0x259e <__fp_round+0x20>
    258e:	bf 2b       	or	r27, r31
    2590:	11 f4       	brne	.+4      	; 0x2596 <__fp_round+0x18>
    2592:	60 ff       	sbrs	r22, 0
    2594:	04 c0       	rjmp	.+8      	; 0x259e <__fp_round+0x20>
    2596:	6f 5f       	subi	r22, 0xFF	; 255
    2598:	7f 4f       	sbci	r23, 0xFF	; 255
    259a:	8f 4f       	sbci	r24, 0xFF	; 255
    259c:	9f 4f       	sbci	r25, 0xFF	; 255
    259e:	08 95       	ret

000025a0 <__fp_split3>:
    25a0:	57 fd       	sbrc	r21, 7
    25a2:	90 58       	subi	r25, 0x80	; 128
    25a4:	44 0f       	add	r20, r20
    25a6:	55 1f       	adc	r21, r21
    25a8:	59 f0       	breq	.+22     	; 0x25c0 <__fp_splitA+0x10>
    25aa:	5f 3f       	cpi	r21, 0xFF	; 255
    25ac:	71 f0       	breq	.+28     	; 0x25ca <__fp_splitA+0x1a>
    25ae:	47 95       	ror	r20

000025b0 <__fp_splitA>:
    25b0:	88 0f       	add	r24, r24
    25b2:	97 fb       	bst	r25, 7
    25b4:	99 1f       	adc	r25, r25
    25b6:	61 f0       	breq	.+24     	; 0x25d0 <__fp_splitA+0x20>
    25b8:	9f 3f       	cpi	r25, 0xFF	; 255
    25ba:	79 f0       	breq	.+30     	; 0x25da <__fp_splitA+0x2a>
    25bc:	87 95       	ror	r24
    25be:	08 95       	ret
    25c0:	12 16       	cp	r1, r18
    25c2:	13 06       	cpc	r1, r19
    25c4:	14 06       	cpc	r1, r20
    25c6:	55 1f       	adc	r21, r21
    25c8:	f2 cf       	rjmp	.-28     	; 0x25ae <__fp_split3+0xe>
    25ca:	46 95       	lsr	r20
    25cc:	f1 df       	rcall	.-30     	; 0x25b0 <__fp_splitA>
    25ce:	08 c0       	rjmp	.+16     	; 0x25e0 <__fp_splitA+0x30>
    25d0:	16 16       	cp	r1, r22
    25d2:	17 06       	cpc	r1, r23
    25d4:	18 06       	cpc	r1, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	f1 cf       	rjmp	.-30     	; 0x25bc <__fp_splitA+0xc>
    25da:	86 95       	lsr	r24
    25dc:	71 05       	cpc	r23, r1
    25de:	61 05       	cpc	r22, r1
    25e0:	08 94       	sec
    25e2:	08 95       	ret

000025e4 <__fp_zero>:
    25e4:	e8 94       	clt

000025e6 <__fp_szero>:
    25e6:	bb 27       	eor	r27, r27
    25e8:	66 27       	eor	r22, r22
    25ea:	77 27       	eor	r23, r23
    25ec:	cb 01       	movw	r24, r22
    25ee:	97 f9       	bld	r25, 7
    25f0:	08 95       	ret
    25f2:	0e f0       	brts	.+2      	; 0x25f6 <__fp_szero+0x10>
    25f4:	a6 c0       	rjmp	.+332    	; 0x2742 <__fp_mpack>
    25f6:	a2 cf       	rjmp	.-188    	; 0x253c <__fp_nan>
    25f8:	68 94       	set
    25fa:	9a cf       	rjmp	.-204    	; 0x2530 <__fp_inf>

000025fc <log>:
    25fc:	d9 df       	rcall	.-78     	; 0x25b0 <__fp_splitA>
    25fe:	c8 f3       	brcs	.-14     	; 0x25f2 <__fp_szero+0xc>
    2600:	99 23       	and	r25, r25
    2602:	d1 f3       	breq	.-12     	; 0x25f8 <__fp_szero+0x12>
    2604:	c6 f3       	brts	.-16     	; 0x25f6 <__fp_szero+0x10>
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	1f 93       	push	r17
    260c:	0f 93       	push	r16
    260e:	ff 92       	push	r15
    2610:	c9 2f       	mov	r28, r25
    2612:	dd 27       	eor	r29, r29
    2614:	88 23       	and	r24, r24
    2616:	2a f0       	brmi	.+10     	; 0x2622 <log+0x26>
    2618:	21 97       	sbiw	r28, 0x01	; 1
    261a:	66 0f       	add	r22, r22
    261c:	77 1f       	adc	r23, r23
    261e:	88 1f       	adc	r24, r24
    2620:	da f7       	brpl	.-10     	; 0x2618 <log+0x1c>
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e8       	ldi	r20, 0x80	; 128
    2628:	5f eb       	ldi	r21, 0xBF	; 191
    262a:	9f e3       	ldi	r25, 0x3F	; 63
    262c:	88 39       	cpi	r24, 0x98	; 152
    262e:	20 f0       	brcs	.+8      	; 0x2638 <log+0x3c>
    2630:	80 3e       	cpi	r24, 0xE0	; 224
    2632:	30 f0       	brcs	.+12     	; 0x2640 <log+0x44>
    2634:	21 96       	adiw	r28, 0x01	; 1
    2636:	8f 77       	andi	r24, 0x7F	; 127
    2638:	c5 dd       	rcall	.-1142   	; 0x21c4 <__addsf3>
    263a:	e4 ef       	ldi	r30, 0xF4	; 244
    263c:	f1 e0       	ldi	r31, 0x01	; 1
    263e:	03 c0       	rjmp	.+6      	; 0x2646 <log+0x4a>
    2640:	c1 dd       	rcall	.-1150   	; 0x21c4 <__addsf3>
    2642:	e1 e2       	ldi	r30, 0x21	; 33
    2644:	f2 e0       	ldi	r31, 0x02	; 2
    2646:	8b d0       	rcall	.+278    	; 0x275e <__fp_powser>
    2648:	8b 01       	movw	r16, r22
    264a:	be 01       	movw	r22, r28
    264c:	ec 01       	movw	r28, r24
    264e:	fb 2e       	mov	r15, r27
    2650:	6f 57       	subi	r22, 0x7F	; 127
    2652:	71 09       	sbc	r23, r1
    2654:	75 95       	asr	r23
    2656:	77 1f       	adc	r23, r23
    2658:	88 0b       	sbc	r24, r24
    265a:	99 0b       	sbc	r25, r25
    265c:	f0 de       	rcall	.-544    	; 0x243e <__floatsisf>
    265e:	28 e1       	ldi	r18, 0x18	; 24
    2660:	32 e7       	ldi	r19, 0x72	; 114
    2662:	41 e3       	ldi	r20, 0x31	; 49
    2664:	5f e3       	ldi	r21, 0x3F	; 63
    2666:	16 d0       	rcall	.+44     	; 0x2694 <__mulsf3x>
    2668:	af 2d       	mov	r26, r15
    266a:	98 01       	movw	r18, r16
    266c:	ae 01       	movw	r20, r28
    266e:	ff 90       	pop	r15
    2670:	0f 91       	pop	r16
    2672:	1f 91       	pop	r17
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	b6 dd       	rcall	.-1172   	; 0x21e6 <__addsf3x>
    267a:	81 cf       	rjmp	.-254    	; 0x257e <__fp_round>

0000267c <__mulsf3>:
    267c:	0b d0       	rcall	.+22     	; 0x2694 <__mulsf3x>
    267e:	7f cf       	rjmp	.-258    	; 0x257e <__fp_round>
    2680:	70 df       	rcall	.-288    	; 0x2562 <__fp_pscA>
    2682:	28 f0       	brcs	.+10     	; 0x268e <__mulsf3+0x12>
    2684:	75 df       	rcall	.-278    	; 0x2570 <__fp_pscB>
    2686:	18 f0       	brcs	.+6      	; 0x268e <__mulsf3+0x12>
    2688:	95 23       	and	r25, r21
    268a:	09 f0       	breq	.+2      	; 0x268e <__mulsf3+0x12>
    268c:	51 cf       	rjmp	.-350    	; 0x2530 <__fp_inf>
    268e:	56 cf       	rjmp	.-340    	; 0x253c <__fp_nan>
    2690:	11 24       	eor	r1, r1
    2692:	a9 cf       	rjmp	.-174    	; 0x25e6 <__fp_szero>

00002694 <__mulsf3x>:
    2694:	85 df       	rcall	.-246    	; 0x25a0 <__fp_split3>
    2696:	a0 f3       	brcs	.-24     	; 0x2680 <__mulsf3+0x4>

00002698 <__mulsf3_pse>:
    2698:	95 9f       	mul	r25, r21
    269a:	d1 f3       	breq	.-12     	; 0x2690 <__mulsf3+0x14>
    269c:	95 0f       	add	r25, r21
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	55 1f       	adc	r21, r21
    26a2:	62 9f       	mul	r22, r18
    26a4:	f0 01       	movw	r30, r0
    26a6:	72 9f       	mul	r23, r18
    26a8:	bb 27       	eor	r27, r27
    26aa:	f0 0d       	add	r31, r0
    26ac:	b1 1d       	adc	r27, r1
    26ae:	63 9f       	mul	r22, r19
    26b0:	aa 27       	eor	r26, r26
    26b2:	f0 0d       	add	r31, r0
    26b4:	b1 1d       	adc	r27, r1
    26b6:	aa 1f       	adc	r26, r26
    26b8:	64 9f       	mul	r22, r20
    26ba:	66 27       	eor	r22, r22
    26bc:	b0 0d       	add	r27, r0
    26be:	a1 1d       	adc	r26, r1
    26c0:	66 1f       	adc	r22, r22
    26c2:	82 9f       	mul	r24, r18
    26c4:	22 27       	eor	r18, r18
    26c6:	b0 0d       	add	r27, r0
    26c8:	a1 1d       	adc	r26, r1
    26ca:	62 1f       	adc	r22, r18
    26cc:	73 9f       	mul	r23, r19
    26ce:	b0 0d       	add	r27, r0
    26d0:	a1 1d       	adc	r26, r1
    26d2:	62 1f       	adc	r22, r18
    26d4:	83 9f       	mul	r24, r19
    26d6:	a0 0d       	add	r26, r0
    26d8:	61 1d       	adc	r22, r1
    26da:	22 1f       	adc	r18, r18
    26dc:	74 9f       	mul	r23, r20
    26de:	33 27       	eor	r19, r19
    26e0:	a0 0d       	add	r26, r0
    26e2:	61 1d       	adc	r22, r1
    26e4:	23 1f       	adc	r18, r19
    26e6:	84 9f       	mul	r24, r20
    26e8:	60 0d       	add	r22, r0
    26ea:	21 1d       	adc	r18, r1
    26ec:	82 2f       	mov	r24, r18
    26ee:	76 2f       	mov	r23, r22
    26f0:	6a 2f       	mov	r22, r26
    26f2:	11 24       	eor	r1, r1
    26f4:	9f 57       	subi	r25, 0x7F	; 127
    26f6:	50 40       	sbci	r21, 0x00	; 0
    26f8:	8a f0       	brmi	.+34     	; 0x271c <__mulsf3_pse+0x84>
    26fa:	e1 f0       	breq	.+56     	; 0x2734 <__mulsf3_pse+0x9c>
    26fc:	88 23       	and	r24, r24
    26fe:	4a f0       	brmi	.+18     	; 0x2712 <__mulsf3_pse+0x7a>
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	bb 1f       	adc	r27, r27
    2706:	66 1f       	adc	r22, r22
    2708:	77 1f       	adc	r23, r23
    270a:	88 1f       	adc	r24, r24
    270c:	91 50       	subi	r25, 0x01	; 1
    270e:	50 40       	sbci	r21, 0x00	; 0
    2710:	a9 f7       	brne	.-22     	; 0x26fc <__mulsf3_pse+0x64>
    2712:	9e 3f       	cpi	r25, 0xFE	; 254
    2714:	51 05       	cpc	r21, r1
    2716:	70 f0       	brcs	.+28     	; 0x2734 <__mulsf3_pse+0x9c>
    2718:	0b cf       	rjmp	.-490    	; 0x2530 <__fp_inf>
    271a:	65 cf       	rjmp	.-310    	; 0x25e6 <__fp_szero>
    271c:	5f 3f       	cpi	r21, 0xFF	; 255
    271e:	ec f3       	brlt	.-6      	; 0x271a <__mulsf3_pse+0x82>
    2720:	98 3e       	cpi	r25, 0xE8	; 232
    2722:	dc f3       	brlt	.-10     	; 0x271a <__mulsf3_pse+0x82>
    2724:	86 95       	lsr	r24
    2726:	77 95       	ror	r23
    2728:	67 95       	ror	r22
    272a:	b7 95       	ror	r27
    272c:	f7 95       	ror	r31
    272e:	e7 95       	ror	r30
    2730:	9f 5f       	subi	r25, 0xFF	; 255
    2732:	c1 f7       	brne	.-16     	; 0x2724 <__mulsf3_pse+0x8c>
    2734:	fe 2b       	or	r31, r30
    2736:	88 0f       	add	r24, r24
    2738:	91 1d       	adc	r25, r1
    273a:	96 95       	lsr	r25
    273c:	87 95       	ror	r24
    273e:	97 f9       	bld	r25, 7
    2740:	08 95       	ret

00002742 <__fp_mpack>:
    2742:	9f 3f       	cpi	r25, 0xFF	; 255
    2744:	31 f0       	breq	.+12     	; 0x2752 <__fp_mpack_finite+0xc>

00002746 <__fp_mpack_finite>:
    2746:	91 50       	subi	r25, 0x01	; 1
    2748:	20 f4       	brcc	.+8      	; 0x2752 <__fp_mpack_finite+0xc>
    274a:	87 95       	ror	r24
    274c:	77 95       	ror	r23
    274e:	67 95       	ror	r22
    2750:	b7 95       	ror	r27
    2752:	88 0f       	add	r24, r24
    2754:	91 1d       	adc	r25, r1
    2756:	96 95       	lsr	r25
    2758:	87 95       	ror	r24
    275a:	97 f9       	bld	r25, 7
    275c:	08 95       	ret

0000275e <__fp_powser>:
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	1f 93       	push	r17
    2764:	0f 93       	push	r16
    2766:	ff 92       	push	r15
    2768:	ef 92       	push	r14
    276a:	df 92       	push	r13
    276c:	7b 01       	movw	r14, r22
    276e:	8c 01       	movw	r16, r24
    2770:	68 94       	set
    2772:	05 c0       	rjmp	.+10     	; 0x277e <__fp_powser+0x20>
    2774:	da 2e       	mov	r13, r26
    2776:	ef 01       	movw	r28, r30
    2778:	8d df       	rcall	.-230    	; 0x2694 <__mulsf3x>
    277a:	fe 01       	movw	r30, r28
    277c:	e8 94       	clt
    277e:	a5 91       	lpm	r26, Z+
    2780:	25 91       	lpm	r18, Z+
    2782:	35 91       	lpm	r19, Z+
    2784:	45 91       	lpm	r20, Z+
    2786:	55 91       	lpm	r21, Z+
    2788:	ae f3       	brts	.-22     	; 0x2774 <__fp_powser+0x16>
    278a:	ef 01       	movw	r28, r30
    278c:	2c dd       	rcall	.-1448   	; 0x21e6 <__addsf3x>
    278e:	fe 01       	movw	r30, r28
    2790:	97 01       	movw	r18, r14
    2792:	a8 01       	movw	r20, r16
    2794:	da 94       	dec	r13
    2796:	79 f7       	brne	.-34     	; 0x2776 <__fp_powser+0x18>
    2798:	df 90       	pop	r13
    279a:	ef 90       	pop	r14
    279c:	ff 90       	pop	r15
    279e:	0f 91       	pop	r16
    27a0:	1f 91       	pop	r17
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <__udivmodsi4>:
    27a8:	a1 e2       	ldi	r26, 0x21	; 33
    27aa:	1a 2e       	mov	r1, r26
    27ac:	aa 1b       	sub	r26, r26
    27ae:	bb 1b       	sub	r27, r27
    27b0:	fd 01       	movw	r30, r26
    27b2:	0d c0       	rjmp	.+26     	; 0x27ce <__udivmodsi4_ep>

000027b4 <__udivmodsi4_loop>:
    27b4:	aa 1f       	adc	r26, r26
    27b6:	bb 1f       	adc	r27, r27
    27b8:	ee 1f       	adc	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	a2 17       	cp	r26, r18
    27be:	b3 07       	cpc	r27, r19
    27c0:	e4 07       	cpc	r30, r20
    27c2:	f5 07       	cpc	r31, r21
    27c4:	20 f0       	brcs	.+8      	; 0x27ce <__udivmodsi4_ep>
    27c6:	a2 1b       	sub	r26, r18
    27c8:	b3 0b       	sbc	r27, r19
    27ca:	e4 0b       	sbc	r30, r20
    27cc:	f5 0b       	sbc	r31, r21

000027ce <__udivmodsi4_ep>:
    27ce:	66 1f       	adc	r22, r22
    27d0:	77 1f       	adc	r23, r23
    27d2:	88 1f       	adc	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	1a 94       	dec	r1
    27d8:	69 f7       	brne	.-38     	; 0x27b4 <__udivmodsi4_loop>
    27da:	60 95       	com	r22
    27dc:	70 95       	com	r23
    27de:	80 95       	com	r24
    27e0:	90 95       	com	r25
    27e2:	9b 01       	movw	r18, r22
    27e4:	ac 01       	movw	r20, r24
    27e6:	bd 01       	movw	r22, r26
    27e8:	cf 01       	movw	r24, r30
    27ea:	08 95       	ret

000027ec <__muluhisi3>:
    27ec:	5a d0       	rcall	.+180    	; 0x28a2 <__umulhisi3>
    27ee:	a5 9f       	mul	r26, r21
    27f0:	90 0d       	add	r25, r0
    27f2:	b4 9f       	mul	r27, r20
    27f4:	90 0d       	add	r25, r0
    27f6:	a4 9f       	mul	r26, r20
    27f8:	80 0d       	add	r24, r0
    27fa:	91 1d       	adc	r25, r1
    27fc:	11 24       	eor	r1, r1
    27fe:	08 95       	ret

00002800 <__muldi3>:
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	1f 93       	push	r17
    2806:	0f 93       	push	r16
    2808:	9a 9d       	mul	r25, r10
    280a:	f0 2d       	mov	r31, r0
    280c:	21 9f       	mul	r18, r17
    280e:	f0 0d       	add	r31, r0
    2810:	8b 9d       	mul	r24, r11
    2812:	f0 0d       	add	r31, r0
    2814:	8a 9d       	mul	r24, r10
    2816:	e0 2d       	mov	r30, r0
    2818:	f1 0d       	add	r31, r1
    281a:	03 9f       	mul	r16, r19
    281c:	f0 0d       	add	r31, r0
    281e:	02 9f       	mul	r16, r18
    2820:	e0 0d       	add	r30, r0
    2822:	f1 1d       	adc	r31, r1
    2824:	4e 9d       	mul	r20, r14
    2826:	e0 0d       	add	r30, r0
    2828:	f1 1d       	adc	r31, r1
    282a:	5e 9d       	mul	r21, r14
    282c:	f0 0d       	add	r31, r0
    282e:	4f 9d       	mul	r20, r15
    2830:	f0 0d       	add	r31, r0
    2832:	7f 93       	push	r23
    2834:	6f 93       	push	r22
    2836:	bf 92       	push	r11
    2838:	af 92       	push	r10
    283a:	5f 93       	push	r21
    283c:	4f 93       	push	r20
    283e:	d5 01       	movw	r26, r10
    2840:	30 d0       	rcall	.+96     	; 0x28a2 <__umulhisi3>
    2842:	8b 01       	movw	r16, r22
    2844:	ac 01       	movw	r20, r24
    2846:	d7 01       	movw	r26, r14
    2848:	2c d0       	rcall	.+88     	; 0x28a2 <__umulhisi3>
    284a:	eb 01       	movw	r28, r22
    284c:	e8 0f       	add	r30, r24
    284e:	f9 1f       	adc	r31, r25
    2850:	d6 01       	movw	r26, r12
    2852:	1f d0       	rcall	.+62     	; 0x2892 <__muldi3_6>
    2854:	2f 91       	pop	r18
    2856:	3f 91       	pop	r19
    2858:	d6 01       	movw	r26, r12
    285a:	23 d0       	rcall	.+70     	; 0x28a2 <__umulhisi3>
    285c:	c6 0f       	add	r28, r22
    285e:	d7 1f       	adc	r29, r23
    2860:	e8 1f       	adc	r30, r24
    2862:	f9 1f       	adc	r31, r25
    2864:	af 91       	pop	r26
    2866:	bf 91       	pop	r27
    2868:	14 d0       	rcall	.+40     	; 0x2892 <__muldi3_6>
    286a:	2f 91       	pop	r18
    286c:	3f 91       	pop	r19
    286e:	19 d0       	rcall	.+50     	; 0x28a2 <__umulhisi3>
    2870:	c6 0f       	add	r28, r22
    2872:	d7 1f       	adc	r29, r23
    2874:	e8 1f       	adc	r30, r24
    2876:	f9 1f       	adc	r31, r25
    2878:	d6 01       	movw	r26, r12
    287a:	13 d0       	rcall	.+38     	; 0x28a2 <__umulhisi3>
    287c:	e6 0f       	add	r30, r22
    287e:	f7 1f       	adc	r31, r23
    2880:	98 01       	movw	r18, r16
    2882:	be 01       	movw	r22, r28
    2884:	cf 01       	movw	r24, r30
    2886:	11 24       	eor	r1, r1
    2888:	0f 91       	pop	r16
    288a:	1f 91       	pop	r17
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <__muldi3_6>:
    2892:	07 d0       	rcall	.+14     	; 0x28a2 <__umulhisi3>
    2894:	46 0f       	add	r20, r22
    2896:	57 1f       	adc	r21, r23
    2898:	c8 1f       	adc	r28, r24
    289a:	d9 1f       	adc	r29, r25
    289c:	08 f4       	brcc	.+2      	; 0x28a0 <__muldi3_6+0xe>
    289e:	31 96       	adiw	r30, 0x01	; 1
    28a0:	08 95       	ret

000028a2 <__umulhisi3>:
    28a2:	a2 9f       	mul	r26, r18
    28a4:	b0 01       	movw	r22, r0
    28a6:	b3 9f       	mul	r27, r19
    28a8:	c0 01       	movw	r24, r0
    28aa:	a3 9f       	mul	r26, r19
    28ac:	70 0d       	add	r23, r0
    28ae:	81 1d       	adc	r24, r1
    28b0:	11 24       	eor	r1, r1
    28b2:	91 1d       	adc	r25, r1
    28b4:	b2 9f       	mul	r27, r18
    28b6:	70 0d       	add	r23, r0
    28b8:	81 1d       	adc	r24, r1
    28ba:	11 24       	eor	r1, r1
    28bc:	91 1d       	adc	r25, r1
    28be:	08 95       	ret

000028c0 <calloc>:
    28c0:	0f 93       	push	r16
    28c2:	1f 93       	push	r17
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	86 9f       	mul	r24, r22
    28ca:	80 01       	movw	r16, r0
    28cc:	87 9f       	mul	r24, r23
    28ce:	10 0d       	add	r17, r0
    28d0:	96 9f       	mul	r25, r22
    28d2:	10 0d       	add	r17, r0
    28d4:	11 24       	eor	r1, r1
    28d6:	c8 01       	movw	r24, r16
    28d8:	0d d0       	rcall	.+26     	; 0x28f4 <malloc>
    28da:	ec 01       	movw	r28, r24
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	21 f0       	breq	.+8      	; 0x28e8 <calloc+0x28>
    28e0:	a8 01       	movw	r20, r16
    28e2:	60 e0       	ldi	r22, 0x00	; 0
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	33 d1       	rcall	.+614    	; 0x2b4e <memset>
    28e8:	ce 01       	movw	r24, r28
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	1f 91       	pop	r17
    28f0:	0f 91       	pop	r16
    28f2:	08 95       	ret

000028f4 <malloc>:
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    28f8:	82 30       	cpi	r24, 0x02	; 2
    28fa:	91 05       	cpc	r25, r1
    28fc:	10 f4       	brcc	.+4      	; 0x2902 <malloc+0xe>
    28fe:	82 e0       	ldi	r24, 0x02	; 2
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	e0 91 10 21 	lds	r30, 0x2110
    2906:	f0 91 11 21 	lds	r31, 0x2111
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	c0 e0       	ldi	r28, 0x00	; 0
    2910:	d0 e0       	ldi	r29, 0x00	; 0
    2912:	30 97       	sbiw	r30, 0x00	; 0
    2914:	11 f1       	breq	.+68     	; 0x295a <malloc+0x66>
    2916:	40 81       	ld	r20, Z
    2918:	51 81       	ldd	r21, Z+1	; 0x01
    291a:	48 17       	cp	r20, r24
    291c:	59 07       	cpc	r21, r25
    291e:	c0 f0       	brcs	.+48     	; 0x2950 <malloc+0x5c>
    2920:	48 17       	cp	r20, r24
    2922:	59 07       	cpc	r21, r25
    2924:	61 f4       	brne	.+24     	; 0x293e <malloc+0x4a>
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	20 97       	sbiw	r28, 0x00	; 0
    292c:	19 f0       	breq	.+6      	; 0x2934 <malloc+0x40>
    292e:	8a 83       	std	Y+2, r24	; 0x02
    2930:	9b 83       	std	Y+3, r25	; 0x03
    2932:	2b c0       	rjmp	.+86     	; 0x298a <malloc+0x96>
    2934:	80 93 10 21 	sts	0x2110, r24
    2938:	90 93 11 21 	sts	0x2111, r25
    293c:	26 c0       	rjmp	.+76     	; 0x298a <malloc+0x96>
    293e:	21 15       	cp	r18, r1
    2940:	31 05       	cpc	r19, r1
    2942:	19 f0       	breq	.+6      	; 0x294a <malloc+0x56>
    2944:	42 17       	cp	r20, r18
    2946:	53 07       	cpc	r21, r19
    2948:	18 f4       	brcc	.+6      	; 0x2950 <malloc+0x5c>
    294a:	9a 01       	movw	r18, r20
    294c:	be 01       	movw	r22, r28
    294e:	df 01       	movw	r26, r30
    2950:	ef 01       	movw	r28, r30
    2952:	02 80       	ldd	r0, Z+2	; 0x02
    2954:	f3 81       	ldd	r31, Z+3	; 0x03
    2956:	e0 2d       	mov	r30, r0
    2958:	dc cf       	rjmp	.-72     	; 0x2912 <malloc+0x1e>
    295a:	21 15       	cp	r18, r1
    295c:	31 05       	cpc	r19, r1
    295e:	09 f1       	breq	.+66     	; 0x29a2 <malloc+0xae>
    2960:	28 1b       	sub	r18, r24
    2962:	39 0b       	sbc	r19, r25
    2964:	24 30       	cpi	r18, 0x04	; 4
    2966:	31 05       	cpc	r19, r1
    2968:	90 f4       	brcc	.+36     	; 0x298e <malloc+0x9a>
    296a:	12 96       	adiw	r26, 0x02	; 2
    296c:	8d 91       	ld	r24, X+
    296e:	9c 91       	ld	r25, X
    2970:	13 97       	sbiw	r26, 0x03	; 3
    2972:	61 15       	cp	r22, r1
    2974:	71 05       	cpc	r23, r1
    2976:	21 f0       	breq	.+8      	; 0x2980 <malloc+0x8c>
    2978:	fb 01       	movw	r30, r22
    297a:	82 83       	std	Z+2, r24	; 0x02
    297c:	93 83       	std	Z+3, r25	; 0x03
    297e:	04 c0       	rjmp	.+8      	; 0x2988 <malloc+0x94>
    2980:	80 93 10 21 	sts	0x2110, r24
    2984:	90 93 11 21 	sts	0x2111, r25
    2988:	fd 01       	movw	r30, r26
    298a:	32 96       	adiw	r30, 0x02	; 2
    298c:	44 c0       	rjmp	.+136    	; 0x2a16 <malloc+0x122>
    298e:	fd 01       	movw	r30, r26
    2990:	e2 0f       	add	r30, r18
    2992:	f3 1f       	adc	r31, r19
    2994:	81 93       	st	Z+, r24
    2996:	91 93       	st	Z+, r25
    2998:	22 50       	subi	r18, 0x02	; 2
    299a:	31 09       	sbc	r19, r1
    299c:	2d 93       	st	X+, r18
    299e:	3c 93       	st	X, r19
    29a0:	3a c0       	rjmp	.+116    	; 0x2a16 <malloc+0x122>
    29a2:	20 91 0e 21 	lds	r18, 0x210E
    29a6:	30 91 0f 21 	lds	r19, 0x210F
    29aa:	23 2b       	or	r18, r19
    29ac:	41 f4       	brne	.+16     	; 0x29be <malloc+0xca>
    29ae:	20 91 02 20 	lds	r18, 0x2002
    29b2:	30 91 03 20 	lds	r19, 0x2003
    29b6:	20 93 0e 21 	sts	0x210E, r18
    29ba:	30 93 0f 21 	sts	0x210F, r19
    29be:	20 91 00 20 	lds	r18, 0x2000
    29c2:	30 91 01 20 	lds	r19, 0x2001
    29c6:	21 15       	cp	r18, r1
    29c8:	31 05       	cpc	r19, r1
    29ca:	41 f4       	brne	.+16     	; 0x29dc <malloc+0xe8>
    29cc:	2d b7       	in	r18, 0x3d	; 61
    29ce:	3e b7       	in	r19, 0x3e	; 62
    29d0:	40 91 04 20 	lds	r20, 0x2004
    29d4:	50 91 05 20 	lds	r21, 0x2005
    29d8:	24 1b       	sub	r18, r20
    29da:	35 0b       	sbc	r19, r21
    29dc:	e0 91 0e 21 	lds	r30, 0x210E
    29e0:	f0 91 0f 21 	lds	r31, 0x210F
    29e4:	e2 17       	cp	r30, r18
    29e6:	f3 07       	cpc	r31, r19
    29e8:	a0 f4       	brcc	.+40     	; 0x2a12 <malloc+0x11e>
    29ea:	2e 1b       	sub	r18, r30
    29ec:	3f 0b       	sbc	r19, r31
    29ee:	28 17       	cp	r18, r24
    29f0:	39 07       	cpc	r19, r25
    29f2:	78 f0       	brcs	.+30     	; 0x2a12 <malloc+0x11e>
    29f4:	ac 01       	movw	r20, r24
    29f6:	4e 5f       	subi	r20, 0xFE	; 254
    29f8:	5f 4f       	sbci	r21, 0xFF	; 255
    29fa:	24 17       	cp	r18, r20
    29fc:	35 07       	cpc	r19, r21
    29fe:	48 f0       	brcs	.+18     	; 0x2a12 <malloc+0x11e>
    2a00:	4e 0f       	add	r20, r30
    2a02:	5f 1f       	adc	r21, r31
    2a04:	40 93 0e 21 	sts	0x210E, r20
    2a08:	50 93 0f 21 	sts	0x210F, r21
    2a0c:	81 93       	st	Z+, r24
    2a0e:	91 93       	st	Z+, r25
    2a10:	02 c0       	rjmp	.+4      	; 0x2a16 <malloc+0x122>
    2a12:	e0 e0       	ldi	r30, 0x00	; 0
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	cf 01       	movw	r24, r30
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	08 95       	ret

00002a1e <free>:
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <free+0xe>
    2a2a:	8c c0       	rjmp	.+280    	; 0x2b44 <free+0x126>
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	32 97       	sbiw	r30, 0x02	; 2
    2a30:	12 82       	std	Z+2, r1	; 0x02
    2a32:	13 82       	std	Z+3, r1	; 0x03
    2a34:	00 91 10 21 	lds	r16, 0x2110
    2a38:	10 91 11 21 	lds	r17, 0x2111
    2a3c:	01 15       	cp	r16, r1
    2a3e:	11 05       	cpc	r17, r1
    2a40:	81 f4       	brne	.+32     	; 0x2a62 <free+0x44>
    2a42:	20 81       	ld	r18, Z
    2a44:	31 81       	ldd	r19, Z+1	; 0x01
    2a46:	82 0f       	add	r24, r18
    2a48:	93 1f       	adc	r25, r19
    2a4a:	20 91 0e 21 	lds	r18, 0x210E
    2a4e:	30 91 0f 21 	lds	r19, 0x210F
    2a52:	28 17       	cp	r18, r24
    2a54:	39 07       	cpc	r19, r25
    2a56:	79 f5       	brne	.+94     	; 0x2ab6 <free+0x98>
    2a58:	e0 93 0e 21 	sts	0x210E, r30
    2a5c:	f0 93 0f 21 	sts	0x210F, r31
    2a60:	71 c0       	rjmp	.+226    	; 0x2b44 <free+0x126>
    2a62:	d8 01       	movw	r26, r16
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	ae 17       	cp	r26, r30
    2a6a:	bf 07       	cpc	r27, r31
    2a6c:	50 f4       	brcc	.+20     	; 0x2a82 <free+0x64>
    2a6e:	12 96       	adiw	r26, 0x02	; 2
    2a70:	2d 91       	ld	r18, X+
    2a72:	3c 91       	ld	r19, X
    2a74:	13 97       	sbiw	r26, 0x03	; 3
    2a76:	ad 01       	movw	r20, r26
    2a78:	21 15       	cp	r18, r1
    2a7a:	31 05       	cpc	r19, r1
    2a7c:	09 f1       	breq	.+66     	; 0x2ac0 <free+0xa2>
    2a7e:	d9 01       	movw	r26, r18
    2a80:	f3 cf       	rjmp	.-26     	; 0x2a68 <free+0x4a>
    2a82:	9d 01       	movw	r18, r26
    2a84:	da 01       	movw	r26, r20
    2a86:	22 83       	std	Z+2, r18	; 0x02
    2a88:	33 83       	std	Z+3, r19	; 0x03
    2a8a:	60 81       	ld	r22, Z
    2a8c:	71 81       	ldd	r23, Z+1	; 0x01
    2a8e:	86 0f       	add	r24, r22
    2a90:	97 1f       	adc	r25, r23
    2a92:	82 17       	cp	r24, r18
    2a94:	93 07       	cpc	r25, r19
    2a96:	69 f4       	brne	.+26     	; 0x2ab2 <free+0x94>
    2a98:	ec 01       	movw	r28, r24
    2a9a:	28 81       	ld	r18, Y
    2a9c:	39 81       	ldd	r19, Y+1	; 0x01
    2a9e:	26 0f       	add	r18, r22
    2aa0:	37 1f       	adc	r19, r23
    2aa2:	2e 5f       	subi	r18, 0xFE	; 254
    2aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa6:	20 83       	st	Z, r18
    2aa8:	31 83       	std	Z+1, r19	; 0x01
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2aac:	9b 81       	ldd	r25, Y+3	; 0x03
    2aae:	82 83       	std	Z+2, r24	; 0x02
    2ab0:	93 83       	std	Z+3, r25	; 0x03
    2ab2:	45 2b       	or	r20, r21
    2ab4:	29 f4       	brne	.+10     	; 0x2ac0 <free+0xa2>
    2ab6:	e0 93 10 21 	sts	0x2110, r30
    2aba:	f0 93 11 21 	sts	0x2111, r31
    2abe:	42 c0       	rjmp	.+132    	; 0x2b44 <free+0x126>
    2ac0:	12 96       	adiw	r26, 0x02	; 2
    2ac2:	ed 93       	st	X+, r30
    2ac4:	fc 93       	st	X, r31
    2ac6:	13 97       	sbiw	r26, 0x03	; 3
    2ac8:	ed 01       	movw	r28, r26
    2aca:	49 91       	ld	r20, Y+
    2acc:	59 91       	ld	r21, Y+
    2ace:	9e 01       	movw	r18, r28
    2ad0:	24 0f       	add	r18, r20
    2ad2:	35 1f       	adc	r19, r21
    2ad4:	e2 17       	cp	r30, r18
    2ad6:	f3 07       	cpc	r31, r19
    2ad8:	71 f4       	brne	.+28     	; 0x2af6 <free+0xd8>
    2ada:	80 81       	ld	r24, Z
    2adc:	91 81       	ldd	r25, Z+1	; 0x01
    2ade:	84 0f       	add	r24, r20
    2ae0:	95 1f       	adc	r25, r21
    2ae2:	02 96       	adiw	r24, 0x02	; 2
    2ae4:	8d 93       	st	X+, r24
    2ae6:	9c 93       	st	X, r25
    2ae8:	11 97       	sbiw	r26, 0x01	; 1
    2aea:	82 81       	ldd	r24, Z+2	; 0x02
    2aec:	93 81       	ldd	r25, Z+3	; 0x03
    2aee:	12 96       	adiw	r26, 0x02	; 2
    2af0:	8d 93       	st	X+, r24
    2af2:	9c 93       	st	X, r25
    2af4:	13 97       	sbiw	r26, 0x03	; 3
    2af6:	e0 e0       	ldi	r30, 0x00	; 0
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	d8 01       	movw	r26, r16
    2afc:	12 96       	adiw	r26, 0x02	; 2
    2afe:	8d 91       	ld	r24, X+
    2b00:	9c 91       	ld	r25, X
    2b02:	13 97       	sbiw	r26, 0x03	; 3
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	19 f0       	breq	.+6      	; 0x2b0e <free+0xf0>
    2b08:	f8 01       	movw	r30, r16
    2b0a:	8c 01       	movw	r16, r24
    2b0c:	f6 cf       	rjmp	.-20     	; 0x2afa <free+0xdc>
    2b0e:	8d 91       	ld	r24, X+
    2b10:	9c 91       	ld	r25, X
    2b12:	98 01       	movw	r18, r16
    2b14:	2e 5f       	subi	r18, 0xFE	; 254
    2b16:	3f 4f       	sbci	r19, 0xFF	; 255
    2b18:	82 0f       	add	r24, r18
    2b1a:	93 1f       	adc	r25, r19
    2b1c:	20 91 0e 21 	lds	r18, 0x210E
    2b20:	30 91 0f 21 	lds	r19, 0x210F
    2b24:	28 17       	cp	r18, r24
    2b26:	39 07       	cpc	r19, r25
    2b28:	69 f4       	brne	.+26     	; 0x2b44 <free+0x126>
    2b2a:	30 97       	sbiw	r30, 0x00	; 0
    2b2c:	29 f4       	brne	.+10     	; 0x2b38 <free+0x11a>
    2b2e:	10 92 10 21 	sts	0x2110, r1
    2b32:	10 92 11 21 	sts	0x2111, r1
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <free+0x11e>
    2b38:	12 82       	std	Z+2, r1	; 0x02
    2b3a:	13 82       	std	Z+3, r1	; 0x03
    2b3c:	00 93 0e 21 	sts	0x210E, r16
    2b40:	10 93 0f 21 	sts	0x210F, r17
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	08 95       	ret

00002b4e <memset>:
    2b4e:	dc 01       	movw	r26, r24
    2b50:	01 c0       	rjmp	.+2      	; 0x2b54 <memset+0x6>
    2b52:	6d 93       	st	X+, r22
    2b54:	41 50       	subi	r20, 0x01	; 1
    2b56:	50 40       	sbci	r21, 0x00	; 0
    2b58:	e0 f7       	brcc	.-8      	; 0x2b52 <memset+0x4>
    2b5a:	08 95       	ret

00002b5c <fdevopen>:
    2b5c:	0f 93       	push	r16
    2b5e:	1f 93       	push	r17
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	00 97       	sbiw	r24, 0x00	; 0
    2b66:	31 f4       	brne	.+12     	; 0x2b74 <fdevopen+0x18>
    2b68:	61 15       	cp	r22, r1
    2b6a:	71 05       	cpc	r23, r1
    2b6c:	19 f4       	brne	.+6      	; 0x2b74 <fdevopen+0x18>
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	39 c0       	rjmp	.+114    	; 0x2be6 <fdevopen+0x8a>
    2b74:	8b 01       	movw	r16, r22
    2b76:	ec 01       	movw	r28, r24
    2b78:	6e e0       	ldi	r22, 0x0E	; 14
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	9f de       	rcall	.-706    	; 0x28c0 <calloc>
    2b82:	fc 01       	movw	r30, r24
    2b84:	89 2b       	or	r24, r25
    2b86:	99 f3       	breq	.-26     	; 0x2b6e <fdevopen+0x12>
    2b88:	80 e8       	ldi	r24, 0x80	; 128
    2b8a:	83 83       	std	Z+3, r24	; 0x03
    2b8c:	01 15       	cp	r16, r1
    2b8e:	11 05       	cpc	r17, r1
    2b90:	71 f0       	breq	.+28     	; 0x2bae <fdevopen+0x52>
    2b92:	02 87       	std	Z+10, r16	; 0x0a
    2b94:	13 87       	std	Z+11, r17	; 0x0b
    2b96:	81 e8       	ldi	r24, 0x81	; 129
    2b98:	83 83       	std	Z+3, r24	; 0x03
    2b9a:	80 91 12 21 	lds	r24, 0x2112
    2b9e:	90 91 13 21 	lds	r25, 0x2113
    2ba2:	89 2b       	or	r24, r25
    2ba4:	21 f4       	brne	.+8      	; 0x2bae <fdevopen+0x52>
    2ba6:	e0 93 12 21 	sts	0x2112, r30
    2baa:	f0 93 13 21 	sts	0x2113, r31
    2bae:	20 97       	sbiw	r28, 0x00	; 0
    2bb0:	c9 f0       	breq	.+50     	; 0x2be4 <fdevopen+0x88>
    2bb2:	c0 87       	std	Z+8, r28	; 0x08
    2bb4:	d1 87       	std	Z+9, r29	; 0x09
    2bb6:	83 81       	ldd	r24, Z+3	; 0x03
    2bb8:	82 60       	ori	r24, 0x02	; 2
    2bba:	83 83       	std	Z+3, r24	; 0x03
    2bbc:	80 91 14 21 	lds	r24, 0x2114
    2bc0:	90 91 15 21 	lds	r25, 0x2115
    2bc4:	89 2b       	or	r24, r25
    2bc6:	71 f4       	brne	.+28     	; 0x2be4 <fdevopen+0x88>
    2bc8:	e0 93 14 21 	sts	0x2114, r30
    2bcc:	f0 93 15 21 	sts	0x2115, r31
    2bd0:	80 91 16 21 	lds	r24, 0x2116
    2bd4:	90 91 17 21 	lds	r25, 0x2117
    2bd8:	89 2b       	or	r24, r25
    2bda:	21 f4       	brne	.+8      	; 0x2be4 <fdevopen+0x88>
    2bdc:	e0 93 16 21 	sts	0x2116, r30
    2be0:	f0 93 17 21 	sts	0x2117, r31
    2be4:	cf 01       	movw	r24, r30
    2be6:	df 91       	pop	r29
    2be8:	cf 91       	pop	r28
    2bea:	1f 91       	pop	r17
    2bec:	0f 91       	pop	r16
    2bee:	08 95       	ret

00002bf0 <printf>:
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	ae 01       	movw	r20, r28
    2bfa:	4a 5f       	subi	r20, 0xFA	; 250
    2bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bfe:	fa 01       	movw	r30, r20
    2c00:	61 91       	ld	r22, Z+
    2c02:	71 91       	ld	r23, Z+
    2c04:	af 01       	movw	r20, r30
    2c06:	80 91 14 21 	lds	r24, 0x2114
    2c0a:	90 91 15 21 	lds	r25, 0x2115
    2c0e:	5c d0       	rcall	.+184    	; 0x2cc8 <vfprintf>
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	08 95       	ret

00002c16 <puts>:
    2c16:	0f 93       	push	r16
    2c18:	1f 93       	push	r17
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	e0 91 14 21 	lds	r30, 0x2114
    2c22:	f0 91 15 21 	lds	r31, 0x2115
    2c26:	23 81       	ldd	r18, Z+3	; 0x03
    2c28:	21 ff       	sbrs	r18, 1
    2c2a:	1b c0       	rjmp	.+54     	; 0x2c62 <puts+0x4c>
    2c2c:	8c 01       	movw	r16, r24
    2c2e:	d0 e0       	ldi	r29, 0x00	; 0
    2c30:	c0 e0       	ldi	r28, 0x00	; 0
    2c32:	f8 01       	movw	r30, r16
    2c34:	81 91       	ld	r24, Z+
    2c36:	8f 01       	movw	r16, r30
    2c38:	60 91 14 21 	lds	r22, 0x2114
    2c3c:	70 91 15 21 	lds	r23, 0x2115
    2c40:	db 01       	movw	r26, r22
    2c42:	18 96       	adiw	r26, 0x08	; 8
    2c44:	ed 91       	ld	r30, X+
    2c46:	fc 91       	ld	r31, X
    2c48:	19 97       	sbiw	r26, 0x09	; 9
    2c4a:	88 23       	and	r24, r24
    2c4c:	31 f0       	breq	.+12     	; 0x2c5a <puts+0x44>
    2c4e:	19 95       	eicall
    2c50:	89 2b       	or	r24, r25
    2c52:	79 f3       	breq	.-34     	; 0x2c32 <puts+0x1c>
    2c54:	df ef       	ldi	r29, 0xFF	; 255
    2c56:	cf ef       	ldi	r28, 0xFF	; 255
    2c58:	ec cf       	rjmp	.-40     	; 0x2c32 <puts+0x1c>
    2c5a:	8a e0       	ldi	r24, 0x0A	; 10
    2c5c:	19 95       	eicall
    2c5e:	89 2b       	or	r24, r25
    2c60:	19 f0       	breq	.+6      	; 0x2c68 <puts+0x52>
    2c62:	8f ef       	ldi	r24, 0xFF	; 255
    2c64:	9f ef       	ldi	r25, 0xFF	; 255
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <puts+0x56>
    2c68:	8d 2f       	mov	r24, r29
    2c6a:	9c 2f       	mov	r25, r28
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	1f 91       	pop	r17
    2c72:	0f 91       	pop	r16
    2c74:	08 95       	ret

00002c76 <sprintf>:
    2c76:	0f 93       	push	r16
    2c78:	1f 93       	push	r17
    2c7a:	cf 93       	push	r28
    2c7c:	df 93       	push	r29
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	2e 97       	sbiw	r28, 0x0e	; 14
    2c84:	cd bf       	out	0x3d, r28	; 61
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0e 89       	ldd	r16, Y+22	; 0x16
    2c8a:	1f 89       	ldd	r17, Y+23	; 0x17
    2c8c:	86 e0       	ldi	r24, 0x06	; 6
    2c8e:	8c 83       	std	Y+4, r24	; 0x04
    2c90:	09 83       	std	Y+1, r16	; 0x01
    2c92:	1a 83       	std	Y+2, r17	; 0x02
    2c94:	8f ef       	ldi	r24, 0xFF	; 255
    2c96:	9f e7       	ldi	r25, 0x7F	; 127
    2c98:	8d 83       	std	Y+5, r24	; 0x05
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	ae 01       	movw	r20, r28
    2c9e:	46 5e       	subi	r20, 0xE6	; 230
    2ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca2:	68 8d       	ldd	r22, Y+24	; 0x18
    2ca4:	79 8d       	ldd	r23, Y+25	; 0x19
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	01 96       	adiw	r24, 0x01	; 1
    2caa:	0e d0       	rcall	.+28     	; 0x2cc8 <vfprintf>
    2cac:	2f 81       	ldd	r18, Y+7	; 0x07
    2cae:	38 85       	ldd	r19, Y+8	; 0x08
    2cb0:	f8 01       	movw	r30, r16
    2cb2:	e2 0f       	add	r30, r18
    2cb4:	f3 1f       	adc	r31, r19
    2cb6:	10 82       	st	Z, r1
    2cb8:	2e 96       	adiw	r28, 0x0e	; 14
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	df 91       	pop	r29
    2cc0:	cf 91       	pop	r28
    2cc2:	1f 91       	pop	r17
    2cc4:	0f 91       	pop	r16
    2cc6:	08 95       	ret

00002cc8 <vfprintf>:
    2cc8:	2f 92       	push	r2
    2cca:	3f 92       	push	r3
    2ccc:	4f 92       	push	r4
    2cce:	5f 92       	push	r5
    2cd0:	6f 92       	push	r6
    2cd2:	7f 92       	push	r7
    2cd4:	8f 92       	push	r8
    2cd6:	9f 92       	push	r9
    2cd8:	af 92       	push	r10
    2cda:	bf 92       	push	r11
    2cdc:	cf 92       	push	r12
    2cde:	df 92       	push	r13
    2ce0:	ef 92       	push	r14
    2ce2:	ff 92       	push	r15
    2ce4:	0f 93       	push	r16
    2ce6:	1f 93       	push	r17
    2ce8:	cf 93       	push	r28
    2cea:	df 93       	push	r29
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	2c 97       	sbiw	r28, 0x0c	; 12
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	7c 01       	movw	r14, r24
    2cf8:	6b 01       	movw	r12, r22
    2cfa:	8a 01       	movw	r16, r20
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	16 82       	std	Z+6, r1	; 0x06
    2d00:	17 82       	std	Z+7, r1	; 0x07
    2d02:	83 81       	ldd	r24, Z+3	; 0x03
    2d04:	81 ff       	sbrs	r24, 1
    2d06:	b0 c1       	rjmp	.+864    	; 0x3068 <vfprintf+0x3a0>
    2d08:	ce 01       	movw	r24, r28
    2d0a:	01 96       	adiw	r24, 0x01	; 1
    2d0c:	4c 01       	movw	r8, r24
    2d0e:	f7 01       	movw	r30, r14
    2d10:	93 81       	ldd	r25, Z+3	; 0x03
    2d12:	f6 01       	movw	r30, r12
    2d14:	93 fd       	sbrc	r25, 3
    2d16:	85 91       	lpm	r24, Z+
    2d18:	93 ff       	sbrs	r25, 3
    2d1a:	81 91       	ld	r24, Z+
    2d1c:	6f 01       	movw	r12, r30
    2d1e:	88 23       	and	r24, r24
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <vfprintf+0x5c>
    2d22:	9e c1       	rjmp	.+828    	; 0x3060 <vfprintf+0x398>
    2d24:	85 32       	cpi	r24, 0x25	; 37
    2d26:	39 f4       	brne	.+14     	; 0x2d36 <vfprintf+0x6e>
    2d28:	93 fd       	sbrc	r25, 3
    2d2a:	85 91       	lpm	r24, Z+
    2d2c:	93 ff       	sbrs	r25, 3
    2d2e:	81 91       	ld	r24, Z+
    2d30:	6f 01       	movw	r12, r30
    2d32:	85 32       	cpi	r24, 0x25	; 37
    2d34:	21 f4       	brne	.+8      	; 0x2d3e <vfprintf+0x76>
    2d36:	b7 01       	movw	r22, r14
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	c4 d1       	rcall	.+904    	; 0x30c4 <fputc>
    2d3c:	e8 cf       	rjmp	.-48     	; 0x2d0e <vfprintf+0x46>
    2d3e:	51 2c       	mov	r5, r1
    2d40:	31 2c       	mov	r3, r1
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	20 32       	cpi	r18, 0x20	; 32
    2d46:	a0 f4       	brcc	.+40     	; 0x2d70 <vfprintf+0xa8>
    2d48:	8b 32       	cpi	r24, 0x2B	; 43
    2d4a:	69 f0       	breq	.+26     	; 0x2d66 <vfprintf+0x9e>
    2d4c:	30 f4       	brcc	.+12     	; 0x2d5a <vfprintf+0x92>
    2d4e:	80 32       	cpi	r24, 0x20	; 32
    2d50:	59 f0       	breq	.+22     	; 0x2d68 <vfprintf+0xa0>
    2d52:	83 32       	cpi	r24, 0x23	; 35
    2d54:	69 f4       	brne	.+26     	; 0x2d70 <vfprintf+0xa8>
    2d56:	20 61       	ori	r18, 0x10	; 16
    2d58:	2c c0       	rjmp	.+88     	; 0x2db2 <vfprintf+0xea>
    2d5a:	8d 32       	cpi	r24, 0x2D	; 45
    2d5c:	39 f0       	breq	.+14     	; 0x2d6c <vfprintf+0xa4>
    2d5e:	80 33       	cpi	r24, 0x30	; 48
    2d60:	39 f4       	brne	.+14     	; 0x2d70 <vfprintf+0xa8>
    2d62:	21 60       	ori	r18, 0x01	; 1
    2d64:	26 c0       	rjmp	.+76     	; 0x2db2 <vfprintf+0xea>
    2d66:	22 60       	ori	r18, 0x02	; 2
    2d68:	24 60       	ori	r18, 0x04	; 4
    2d6a:	23 c0       	rjmp	.+70     	; 0x2db2 <vfprintf+0xea>
    2d6c:	28 60       	ori	r18, 0x08	; 8
    2d6e:	21 c0       	rjmp	.+66     	; 0x2db2 <vfprintf+0xea>
    2d70:	27 fd       	sbrc	r18, 7
    2d72:	27 c0       	rjmp	.+78     	; 0x2dc2 <vfprintf+0xfa>
    2d74:	30 ed       	ldi	r19, 0xD0	; 208
    2d76:	38 0f       	add	r19, r24
    2d78:	3a 30       	cpi	r19, 0x0A	; 10
    2d7a:	78 f4       	brcc	.+30     	; 0x2d9a <vfprintf+0xd2>
    2d7c:	26 ff       	sbrs	r18, 6
    2d7e:	06 c0       	rjmp	.+12     	; 0x2d8c <vfprintf+0xc4>
    2d80:	fa e0       	ldi	r31, 0x0A	; 10
    2d82:	5f 9e       	mul	r5, r31
    2d84:	30 0d       	add	r19, r0
    2d86:	11 24       	eor	r1, r1
    2d88:	53 2e       	mov	r5, r19
    2d8a:	13 c0       	rjmp	.+38     	; 0x2db2 <vfprintf+0xea>
    2d8c:	8a e0       	ldi	r24, 0x0A	; 10
    2d8e:	38 9e       	mul	r3, r24
    2d90:	30 0d       	add	r19, r0
    2d92:	11 24       	eor	r1, r1
    2d94:	33 2e       	mov	r3, r19
    2d96:	20 62       	ori	r18, 0x20	; 32
    2d98:	0c c0       	rjmp	.+24     	; 0x2db2 <vfprintf+0xea>
    2d9a:	8e 32       	cpi	r24, 0x2E	; 46
    2d9c:	21 f4       	brne	.+8      	; 0x2da6 <vfprintf+0xde>
    2d9e:	26 fd       	sbrc	r18, 6
    2da0:	5f c1       	rjmp	.+702    	; 0x3060 <vfprintf+0x398>
    2da2:	20 64       	ori	r18, 0x40	; 64
    2da4:	06 c0       	rjmp	.+12     	; 0x2db2 <vfprintf+0xea>
    2da6:	8c 36       	cpi	r24, 0x6C	; 108
    2da8:	11 f4       	brne	.+4      	; 0x2dae <vfprintf+0xe6>
    2daa:	20 68       	ori	r18, 0x80	; 128
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <vfprintf+0xea>
    2dae:	88 36       	cpi	r24, 0x68	; 104
    2db0:	41 f4       	brne	.+16     	; 0x2dc2 <vfprintf+0xfa>
    2db2:	f6 01       	movw	r30, r12
    2db4:	93 fd       	sbrc	r25, 3
    2db6:	85 91       	lpm	r24, Z+
    2db8:	93 ff       	sbrs	r25, 3
    2dba:	81 91       	ld	r24, Z+
    2dbc:	6f 01       	movw	r12, r30
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	c1 cf       	rjmp	.-126    	; 0x2d44 <vfprintf+0x7c>
    2dc2:	98 2f       	mov	r25, r24
    2dc4:	9f 7d       	andi	r25, 0xDF	; 223
    2dc6:	95 54       	subi	r25, 0x45	; 69
    2dc8:	93 30       	cpi	r25, 0x03	; 3
    2dca:	28 f4       	brcc	.+10     	; 0x2dd6 <vfprintf+0x10e>
    2dcc:	0c 5f       	subi	r16, 0xFC	; 252
    2dce:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd0:	ff e3       	ldi	r31, 0x3F	; 63
    2dd2:	f9 83       	std	Y+1, r31	; 0x01
    2dd4:	0d c0       	rjmp	.+26     	; 0x2df0 <vfprintf+0x128>
    2dd6:	83 36       	cpi	r24, 0x63	; 99
    2dd8:	31 f0       	breq	.+12     	; 0x2de6 <vfprintf+0x11e>
    2dda:	83 37       	cpi	r24, 0x73	; 115
    2ddc:	71 f0       	breq	.+28     	; 0x2dfa <vfprintf+0x132>
    2dde:	83 35       	cpi	r24, 0x53	; 83
    2de0:	09 f0       	breq	.+2      	; 0x2de4 <vfprintf+0x11c>
    2de2:	57 c0       	rjmp	.+174    	; 0x2e92 <vfprintf+0x1ca>
    2de4:	21 c0       	rjmp	.+66     	; 0x2e28 <vfprintf+0x160>
    2de6:	f8 01       	movw	r30, r16
    2de8:	80 81       	ld	r24, Z
    2dea:	89 83       	std	Y+1, r24	; 0x01
    2dec:	0e 5f       	subi	r16, 0xFE	; 254
    2dee:	1f 4f       	sbci	r17, 0xFF	; 255
    2df0:	44 24       	eor	r4, r4
    2df2:	43 94       	inc	r4
    2df4:	51 2c       	mov	r5, r1
    2df6:	54 01       	movw	r10, r8
    2df8:	14 c0       	rjmp	.+40     	; 0x2e22 <vfprintf+0x15a>
    2dfa:	38 01       	movw	r6, r16
    2dfc:	f2 e0       	ldi	r31, 0x02	; 2
    2dfe:	6f 0e       	add	r6, r31
    2e00:	71 1c       	adc	r7, r1
    2e02:	f8 01       	movw	r30, r16
    2e04:	a0 80       	ld	r10, Z
    2e06:	b1 80       	ldd	r11, Z+1	; 0x01
    2e08:	26 ff       	sbrs	r18, 6
    2e0a:	03 c0       	rjmp	.+6      	; 0x2e12 <vfprintf+0x14a>
    2e0c:	65 2d       	mov	r22, r5
    2e0e:	70 e0       	ldi	r23, 0x00	; 0
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <vfprintf+0x14e>
    2e12:	6f ef       	ldi	r22, 0xFF	; 255
    2e14:	7f ef       	ldi	r23, 0xFF	; 255
    2e16:	c5 01       	movw	r24, r10
    2e18:	2c 87       	std	Y+12, r18	; 0x0c
    2e1a:	49 d1       	rcall	.+658    	; 0x30ae <strnlen>
    2e1c:	2c 01       	movw	r4, r24
    2e1e:	83 01       	movw	r16, r6
    2e20:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e22:	2f 77       	andi	r18, 0x7F	; 127
    2e24:	22 2e       	mov	r2, r18
    2e26:	16 c0       	rjmp	.+44     	; 0x2e54 <vfprintf+0x18c>
    2e28:	38 01       	movw	r6, r16
    2e2a:	f2 e0       	ldi	r31, 0x02	; 2
    2e2c:	6f 0e       	add	r6, r31
    2e2e:	71 1c       	adc	r7, r1
    2e30:	f8 01       	movw	r30, r16
    2e32:	a0 80       	ld	r10, Z
    2e34:	b1 80       	ldd	r11, Z+1	; 0x01
    2e36:	26 ff       	sbrs	r18, 6
    2e38:	03 c0       	rjmp	.+6      	; 0x2e40 <vfprintf+0x178>
    2e3a:	65 2d       	mov	r22, r5
    2e3c:	70 e0       	ldi	r23, 0x00	; 0
    2e3e:	02 c0       	rjmp	.+4      	; 0x2e44 <vfprintf+0x17c>
    2e40:	6f ef       	ldi	r22, 0xFF	; 255
    2e42:	7f ef       	ldi	r23, 0xFF	; 255
    2e44:	c5 01       	movw	r24, r10
    2e46:	2c 87       	std	Y+12, r18	; 0x0c
    2e48:	27 d1       	rcall	.+590    	; 0x3098 <strnlen_P>
    2e4a:	2c 01       	movw	r4, r24
    2e4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e4e:	20 68       	ori	r18, 0x80	; 128
    2e50:	22 2e       	mov	r2, r18
    2e52:	83 01       	movw	r16, r6
    2e54:	23 fc       	sbrc	r2, 3
    2e56:	19 c0       	rjmp	.+50     	; 0x2e8a <vfprintf+0x1c2>
    2e58:	83 2d       	mov	r24, r3
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	48 16       	cp	r4, r24
    2e5e:	59 06       	cpc	r5, r25
    2e60:	a0 f4       	brcc	.+40     	; 0x2e8a <vfprintf+0x1c2>
    2e62:	b7 01       	movw	r22, r14
    2e64:	80 e2       	ldi	r24, 0x20	; 32
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	2d d1       	rcall	.+602    	; 0x30c4 <fputc>
    2e6a:	3a 94       	dec	r3
    2e6c:	f5 cf       	rjmp	.-22     	; 0x2e58 <vfprintf+0x190>
    2e6e:	f5 01       	movw	r30, r10
    2e70:	27 fc       	sbrc	r2, 7
    2e72:	85 91       	lpm	r24, Z+
    2e74:	27 fe       	sbrs	r2, 7
    2e76:	81 91       	ld	r24, Z+
    2e78:	5f 01       	movw	r10, r30
    2e7a:	b7 01       	movw	r22, r14
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	22 d1       	rcall	.+580    	; 0x30c4 <fputc>
    2e80:	31 10       	cpse	r3, r1
    2e82:	3a 94       	dec	r3
    2e84:	f1 e0       	ldi	r31, 0x01	; 1
    2e86:	4f 1a       	sub	r4, r31
    2e88:	51 08       	sbc	r5, r1
    2e8a:	41 14       	cp	r4, r1
    2e8c:	51 04       	cpc	r5, r1
    2e8e:	79 f7       	brne	.-34     	; 0x2e6e <vfprintf+0x1a6>
    2e90:	de c0       	rjmp	.+444    	; 0x304e <vfprintf+0x386>
    2e92:	84 36       	cpi	r24, 0x64	; 100
    2e94:	11 f0       	breq	.+4      	; 0x2e9a <vfprintf+0x1d2>
    2e96:	89 36       	cpi	r24, 0x69	; 105
    2e98:	31 f5       	brne	.+76     	; 0x2ee6 <vfprintf+0x21e>
    2e9a:	f8 01       	movw	r30, r16
    2e9c:	27 ff       	sbrs	r18, 7
    2e9e:	07 c0       	rjmp	.+14     	; 0x2eae <vfprintf+0x1e6>
    2ea0:	60 81       	ld	r22, Z
    2ea2:	71 81       	ldd	r23, Z+1	; 0x01
    2ea4:	82 81       	ldd	r24, Z+2	; 0x02
    2ea6:	93 81       	ldd	r25, Z+3	; 0x03
    2ea8:	0c 5f       	subi	r16, 0xFC	; 252
    2eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2eac:	08 c0       	rjmp	.+16     	; 0x2ebe <vfprintf+0x1f6>
    2eae:	60 81       	ld	r22, Z
    2eb0:	71 81       	ldd	r23, Z+1	; 0x01
    2eb2:	07 2e       	mov	r0, r23
    2eb4:	00 0c       	add	r0, r0
    2eb6:	88 0b       	sbc	r24, r24
    2eb8:	99 0b       	sbc	r25, r25
    2eba:	0e 5f       	subi	r16, 0xFE	; 254
    2ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebe:	2f 76       	andi	r18, 0x6F	; 111
    2ec0:	72 2e       	mov	r7, r18
    2ec2:	97 ff       	sbrs	r25, 7
    2ec4:	09 c0       	rjmp	.+18     	; 0x2ed8 <vfprintf+0x210>
    2ec6:	90 95       	com	r25
    2ec8:	80 95       	com	r24
    2eca:	70 95       	com	r23
    2ecc:	61 95       	neg	r22
    2ece:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed4:	20 68       	ori	r18, 0x80	; 128
    2ed6:	72 2e       	mov	r7, r18
    2ed8:	2a e0       	ldi	r18, 0x0A	; 10
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	a4 01       	movw	r20, r8
    2ede:	2a d1       	rcall	.+596    	; 0x3134 <__ultoa_invert>
    2ee0:	a8 2e       	mov	r10, r24
    2ee2:	a8 18       	sub	r10, r8
    2ee4:	43 c0       	rjmp	.+134    	; 0x2f6c <vfprintf+0x2a4>
    2ee6:	85 37       	cpi	r24, 0x75	; 117
    2ee8:	29 f4       	brne	.+10     	; 0x2ef4 <vfprintf+0x22c>
    2eea:	2f 7e       	andi	r18, 0xEF	; 239
    2eec:	b2 2e       	mov	r11, r18
    2eee:	2a e0       	ldi	r18, 0x0A	; 10
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	25 c0       	rjmp	.+74     	; 0x2f3e <vfprintf+0x276>
    2ef4:	f2 2f       	mov	r31, r18
    2ef6:	f9 7f       	andi	r31, 0xF9	; 249
    2ef8:	bf 2e       	mov	r11, r31
    2efa:	8f 36       	cpi	r24, 0x6F	; 111
    2efc:	c1 f0       	breq	.+48     	; 0x2f2e <vfprintf+0x266>
    2efe:	18 f4       	brcc	.+6      	; 0x2f06 <vfprintf+0x23e>
    2f00:	88 35       	cpi	r24, 0x58	; 88
    2f02:	79 f0       	breq	.+30     	; 0x2f22 <vfprintf+0x25a>
    2f04:	ad c0       	rjmp	.+346    	; 0x3060 <vfprintf+0x398>
    2f06:	80 37       	cpi	r24, 0x70	; 112
    2f08:	19 f0       	breq	.+6      	; 0x2f10 <vfprintf+0x248>
    2f0a:	88 37       	cpi	r24, 0x78	; 120
    2f0c:	21 f0       	breq	.+8      	; 0x2f16 <vfprintf+0x24e>
    2f0e:	a8 c0       	rjmp	.+336    	; 0x3060 <vfprintf+0x398>
    2f10:	2f 2f       	mov	r18, r31
    2f12:	20 61       	ori	r18, 0x10	; 16
    2f14:	b2 2e       	mov	r11, r18
    2f16:	b4 fe       	sbrs	r11, 4
    2f18:	0d c0       	rjmp	.+26     	; 0x2f34 <vfprintf+0x26c>
    2f1a:	8b 2d       	mov	r24, r11
    2f1c:	84 60       	ori	r24, 0x04	; 4
    2f1e:	b8 2e       	mov	r11, r24
    2f20:	09 c0       	rjmp	.+18     	; 0x2f34 <vfprintf+0x26c>
    2f22:	24 ff       	sbrs	r18, 4
    2f24:	0a c0       	rjmp	.+20     	; 0x2f3a <vfprintf+0x272>
    2f26:	9f 2f       	mov	r25, r31
    2f28:	96 60       	ori	r25, 0x06	; 6
    2f2a:	b9 2e       	mov	r11, r25
    2f2c:	06 c0       	rjmp	.+12     	; 0x2f3a <vfprintf+0x272>
    2f2e:	28 e0       	ldi	r18, 0x08	; 8
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	05 c0       	rjmp	.+10     	; 0x2f3e <vfprintf+0x276>
    2f34:	20 e1       	ldi	r18, 0x10	; 16
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <vfprintf+0x276>
    2f3a:	20 e1       	ldi	r18, 0x10	; 16
    2f3c:	32 e0       	ldi	r19, 0x02	; 2
    2f3e:	f8 01       	movw	r30, r16
    2f40:	b7 fe       	sbrs	r11, 7
    2f42:	07 c0       	rjmp	.+14     	; 0x2f52 <vfprintf+0x28a>
    2f44:	60 81       	ld	r22, Z
    2f46:	71 81       	ldd	r23, Z+1	; 0x01
    2f48:	82 81       	ldd	r24, Z+2	; 0x02
    2f4a:	93 81       	ldd	r25, Z+3	; 0x03
    2f4c:	0c 5f       	subi	r16, 0xFC	; 252
    2f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f50:	06 c0       	rjmp	.+12     	; 0x2f5e <vfprintf+0x296>
    2f52:	60 81       	ld	r22, Z
    2f54:	71 81       	ldd	r23, Z+1	; 0x01
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0e 5f       	subi	r16, 0xFE	; 254
    2f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5e:	a4 01       	movw	r20, r8
    2f60:	e9 d0       	rcall	.+466    	; 0x3134 <__ultoa_invert>
    2f62:	a8 2e       	mov	r10, r24
    2f64:	a8 18       	sub	r10, r8
    2f66:	fb 2d       	mov	r31, r11
    2f68:	ff 77       	andi	r31, 0x7F	; 127
    2f6a:	7f 2e       	mov	r7, r31
    2f6c:	76 fe       	sbrs	r7, 6
    2f6e:	0b c0       	rjmp	.+22     	; 0x2f86 <vfprintf+0x2be>
    2f70:	37 2d       	mov	r19, r7
    2f72:	3e 7f       	andi	r19, 0xFE	; 254
    2f74:	a5 14       	cp	r10, r5
    2f76:	50 f4       	brcc	.+20     	; 0x2f8c <vfprintf+0x2c4>
    2f78:	74 fe       	sbrs	r7, 4
    2f7a:	0a c0       	rjmp	.+20     	; 0x2f90 <vfprintf+0x2c8>
    2f7c:	72 fc       	sbrc	r7, 2
    2f7e:	08 c0       	rjmp	.+16     	; 0x2f90 <vfprintf+0x2c8>
    2f80:	37 2d       	mov	r19, r7
    2f82:	3e 7e       	andi	r19, 0xEE	; 238
    2f84:	05 c0       	rjmp	.+10     	; 0x2f90 <vfprintf+0x2c8>
    2f86:	ba 2c       	mov	r11, r10
    2f88:	37 2d       	mov	r19, r7
    2f8a:	03 c0       	rjmp	.+6      	; 0x2f92 <vfprintf+0x2ca>
    2f8c:	ba 2c       	mov	r11, r10
    2f8e:	01 c0       	rjmp	.+2      	; 0x2f92 <vfprintf+0x2ca>
    2f90:	b5 2c       	mov	r11, r5
    2f92:	34 ff       	sbrs	r19, 4
    2f94:	0d c0       	rjmp	.+26     	; 0x2fb0 <vfprintf+0x2e8>
    2f96:	fe 01       	movw	r30, r28
    2f98:	ea 0d       	add	r30, r10
    2f9a:	f1 1d       	adc	r31, r1
    2f9c:	80 81       	ld	r24, Z
    2f9e:	80 33       	cpi	r24, 0x30	; 48
    2fa0:	11 f4       	brne	.+4      	; 0x2fa6 <vfprintf+0x2de>
    2fa2:	39 7e       	andi	r19, 0xE9	; 233
    2fa4:	09 c0       	rjmp	.+18     	; 0x2fb8 <vfprintf+0x2f0>
    2fa6:	32 ff       	sbrs	r19, 2
    2fa8:	06 c0       	rjmp	.+12     	; 0x2fb6 <vfprintf+0x2ee>
    2faa:	b3 94       	inc	r11
    2fac:	b3 94       	inc	r11
    2fae:	04 c0       	rjmp	.+8      	; 0x2fb8 <vfprintf+0x2f0>
    2fb0:	83 2f       	mov	r24, r19
    2fb2:	86 78       	andi	r24, 0x86	; 134
    2fb4:	09 f0       	breq	.+2      	; 0x2fb8 <vfprintf+0x2f0>
    2fb6:	b3 94       	inc	r11
    2fb8:	33 fd       	sbrc	r19, 3
    2fba:	12 c0       	rjmp	.+36     	; 0x2fe0 <vfprintf+0x318>
    2fbc:	30 ff       	sbrs	r19, 0
    2fbe:	06 c0       	rjmp	.+12     	; 0x2fcc <vfprintf+0x304>
    2fc0:	5a 2c       	mov	r5, r10
    2fc2:	b3 14       	cp	r11, r3
    2fc4:	18 f4       	brcc	.+6      	; 0x2fcc <vfprintf+0x304>
    2fc6:	53 0c       	add	r5, r3
    2fc8:	5b 18       	sub	r5, r11
    2fca:	b3 2c       	mov	r11, r3
    2fcc:	b3 14       	cp	r11, r3
    2fce:	60 f4       	brcc	.+24     	; 0x2fe8 <vfprintf+0x320>
    2fd0:	b7 01       	movw	r22, r14
    2fd2:	80 e2       	ldi	r24, 0x20	; 32
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	3c 87       	std	Y+12, r19	; 0x0c
    2fd8:	75 d0       	rcall	.+234    	; 0x30c4 <fputc>
    2fda:	b3 94       	inc	r11
    2fdc:	3c 85       	ldd	r19, Y+12	; 0x0c
    2fde:	f6 cf       	rjmp	.-20     	; 0x2fcc <vfprintf+0x304>
    2fe0:	b3 14       	cp	r11, r3
    2fe2:	10 f4       	brcc	.+4      	; 0x2fe8 <vfprintf+0x320>
    2fe4:	3b 18       	sub	r3, r11
    2fe6:	01 c0       	rjmp	.+2      	; 0x2fea <vfprintf+0x322>
    2fe8:	31 2c       	mov	r3, r1
    2fea:	34 ff       	sbrs	r19, 4
    2fec:	11 c0       	rjmp	.+34     	; 0x3010 <vfprintf+0x348>
    2fee:	b7 01       	movw	r22, r14
    2ff0:	80 e3       	ldi	r24, 0x30	; 48
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	3c 87       	std	Y+12, r19	; 0x0c
    2ff6:	66 d0       	rcall	.+204    	; 0x30c4 <fputc>
    2ff8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ffa:	32 ff       	sbrs	r19, 2
    2ffc:	16 c0       	rjmp	.+44     	; 0x302a <vfprintf+0x362>
    2ffe:	31 fd       	sbrc	r19, 1
    3000:	03 c0       	rjmp	.+6      	; 0x3008 <vfprintf+0x340>
    3002:	88 e7       	ldi	r24, 0x78	; 120
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	02 c0       	rjmp	.+4      	; 0x300c <vfprintf+0x344>
    3008:	88 e5       	ldi	r24, 0x58	; 88
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	b7 01       	movw	r22, r14
    300e:	0c c0       	rjmp	.+24     	; 0x3028 <vfprintf+0x360>
    3010:	83 2f       	mov	r24, r19
    3012:	86 78       	andi	r24, 0x86	; 134
    3014:	51 f0       	breq	.+20     	; 0x302a <vfprintf+0x362>
    3016:	31 ff       	sbrs	r19, 1
    3018:	02 c0       	rjmp	.+4      	; 0x301e <vfprintf+0x356>
    301a:	8b e2       	ldi	r24, 0x2B	; 43
    301c:	01 c0       	rjmp	.+2      	; 0x3020 <vfprintf+0x358>
    301e:	80 e2       	ldi	r24, 0x20	; 32
    3020:	37 fd       	sbrc	r19, 7
    3022:	8d e2       	ldi	r24, 0x2D	; 45
    3024:	b7 01       	movw	r22, r14
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	4d d0       	rcall	.+154    	; 0x30c4 <fputc>
    302a:	a5 14       	cp	r10, r5
    302c:	30 f4       	brcc	.+12     	; 0x303a <vfprintf+0x372>
    302e:	b7 01       	movw	r22, r14
    3030:	80 e3       	ldi	r24, 0x30	; 48
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	47 d0       	rcall	.+142    	; 0x30c4 <fputc>
    3036:	5a 94       	dec	r5
    3038:	f8 cf       	rjmp	.-16     	; 0x302a <vfprintf+0x362>
    303a:	aa 94       	dec	r10
    303c:	f4 01       	movw	r30, r8
    303e:	ea 0d       	add	r30, r10
    3040:	f1 1d       	adc	r31, r1
    3042:	80 81       	ld	r24, Z
    3044:	b7 01       	movw	r22, r14
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	3d d0       	rcall	.+122    	; 0x30c4 <fputc>
    304a:	a1 10       	cpse	r10, r1
    304c:	f6 cf       	rjmp	.-20     	; 0x303a <vfprintf+0x372>
    304e:	33 20       	and	r3, r3
    3050:	09 f4       	brne	.+2      	; 0x3054 <vfprintf+0x38c>
    3052:	5d ce       	rjmp	.-838    	; 0x2d0e <vfprintf+0x46>
    3054:	b7 01       	movw	r22, r14
    3056:	80 e2       	ldi	r24, 0x20	; 32
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	34 d0       	rcall	.+104    	; 0x30c4 <fputc>
    305c:	3a 94       	dec	r3
    305e:	f7 cf       	rjmp	.-18     	; 0x304e <vfprintf+0x386>
    3060:	f7 01       	movw	r30, r14
    3062:	86 81       	ldd	r24, Z+6	; 0x06
    3064:	97 81       	ldd	r25, Z+7	; 0x07
    3066:	02 c0       	rjmp	.+4      	; 0x306c <vfprintf+0x3a4>
    3068:	8f ef       	ldi	r24, 0xFF	; 255
    306a:	9f ef       	ldi	r25, 0xFF	; 255
    306c:	2c 96       	adiw	r28, 0x0c	; 12
    306e:	cd bf       	out	0x3d, r28	; 61
    3070:	de bf       	out	0x3e, r29	; 62
    3072:	df 91       	pop	r29
    3074:	cf 91       	pop	r28
    3076:	1f 91       	pop	r17
    3078:	0f 91       	pop	r16
    307a:	ff 90       	pop	r15
    307c:	ef 90       	pop	r14
    307e:	df 90       	pop	r13
    3080:	cf 90       	pop	r12
    3082:	bf 90       	pop	r11
    3084:	af 90       	pop	r10
    3086:	9f 90       	pop	r9
    3088:	8f 90       	pop	r8
    308a:	7f 90       	pop	r7
    308c:	6f 90       	pop	r6
    308e:	5f 90       	pop	r5
    3090:	4f 90       	pop	r4
    3092:	3f 90       	pop	r3
    3094:	2f 90       	pop	r2
    3096:	08 95       	ret

00003098 <strnlen_P>:
    3098:	fc 01       	movw	r30, r24
    309a:	05 90       	lpm	r0, Z+
    309c:	61 50       	subi	r22, 0x01	; 1
    309e:	70 40       	sbci	r23, 0x00	; 0
    30a0:	01 10       	cpse	r0, r1
    30a2:	d8 f7       	brcc	.-10     	; 0x309a <strnlen_P+0x2>
    30a4:	80 95       	com	r24
    30a6:	90 95       	com	r25
    30a8:	8e 0f       	add	r24, r30
    30aa:	9f 1f       	adc	r25, r31
    30ac:	08 95       	ret

000030ae <strnlen>:
    30ae:	fc 01       	movw	r30, r24
    30b0:	61 50       	subi	r22, 0x01	; 1
    30b2:	70 40       	sbci	r23, 0x00	; 0
    30b4:	01 90       	ld	r0, Z+
    30b6:	01 10       	cpse	r0, r1
    30b8:	d8 f7       	brcc	.-10     	; 0x30b0 <strnlen+0x2>
    30ba:	80 95       	com	r24
    30bc:	90 95       	com	r25
    30be:	8e 0f       	add	r24, r30
    30c0:	9f 1f       	adc	r25, r31
    30c2:	08 95       	ret

000030c4 <fputc>:
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	fb 01       	movw	r30, r22
    30ce:	23 81       	ldd	r18, Z+3	; 0x03
    30d0:	21 fd       	sbrc	r18, 1
    30d2:	03 c0       	rjmp	.+6      	; 0x30da <fputc+0x16>
    30d4:	8f ef       	ldi	r24, 0xFF	; 255
    30d6:	9f ef       	ldi	r25, 0xFF	; 255
    30d8:	28 c0       	rjmp	.+80     	; 0x312a <fputc+0x66>
    30da:	22 ff       	sbrs	r18, 2
    30dc:	16 c0       	rjmp	.+44     	; 0x310a <fputc+0x46>
    30de:	46 81       	ldd	r20, Z+6	; 0x06
    30e0:	57 81       	ldd	r21, Z+7	; 0x07
    30e2:	24 81       	ldd	r18, Z+4	; 0x04
    30e4:	35 81       	ldd	r19, Z+5	; 0x05
    30e6:	42 17       	cp	r20, r18
    30e8:	53 07       	cpc	r21, r19
    30ea:	44 f4       	brge	.+16     	; 0x30fc <fputc+0x38>
    30ec:	a0 81       	ld	r26, Z
    30ee:	b1 81       	ldd	r27, Z+1	; 0x01
    30f0:	9d 01       	movw	r18, r26
    30f2:	2f 5f       	subi	r18, 0xFF	; 255
    30f4:	3f 4f       	sbci	r19, 0xFF	; 255
    30f6:	20 83       	st	Z, r18
    30f8:	31 83       	std	Z+1, r19	; 0x01
    30fa:	8c 93       	st	X, r24
    30fc:	26 81       	ldd	r18, Z+6	; 0x06
    30fe:	37 81       	ldd	r19, Z+7	; 0x07
    3100:	2f 5f       	subi	r18, 0xFF	; 255
    3102:	3f 4f       	sbci	r19, 0xFF	; 255
    3104:	26 83       	std	Z+6, r18	; 0x06
    3106:	37 83       	std	Z+7, r19	; 0x07
    3108:	10 c0       	rjmp	.+32     	; 0x312a <fputc+0x66>
    310a:	eb 01       	movw	r28, r22
    310c:	09 2f       	mov	r16, r25
    310e:	18 2f       	mov	r17, r24
    3110:	00 84       	ldd	r0, Z+8	; 0x08
    3112:	f1 85       	ldd	r31, Z+9	; 0x09
    3114:	e0 2d       	mov	r30, r0
    3116:	19 95       	eicall
    3118:	89 2b       	or	r24, r25
    311a:	e1 f6       	brne	.-72     	; 0x30d4 <fputc+0x10>
    311c:	8e 81       	ldd	r24, Y+6	; 0x06
    311e:	9f 81       	ldd	r25, Y+7	; 0x07
    3120:	01 96       	adiw	r24, 0x01	; 1
    3122:	8e 83       	std	Y+6, r24	; 0x06
    3124:	9f 83       	std	Y+7, r25	; 0x07
    3126:	81 2f       	mov	r24, r17
    3128:	90 2f       	mov	r25, r16
    312a:	df 91       	pop	r29
    312c:	cf 91       	pop	r28
    312e:	1f 91       	pop	r17
    3130:	0f 91       	pop	r16
    3132:	08 95       	ret

00003134 <__ultoa_invert>:
    3134:	fa 01       	movw	r30, r20
    3136:	aa 27       	eor	r26, r26
    3138:	28 30       	cpi	r18, 0x08	; 8
    313a:	51 f1       	breq	.+84     	; 0x3190 <__ultoa_invert+0x5c>
    313c:	20 31       	cpi	r18, 0x10	; 16
    313e:	81 f1       	breq	.+96     	; 0x31a0 <__ultoa_invert+0x6c>
    3140:	e8 94       	clt
    3142:	6f 93       	push	r22
    3144:	6e 7f       	andi	r22, 0xFE	; 254
    3146:	6e 5f       	subi	r22, 0xFE	; 254
    3148:	7f 4f       	sbci	r23, 0xFF	; 255
    314a:	8f 4f       	sbci	r24, 0xFF	; 255
    314c:	9f 4f       	sbci	r25, 0xFF	; 255
    314e:	af 4f       	sbci	r26, 0xFF	; 255
    3150:	b1 e0       	ldi	r27, 0x01	; 1
    3152:	3e d0       	rcall	.+124    	; 0x31d0 <__ultoa_invert+0x9c>
    3154:	b4 e0       	ldi	r27, 0x04	; 4
    3156:	3c d0       	rcall	.+120    	; 0x31d0 <__ultoa_invert+0x9c>
    3158:	67 0f       	add	r22, r23
    315a:	78 1f       	adc	r23, r24
    315c:	89 1f       	adc	r24, r25
    315e:	9a 1f       	adc	r25, r26
    3160:	a1 1d       	adc	r26, r1
    3162:	68 0f       	add	r22, r24
    3164:	79 1f       	adc	r23, r25
    3166:	8a 1f       	adc	r24, r26
    3168:	91 1d       	adc	r25, r1
    316a:	a1 1d       	adc	r26, r1
    316c:	6a 0f       	add	r22, r26
    316e:	71 1d       	adc	r23, r1
    3170:	81 1d       	adc	r24, r1
    3172:	91 1d       	adc	r25, r1
    3174:	a1 1d       	adc	r26, r1
    3176:	20 d0       	rcall	.+64     	; 0x31b8 <__ultoa_invert+0x84>
    3178:	09 f4       	brne	.+2      	; 0x317c <__ultoa_invert+0x48>
    317a:	68 94       	set
    317c:	3f 91       	pop	r19
    317e:	2a e0       	ldi	r18, 0x0A	; 10
    3180:	26 9f       	mul	r18, r22
    3182:	11 24       	eor	r1, r1
    3184:	30 19       	sub	r19, r0
    3186:	30 5d       	subi	r19, 0xD0	; 208
    3188:	31 93       	st	Z+, r19
    318a:	de f6       	brtc	.-74     	; 0x3142 <__ultoa_invert+0xe>
    318c:	cf 01       	movw	r24, r30
    318e:	08 95       	ret
    3190:	46 2f       	mov	r20, r22
    3192:	47 70       	andi	r20, 0x07	; 7
    3194:	40 5d       	subi	r20, 0xD0	; 208
    3196:	41 93       	st	Z+, r20
    3198:	b3 e0       	ldi	r27, 0x03	; 3
    319a:	0f d0       	rcall	.+30     	; 0x31ba <__ultoa_invert+0x86>
    319c:	c9 f7       	brne	.-14     	; 0x3190 <__ultoa_invert+0x5c>
    319e:	f6 cf       	rjmp	.-20     	; 0x318c <__ultoa_invert+0x58>
    31a0:	46 2f       	mov	r20, r22
    31a2:	4f 70       	andi	r20, 0x0F	; 15
    31a4:	40 5d       	subi	r20, 0xD0	; 208
    31a6:	4a 33       	cpi	r20, 0x3A	; 58
    31a8:	18 f0       	brcs	.+6      	; 0x31b0 <__ultoa_invert+0x7c>
    31aa:	49 5d       	subi	r20, 0xD9	; 217
    31ac:	31 fd       	sbrc	r19, 1
    31ae:	40 52       	subi	r20, 0x20	; 32
    31b0:	41 93       	st	Z+, r20
    31b2:	02 d0       	rcall	.+4      	; 0x31b8 <__ultoa_invert+0x84>
    31b4:	a9 f7       	brne	.-22     	; 0x31a0 <__ultoa_invert+0x6c>
    31b6:	ea cf       	rjmp	.-44     	; 0x318c <__ultoa_invert+0x58>
    31b8:	b4 e0       	ldi	r27, 0x04	; 4
    31ba:	a6 95       	lsr	r26
    31bc:	97 95       	ror	r25
    31be:	87 95       	ror	r24
    31c0:	77 95       	ror	r23
    31c2:	67 95       	ror	r22
    31c4:	ba 95       	dec	r27
    31c6:	c9 f7       	brne	.-14     	; 0x31ba <__ultoa_invert+0x86>
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	61 05       	cpc	r22, r1
    31cc:	71 05       	cpc	r23, r1
    31ce:	08 95       	ret
    31d0:	9b 01       	movw	r18, r22
    31d2:	ac 01       	movw	r20, r24
    31d4:	0a 2e       	mov	r0, r26
    31d6:	06 94       	lsr	r0
    31d8:	57 95       	ror	r21
    31da:	47 95       	ror	r20
    31dc:	37 95       	ror	r19
    31de:	27 95       	ror	r18
    31e0:	ba 95       	dec	r27
    31e2:	c9 f7       	brne	.-14     	; 0x31d6 <__ultoa_invert+0xa2>
    31e4:	62 0f       	add	r22, r18
    31e6:	73 1f       	adc	r23, r19
    31e8:	84 1f       	adc	r24, r20
    31ea:	95 1f       	adc	r25, r21
    31ec:	a0 1d       	adc	r26, r0
    31ee:	08 95       	ret

000031f0 <_exit>:
    31f0:	f8 94       	cli

000031f2 <__stop_program>:
    31f2:	ff cf       	rjmp	.-2      	; 0x31f2 <__stop_program>
