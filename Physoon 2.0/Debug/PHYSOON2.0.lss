
PHYSOON2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00802000  00003240  000032d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008020dc  008020dc  000033b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000340c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  00003450  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d72b  00000000  00000000  000038c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000293e  00000000  00000000  00010feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009e30  00000000  00000000  00013929  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000108c  00000000  00000000  0001d75c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002c865  00000000  00000000  0001e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004f48  00000000  00000000  0004b04d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0004ff98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f6d  00000000  00000000  00050370  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	26 c1       	rjmp	.+588    	; 0x24e <__ctors_end>
       2:	00 00       	nop
       4:	4a c1       	rjmp	.+660    	; 0x29a <__bad_interrupt>
       6:	00 00       	nop
       8:	48 c1       	rjmp	.+656    	; 0x29a <__bad_interrupt>
       a:	00 00       	nop
       c:	46 c1       	rjmp	.+652    	; 0x29a <__bad_interrupt>
       e:	00 00       	nop
      10:	44 c1       	rjmp	.+648    	; 0x29a <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__bad_interrupt>
      16:	00 00       	nop
      18:	40 c1       	rjmp	.+640    	; 0x29a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3e c1       	rjmp	.+636    	; 0x29a <__bad_interrupt>
      1e:	00 00       	nop
      20:	3c c1       	rjmp	.+632    	; 0x29a <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__bad_interrupt>
      26:	00 00       	nop
      28:	38 c1       	rjmp	.+624    	; 0x29a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	36 c1       	rjmp	.+620    	; 0x29a <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c1       	rjmp	.+616    	; 0x29a <__bad_interrupt>
      32:	00 00       	nop
      34:	89 c3       	rjmp	.+1810   	; 0x748 <__vector_13>
      36:	00 00       	nop
      38:	30 c1       	rjmp	.+608    	; 0x29a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2e c1       	rjmp	.+604    	; 0x29a <__bad_interrupt>
      3e:	00 00       	nop
      40:	2c c1       	rjmp	.+600    	; 0x29a <__bad_interrupt>
      42:	00 00       	nop
      44:	2a c1       	rjmp	.+596    	; 0x29a <__bad_interrupt>
      46:	00 00       	nop
      48:	28 c1       	rjmp	.+592    	; 0x29a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	26 c1       	rjmp	.+588    	; 0x29a <__bad_interrupt>
      4e:	00 00       	nop
      50:	24 c1       	rjmp	.+584    	; 0x29a <__bad_interrupt>
      52:	00 00       	nop
      54:	22 c1       	rjmp	.+580    	; 0x29a <__bad_interrupt>
      56:	00 00       	nop
      58:	20 c1       	rjmp	.+576    	; 0x29a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1e c1       	rjmp	.+572    	; 0x29a <__bad_interrupt>
      5e:	00 00       	nop
      60:	1c c1       	rjmp	.+568    	; 0x29a <__bad_interrupt>
      62:	00 00       	nop
      64:	de c4       	rjmp	.+2492   	; 0xa22 <__vector_25>
      66:	00 00       	nop
      68:	18 c1       	rjmp	.+560    	; 0x29a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	16 c1       	rjmp	.+556    	; 0x29a <__bad_interrupt>
      6e:	00 00       	nop
      70:	14 c1       	rjmp	.+552    	; 0x29a <__bad_interrupt>
      72:	00 00       	nop
      74:	12 c1       	rjmp	.+548    	; 0x29a <__bad_interrupt>
      76:	00 00       	nop
      78:	10 c1       	rjmp	.+544    	; 0x29a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0e c1       	rjmp	.+540    	; 0x29a <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c c1       	rjmp	.+536    	; 0x29a <__bad_interrupt>
      82:	00 00       	nop
      84:	0a c1       	rjmp	.+532    	; 0x29a <__bad_interrupt>
      86:	00 00       	nop
      88:	08 c1       	rjmp	.+528    	; 0x29a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 c1       	rjmp	.+524    	; 0x29a <__bad_interrupt>
      8e:	00 00       	nop
      90:	fa c1       	rjmp	.+1012   	; 0x486 <__vector_36>
      92:	00 00       	nop
      94:	3e c2       	rjmp	.+1148   	; 0x512 <__vector_37>
      96:	00 00       	nop
      98:	82 c2       	rjmp	.+1284   	; 0x59e <__vector_38>
      9a:	00 00       	nop
      9c:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__vector_39>
      a0:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__vector_40>
      a4:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__vector_41>
      a8:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__vector_42>
      ac:	f6 c0       	rjmp	.+492    	; 0x29a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f4 c0       	rjmp	.+488    	; 0x29a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f2 c0       	rjmp	.+484    	; 0x29a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ab c3       	rjmp	.+1878   	; 0x810 <__vector_46>
      ba:	00 00       	nop
      bc:	ee c0       	rjmp	.+476    	; 0x29a <__bad_interrupt>
      be:	00 00       	nop
      c0:	ec c0       	rjmp	.+472    	; 0x29a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ea c0       	rjmp	.+468    	; 0x29a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e8 c0       	rjmp	.+464    	; 0x29a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e6 c0       	rjmp	.+460    	; 0x29a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e4 c0       	rjmp	.+456    	; 0x29a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__vector_53>
      d8:	e0 c0       	rjmp	.+448    	; 0x29a <__bad_interrupt>
      da:	00 00       	nop
      dc:	de c0       	rjmp	.+444    	; 0x29a <__bad_interrupt>
      de:	00 00       	nop
      e0:	dc c0       	rjmp	.+440    	; 0x29a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	da c0       	rjmp	.+436    	; 0x29a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	d8 c0       	rjmp	.+432    	; 0x29a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d6 c0       	rjmp	.+428    	; 0x29a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d4 c0       	rjmp	.+424    	; 0x29a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d2 c0       	rjmp	.+420    	; 0x29a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d0 c0       	rjmp	.+416    	; 0x29a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ce c0       	rjmp	.+412    	; 0x29a <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__vector_64>
     104:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__vector_65>
     108:	c8 c0       	rjmp	.+400    	; 0x29a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c6 c0       	rjmp	.+396    	; 0x29a <__bad_interrupt>
     10e:	00 00       	nop
     110:	f0 c0       	rjmp	.+480    	; 0x2f2 <__vector_68>
     112:	00 00       	nop
     114:	34 c1       	rjmp	.+616    	; 0x37e <__vector_69>
     116:	00 00       	nop
     118:	78 c1       	rjmp	.+752    	; 0x40a <__vector_70>
     11a:	00 00       	nop
     11c:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__vector_71>
     120:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__vector_72>
     124:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__vector_73>
     128:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__vector_74>
     12c:	b6 c0       	rjmp	.+364    	; 0x29a <__bad_interrupt>
     12e:	00 00       	nop
     130:	3d c3       	rjmp	.+1658   	; 0x7ac <__vector_76>
     132:	00 00       	nop
     134:	b2 c0       	rjmp	.+356    	; 0x29a <__bad_interrupt>
     136:	00 00       	nop
     138:	b0 c0       	rjmp	.+352    	; 0x29a <__bad_interrupt>
     13a:	00 00       	nop
     13c:	ae c0       	rjmp	.+348    	; 0x29a <__bad_interrupt>
     13e:	00 00       	nop
     140:	ac c0       	rjmp	.+344    	; 0x29a <__bad_interrupt>
     142:	00 00       	nop
     144:	aa c0       	rjmp	.+340    	; 0x29a <__bad_interrupt>
     146:	00 00       	nop
     148:	a8 c0       	rjmp	.+336    	; 0x29a <__bad_interrupt>
     14a:	00 00       	nop
     14c:	a6 c0       	rjmp	.+332    	; 0x29a <__bad_interrupt>
     14e:	00 00       	nop
     150:	a4 c0       	rjmp	.+328    	; 0x29a <__bad_interrupt>
     152:	00 00       	nop
     154:	a2 c0       	rjmp	.+324    	; 0x29a <__bad_interrupt>
     156:	00 00       	nop
     158:	a0 c0       	rjmp	.+320    	; 0x29a <__bad_interrupt>
     15a:	00 00       	nop
     15c:	9e c0       	rjmp	.+316    	; 0x29a <__bad_interrupt>
     15e:	00 00       	nop
     160:	9c c0       	rjmp	.+312    	; 0x29a <__bad_interrupt>
     162:	00 00       	nop
     164:	9a c0       	rjmp	.+308    	; 0x29a <__bad_interrupt>
     166:	00 00       	nop
     168:	98 c0       	rjmp	.+304    	; 0x29a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	96 c0       	rjmp	.+300    	; 0x29a <__bad_interrupt>
     16e:	00 00       	nop
     170:	94 c0       	rjmp	.+296    	; 0x29a <__bad_interrupt>
     172:	00 00       	nop
     174:	92 c0       	rjmp	.+292    	; 0x29a <__bad_interrupt>
     176:	00 00       	nop
     178:	90 c0       	rjmp	.+288    	; 0x29a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	8e c0       	rjmp	.+284    	; 0x29a <__bad_interrupt>
     17e:	00 00       	nop
     180:	8c c0       	rjmp	.+280    	; 0x29a <__bad_interrupt>
     182:	00 00       	nop
     184:	8a c0       	rjmp	.+276    	; 0x29a <__bad_interrupt>
     186:	00 00       	nop
     188:	88 c0       	rjmp	.+272    	; 0x29a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	86 c0       	rjmp	.+268    	; 0x29a <__bad_interrupt>
     18e:	00 00       	nop
     190:	84 c0       	rjmp	.+264    	; 0x29a <__bad_interrupt>
     192:	00 00       	nop
     194:	82 c0       	rjmp	.+260    	; 0x29a <__bad_interrupt>
     196:	00 00       	nop
     198:	80 c0       	rjmp	.+256    	; 0x29a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	7e c0       	rjmp	.+252    	; 0x29a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	7c c0       	rjmp	.+248    	; 0x29a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	7a c0       	rjmp	.+244    	; 0x29a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	78 c0       	rjmp	.+240    	; 0x29a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	63 c3       	rjmp	.+1734   	; 0x874 <__vector_107>
     1ae:	00 00       	nop
     1b0:	74 c0       	rjmp	.+232    	; 0x29a <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	72 c0       	rjmp	.+228    	; 0x29a <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	70 c0       	rjmp	.+224    	; 0x29a <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	6e c0       	rjmp	.+220    	; 0x29a <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	6c c0       	rjmp	.+216    	; 0x29a <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	6a c0       	rjmp	.+212    	; 0x29a <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	68 c0       	rjmp	.+208    	; 0x29a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	66 c0       	rjmp	.+204    	; 0x29a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	64 c0       	rjmp	.+200    	; 0x29a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	62 c0       	rjmp	.+196    	; 0x29a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	60 c0       	rjmp	.+192    	; 0x29a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	5e c0       	rjmp	.+188    	; 0x29a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	5c c0       	rjmp	.+184    	; 0x29a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	5a c0       	rjmp	.+180    	; 0x29a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	58 c0       	rjmp	.+176    	; 0x29a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	56 c0       	rjmp	.+172    	; 0x29a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	54 c0       	rjmp	.+168    	; 0x29a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	08 00       	.word	0x0008	; ????
     1f6:	00 00       	nop
     1f8:	be 92       	st	-X, r11
     1fa:	24 49       	sbci	r18, 0x94	; 148
     1fc:	12 3e       	cpi	r17, 0xE2	; 226
     1fe:	ab aa       	std	Y+51, r10	; 0x33
     200:	aa 2a       	or	r10, r26
     202:	be cd       	rjmp	.-1156   	; 0xfffffd80 <__eeprom_end+0xff7efd80>
     204:	cc cc       	rjmp	.-1640   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     206:	4c 3e       	cpi	r20, 0xEC	; 236
     208:	00 00       	nop
     20a:	00 80       	ld	r0, Z
     20c:	be ab       	std	Y+54, r27	; 0x36
     20e:	aa aa       	std	Y+50, r10	; 0x32
     210:	aa 3e       	cpi	r26, 0xEA	; 234
     212:	00 00       	nop
     214:	00 00       	nop
     216:	bf 00       	.word	0x00bf	; ????
     218:	00 00       	nop
     21a:	80 3f       	cpi	r24, 0xF0	; 240
     21c:	00 00       	nop
     21e:	00 00       	nop
     220:	00 08       	sbc	r0, r0
     222:	41 78       	andi	r20, 0x81	; 129
     224:	d3 bb       	out	0x13, r29	; 19
     226:	43 87       	std	Z+11, r20	; 0x0b
     228:	d1 13       	cpse	r29, r17
     22a:	3d 19       	sub	r19, r13
     22c:	0e 3c       	cpi	r16, 0xCE	; 206
     22e:	c3 bd       	out	0x23, r28	; 35
     230:	42 82       	std	Z+2, r4	; 0x02
     232:	ad 2b       	or	r26, r29
     234:	3e 68       	ori	r19, 0x8E	; 142
     236:	ec 82       	std	Y+4, r14	; 0x04
     238:	76 be       	out	0x36, r7	; 54
     23a:	d9 8f       	std	Y+25, r29	; 0x19
     23c:	e1 a9       	ldd	r30, Z+49	; 0x31
     23e:	3e 4c       	sbci	r19, 0xCE	; 206
     240:	80 ef       	ldi	r24, 0xF0	; 240
     242:	ff be       	out	0x3f, r15	; 63
     244:	01 c4       	rjmp	.+2050   	; 0xa48 <__vector_25+0x26>
     246:	ff 7f       	andi	r31, 0xFF	; 255
     248:	3f 00       	.word	0x003f	; ????
     24a:	00 00       	nop
	...

0000024e <__ctors_end>:
     24e:	11 24       	eor	r1, r1
     250:	1f be       	out	0x3f, r1	; 63
     252:	cf ef       	ldi	r28, 0xFF	; 255
     254:	cd bf       	out	0x3d, r28	; 61
     256:	df e3       	ldi	r29, 0x3F	; 63
     258:	de bf       	out	0x3e, r29	; 62
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	0c bf       	out	0x3c, r16	; 60
     25e:	18 be       	out	0x38, r1	; 56
     260:	19 be       	out	0x39, r1	; 57
     262:	1a be       	out	0x3a, r1	; 58
     264:	1b be       	out	0x3b, r1	; 59

00000266 <__do_copy_data>:
     266:	10 e2       	ldi	r17, 0x20	; 32
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e2       	ldi	r27, 0x20	; 32
     26c:	e0 e4       	ldi	r30, 0x40	; 64
     26e:	f2 e3       	ldi	r31, 0x32	; 50
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	0b bf       	out	0x3b, r16	; 59
     274:	02 c0       	rjmp	.+4      	; 0x27a <__do_copy_data+0x14>
     276:	07 90       	elpm	r0, Z+
     278:	0d 92       	st	X+, r0
     27a:	ac 3d       	cpi	r26, 0xDC	; 220
     27c:	b1 07       	cpc	r27, r17
     27e:	d9 f7       	brne	.-10     	; 0x276 <__do_copy_data+0x10>
     280:	1b be       	out	0x3b, r1	; 59

00000282 <__do_clear_bss>:
     282:	21 e2       	ldi	r18, 0x21	; 33
     284:	ac ed       	ldi	r26, 0xDC	; 220
     286:	b0 e2       	ldi	r27, 0x20	; 32
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	a4 31       	cpi	r26, 0x14	; 20
     28e:	b2 07       	cpc	r27, r18
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
     292:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <main>
     296:	0c 94 1e 19 	jmp	0x323c	; 0x323c <_exit>

0000029a <__bad_interrupt>:
     29a:	b2 ce       	rjmp	.-668    	; 0x0 <__vectors>

0000029c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	1f 92       	push	r1
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2a6:	80 91 f8 20 	lds	r24, 0x20F8
     2aa:	90 91 f9 20 	lds	r25, 0x20F9
     2ae:	e0 91 f4 20 	lds	r30, 0x20F4
     2b2:	f0 91 f5 20 	lds	r31, 0x20F5
     2b6:	be 01       	movw	r22, r28
     2b8:	6f 5f       	subi	r22, 0xFF	; 255
     2ba:	7f 4f       	sbci	r23, 0xFF	; 255
     2bc:	19 95       	eicall
	return c;
     2be:	89 81       	ldd	r24, Y+1	; 0x01
}
     2c0:	08 2e       	mov	r0, r24
     2c2:	00 0c       	add	r0, r0
     2c4:	99 0b       	sbc	r25, r25
     2c6:	0f 90       	pop	r0
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     2ce:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     2d0:	80 91 f8 20 	lds	r24, 0x20F8
     2d4:	90 91 f9 20 	lds	r25, 0x20F9
     2d8:	e0 91 f6 20 	lds	r30, 0x20F6
     2dc:	f0 91 f7 20 	lds	r31, 0x20F7
     2e0:	19 95       	eicall
     2e2:	99 23       	and	r25, r25
     2e4:	1c f0       	brlt	.+6      	; 0x2ec <_write+0x1e>
		return -1;
	}
	return 1;
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     2f0:	08 95       	ret

000002f2 <__vector_68>:
 *
 * This function will handle interrupt on analog comparator A channel 0 and
 * call the analog comparator channel A callback function.
 */
ISR(ACA_AC0_vect)
{
     2f2:	1f 92       	push	r1
     2f4:	0f 92       	push	r0
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	0f 92       	push	r0
     2fa:	11 24       	eor	r1, r1
     2fc:	08 b6       	in	r0, 0x38	; 56
     2fe:	0f 92       	push	r0
     300:	18 be       	out	0x38, r1	; 56
     302:	09 b6       	in	r0, 0x39	; 57
     304:	0f 92       	push	r0
     306:	19 be       	out	0x39, r1	; 57
     308:	0b b6       	in	r0, 0x3b	; 59
     30a:	0f 92       	push	r0
     30c:	1b be       	out	0x3b, r1	; 59
     30e:	2f 93       	push	r18
     310:	3f 93       	push	r19
     312:	4f 93       	push	r20
     314:	5f 93       	push	r21
     316:	6f 93       	push	r22
     318:	7f 93       	push	r23
     31a:	8f 93       	push	r24
     31c:	9f 93       	push	r25
     31e:	af 93       	push	r26
     320:	bf 93       	push	r27
     322:	ef 93       	push	r30
     324:	ff 93       	push	r31
	if (ac_aca_callback) {
     326:	e0 91 de 20 	lds	r30, 0x20DE
     32a:	f0 91 df 20 	lds	r31, 0x20DF
     32e:	30 97       	sbiw	r30, 0x00	; 0
     330:	79 f0       	breq	.+30     	; 0x350 <__vector_68+0x5e>
		if (ACA.STATUS & AC_AC0STATE_bm) {
     332:	80 91 87 03 	lds	r24, 0x0387
     336:	84 ff       	sbrs	r24, 4
     338:	06 c0       	rjmp	.+12     	; 0x346 <__vector_68+0x54>
			ac_aca_callback(&ACA, 0, AC_STATUS_ABOVE);
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	80 e8       	ldi	r24, 0x80	; 128
     340:	93 e0       	ldi	r25, 0x03	; 3
     342:	19 95       	eicall
     344:	05 c0       	rjmp	.+10     	; 0x350 <__vector_68+0x5e>
		}
		else {
			ac_aca_callback(&ACA, 0, AC_STATUS_BELOW);
     346:	40 e8       	ldi	r20, 0x80	; 128
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	80 e8       	ldi	r24, 0x80	; 128
     34c:	93 e0       	ldi	r25, 0x03	; 3
     34e:	19 95       	eicall
		}
	}
}
     350:	ff 91       	pop	r31
     352:	ef 91       	pop	r30
     354:	bf 91       	pop	r27
     356:	af 91       	pop	r26
     358:	9f 91       	pop	r25
     35a:	8f 91       	pop	r24
     35c:	7f 91       	pop	r23
     35e:	6f 91       	pop	r22
     360:	5f 91       	pop	r21
     362:	4f 91       	pop	r20
     364:	3f 91       	pop	r19
     366:	2f 91       	pop	r18
     368:	0f 90       	pop	r0
     36a:	0b be       	out	0x3b, r0	; 59
     36c:	0f 90       	pop	r0
     36e:	09 be       	out	0x39, r0	; 57
     370:	0f 90       	pop	r0
     372:	08 be       	out	0x38, r0	; 56
     374:	0f 90       	pop	r0
     376:	0f be       	out	0x3f, r0	; 63
     378:	0f 90       	pop	r0
     37a:	1f 90       	pop	r1
     37c:	18 95       	reti

0000037e <__vector_69>:
 *
 * This function will handle interrupt on analog comparator A channel 1 and
 * call the analog comparator channel A callback function.
 */
ISR(ACA_AC1_vect)
{
     37e:	1f 92       	push	r1
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	08 b6       	in	r0, 0x38	; 56
     38a:	0f 92       	push	r0
     38c:	18 be       	out	0x38, r1	; 56
     38e:	09 b6       	in	r0, 0x39	; 57
     390:	0f 92       	push	r0
     392:	19 be       	out	0x39, r1	; 57
     394:	0b b6       	in	r0, 0x3b	; 59
     396:	0f 92       	push	r0
     398:	1b be       	out	0x3b, r1	; 59
     39a:	2f 93       	push	r18
     39c:	3f 93       	push	r19
     39e:	4f 93       	push	r20
     3a0:	5f 93       	push	r21
     3a2:	6f 93       	push	r22
     3a4:	7f 93       	push	r23
     3a6:	8f 93       	push	r24
     3a8:	9f 93       	push	r25
     3aa:	af 93       	push	r26
     3ac:	bf 93       	push	r27
     3ae:	ef 93       	push	r30
     3b0:	ff 93       	push	r31
	if (ac_aca_callback) {
     3b2:	e0 91 de 20 	lds	r30, 0x20DE
     3b6:	f0 91 df 20 	lds	r31, 0x20DF
     3ba:	30 97       	sbiw	r30, 0x00	; 0
     3bc:	79 f0       	breq	.+30     	; 0x3dc <__vector_69+0x5e>
		if (ACA.STATUS & AC_AC1STATE_bm) {
     3be:	80 91 87 03 	lds	r24, 0x0387
     3c2:	85 ff       	sbrs	r24, 5
     3c4:	06 c0       	rjmp	.+12     	; 0x3d2 <__vector_69+0x54>
			ac_aca_callback(&ACA, 1, AC_STATUS_ABOVE);
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	80 e8       	ldi	r24, 0x80	; 128
     3cc:	93 e0       	ldi	r25, 0x03	; 3
     3ce:	19 95       	eicall
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <__vector_69+0x5e>
		}
		else {
			ac_aca_callback(&ACA, 1, AC_STATUS_BELOW);
     3d2:	40 e8       	ldi	r20, 0x80	; 128
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	80 e8       	ldi	r24, 0x80	; 128
     3d8:	93 e0       	ldi	r25, 0x03	; 3
     3da:	19 95       	eicall
		}
	}
}
     3dc:	ff 91       	pop	r31
     3de:	ef 91       	pop	r30
     3e0:	bf 91       	pop	r27
     3e2:	af 91       	pop	r26
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	7f 91       	pop	r23
     3ea:	6f 91       	pop	r22
     3ec:	5f 91       	pop	r21
     3ee:	4f 91       	pop	r20
     3f0:	3f 91       	pop	r19
     3f2:	2f 91       	pop	r18
     3f4:	0f 90       	pop	r0
     3f6:	0b be       	out	0x3b, r0	; 59
     3f8:	0f 90       	pop	r0
     3fa:	09 be       	out	0x39, r0	; 57
     3fc:	0f 90       	pop	r0
     3fe:	08 be       	out	0x38, r0	; 56
     400:	0f 90       	pop	r0
     402:	0f be       	out	0x3f, r0	; 63
     404:	0f 90       	pop	r0
     406:	1f 90       	pop	r1
     408:	18 95       	reti

0000040a <__vector_70>:
 *
 * This function will handle interrupt on analog comparator A in window mode
 * and call the analog comparator channel A callback function.
 */
ISR(ACA_ACW_vect)
{
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	08 b6       	in	r0, 0x38	; 56
     416:	0f 92       	push	r0
     418:	18 be       	out	0x38, r1	; 56
     41a:	09 b6       	in	r0, 0x39	; 57
     41c:	0f 92       	push	r0
     41e:	19 be       	out	0x39, r1	; 57
     420:	0b b6       	in	r0, 0x3b	; 59
     422:	0f 92       	push	r0
     424:	1b be       	out	0x3b, r1	; 59
     426:	2f 93       	push	r18
     428:	3f 93       	push	r19
     42a:	4f 93       	push	r20
     42c:	5f 93       	push	r21
     42e:	6f 93       	push	r22
     430:	7f 93       	push	r23
     432:	8f 93       	push	r24
     434:	9f 93       	push	r25
     436:	af 93       	push	r26
     438:	bf 93       	push	r27
     43a:	ef 93       	push	r30
     43c:	ff 93       	push	r31
	if (ac_aca_callback) {
     43e:	e0 91 de 20 	lds	r30, 0x20DE
     442:	f0 91 df 20 	lds	r31, 0x20DF
     446:	30 97       	sbiw	r30, 0x00	; 0
     448:	39 f0       	breq	.+14     	; 0x458 <__vector_70+0x4e>
		ac_aca_callback(&ACA, 0, (enum ac_status_t)(ACA.STATUS &
     44a:	40 91 87 03 	lds	r20, 0x0387
     44e:	40 7c       	andi	r20, 0xC0	; 192
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	80 e8       	ldi	r24, 0x80	; 128
     454:	93 e0       	ldi	r25, 0x03	; 3
     456:	19 95       	eicall
					AC_WSTATE_gm));
	}
}
     458:	ff 91       	pop	r31
     45a:	ef 91       	pop	r30
     45c:	bf 91       	pop	r27
     45e:	af 91       	pop	r26
     460:	9f 91       	pop	r25
     462:	8f 91       	pop	r24
     464:	7f 91       	pop	r23
     466:	6f 91       	pop	r22
     468:	5f 91       	pop	r21
     46a:	4f 91       	pop	r20
     46c:	3f 91       	pop	r19
     46e:	2f 91       	pop	r18
     470:	0f 90       	pop	r0
     472:	0b be       	out	0x3b, r0	; 59
     474:	0f 90       	pop	r0
     476:	09 be       	out	0x39, r0	; 57
     478:	0f 90       	pop	r0
     47a:	08 be       	out	0x38, r0	; 56
     47c:	0f 90       	pop	r0
     47e:	0f be       	out	0x3f, r0	; 63
     480:	0f 90       	pop	r0
     482:	1f 90       	pop	r1
     484:	18 95       	reti

00000486 <__vector_36>:
 *
 * This function will handle interrupt on analog comparator B channel 0 and
 * call the analog comparator channel B callback function.
 */
ISR(ACB_AC0_vect)
{
     486:	1f 92       	push	r1
     488:	0f 92       	push	r0
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	0f 92       	push	r0
     48e:	11 24       	eor	r1, r1
     490:	08 b6       	in	r0, 0x38	; 56
     492:	0f 92       	push	r0
     494:	18 be       	out	0x38, r1	; 56
     496:	09 b6       	in	r0, 0x39	; 57
     498:	0f 92       	push	r0
     49a:	19 be       	out	0x39, r1	; 57
     49c:	0b b6       	in	r0, 0x3b	; 59
     49e:	0f 92       	push	r0
     4a0:	1b be       	out	0x3b, r1	; 59
     4a2:	2f 93       	push	r18
     4a4:	3f 93       	push	r19
     4a6:	4f 93       	push	r20
     4a8:	5f 93       	push	r21
     4aa:	6f 93       	push	r22
     4ac:	7f 93       	push	r23
     4ae:	8f 93       	push	r24
     4b0:	9f 93       	push	r25
     4b2:	af 93       	push	r26
     4b4:	bf 93       	push	r27
     4b6:	ef 93       	push	r30
     4b8:	ff 93       	push	r31
	if (ac_acb_callback) {
     4ba:	e0 91 dc 20 	lds	r30, 0x20DC
     4be:	f0 91 dd 20 	lds	r31, 0x20DD
     4c2:	30 97       	sbiw	r30, 0x00	; 0
     4c4:	79 f0       	breq	.+30     	; 0x4e4 <__vector_36+0x5e>
		if (ACB.STATUS & AC_AC0STATE_bm) {
     4c6:	80 91 97 03 	lds	r24, 0x0397
     4ca:	84 ff       	sbrs	r24, 4
     4cc:	06 c0       	rjmp	.+12     	; 0x4da <__vector_36+0x54>
			ac_acb_callback(&ACB, 0, AC_STATUS_ABOVE);
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	80 e9       	ldi	r24, 0x90	; 144
     4d4:	93 e0       	ldi	r25, 0x03	; 3
     4d6:	19 95       	eicall
     4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <__vector_36+0x5e>
		}
		else {
			ac_acb_callback(&ACB, 0, AC_STATUS_BELOW);
     4da:	40 e8       	ldi	r20, 0x80	; 128
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	80 e9       	ldi	r24, 0x90	; 144
     4e0:	93 e0       	ldi	r25, 0x03	; 3
     4e2:	19 95       	eicall
		}
	}
}
     4e4:	ff 91       	pop	r31
     4e6:	ef 91       	pop	r30
     4e8:	bf 91       	pop	r27
     4ea:	af 91       	pop	r26
     4ec:	9f 91       	pop	r25
     4ee:	8f 91       	pop	r24
     4f0:	7f 91       	pop	r23
     4f2:	6f 91       	pop	r22
     4f4:	5f 91       	pop	r21
     4f6:	4f 91       	pop	r20
     4f8:	3f 91       	pop	r19
     4fa:	2f 91       	pop	r18
     4fc:	0f 90       	pop	r0
     4fe:	0b be       	out	0x3b, r0	; 59
     500:	0f 90       	pop	r0
     502:	09 be       	out	0x39, r0	; 57
     504:	0f 90       	pop	r0
     506:	08 be       	out	0x38, r0	; 56
     508:	0f 90       	pop	r0
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	0f 90       	pop	r0
     50e:	1f 90       	pop	r1
     510:	18 95       	reti

00000512 <__vector_37>:
 *
 * This function will handle interrupt on analog comparator B channel 1 and
 * call the analog comparator channel B callback function.
 */
ISR(ACB_AC1_vect)
{
     512:	1f 92       	push	r1
     514:	0f 92       	push	r0
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	0f 92       	push	r0
     51a:	11 24       	eor	r1, r1
     51c:	08 b6       	in	r0, 0x38	; 56
     51e:	0f 92       	push	r0
     520:	18 be       	out	0x38, r1	; 56
     522:	09 b6       	in	r0, 0x39	; 57
     524:	0f 92       	push	r0
     526:	19 be       	out	0x39, r1	; 57
     528:	0b b6       	in	r0, 0x3b	; 59
     52a:	0f 92       	push	r0
     52c:	1b be       	out	0x3b, r1	; 59
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	4f 93       	push	r20
     534:	5f 93       	push	r21
     536:	6f 93       	push	r22
     538:	7f 93       	push	r23
     53a:	8f 93       	push	r24
     53c:	9f 93       	push	r25
     53e:	af 93       	push	r26
     540:	bf 93       	push	r27
     542:	ef 93       	push	r30
     544:	ff 93       	push	r31
	if (ac_acb_callback) {
     546:	e0 91 dc 20 	lds	r30, 0x20DC
     54a:	f0 91 dd 20 	lds	r31, 0x20DD
     54e:	30 97       	sbiw	r30, 0x00	; 0
     550:	79 f0       	breq	.+30     	; 0x570 <__vector_37+0x5e>
		if (ACB.STATUS & AC_AC1STATE_bm) {
     552:	80 91 97 03 	lds	r24, 0x0397
     556:	85 ff       	sbrs	r24, 5
     558:	06 c0       	rjmp	.+12     	; 0x566 <__vector_37+0x54>
			ac_acb_callback(&ACB, 1, AC_STATUS_ABOVE);
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	80 e9       	ldi	r24, 0x90	; 144
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	19 95       	eicall
     564:	05 c0       	rjmp	.+10     	; 0x570 <__vector_37+0x5e>
		}
		else {
			ac_acb_callback(&ACB, 1, AC_STATUS_BELOW);
     566:	40 e8       	ldi	r20, 0x80	; 128
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	80 e9       	ldi	r24, 0x90	; 144
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	19 95       	eicall
		}
	}
}
     570:	ff 91       	pop	r31
     572:	ef 91       	pop	r30
     574:	bf 91       	pop	r27
     576:	af 91       	pop	r26
     578:	9f 91       	pop	r25
     57a:	8f 91       	pop	r24
     57c:	7f 91       	pop	r23
     57e:	6f 91       	pop	r22
     580:	5f 91       	pop	r21
     582:	4f 91       	pop	r20
     584:	3f 91       	pop	r19
     586:	2f 91       	pop	r18
     588:	0f 90       	pop	r0
     58a:	0b be       	out	0x3b, r0	; 59
     58c:	0f 90       	pop	r0
     58e:	09 be       	out	0x39, r0	; 57
     590:	0f 90       	pop	r0
     592:	08 be       	out	0x38, r0	; 56
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti

0000059e <__vector_38>:
 *
 * This function will handle interrupt on analog comparator B in window mode
 * and call the analog comparator channel B callback function.
 */
ISR(ACB_ACW_vect)
{
     59e:	1f 92       	push	r1
     5a0:	0f 92       	push	r0
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	0f 92       	push	r0
     5a6:	11 24       	eor	r1, r1
     5a8:	08 b6       	in	r0, 0x38	; 56
     5aa:	0f 92       	push	r0
     5ac:	18 be       	out	0x38, r1	; 56
     5ae:	09 b6       	in	r0, 0x39	; 57
     5b0:	0f 92       	push	r0
     5b2:	19 be       	out	0x39, r1	; 57
     5b4:	0b b6       	in	r0, 0x3b	; 59
     5b6:	0f 92       	push	r0
     5b8:	1b be       	out	0x3b, r1	; 59
     5ba:	2f 93       	push	r18
     5bc:	3f 93       	push	r19
     5be:	4f 93       	push	r20
     5c0:	5f 93       	push	r21
     5c2:	6f 93       	push	r22
     5c4:	7f 93       	push	r23
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	af 93       	push	r26
     5cc:	bf 93       	push	r27
     5ce:	ef 93       	push	r30
     5d0:	ff 93       	push	r31
	if (ac_acb_callback) {
     5d2:	e0 91 dc 20 	lds	r30, 0x20DC
     5d6:	f0 91 dd 20 	lds	r31, 0x20DD
     5da:	30 97       	sbiw	r30, 0x00	; 0
     5dc:	39 f0       	breq	.+14     	; 0x5ec <__vector_38+0x4e>
		ac_acb_callback(&ACB, 0, (enum ac_status_t)(ACB.STATUS &
     5de:	40 91 97 03 	lds	r20, 0x0397
     5e2:	40 7c       	andi	r20, 0xC0	; 192
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	80 e9       	ldi	r24, 0x90	; 144
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	19 95       	eicall
					AC_WSTATE_gm));
	}
}
     5ec:	ff 91       	pop	r31
     5ee:	ef 91       	pop	r30
     5f0:	bf 91       	pop	r27
     5f2:	af 91       	pop	r26
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	7f 91       	pop	r23
     5fa:	6f 91       	pop	r22
     5fc:	5f 91       	pop	r21
     5fe:	4f 91       	pop	r20
     600:	3f 91       	pop	r19
     602:	2f 91       	pop	r18
     604:	0f 90       	pop	r0
     606:	0b be       	out	0x3b, r0	; 59
     608:	0f 90       	pop	r0
     60a:	09 be       	out	0x39, r0	; 57
     60c:	0f 90       	pop	r0
     60e:	08 be       	out	0x38, r0	; 56
     610:	0f 90       	pop	r0
     612:	0f be       	out	0x3f, r0	; 63
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     61e:	e0 91 e0 20 	lds	r30, 0x20E0
     622:	f0 91 e1 20 	lds	r31, 0x20E1
     626:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     628:	83 ff       	sbrs	r24, 3
     62a:	08 c0       	rjmp	.+16     	; 0x63c <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     62c:	88 60       	ori	r24, 0x08	; 8
     62e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     634:	86 ef       	ldi	r24, 0xF6	; 246
     636:	80 93 ea 20 	sts	0x20EA, r24
     63a:	83 c0       	rjmp	.+262    	; 0x742 <twim_interrupt_handler+0x128>
     63c:	98 2f       	mov	r25, r24
     63e:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     640:	31 f0       	breq	.+12     	; 0x64e <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     642:	83 e0       	ldi	r24, 0x03	; 3
     644:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     646:	8f ef       	ldi	r24, 0xFF	; 255
     648:	80 93 ea 20 	sts	0x20EA, r24
     64c:	7a c0       	rjmp	.+244    	; 0x742 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     64e:	86 ff       	sbrs	r24, 6
     650:	43 c0       	rjmp	.+134    	; 0x6d8 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     652:	c0 ee       	ldi	r28, 0xE0	; 224
     654:	d0 e2       	ldi	r29, 0x20	; 32
     656:	aa 81       	ldd	r26, Y+2	; 0x02
     658:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     65a:	8c 81       	ldd	r24, Y+4	; 0x04
     65c:	9d 81       	ldd	r25, Y+5	; 0x05
     65e:	14 96       	adiw	r26, 0x04	; 4
     660:	2d 91       	ld	r18, X+
     662:	3c 91       	ld	r19, X
     664:	15 97       	sbiw	r26, 0x05	; 5
     666:	82 17       	cp	r24, r18
     668:	93 07       	cpc	r25, r19
     66a:	6c f4       	brge	.+26     	; 0x686 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     66c:	9c 01       	movw	r18, r24
     66e:	2f 5f       	subi	r18, 0xFF	; 255
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	20 93 e4 20 	sts	0x20E4, r18
     676:	30 93 e5 20 	sts	0x20E5, r19
     67a:	a8 0f       	add	r26, r24
     67c:	b9 1f       	adc	r27, r25
     67e:	11 96       	adiw	r26, 0x01	; 1
     680:	8c 91       	ld	r24, X
     682:	87 83       	std	Z+7, r24	; 0x07
     684:	5e c0       	rjmp	.+188    	; 0x742 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     686:	80 91 e6 20 	lds	r24, 0x20E6
     68a:	90 91 e7 20 	lds	r25, 0x20E7
     68e:	18 96       	adiw	r26, 0x08	; 8
     690:	2d 91       	ld	r18, X+
     692:	3c 91       	ld	r19, X
     694:	19 97       	sbiw	r26, 0x09	; 9
     696:	82 17       	cp	r24, r18
     698:	93 07       	cpc	r25, r19
     69a:	c8 f4       	brcc	.+50     	; 0x6ce <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     69c:	20 91 e8 20 	lds	r18, 0x20E8
     6a0:	22 23       	and	r18, r18
     6a2:	21 f0       	breq	.+8      	; 0x6ac <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     6a4:	86 81       	ldd	r24, Z+6	; 0x06
     6a6:	81 60       	ori	r24, 0x01	; 1
     6a8:	86 83       	std	Z+6, r24	; 0x06
     6aa:	4b c0       	rjmp	.+150    	; 0x742 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     6ac:	16 96       	adiw	r26, 0x06	; 6
     6ae:	2d 91       	ld	r18, X+
     6b0:	3c 91       	ld	r19, X
     6b2:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     6b4:	ac 01       	movw	r20, r24
     6b6:	4f 5f       	subi	r20, 0xFF	; 255
     6b8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ba:	40 93 e6 20 	sts	0x20E6, r20
     6be:	50 93 e7 20 	sts	0x20E7, r21
     6c2:	d9 01       	movw	r26, r18
     6c4:	a8 0f       	add	r26, r24
     6c6:	b9 1f       	adc	r27, r25
     6c8:	8c 91       	ld	r24, X
     6ca:	87 83       	std	Z+7, r24	; 0x07
     6cc:	3a c0       	rjmp	.+116    	; 0x742 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     6d2:	10 92 ea 20 	sts	0x20EA, r1
     6d6:	35 c0       	rjmp	.+106    	; 0x742 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     6d8:	88 23       	and	r24, r24
     6da:	84 f5       	brge	.+96     	; 0x73c <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     6dc:	a0 ee       	ldi	r26, 0xE0	; 224
     6de:	b0 e2       	ldi	r27, 0x20	; 32
     6e0:	12 96       	adiw	r26, 0x02	; 2
     6e2:	cd 91       	ld	r28, X+
     6e4:	dc 91       	ld	r29, X
     6e6:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     6e8:	16 96       	adiw	r26, 0x06	; 6
     6ea:	8d 91       	ld	r24, X+
     6ec:	9c 91       	ld	r25, X
     6ee:	17 97       	sbiw	r26, 0x07	; 7
     6f0:	28 85       	ldd	r18, Y+8	; 0x08
     6f2:	39 85       	ldd	r19, Y+9	; 0x09
     6f4:	82 17       	cp	r24, r18
     6f6:	93 07       	cpc	r25, r19
     6f8:	d8 f4       	brcc	.+54     	; 0x730 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     6fa:	6e 81       	ldd	r22, Y+6	; 0x06
     6fc:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     6fe:	9c 01       	movw	r18, r24
     700:	2f 5f       	subi	r18, 0xFF	; 255
     702:	3f 4f       	sbci	r19, 0xFF	; 255
     704:	20 93 e6 20 	sts	0x20E6, r18
     708:	30 93 e7 20 	sts	0x20E7, r19
     70c:	47 81       	ldd	r20, Z+7	; 0x07
     70e:	db 01       	movw	r26, r22
     710:	a8 0f       	add	r26, r24
     712:	b9 1f       	adc	r27, r25
     714:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     716:	88 85       	ldd	r24, Y+8	; 0x08
     718:	99 85       	ldd	r25, Y+9	; 0x09
     71a:	28 17       	cp	r18, r24
     71c:	39 07       	cpc	r19, r25
     71e:	18 f4       	brcc	.+6      	; 0x726 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	83 83       	std	Z+3, r24	; 0x03
     724:	0e c0       	rjmp	.+28     	; 0x742 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     726:	87 e0       	ldi	r24, 0x07	; 7
     728:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     72a:	10 92 ea 20 	sts	0x20EA, r1
     72e:	09 c0       	rjmp	.+18     	; 0x742 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     734:	89 ef       	ldi	r24, 0xF9	; 249
     736:	80 93 ea 20 	sts	0x20EA, r24
     73a:	03 c0       	rjmp	.+6      	; 0x742 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     73c:	8b ef       	ldi	r24, 0xFB	; 251
     73e:	80 93 ea 20 	sts	0x20EA, r24
	}
}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     748:	1f 92       	push	r1
     74a:	0f 92       	push	r0
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
     752:	08 b6       	in	r0, 0x38	; 56
     754:	0f 92       	push	r0
     756:	18 be       	out	0x38, r1	; 56
     758:	09 b6       	in	r0, 0x39	; 57
     75a:	0f 92       	push	r0
     75c:	19 be       	out	0x39, r1	; 57
     75e:	0b b6       	in	r0, 0x3b	; 59
     760:	0f 92       	push	r0
     762:	1b be       	out	0x3b, r1	; 59
     764:	2f 93       	push	r18
     766:	3f 93       	push	r19
     768:	4f 93       	push	r20
     76a:	5f 93       	push	r21
     76c:	6f 93       	push	r22
     76e:	7f 93       	push	r23
     770:	8f 93       	push	r24
     772:	9f 93       	push	r25
     774:	af 93       	push	r26
     776:	bf 93       	push	r27
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31
     77c:	4e df       	rcall	.-356    	; 0x61a <twim_interrupt_handler>
     77e:	ff 91       	pop	r31
     780:	ef 91       	pop	r30
     782:	bf 91       	pop	r27
     784:	af 91       	pop	r26
     786:	9f 91       	pop	r25
     788:	8f 91       	pop	r24
     78a:	7f 91       	pop	r23
     78c:	6f 91       	pop	r22
     78e:	5f 91       	pop	r21
     790:	4f 91       	pop	r20
     792:	3f 91       	pop	r19
     794:	2f 91       	pop	r18
     796:	0f 90       	pop	r0
     798:	0b be       	out	0x3b, r0	; 59
     79a:	0f 90       	pop	r0
     79c:	09 be       	out	0x39, r0	; 57
     79e:	0f 90       	pop	r0
     7a0:	08 be       	out	0x38, r0	; 56
     7a2:	0f 90       	pop	r0
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	11 24       	eor	r1, r1
     7b6:	08 b6       	in	r0, 0x38	; 56
     7b8:	0f 92       	push	r0
     7ba:	18 be       	out	0x38, r1	; 56
     7bc:	09 b6       	in	r0, 0x39	; 57
     7be:	0f 92       	push	r0
     7c0:	19 be       	out	0x39, r1	; 57
     7c2:	0b b6       	in	r0, 0x3b	; 59
     7c4:	0f 92       	push	r0
     7c6:	1b be       	out	0x3b, r1	; 59
     7c8:	2f 93       	push	r18
     7ca:	3f 93       	push	r19
     7cc:	4f 93       	push	r20
     7ce:	5f 93       	push	r21
     7d0:	6f 93       	push	r22
     7d2:	7f 93       	push	r23
     7d4:	8f 93       	push	r24
     7d6:	9f 93       	push	r25
     7d8:	af 93       	push	r26
     7da:	bf 93       	push	r27
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31
     7e0:	1c df       	rcall	.-456    	; 0x61a <twim_interrupt_handler>
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	0b be       	out	0x3b, r0	; 59
     7fe:	0f 90       	pop	r0
     800:	09 be       	out	0x39, r0	; 57
     802:	0f 90       	pop	r0
     804:	08 be       	out	0x38, r0	; 56
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	08 b6       	in	r0, 0x38	; 56
     81c:	0f 92       	push	r0
     81e:	18 be       	out	0x38, r1	; 56
     820:	09 b6       	in	r0, 0x39	; 57
     822:	0f 92       	push	r0
     824:	19 be       	out	0x39, r1	; 57
     826:	0b b6       	in	r0, 0x3b	; 59
     828:	0f 92       	push	r0
     82a:	1b be       	out	0x3b, r1	; 59
     82c:	2f 93       	push	r18
     82e:	3f 93       	push	r19
     830:	4f 93       	push	r20
     832:	5f 93       	push	r21
     834:	6f 93       	push	r22
     836:	7f 93       	push	r23
     838:	8f 93       	push	r24
     83a:	9f 93       	push	r25
     83c:	af 93       	push	r26
     83e:	bf 93       	push	r27
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31
     844:	ea de       	rcall	.-556    	; 0x61a <twim_interrupt_handler>
     846:	ff 91       	pop	r31
     848:	ef 91       	pop	r30
     84a:	bf 91       	pop	r27
     84c:	af 91       	pop	r26
     84e:	9f 91       	pop	r25
     850:	8f 91       	pop	r24
     852:	7f 91       	pop	r23
     854:	6f 91       	pop	r22
     856:	5f 91       	pop	r21
     858:	4f 91       	pop	r20
     85a:	3f 91       	pop	r19
     85c:	2f 91       	pop	r18
     85e:	0f 90       	pop	r0
     860:	0b be       	out	0x3b, r0	; 59
     862:	0f 90       	pop	r0
     864:	09 be       	out	0x39, r0	; 57
     866:	0f 90       	pop	r0
     868:	08 be       	out	0x38, r0	; 56
     86a:	0f 90       	pop	r0
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	0f 90       	pop	r0
     870:	1f 90       	pop	r1
     872:	18 95       	reti

00000874 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     874:	1f 92       	push	r1
     876:	0f 92       	push	r0
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	0f 92       	push	r0
     87c:	11 24       	eor	r1, r1
     87e:	08 b6       	in	r0, 0x38	; 56
     880:	0f 92       	push	r0
     882:	18 be       	out	0x38, r1	; 56
     884:	09 b6       	in	r0, 0x39	; 57
     886:	0f 92       	push	r0
     888:	19 be       	out	0x39, r1	; 57
     88a:	0b b6       	in	r0, 0x3b	; 59
     88c:	0f 92       	push	r0
     88e:	1b be       	out	0x3b, r1	; 59
     890:	2f 93       	push	r18
     892:	3f 93       	push	r19
     894:	4f 93       	push	r20
     896:	5f 93       	push	r21
     898:	6f 93       	push	r22
     89a:	7f 93       	push	r23
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
     8a0:	af 93       	push	r26
     8a2:	bf 93       	push	r27
     8a4:	ef 93       	push	r30
     8a6:	ff 93       	push	r31
     8a8:	b8 de       	rcall	.-656    	; 0x61a <twim_interrupt_handler>
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0b be       	out	0x3b, r0	; 59
     8c6:	0f 90       	pop	r0
     8c8:	09 be       	out	0x39, r0	; 57
     8ca:	0f 90       	pop	r0
     8cc:	08 be       	out	0x38, r0	; 56
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <getAltitude>:
#include "driver/driver.h"
#include <math.h>
/*********************************************************************************/
							/* Altitude Methods */
/* Method that uses temperature and pressure w/ Hypsometric Equation. */
float getAltitude(float temperature, uint32_t inputpressure){
     8d8:	8f 92       	push	r8
     8da:	9f 92       	push	r9
     8dc:	af 92       	push	r10
     8de:	bf 92       	push	r11
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	4b 01       	movw	r8, r22
     8ea:	5c 01       	movw	r10, r24
	float pressure = (float)inputpressure;
     8ec:	ca 01       	movw	r24, r20
     8ee:	b9 01       	movw	r22, r18
     8f0:	0e 94 43 12 	call	0x2486	; 0x2486 <__floatunsisf>
     8f4:	9b 01       	movw	r18, r22
     8f6:	ac 01       	movw	r20, r24
	float R = 287;
	float g = 9.80665;
	float pconst = 101325;
	//printf("Temperature: %.2f\nPressure: %.2f\n",temperature,pressure);
	return (uint16_t)(((R * temperature)/g)*log(pconst/pressure)) * 3.28084; //return altitude in feet
     8f8:	60 e8       	ldi	r22, 0x80	; 128
     8fa:	76 ee       	ldi	r23, 0xE6	; 230
     8fc:	85 ec       	ldi	r24, 0xC5	; 197
     8fe:	97 e4       	ldi	r25, 0x47	; 71
     900:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__divsf3>
     904:	0e 94 24 13 	call	0x2648	; 0x2648 <log>
     908:	6b 01       	movw	r12, r22
     90a:	7c 01       	movw	r14, r24
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e8       	ldi	r19, 0x80	; 128
     910:	4f e8       	ldi	r20, 0x8F	; 143
     912:	53 e4       	ldi	r21, 0x43	; 67
     914:	c5 01       	movw	r24, r10
     916:	b4 01       	movw	r22, r8
     918:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     91c:	2a e0       	ldi	r18, 0x0A	; 10
     91e:	38 ee       	ldi	r19, 0xE8	; 232
     920:	4c e1       	ldi	r20, 0x1C	; 28
     922:	51 e4       	ldi	r21, 0x41	; 65
     924:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__divsf3>
     928:	a7 01       	movw	r20, r14
     92a:	96 01       	movw	r18, r12
     92c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     930:	0e 94 13 12 	call	0x2426	; 0x2426 <__fixunssfsi>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 43 12 	call	0x2486	; 0x2486 <__floatunsisf>
     93c:	28 e4       	ldi	r18, 0x48	; 72
     93e:	39 ef       	ldi	r19, 0xF9	; 249
     940:	41 e5       	ldi	r20, 0x51	; 81
     942:	50 e4       	ldi	r21, 0x40	; 64
     944:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	08 95       	ret

0000095a <saveData>:
	
	usart_tx_enable(&USARTD0); //enable transmit (TX) pin for USART on Port D
	PORTD.DIR = 0b00000100; //input for pin 3
	usart_serial_init(&USARTD0,&usart_options); //initialize USART on port D from struct
}
void saveData(uint32_t timestamp, uint16_t alpha_geiger, uint16_t beta_geiger, uint16_t gamma_geiger, float altitude){ //this shit is justa complete guess right now lol
     95a:	4f 92       	push	r4
     95c:	5f 92       	push	r5
     95e:	6f 92       	push	r6
     960:	7f 92       	push	r7
     962:	8f 92       	push	r8
     964:	9f 92       	push	r9
     966:	af 92       	push	r10
     968:	bf 92       	push	r11
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	c4 56       	subi	r28, 0x64	; 100
     980:	d1 09       	sbc	r29, r1
     982:	cd bf       	out	0x3d, r28	; 61
     984:	de bf       	out	0x3e, r29	; 62
     986:	b6 2e       	mov	r11, r22
     988:	a7 2e       	mov	r10, r23
     98a:	98 2e       	mov	r9, r24
     98c:	89 2e       	mov	r8, r25
     98e:	74 2e       	mov	r7, r20
     990:	65 2e       	mov	r6, r21
     992:	52 2e       	mov	r5, r18
     994:	43 2e       	mov	r4, r19
     996:	c7 01       	movw	r24, r14
     998:	b6 01       	movw	r22, r12
	// From Daniel: 
	// using buffer(array) to store each series of readings as string characters (string longer than needed for safety)
	//printf("%i, %i, %i, %i, %.2f\n", timestamp, alpha_geiger, beta_geiger, gamma_geiger, altitude);
	uint8_t buffer[100] = {0};
     99a:	9e 01       	movw	r18, r28
     99c:	2f 5f       	subi	r18, 0xFF	; 255
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	79 01       	movw	r14, r18
     9a2:	24 e6       	ldi	r18, 0x64	; 100
     9a4:	f7 01       	movw	r30, r14
     9a6:	11 92       	st	Z+, r1
     9a8:	2a 95       	dec	r18
     9aa:	e9 f7       	brne	.-6      	; 0x9a6 <saveData+0x4c>

	//sprintf used because printf was already used?
	uint32_t fixedAlt = (uint32_t)(altitude*100);
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	48 ec       	ldi	r20, 0xC8	; 200
     9b2:	52 e4       	ldi	r21, 0x42	; 66
     9b4:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     9b8:	0e 94 13 12 	call	0x2426	; 0x2426 <__fixunssfsi>
	sprintf(buffer, "%lu, %u, %u, %u, %lu\n", timestamp, alpha_geiger, beta_geiger, gamma_geiger, fixedAlt);
     9bc:	9f 93       	push	r25
     9be:	8f 93       	push	r24
     9c0:	7f 93       	push	r23
     9c2:	6f 93       	push	r22
     9c4:	1f 93       	push	r17
     9c6:	0f 93       	push	r16
     9c8:	4f 92       	push	r4
     9ca:	5f 92       	push	r5
     9cc:	6f 92       	push	r6
     9ce:	7f 92       	push	r7
     9d0:	8f 92       	push	r8
     9d2:	9f 92       	push	r9
     9d4:	af 92       	push	r10
     9d6:	bf 92       	push	r11
     9d8:	8d e0       	ldi	r24, 0x0D	; 13
     9da:	90 e2       	ldi	r25, 0x20	; 32
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	ff 92       	push	r15
     9e2:	ef 92       	push	r14
     9e4:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <sprintf>
	UART_Comms_Init();
     9e8:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <UART_Comms_Init>
	printf(buffer);
     9ec:	ff 92       	push	r15
     9ee:	ef 92       	push	r14
     9f0:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <printf>
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	de bf       	out	0x3e, r29	; 62
	//data_Init();
	//usart_serial_write_packet(&USARTF0, buffer,strlen(buffer));
     9f8:	cc 59       	subi	r28, 0x9C	; 156
     9fa:	df 4f       	sbci	r29, 0xFF	; 255
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	df 90       	pop	r13
     a0e:	cf 90       	pop	r12
     a10:	bf 90       	pop	r11
     a12:	af 90       	pop	r10
     a14:	9f 90       	pop	r9
     a16:	8f 90       	pop	r8
     a18:	7f 90       	pop	r7
     a1a:	6f 90       	pop	r6
     a1c:	5f 90       	pop	r5
     a1e:	4f 90       	pop	r4
     a20:	08 95       	ret

00000a22 <__vector_25>:
		readAlt[0]=48;
	}
}

ISR(USARTC0_RXC_vect)//Interrupt
{
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	08 b6       	in	r0, 0x38	; 56
     a2e:	0f 92       	push	r0
     a30:	18 be       	out	0x38, r1	; 56
     a32:	09 b6       	in	r0, 0x39	; 57
     a34:	0f 92       	push	r0
     a36:	19 be       	out	0x39, r1	; 57
     a38:	0b b6       	in	r0, 0x3b	; 59
     a3a:	0f 92       	push	r0
     a3c:	1b be       	out	0x3b, r1	; 59
     a3e:	2f 93       	push	r18
     a40:	3f 93       	push	r19
     a42:	4f 93       	push	r20
     a44:	5f 93       	push	r21
     a46:	6f 93       	push	r22
     a48:	7f 93       	push	r23
     a4a:	8f 93       	push	r24
     a4c:	9f 93       	push	r25
     a4e:	af 93       	push	r26
     a50:	bf 93       	push	r27
     a52:	ef 93       	push	r30
     a54:	ff 93       	push	r31
	StringRingWrite(gps, USARTC0.DATA);
     a56:	60 91 a0 08 	lds	r22, 0x08A0
     a5a:	80 91 eb 20 	lds	r24, 0x20EB
     a5e:	90 91 ec 20 	lds	r25, 0x20EC
     a62:	40 d0       	rcall	.+128    	; 0xae4 <StringRingWrite>
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0b be       	out	0x3b, r0	; 59
     a80:	0f 90       	pop	r0
     a82:	09 be       	out	0x39, r0	; 57
     a84:	0f 90       	pop	r0
     a86:	08 be       	out	0x38, r0	; 56
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti

00000a92 <StringRingSeekNextReadableString>:
}

// Makes current string fail the IsStringRingReadyForParse function, like marking an email as having been read
// Moves the tail to the next string if possible; returns whether or not it was successful
bool StringRingSeekNextReadableString(StringRing * const sr)
{
     a92:	fc 01       	movw	r30, r24
	*(sr->readTail) = '\0';
     a94:	a0 81       	ld	r26, Z
     a96:	b1 81       	ldd	r27, Z+1	; 0x01
     a98:	1c 92       	st	X, r1
	
	// explicitly deny this; where you can start reading a string that hasn't been finalized
	// if this happens enough you can probably lower the buffer size
	if(SR_TAIL_WILL_POINT_TO_HEAD)
     a9a:	20 81       	ld	r18, Z
     a9c:	31 81       	ldd	r19, Z+1	; 0x01
     a9e:	84 81       	ldd	r24, Z+4	; 0x04
     aa0:	a9 01       	movw	r20, r18
     aa2:	48 0f       	add	r20, r24
     aa4:	51 1d       	adc	r21, r1
     aa6:	63 81       	ldd	r22, Z+3	; 0x03
     aa8:	85 81       	ldd	r24, Z+5	; 0x05
     aaa:	96 81       	ldd	r25, Z+6	; 0x06
     aac:	86 1b       	sub	r24, r22
     aae:	91 09       	sbc	r25, r1
     ab0:	48 17       	cp	r20, r24
     ab2:	59 07       	cpc	r21, r25
     ab4:	99 f0       	breq	.+38     	; 0xadc <StringRingSeekNextReadableString+0x4a>
     ab6:	67 81       	ldd	r22, Z+7	; 0x07
     ab8:	70 85       	ldd	r23, Z+8	; 0x08
     aba:	26 17       	cp	r18, r22
     abc:	37 07       	cpc	r19, r23
     abe:	51 f4       	brne	.+20     	; 0xad4 <StringRingSeekNextReadableString+0x42>
     ac0:	9f 01       	movw	r18, r30
     ac2:	27 5f       	subi	r18, 0xF7	; 247
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	82 17       	cp	r24, r18
     ac8:	93 07       	cpc	r25, r19
     aca:	51 f0       	breq	.+20     	; 0xae0 <StringRingSeekNextReadableString+0x4e>
// Moves the tail to the next string
static inline void StringRingIncrementTail(StringRing * const sr)
{
	if(sr->readTail == SR_FINAL_STRING)
	{
		sr->readTail = SR_FIRST_STRING;
     acc:	20 83       	st	Z, r18
     ace:	31 83       	std	Z+1, r19	; 0x01
	{
		return false;
	}
	
	StringRingIncrementTail(sr);
	return true;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	08 95       	ret
	{
		sr->readTail = SR_FIRST_STRING;
	}
	else
	{
		sr->readTail = SR_NEXT_TAIL;
     ad4:	40 83       	st	Z, r20
     ad6:	51 83       	std	Z+1, r21	; 0x01
	{
		return false;
	}
	
	StringRingIncrementTail(sr);
	return true;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	08 95       	ret
	
	// explicitly deny this; where you can start reading a string that hasn't been finalized
	// if this happens enough you can probably lower the buffer size
	if(SR_TAIL_WILL_POINT_TO_HEAD)
	{
		return false;
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	08 95       	ret
     ae0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	StringRingIncrementTail(sr);
	return true;
}
     ae2:	08 95       	ret

00000ae4 <StringRingWrite>:
	*(sr->writeHead) = DATA;
	StringRingIncrementHead(sr);
}

void StringRingWrite(StringRing * const sr, const char DATA)
{
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	fc 01       	movw	r30, r24
	return DATA;
}
#else
static inline void StringRingPush(StringRing * const sr, const char DATA)
{
	*(sr->writeHead) = DATA;
     aea:	a5 81       	ldd	r26, Z+5	; 0x05
     aec:	b6 81       	ldd	r27, Z+6	; 0x06
     aee:	6c 93       	st	X, r22
}

// Moves the write head forward by 1 character
static inline void StringRingIncrementHead(StringRing * const sr)
{
	sr->headLen++;
     af0:	83 81       	ldd	r24, Z+3	; 0x03
     af2:	8f 5f       	subi	r24, 0xFF	; 255
     af4:	83 83       	std	Z+3, r24	; 0x03
	sr->writeHead++;
     af6:	a5 81       	ldd	r26, Z+5	; 0x05
     af8:	b6 81       	ldd	r27, Z+6	; 0x06
     afa:	cd 01       	movw	r24, r26
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	85 83       	std	Z+5, r24	; 0x05
     b00:	96 83       	std	Z+6, r25	; 0x06

void StringRingWrite(StringRing * const sr, const char DATA)
{
	StringRingPush(sr, DATA);

	if(DATA == '\n')
     b02:	6a 30       	cpi	r22, 0x0A	; 10
     b04:	09 f0       	breq	.+2      	; 0xb08 <StringRingWrite+0x24>
     b06:	64 c0       	rjmp	.+200    	; 0xbd0 <StringRingWrite+0xec>

// Moves the head to the next string
// Returns 0 if nothing is going to be clobbered, 1 if it clobbered something newer, or -1 if it clobbered something older
static inline int8_t StringRingMoveHeadToNextString(StringRing * const sr)
{
	*(sr->writeHead) = '\0';
     b08:	11 96       	adiw	r26, 0x01	; 1
     b0a:	1c 92       	st	X, r1

	if(SR_HEAD_WILL_CLOBBER_TAIL)
     b0c:	a5 81       	ldd	r26, Z+5	; 0x05
     b0e:	b6 81       	ldd	r27, Z+6	; 0x06
     b10:	23 81       	ldd	r18, Z+3	; 0x03
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	84 81       	ldd	r24, Z+4	; 0x04
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	82 1b       	sub	r24, r18
     b1a:	93 0b       	sbc	r25, r19
     b1c:	8a 0f       	add	r24, r26
     b1e:	9b 1f       	adc	r25, r27
     b20:	40 81       	ld	r20, Z
     b22:	51 81       	ldd	r21, Z+1	; 0x01
     b24:	84 17       	cp	r24, r20
     b26:	95 07       	cpc	r25, r21
     b28:	09 f4       	brne	.+2      	; 0xb2c <StringRingWrite+0x48>
     b2a:	4e c0       	rjmp	.+156    	; 0xbc8 <StringRingWrite+0xe4>
     b2c:	bf 01       	movw	r22, r30
     b2e:	67 5f       	subi	r22, 0xF7	; 247
     b30:	7f 4f       	sbci	r23, 0xFF	; 255
     b32:	46 17       	cp	r20, r22
     b34:	57 07       	cpc	r21, r23
     b36:	d1 f5       	brne	.+116    	; 0xbac <StringRingWrite+0xc8>
     b38:	c7 81       	ldd	r28, Z+7	; 0x07
     b3a:	d0 85       	ldd	r29, Z+8	; 0x08
     b3c:	ad 01       	movw	r20, r26
     b3e:	42 1b       	sub	r20, r18
     b40:	53 0b       	sbc	r21, r19
     b42:	c4 17       	cp	r28, r20
     b44:	d5 07       	cpc	r29, r21
     b46:	91 f5       	brne	.+100    	; 0xbac <StringRingWrite+0xc8>
	{
		if(sr->clobberOld)
     b48:	82 81       	ldd	r24, Z+2	; 0x02
     b4a:	88 23       	and	r24, r24
     b4c:	49 f1       	breq	.+82     	; 0xba0 <StringRingWrite+0xbc>
     b4e:	ef 01       	movw	r28, r30
		{
			StringRingSeekNextReadableString(sr); // push readtail forward a string
     b50:	cf 01       	movw	r24, r30
     b52:	9f df       	rcall	.-194    	; 0xa92 <StringRingSeekNextReadableString>
// Moves head to next valid position, based on configuration
static inline void StringRingPushHead(StringRing * const sr, const bool WILLCLOBBER)
{
	if(WILLCLOBBER)
	{
		if(sr->clobberOld)
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	88 23       	and	r24, r24
     b58:	d1 f0       	breq	.+52     	; 0xb8e <StringRingWrite+0xaa>
		{
			if(SR_CURRENT_HEAD >= SR_FINAL_STRING)
     b5a:	4d 81       	ldd	r20, Y+5	; 0x05
     b5c:	5e 81       	ldd	r21, Y+6	; 0x06
     b5e:	2b 81       	ldd	r18, Y+3	; 0x03
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	ca 01       	movw	r24, r20
     b64:	82 1b       	sub	r24, r18
     b66:	93 0b       	sbc	r25, r19
     b68:	6f 81       	ldd	r22, Y+7	; 0x07
     b6a:	78 85       	ldd	r23, Y+8	; 0x08
     b6c:	86 17       	cp	r24, r22
     b6e:	97 07       	cpc	r25, r23
     b70:	28 f0       	brcs	.+10     	; 0xb7c <StringRingWrite+0x98>
			{
				sr->writeHead = SR_FIRST_STRING;
     b72:	ce 01       	movw	r24, r28
     b74:	09 96       	adiw	r24, 0x09	; 9
     b76:	8d 83       	std	Y+5, r24	; 0x05
     b78:	9e 83       	std	Y+6, r25	; 0x06
     b7a:	10 c0       	rjmp	.+32     	; 0xb9c <StringRingWrite+0xb8>
			}
			else
			{
				sr->writeHead = SR_NEXT_HEAD;
     b7c:	8c 81       	ldd	r24, Y+4	; 0x04
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	82 1b       	sub	r24, r18
     b82:	93 0b       	sbc	r25, r19
     b84:	84 0f       	add	r24, r20
     b86:	95 1f       	adc	r25, r21
     b88:	8d 83       	std	Y+5, r24	; 0x05
     b8a:	9e 83       	std	Y+6, r25	; 0x06
     b8c:	07 c0       	rjmp	.+14     	; 0xb9c <StringRingWrite+0xb8>
			}
		}
		else
		{
			sr->writeHead = SR_CURRENT_HEAD;
     b8e:	2b 81       	ldd	r18, Y+3	; 0x03
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	82 1b       	sub	r24, r18
     b96:	91 09       	sbc	r25, r1
     b98:	8d 83       	std	Y+5, r24	; 0x05
     b9a:	9e 83       	std	Y+6, r25	; 0x06
		{
			sr->writeHead = SR_NEXT_HEAD;
		}
	}
	
	sr->headLen = 0;
     b9c:	1b 82       	std	Y+3, r1	; 0x03
     b9e:	18 c0       	rjmp	.+48     	; 0xbd0 <StringRingWrite+0xec>
				sr->writeHead = SR_NEXT_HEAD;
			}
		}
		else
		{
			sr->writeHead = SR_CURRENT_HEAD;
     ba0:	a2 1b       	sub	r26, r18
     ba2:	b3 0b       	sbc	r27, r19
     ba4:	a5 83       	std	Z+5, r26	; 0x05
     ba6:	b6 83       	std	Z+6, r27	; 0x06
		{
			sr->writeHead = SR_NEXT_HEAD;
		}
	}
	
	sr->headLen = 0;
     ba8:	13 82       	std	Z+3, r1	; 0x03
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <StringRingWrite+0xec>
			sr->writeHead = SR_CURRENT_HEAD;
		}
	}
	else
	{
		if(SR_CURRENT_HEAD >= SR_FINAL_STRING)
     bac:	a2 1b       	sub	r26, r18
     bae:	b3 0b       	sbc	r27, r19
     bb0:	27 81       	ldd	r18, Z+7	; 0x07
     bb2:	30 85       	ldd	r19, Z+8	; 0x08
     bb4:	a2 17       	cp	r26, r18
     bb6:	b3 07       	cpc	r27, r19
     bb8:	18 f0       	brcs	.+6      	; 0xbc0 <StringRingWrite+0xdc>
		{
			sr->writeHead = SR_FIRST_STRING;
     bba:	65 83       	std	Z+5, r22	; 0x05
     bbc:	76 83       	std	Z+6, r23	; 0x06
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <StringRingWrite+0xe0>
		}
		else
		{
			sr->writeHead = SR_NEXT_HEAD;
     bc0:	85 83       	std	Z+5, r24	; 0x05
     bc2:	96 83       	std	Z+6, r25	; 0x06
		}
	}
	
	sr->headLen = 0;
     bc4:	13 82       	std	Z+3, r1	; 0x03
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <StringRingWrite+0xec>
{
	*(sr->writeHead) = '\0';

	if(SR_HEAD_WILL_CLOBBER_TAIL)
	{
		if(sr->clobberOld)
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	88 23       	and	r24, r24
     bcc:	49 f3       	breq	.-46     	; 0xba0 <StringRingWrite+0xbc>
     bce:	bf cf       	rjmp	.-130    	; 0xb4e <StringRingWrite+0x6a>

	if(DATA == '\n')
	{
		StringRingMoveHeadToNextString(sr);
	}
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <spi_read>:
	SPIC.CTRL = 0b01010000; 
	calibrate_pressure();
 }
uint8_t spi_read(void)
 {
	SPIC.DATA = 0xFF; //Set data to known value
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	80 93 c3 08 	sts	0x08C3, r24
	while(!(SPIC.STATUS>>7)); //Wait until new data has been read in
     bdc:	e0 ec       	ldi	r30, 0xC0	; 192
     bde:	f8 e0       	ldi	r31, 0x08	; 8
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	88 23       	and	r24, r24
     be4:	ec f7       	brge	.-6      	; 0xbe0 <spi_read+0xa>
	return SPIC.DATA; //return the data
     be6:	80 91 c3 08 	lds	r24, 0x08C3
 }
     bea:	08 95       	ret

00000bec <spi_write>:
void spi_write(uint8_t data)
 {
	 SPIC.DATA = data; //Take data from function and write it into data
     bec:	80 93 c3 08 	sts	0x08C3, r24
	 while(!(SPIC.STATUS>>7)); //wait until done sending data
     bf0:	e0 ec       	ldi	r30, 0xC0	; 192
     bf2:	f8 e0       	ldi	r31, 0x08	; 8
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	88 23       	and	r24, r24
     bf8:	ec f7       	brge	.-6      	; 0xbf4 <spi_write+0x8>
 }
     bfa:	08 95       	ret

00000bfc <spi_select>:
void spi_select(void)
{
	PORTC.OUT &= 0b11101111;
     bfc:	e0 e4       	ldi	r30, 0x40	; 64
     bfe:	f6 e0       	ldi	r31, 0x06	; 6
     c00:	84 81       	ldd	r24, Z+4	; 0x04
     c02:	8f 7e       	andi	r24, 0xEF	; 239
     c04:	84 83       	std	Z+4, r24	; 0x04
     c06:	08 95       	ret

00000c08 <spi_deselect>:
}
void spi_deselect(void)
{
	PORTC.OUT |= 0b00010000;
     c08:	e0 e4       	ldi	r30, 0x40	; 64
     c0a:	f6 e0       	ldi	r31, 0x06	; 6
     c0c:	84 81       	ldd	r24, Z+4	; 0x04
     c0e:	80 61       	ori	r24, 0x10	; 16
     c10:	84 83       	std	Z+4, r24	; 0x04
     c12:	08 95       	ret

00000c14 <getPressure>:
 uint16_t cal_pres_c5;
 uint16_t cal_pres_c6;
  

 int32_t getPressure(void)
 {
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	00 d0       	rcall	.+0      	; 0xc3a <getPressure+0x26>
     c3a:	1f 92       	push	r1
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
	 
	
	 //OSR:4096
	 //get D1:
	
	spi_select(); //select the spi device
     c40:	dd df       	rcall	.-70     	; 0xbfc <spi_select>
	spi_write(0x48); //write to the spi device. using OSR 4096
     c42:	88 e4       	ldi	r24, 0x48	; 72
     c44:	d3 df       	rcall	.-90     	; 0xbec <spi_write>
	spi_deselect(); //Deselect the device
     c46:	e0 df       	rcall	.-64     	; 0xc08 <spi_deselect>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	85 35       	cpi	r24, 0x55	; 85
     c50:	20 ed       	ldi	r18, 0xD0	; 208
     c52:	92 07       	cpc	r25, r18
     c54:	d9 f7       	brne	.-10     	; 0xc4c <getPressure+0x38>
	delay_ms(10);
	
	
	
	spi_select();
     c56:	d2 df       	rcall	.-92     	; 0xbfc <spi_select>
	spi_write(0x00); //Just resets some stuff
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	c8 df       	rcall	.-112    	; 0xbec <spi_write>
	uint32_t D1 = ((uint32_t)spi_read())<<16; //Type cast to 16 bit data, then bit shift to left 8 places
     c5c:	bc df       	rcall	.-136    	; 0xbd6 <spi_read>
     c5e:	c8 2e       	mov	r12, r24
     c60:	d1 2c       	mov	r13, r1
     c62:	e1 2c       	mov	r14, r1
     c64:	f1 2c       	mov	r15, r1
     c66:	76 01       	movw	r14, r12
     c68:	dd 24       	eor	r13, r13
     c6a:	cc 24       	eor	r12, r12
	D1 += ((uint32_t)spi_read())<<8; //Type cast to 16 bit data and add to the lower 8 bits of the variable data
     c6c:	b4 df       	rcall	.-152    	; 0xbd6 <spi_read>
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a0 e0       	ldi	r26, 0x00	; 0
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	ba 2f       	mov	r27, r26
     c76:	a9 2f       	mov	r26, r25
     c78:	98 2f       	mov	r25, r24
     c7a:	88 27       	eor	r24, r24
     c7c:	c8 0e       	add	r12, r24
     c7e:	d9 1e       	adc	r13, r25
     c80:	ea 1e       	adc	r14, r26
     c82:	fb 1e       	adc	r15, r27
	D1 += ((uint32_t)spi_read());
     c84:	a8 df       	rcall	.-176    	; 0xbd6 <spi_read>
     c86:	c8 0e       	add	r12, r24
     c88:	d1 1c       	adc	r13, r1
     c8a:	e1 1c       	adc	r14, r1
     c8c:	f1 1c       	adc	r15, r1
	spi_deselect();
     c8e:	bc df       	rcall	.-136    	; 0xc08 <spi_deselect>
	
	printf("THING %" PRIu32"\n", D1);
     c90:	ff 92       	push	r15
     c92:	ef 92       	push	r14
     c94:	df 92       	push	r13
     c96:	cf 92       	push	r12
     c98:	83 e2       	ldi	r24, 0x23	; 35
     c9a:	90 e2       	ldi	r25, 0x20	; 32
     c9c:	9f 93       	push	r25
     c9e:	8f 93       	push	r24
     ca0:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <printf>
	
	//get D2:
	uint32_t D2; //declare variable to store digital temp value
	spi_select();
     ca4:	ab df       	rcall	.-170    	; 0xbfc <spi_select>
	spi_write(0x58);
     ca6:	88 e5       	ldi	r24, 0x58	; 88
     ca8:	a1 df       	rcall	.-190    	; 0xbec <spi_write>
	spi_deselect();
     caa:	ae df       	rcall	.-164    	; 0xc08 <spi_deselect>
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	85 35       	cpi	r24, 0x55	; 85
     cc0:	30 ed       	ldi	r19, 0xD0	; 208
     cc2:	93 07       	cpc	r25, r19
     cc4:	d9 f7       	brne	.-10     	; 0xcbc <getPressure+0xa8>
	delay_ms(10);
	spi_select();
     cc6:	9a df       	rcall	.-204    	; 0xbfc <spi_select>
	spi_write(0x00);
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 df       	rcall	.-224    	; 0xbec <spi_write>
	D2 = ((uint32_t)spi_read())<<16;
     ccc:	84 df       	rcall	.-248    	; 0xbd6 <spi_read>
     cce:	48 2e       	mov	r4, r24
     cd0:	51 2c       	mov	r5, r1
     cd2:	61 2c       	mov	r6, r1
     cd4:	71 2c       	mov	r7, r1
     cd6:	32 01       	movw	r6, r4
     cd8:	55 24       	eor	r5, r5
     cda:	44 24       	eor	r4, r4
	D2+=((uint32_t)spi_read()<<8);
     cdc:	7c df       	rcall	.-264    	; 0xbd6 <spi_read>
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	ba 2f       	mov	r27, r26
     ce6:	a9 2f       	mov	r26, r25
     ce8:	98 2f       	mov	r25, r24
     cea:	88 27       	eor	r24, r24
     cec:	48 0e       	add	r4, r24
     cee:	59 1e       	adc	r5, r25
     cf0:	6a 1e       	adc	r6, r26
     cf2:	7b 1e       	adc	r7, r27
	D2 += ((uint32_t)spi_read());
     cf4:	70 df       	rcall	.-288    	; 0xbd6 <spi_read>
     cf6:	48 0e       	add	r4, r24
     cf8:	51 1c       	adc	r5, r1
     cfa:	61 1c       	adc	r6, r1
     cfc:	71 1c       	adc	r7, r1
	spi_deselect();
     cfe:	84 df       	rcall	.-248    	; 0xc08 <spi_deselect>
	
	printf("THING2 %" PRIu32"\n", D2);
     d00:	7f 92       	push	r7
     d02:	6f 92       	push	r6
     d04:	5f 92       	push	r5
     d06:	4f 92       	push	r4
     d08:	8e e2       	ldi	r24, 0x2E	; 46
     d0a:	90 e2       	ldi	r25, 0x20	; 32
     d0c:	9f 93       	push	r25
     d0e:	8f 93       	push	r24
     d10:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <printf>
	int32_t dT = D2 - (cal_pres_c5 * pow(2,8));
     d14:	c3 01       	movw	r24, r6
     d16:	b2 01       	movw	r22, r4
     d18:	0e 94 43 12 	call	0x2486	; 0x2486 <__floatunsisf>
     d1c:	4b 01       	movw	r8, r22
     d1e:	5c 01       	movw	r10, r24
     d20:	80 91 fa 20 	lds	r24, 0x20FA
     d24:	90 91 fb 20 	lds	r25, 0x20FB
     d28:	bc 01       	movw	r22, r24
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 43 12 	call	0x2486	; 0x2486 <__floatunsisf>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e8       	ldi	r20, 0x80	; 128
     d38:	53 e4       	ldi	r21, 0x43	; 67
     d3a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     d3e:	9b 01       	movw	r18, r22
     d40:	ac 01       	movw	r20, r24
     d42:	c5 01       	movw	r24, r10
     d44:	b4 01       	movw	r22, r8
     d46:	0e 94 07 11 	call	0x220e	; 0x220e <__subsf3>
     d4a:	0e 94 0e 12 	call	0x241c	; 0x241c <__fixsfsi>
     d4e:	69 83       	std	Y+1, r22	; 0x01
     d50:	7a 83       	std	Y+2, r23	; 0x02
     d52:	8b 83       	std	Y+3, r24	; 0x03
     d54:	9c 83       	std	Y+4, r25	; 0x04
	//printf("TEMP %" PRIu32 "\n", dT);
	int32_t temp = 2000 + (dT * (cal_pres_c6/pow(2,23)));
     d56:	0e 94 45 12 	call	0x248a	; 0x248a <__floatsisf>
     d5a:	4b 01       	movw	r8, r22
     d5c:	5c 01       	movw	r10, r24
     d5e:	60 91 04 21 	lds	r22, 0x2104
     d62:	70 91 05 21 	lds	r23, 0x2105
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 43 12 	call	0x2486	; 0x2486 <__floatunsisf>
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	54 e3       	ldi	r21, 0x34	; 52
     d76:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     d7a:	9b 01       	movw	r18, r22
     d7c:	ac 01       	movw	r20, r24
     d7e:	c5 01       	movw	r24, r10
     d80:	b4 01       	movw	r22, r8
     d82:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	4a ef       	ldi	r20, 0xFA	; 250
     d8c:	54 e4       	ldi	r21, 0x44	; 68
     d8e:	0e 94 08 11 	call	0x2210	; 0x2210 <__addsf3>
     d92:	0e 94 0e 12 	call	0x241c	; 0x241c <__fixsfsi>
	printf("REALTEMP %" PRIu32 "\n", temp);
     d96:	9f 93       	push	r25
     d98:	8f 93       	push	r24
     d9a:	7f 93       	push	r23
     d9c:	6f 93       	push	r22
     d9e:	8a e3       	ldi	r24, 0x3A	; 58
     da0:	90 e2       	ldi	r25, 0x20	; 32
     da2:	9f 93       	push	r25
     da4:	8f 93       	push	r24
     da6:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <printf>
	int64_t OFF = (cal_pres_c2 * pow(2,17)) + ((cal_pres_c4*dT)/pow(2,6));
	int64_t sens = (cal_pres_c1*pow(2, 16)) + ((cal_pres_c3*dT)/pow(2,7));
	int32_t Pressure = ((D1*sens/pow(2,21))-OFF)/pow(2,15);
     daa:	16 01       	movw	r2, r12
     dac:	27 01       	movw	r4, r14
	int32_t dT = D2 - (cal_pres_c5 * pow(2,8));
	//printf("TEMP %" PRIu32 "\n", dT);
	int32_t temp = 2000 + (dT * (cal_pres_c6/pow(2,23)));
	printf("REALTEMP %" PRIu32 "\n", temp);
	int64_t OFF = (cal_pres_c2 * pow(2,17)) + ((cal_pres_c4*dT)/pow(2,6));
	int64_t sens = (cal_pres_c1*pow(2, 16)) + ((cal_pres_c3*dT)/pow(2,7));
     dae:	60 91 fe 20 	lds	r22, 0x20FE
     db2:	70 91 ff 20 	lds	r23, 0x20FF
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 43 12 	call	0x2486	; 0x2486 <__floatunsisf>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e8       	ldi	r20, 0x80	; 128
     dc4:	57 e4       	ldi	r21, 0x47	; 71
     dc6:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     dca:	6b 01       	movw	r12, r22
     dcc:	7c 01       	movw	r14, r24
     dce:	a0 91 fc 20 	lds	r26, 0x20FC
     dd2:	b0 91 fd 20 	lds	r27, 0x20FD
     dd6:	29 81       	ldd	r18, Y+1	; 0x01
     dd8:	3a 81       	ldd	r19, Y+2	; 0x02
     dda:	4b 81       	ldd	r20, Y+3	; 0x03
     ddc:	5c 81       	ldd	r21, Y+4	; 0x04
     dde:	0e 94 1c 14 	call	0x2838	; 0x2838 <__muluhisi3>
     de2:	0e 94 45 12 	call	0x248a	; 0x248a <__floatsisf>
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	5c e3       	ldi	r21, 0x3C	; 60
     dee:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     df2:	9b 01       	movw	r18, r22
     df4:	ac 01       	movw	r20, r24
     df6:	c7 01       	movw	r24, r14
     df8:	b6 01       	movw	r22, r12
     dfa:	0e 94 08 11 	call	0x2210	; 0x2210 <__addsf3>
     dfe:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixsfdi>
	int32_t Pressure = ((D1*sens/pow(2,21))-OFF)/pow(2,15);
     e02:	a2 2e       	mov	r10, r18
     e04:	b3 2e       	mov	r11, r19
     e06:	c4 2e       	mov	r12, r20
     e08:	d5 2e       	mov	r13, r21
     e0a:	e6 2e       	mov	r14, r22
     e0c:	f7 2e       	mov	r15, r23
     e0e:	08 2f       	mov	r16, r24
     e10:	19 2f       	mov	r17, r25
     e12:	22 2d       	mov	r18, r2
     e14:	33 2d       	mov	r19, r3
     e16:	44 2d       	mov	r20, r4
     e18:	55 2d       	mov	r21, r5
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 26 14 	call	0x284c	; 0x284c <__muldi3>
     e26:	0e 94 3f 12 	call	0x247e	; 0x247e <__floatdisf>
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	55 e3       	ldi	r21, 0x35	; 53
     e32:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     e36:	6b 01       	movw	r12, r22
     e38:	7c 01       	movw	r14, r24
	printf("THING2 %" PRIu32"\n", D2);
	int32_t dT = D2 - (cal_pres_c5 * pow(2,8));
	//printf("TEMP %" PRIu32 "\n", dT);
	int32_t temp = 2000 + (dT * (cal_pres_c6/pow(2,23)));
	printf("REALTEMP %" PRIu32 "\n", temp);
	int64_t OFF = (cal_pres_c2 * pow(2,17)) + ((cal_pres_c4*dT)/pow(2,6));
     e3a:	80 91 02 21 	lds	r24, 0x2102
     e3e:	90 91 03 21 	lds	r25, 0x2103
     e42:	bc 01       	movw	r22, r24
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 43 12 	call	0x2486	; 0x2486 <__floatunsisf>
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	58 e4       	ldi	r21, 0x48	; 72
     e54:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     e58:	4b 01       	movw	r8, r22
     e5a:	5c 01       	movw	r10, r24
     e5c:	a0 91 00 21 	lds	r26, 0x2100
     e60:	b0 91 01 21 	lds	r27, 0x2101
     e64:	29 81       	ldd	r18, Y+1	; 0x01
     e66:	3a 81       	ldd	r19, Y+2	; 0x02
     e68:	4b 81       	ldd	r20, Y+3	; 0x03
     e6a:	5c 81       	ldd	r21, Y+4	; 0x04
     e6c:	0e 94 1c 14 	call	0x2838	; 0x2838 <__muluhisi3>
     e70:	0e 94 45 12 	call	0x248a	; 0x248a <__floatsisf>
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e8       	ldi	r20, 0x80	; 128
     e7a:	5c e3       	ldi	r21, 0x3C	; 60
     e7c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     e80:	9b 01       	movw	r18, r22
     e82:	ac 01       	movw	r20, r24
     e84:	c5 01       	movw	r24, r10
     e86:	b4 01       	movw	r22, r8
     e88:	0e 94 08 11 	call	0x2210	; 0x2210 <__addsf3>
     e8c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixsfdi>
	int64_t sens = (cal_pres_c1*pow(2, 16)) + ((cal_pres_c3*dT)/pow(2,7));
	int32_t Pressure = ((D1*sens/pow(2,21))-OFF)/pow(2,15);
     e90:	0e 94 3f 12 	call	0x247e	; 0x247e <__floatdisf>
     e94:	9b 01       	movw	r18, r22
     e96:	ac 01       	movw	r20, r24
     e98:	c7 01       	movw	r24, r14
     e9a:	b6 01       	movw	r22, r12
     e9c:	0e 94 07 11 	call	0x220e	; 0x220e <__subsf3>
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	58 e3       	ldi	r21, 0x38	; 56
     ea8:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsf3>
     eac:	0e 94 0e 12 	call	0x241c	; 0x241c <__fixsfsi>
	return Pressure;
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	de bf       	out	0x3e, r29	; 62
	
	
 }
     eb4:	24 96       	adiw	r28, 0x04	; 4
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	df 90       	pop	r13
     ec8:	cf 90       	pop	r12
     eca:	bf 90       	pop	r11
     ecc:	af 90       	pop	r10
     ece:	9f 90       	pop	r9
     ed0:	8f 90       	pop	r8
     ed2:	7f 90       	pop	r7
     ed4:	6f 90       	pop	r6
     ed6:	5f 90       	pop	r5
     ed8:	4f 90       	pop	r4
     eda:	3f 90       	pop	r3
     edc:	2f 90       	pop	r2
     ede:	08 95       	ret

00000ee0 <calibrate_pressure>:
 void calibrate_pressure(void)
 {
	 printf("First\n");
     ee0:	88 e4       	ldi	r24, 0x48	; 72
     ee2:	90 e2       	ldi	r25, 0x20	; 32
     ee4:	0e 94 31 16 	call	0x2c62	; 0x2c62 <puts>
	//every time you do set up, read from PROM
	//calibrate c1:
	spi_select();
     ee8:	89 de       	rcall	.-750    	; 0xbfc <spi_select>
	spi_write(0b10100010);
     eea:	82 ea       	ldi	r24, 0xA2	; 162
     eec:	7f de       	rcall	.-770    	; 0xbec <spi_write>
	cal_pres_c1 = ((uint16_t)spi_read())<<8;
     eee:	73 de       	rcall	.-794    	; 0xbd6 <spi_read>
     ef0:	10 92 fe 20 	sts	0x20FE, r1
     ef4:	80 93 ff 20 	sts	0x20FF, r24
	cal_pres_c1 += ((uint16_t)spi_read());
     ef8:	6e de       	rcall	.-804    	; 0xbd6 <spi_read>
     efa:	20 91 fe 20 	lds	r18, 0x20FE
     efe:	30 91 ff 20 	lds	r19, 0x20FF
     f02:	28 0f       	add	r18, r24
     f04:	31 1d       	adc	r19, r1
     f06:	20 93 fe 20 	sts	0x20FE, r18
     f0a:	30 93 ff 20 	sts	0x20FF, r19
	spi_deselect();
     f0e:	7c de       	rcall	.-776    	; 0xc08 <spi_deselect>
	printf("c1: %u\n",cal_pres_c1);
     f10:	80 91 ff 20 	lds	r24, 0x20FF
     f14:	8f 93       	push	r24
     f16:	80 91 fe 20 	lds	r24, 0x20FE
     f1a:	8f 93       	push	r24
     f1c:	8e e4       	ldi	r24, 0x4E	; 78
     f1e:	90 e2       	ldi	r25, 0x20	; 32
     f20:	9f 93       	push	r25
     f22:	8f 93       	push	r24
     f24:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <printf>
	
	//calibrate c2:
	spi_select();
     f28:	69 de       	rcall	.-814    	; 0xbfc <spi_select>
	spi_write(0b10100100);
     f2a:	84 ea       	ldi	r24, 0xA4	; 164
     f2c:	5f de       	rcall	.-834    	; 0xbec <spi_write>
	cal_pres_c2 = ((uint16_t)spi_read())<<8;
     f2e:	53 de       	rcall	.-858    	; 0xbd6 <spi_read>
     f30:	10 92 02 21 	sts	0x2102, r1
     f34:	80 93 03 21 	sts	0x2103, r24
	cal_pres_c2 += ((uint16_t)spi_read());
     f38:	4e de       	rcall	.-868    	; 0xbd6 <spi_read>
     f3a:	20 91 02 21 	lds	r18, 0x2102
     f3e:	30 91 03 21 	lds	r19, 0x2103
     f42:	28 0f       	add	r18, r24
     f44:	31 1d       	adc	r19, r1
     f46:	20 93 02 21 	sts	0x2102, r18
     f4a:	30 93 03 21 	sts	0x2103, r19
	spi_deselect();
     f4e:	5c de       	rcall	.-840    	; 0xc08 <spi_deselect>
	printf("c2: %u \n",cal_pres_c2);
     f50:	80 91 03 21 	lds	r24, 0x2103
     f54:	8f 93       	push	r24
     f56:	80 91 02 21 	lds	r24, 0x2102
     f5a:	8f 93       	push	r24
     f5c:	86 e5       	ldi	r24, 0x56	; 86
     f5e:	90 e2       	ldi	r25, 0x20	; 32
     f60:	9f 93       	push	r25
     f62:	8f 93       	push	r24
     f64:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <printf>
	
	//calibrate c3:
	spi_select();
     f68:	49 de       	rcall	.-878    	; 0xbfc <spi_select>
	spi_write(0b10100110);
     f6a:	86 ea       	ldi	r24, 0xA6	; 166
     f6c:	3f de       	rcall	.-898    	; 0xbec <spi_write>
	cal_pres_c3 = ((uint16_t)spi_read())<<8;
     f6e:	33 de       	rcall	.-922    	; 0xbd6 <spi_read>
     f70:	10 92 fc 20 	sts	0x20FC, r1
     f74:	80 93 fd 20 	sts	0x20FD, r24
	cal_pres_c3 += ((uint16_t)spi_read());
     f78:	2e de       	rcall	.-932    	; 0xbd6 <spi_read>
     f7a:	20 91 fc 20 	lds	r18, 0x20FC
     f7e:	30 91 fd 20 	lds	r19, 0x20FD
     f82:	28 0f       	add	r18, r24
     f84:	31 1d       	adc	r19, r1
     f86:	20 93 fc 20 	sts	0x20FC, r18
     f8a:	30 93 fd 20 	sts	0x20FD, r19
	spi_deselect();
     f8e:	3c de       	rcall	.-904    	; 0xc08 <spi_deselect>
	printf("c3: %u \n",cal_pres_c3);
     f90:	80 91 fd 20 	lds	r24, 0x20FD
     f94:	8f 93       	push	r24
     f96:	80 91 fc 20 	lds	r24, 0x20FC
     f9a:	8f 93       	push	r24
     f9c:	8f e5       	ldi	r24, 0x5F	; 95
     f9e:	90 e2       	ldi	r25, 0x20	; 32
     fa0:	9f 93       	push	r25
     fa2:	8f 93       	push	r24
     fa4:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <printf>
	
	//calibrate c4:
	spi_select();
     fa8:	29 de       	rcall	.-942    	; 0xbfc <spi_select>
	spi_write(0b10101000);
     faa:	88 ea       	ldi	r24, 0xA8	; 168
     fac:	1f de       	rcall	.-962    	; 0xbec <spi_write>
	cal_pres_c4 = ((uint16_t)spi_read())<<8;
     fae:	13 de       	rcall	.-986    	; 0xbd6 <spi_read>
     fb0:	10 92 00 21 	sts	0x2100, r1
     fb4:	80 93 01 21 	sts	0x2101, r24
	cal_pres_c4 += ((uint16_t)spi_read());
     fb8:	0e de       	rcall	.-996    	; 0xbd6 <spi_read>
     fba:	20 91 00 21 	lds	r18, 0x2100
     fbe:	30 91 01 21 	lds	r19, 0x2101
     fc2:	28 0f       	add	r18, r24
     fc4:	31 1d       	adc	r19, r1
     fc6:	20 93 00 21 	sts	0x2100, r18
     fca:	30 93 01 21 	sts	0x2101, r19
	spi_deselect();
     fce:	1c de       	rcall	.-968    	; 0xc08 <spi_deselect>
	printf("c4: %u \n",cal_pres_c4);
     fd0:	80 91 01 21 	lds	r24, 0x2101
     fd4:	8f 93       	push	r24
     fd6:	80 91 00 21 	lds	r24, 0x2100
     fda:	8f 93       	push	r24
     fdc:	88 e6       	ldi	r24, 0x68	; 104
     fde:	90 e2       	ldi	r25, 0x20	; 32
     fe0:	9f 93       	push	r25
     fe2:	8f 93       	push	r24
     fe4:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <printf>
	
	//calibrate c5:
	spi_select();
     fe8:	09 de       	rcall	.-1006   	; 0xbfc <spi_select>
	spi_write(0b10101010);
     fea:	8a ea       	ldi	r24, 0xAA	; 170
     fec:	ff dd       	rcall	.-1026   	; 0xbec <spi_write>
	cal_pres_c5 = ((uint16_t)spi_read())<<8;
     fee:	f3 dd       	rcall	.-1050   	; 0xbd6 <spi_read>
     ff0:	10 92 fa 20 	sts	0x20FA, r1
     ff4:	80 93 fb 20 	sts	0x20FB, r24
	cal_pres_c5 += ((uint16_t)spi_read());
     ff8:	ee dd       	rcall	.-1060   	; 0xbd6 <spi_read>
     ffa:	20 91 fa 20 	lds	r18, 0x20FA
     ffe:	30 91 fb 20 	lds	r19, 0x20FB
    1002:	28 0f       	add	r18, r24
    1004:	31 1d       	adc	r19, r1
    1006:	20 93 fa 20 	sts	0x20FA, r18
    100a:	30 93 fb 20 	sts	0x20FB, r19
	spi_deselect();
    100e:	fc dd       	rcall	.-1032   	; 0xc08 <spi_deselect>
	printf("c5: %u \n",cal_pres_c5);
    1010:	80 91 fb 20 	lds	r24, 0x20FB
    1014:	8f 93       	push	r24
    1016:	80 91 fa 20 	lds	r24, 0x20FA
    101a:	8f 93       	push	r24
    101c:	81 e7       	ldi	r24, 0x71	; 113
    101e:	90 e2       	ldi	r25, 0x20	; 32
    1020:	9f 93       	push	r25
    1022:	8f 93       	push	r24
    1024:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <printf>
	
	//calibrate c6:
	spi_select();
    1028:	e9 dd       	rcall	.-1070   	; 0xbfc <spi_select>
	spi_write(0b10101100);
    102a:	8c ea       	ldi	r24, 0xAC	; 172
    102c:	df dd       	rcall	.-1090   	; 0xbec <spi_write>
	cal_pres_c6 = ((uint16_t)spi_read())<<8;
    102e:	d3 dd       	rcall	.-1114   	; 0xbd6 <spi_read>
    1030:	10 92 04 21 	sts	0x2104, r1
    1034:	80 93 05 21 	sts	0x2105, r24
	cal_pres_c6 += ((uint16_t)spi_read());
    1038:	ce dd       	rcall	.-1124   	; 0xbd6 <spi_read>
    103a:	20 91 04 21 	lds	r18, 0x2104
    103e:	30 91 05 21 	lds	r19, 0x2105
    1042:	28 0f       	add	r18, r24
    1044:	31 1d       	adc	r19, r1
    1046:	20 93 04 21 	sts	0x2104, r18
    104a:	30 93 05 21 	sts	0x2105, r19
	spi_deselect();
    104e:	dc dd       	rcall	.-1096   	; 0xc08 <spi_deselect>
	printf("c6: %u \n ",cal_pres_c6);
    1050:	80 91 05 21 	lds	r24, 0x2105
    1054:	8f 93       	push	r24
    1056:	80 91 04 21 	lds	r24, 0x2104
    105a:	8f 93       	push	r24
    105c:	8a e7       	ldi	r24, 0x7A	; 122
    105e:	90 e2       	ldi	r25, 0x20	; 32
    1060:	9f 93       	push	r25
    1062:	8f 93       	push	r24
    1064:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <printf>
	printf("Cleared Var\n");
    1068:	84 e8       	ldi	r24, 0x84	; 132
    106a:	90 e2       	ldi	r25, 0x20	; 32
    106c:	0e 94 31 16 	call	0x2c62	; 0x2c62 <puts>
    1070:	8d b7       	in	r24, 0x3d	; 61
    1072:	9e b7       	in	r25, 0x3e	; 62
    1074:	48 96       	adiw	r24, 0x18	; 24
    1076:	8d bf       	out	0x3d, r24	; 61
    1078:	9e bf       	out	0x3e, r25	; 62
    107a:	08 95       	ret

0000107c <spi_init>:
 }
 void spi_init(void)
 {
	PORTC.DIR |= 0b10110000;
    107c:	e0 e4       	ldi	r30, 0x40	; 64
    107e:	f6 e0       	ldi	r31, 0x06	; 6
    1080:	80 81       	ld	r24, Z
    1082:	80 6b       	ori	r24, 0xB0	; 176
    1084:	80 83       	st	Z, r24
	//PORTC.OUTSET = 0b10110000;
	PORTC.DIR &= 0b10111111;
    1086:	80 81       	ld	r24, Z
    1088:	8f 7b       	andi	r24, 0xBF	; 191
    108a:	80 83       	st	Z, r24
	SPIC.CTRL = 0b01010000; 
    108c:	80 e5       	ldi	r24, 0x50	; 80
    108e:	80 93 c0 08 	sts	0x08C0, r24
	calibrate_pressure();
    1092:	26 cf       	rjmp	.-436    	; 0xee0 <calibrate_pressure>
    1094:	08 95       	ret

00001096 <ADCinit>:
 */ 
#include "driver/driver.h"
#include <math.h>

 void ADCinit(void)
 {
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
	 ADCA.CTRLA = 0b00000010; //Enables the ADC
    109e:	c0 e0       	ldi	r28, 0x00	; 0
    10a0:	d2 e0       	ldi	r29, 0x02	; 2
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	88 83       	st	Y, r24
	 ADCA.CTRLB = 0b00000000; //Sets ADC to unsigned int mode
    10a6:	19 82       	std	Y+1, r1	; 0x01
	 ADCA.REFCTRL = 0b00010000; //Voltage reference of Vcc/1.6V
    10a8:	80 e1       	ldi	r24, 0x10	; 16
    10aa:	8a 83       	std	Y+2, r24	; 0x02
	 ADCA.PRESCALER = 0b00000101; //Automatic clock prescaler of 128
    10ac:	85 e0       	ldi	r24, 0x05	; 5
    10ae:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    10b0:	61 e2       	ldi	r22, 0x21	; 33
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	58 d3       	rcall	.+1712   	; 0x1768 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    10b8:	08 2f       	mov	r16, r24
    10ba:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    10bc:	10 2f       	mov	r17, r16
    10be:	00 27       	eor	r16, r16
    10c0:	60 e2       	ldi	r22, 0x20	; 32
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	50 d3       	rcall	.+1696   	; 0x1768 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    10c8:	08 2b       	or	r16, r24
	 ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA); //gets calibration data about the ADC
    10ca:	0c 87       	std	Y+12, r16	; 0x0c
    10cc:	1d 87       	std	Y+13, r17	; 0x0d

	 ADCA.CH0.CTRL = 0b00000001; //sets ADC to single ended input
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	88 a3       	std	Y+32, r24	; 0x20
	 ADCA.CH0.MUXCTRL = 0b00000000;
    10d2:	19 a2       	std	Y+33, r1	; 0x21
	 printf("Beyaw\n");
    10d4:	80 e9       	ldi	r24, 0x90	; 144
    10d6:	90 e2       	ldi	r25, 0x20	; 32
    10d8:	0e 94 31 16 	call	0x2c62	; 0x2c62 <puts>
 }
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	08 95       	ret

000010e6 <getTemperature>:
 
 float getTemperature(void)
 {
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
	printf("pee\n");
    10ea:	86 e9       	ldi	r24, 0x96	; 150
    10ec:	90 e2       	ldi	r25, 0x20	; 32
    10ee:	0e 94 31 16 	call	0x2c62	; 0x2c62 <puts>
	ADCA.CH0.CTRL |= 0b10000000; //Start conversion
    10f2:	e0 e0       	ldi	r30, 0x00	; 0
    10f4:	f2 e0       	ldi	r31, 0x02	; 2
    10f6:	80 a1       	ldd	r24, Z+32	; 0x20
    10f8:	80 68       	ori	r24, 0x80	; 128
    10fa:	80 a3       	std	Z+32, r24	; 0x20
	printf("gee\n");
    10fc:	8a e9       	ldi	r24, 0x9A	; 154
    10fe:	90 e2       	ldi	r25, 0x20	; 32
    1100:	0e 94 31 16 	call	0x2c62	; 0x2c62 <puts>
    1104:	85 e5       	ldi	r24, 0x55	; 85
    1106:	93 e2       	ldi	r25, 0x23	; 35
    1108:	a8 e0       	ldi	r26, 0x08	; 8
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	a1 09       	sbc	r26, r1
    1110:	b1 09       	sbc	r27, r1
    1112:	e1 f7       	brne	.-8      	; 0x110c <getTemperature+0x26>
	
	delay_ms(100);
	(ADCA.CH0.INTFLAGS == 0); //do nothing until conversion is done
    1114:	c0 e0       	ldi	r28, 0x00	; 0
    1116:	d2 e0       	ldi	r29, 0x02	; 2
    1118:	8b a1       	ldd	r24, Y+35	; 0x23
	printf("lee\n");
    111a:	8e e9       	ldi	r24, 0x9E	; 158
    111c:	90 e2       	ldi	r25, 0x20	; 32
    111e:	0e 94 31 16 	call	0x2c62	; 0x2c62 <puts>
	uint16_t adcReading = ADCA.CH0.RES;
    1122:	8c a1       	ldd	r24, Y+36	; 0x24
    1124:	9d a1       	ldd	r25, Y+37	; 0x25
	printf("kee\n");
    1126:	82 ea       	ldi	r24, 0xA2	; 162
    1128:	90 e2       	ldi	r25, 0x20	; 32
    112a:	0e 94 31 16 	call	0x2c62	; 0x2c62 <puts>
	//Steinhart constants:
	float const A1 = 0.00354016;
	float const B1 = 0.0002569850;
	float const C1 = 0.000002620131;
	float const D1 = 0.00000006383091;
	printf("Eat\n");
    112e:	86 ea       	ldi	r24, 0xA6	; 166
    1130:	90 e2       	ldi	r25, 0x20	; 32
    1132:	0e 94 31 16 	call	0x2c62	; 0x2c62 <puts>
	//Variables:
	unsigned int voltage = 0; //this is (m*read_adc)+b which is obtained experimentally
	float resistance = (3.3*10000.0)/(3.3-(float)voltage); //equation to convert is PH112
	float refResistance = 10000; //subject to change
	float Temp = 0;
	printf("sleep\n");
    1136:	8a ea       	ldi	r24, 0xAA	; 170
    1138:	90 e2       	ldi	r25, 0x20	; 32
    113a:	0e 94 31 16 	call	0x2c62	; 0x2c62 <puts>
	

	//Below is the Steinhart equation
	Temp = 1.0/(A1 + (B1*log(resistance/refResistance)) + (C1*pow(log(resistance/refResistance),2)) + (D1*pow((log(resistance/refResistance)),3) ));
	printf("Repeat\n");
    113e:	80 eb       	ldi	r24, 0xB0	; 176
    1140:	90 e2       	ldi	r25, 0x20	; 32
    1142:	0e 94 31 16 	call	0x2c62	; 0x2c62 <puts>
#ifdef DEBUG_TEMP
	printf("res: %f, temp: %f", resistance, Temp);
#endif
	return Temp;
    1146:	6f e8       	ldi	r22, 0x8F	; 143
    1148:	7c e3       	ldi	r23, 0x3C	; 60
    114a:	8d e8       	ldi	r24, 0x8D	; 141
    114c:	93 e4       	ldi	r25, 0x43	; 67
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	08 95       	ret

00001154 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	80 93 70 00 	sts	0x0070, r24
    115a:	80 93 71 00 	sts	0x0071, r24
    115e:	80 93 72 00 	sts	0x0072, r24
    1162:	80 93 73 00 	sts	0x0073, r24
    1166:	80 93 74 00 	sts	0x0074, r24
    116a:	80 93 75 00 	sts	0x0075, r24
    116e:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1172:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1174:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1176:	e0 e5       	ldi	r30, 0x50	; 80
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	82 60       	ori	r24, 0x02	; 2
    117e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1180:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1182:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1184:	81 ff       	sbrs	r24, 1
    1186:	fd cf       	rjmp	.-6      	; 0x1182 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1188:	61 e0       	ldi	r22, 0x01	; 1
    118a:	80 e4       	ldi	r24, 0x40	; 64
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	e6 d2       	rcall	.+1484   	; 0x175c <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1190:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1192:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1194:	e0 e5       	ldi	r30, 0x50	; 80
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	8e 7f       	andi	r24, 0xFE	; 254
    119c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    119e:	9f bf       	out	0x3f, r25	; 63
    11a0:	08 95       	ret

000011a2 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    11a2:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    11a4:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    11a6:	e8 2f       	mov	r30, r24
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	e0 59       	subi	r30, 0x90	; 144
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	60 95       	com	r22
    11b0:	80 81       	ld	r24, Z
    11b2:	68 23       	and	r22, r24
    11b4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11b6:	9f bf       	out	0x3f, r25	; 63
    11b8:	08 95       	ret

000011ba <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	fc 01       	movw	r30, r24
    11c0:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    11c6:	c6 2f       	mov	r28, r22
    11c8:	d0 e0       	ldi	r29, 0x00	; 0
    11ca:	de 01       	movw	r26, r28
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <ioport_configure_port_pin+0x1a>
    11d0:	b5 95       	asr	r27
    11d2:	a7 95       	ror	r26
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <ioport_configure_port_pin+0x16>
    11d8:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    11da:	50 83       	st	Z, r21
    11dc:	2f 5f       	subi	r18, 0xFF	; 255
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    11e2:	28 30       	cpi	r18, 0x08	; 8
    11e4:	31 05       	cpc	r19, r1
    11e6:	89 f7       	brne	.-30     	; 0x11ca <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    11e8:	40 ff       	sbrs	r20, 0
    11ea:	0a c0       	rjmp	.+20     	; 0x1200 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    11ec:	41 ff       	sbrs	r20, 1
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    11f0:	fc 01       	movw	r30, r24
    11f2:	65 83       	std	Z+5, r22	; 0x05
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    11f6:	fc 01       	movw	r30, r24
    11f8:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    11fa:	fc 01       	movw	r30, r24
    11fc:	61 83       	std	Z+1, r22	; 0x01
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1200:	fc 01       	movw	r30, r24
    1202:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    120a:	43 e0       	ldi	r20, 0x03	; 3
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	80 e8       	ldi	r24, 0x80	; 128
    1212:	96 e0       	ldi	r25, 0x06	; 6
    1214:	d2 df       	rcall	.-92     	; 0x11ba <ioport_configure_port_pin>
    1216:	43 e0       	ldi	r20, 0x03	; 3
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	62 e0       	ldi	r22, 0x02	; 2
    121c:	80 e8       	ldi	r24, 0x80	; 128
    121e:	96 e0       	ldi	r25, 0x06	; 6
    1220:	cc df       	rcall	.-104    	; 0x11ba <ioport_configure_port_pin>
    1222:	43 e0       	ldi	r20, 0x03	; 3
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	64 e0       	ldi	r22, 0x04	; 4
    1228:	80 e8       	ldi	r24, 0x80	; 128
    122a:	96 e0       	ldi	r25, 0x06	; 6
    122c:	c6 df       	rcall	.-116    	; 0x11ba <ioport_configure_port_pin>
    122e:	43 e0       	ldi	r20, 0x03	; 3
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	68 e0       	ldi	r22, 0x08	; 8
    1234:	80 e8       	ldi	r24, 0x80	; 128
    1236:	96 e0       	ldi	r25, 0x06	; 6
    1238:	c0 df       	rcall	.-128    	; 0x11ba <ioport_configure_port_pin>
    123a:	43 e0       	ldi	r20, 0x03	; 3
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	60 e1       	ldi	r22, 0x10	; 16
    1240:	80 e8       	ldi	r24, 0x80	; 128
    1242:	96 e0       	ldi	r25, 0x06	; 6
    1244:	ba df       	rcall	.-140    	; 0x11ba <ioport_configure_port_pin>
    1246:	43 e0       	ldi	r20, 0x03	; 3
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	60 e2       	ldi	r22, 0x20	; 32
    124c:	80 e8       	ldi	r24, 0x80	; 128
    124e:	96 e0       	ldi	r25, 0x06	; 6
    1250:	b4 df       	rcall	.-152    	; 0x11ba <ioport_configure_port_pin>
    1252:	43 e0       	ldi	r20, 0x03	; 3
    1254:	50 e0       	ldi	r21, 0x00	; 0
    1256:	60 e4       	ldi	r22, 0x40	; 64
    1258:	80 e8       	ldi	r24, 0x80	; 128
    125a:	96 e0       	ldi	r25, 0x06	; 6
    125c:	ae df       	rcall	.-164    	; 0x11ba <ioport_configure_port_pin>
    125e:	43 e0       	ldi	r20, 0x03	; 3
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	60 e8       	ldi	r22, 0x80	; 128
    1264:	80 e8       	ldi	r24, 0x80	; 128
    1266:	96 e0       	ldi	r25, 0x06	; 6
    1268:	a8 df       	rcall	.-176    	; 0x11ba <ioport_configure_port_pin>
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	58 e1       	ldi	r21, 0x18	; 24
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	80 e6       	ldi	r24, 0x60	; 96
    1272:	96 e0       	ldi	r25, 0x06	; 6
    1274:	a2 df       	rcall	.-188    	; 0x11ba <ioport_configure_port_pin>
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	58 e1       	ldi	r21, 0x18	; 24
    127a:	62 e0       	ldi	r22, 0x02	; 2
    127c:	80 e6       	ldi	r24, 0x60	; 96
    127e:	96 e0       	ldi	r25, 0x06	; 6
    1280:	9c df       	rcall	.-200    	; 0x11ba <ioport_configure_port_pin>
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	58 e1       	ldi	r21, 0x18	; 24
    1286:	64 e0       	ldi	r22, 0x04	; 4
    1288:	80 e6       	ldi	r24, 0x60	; 96
    128a:	96 e0       	ldi	r25, 0x06	; 6
    128c:	96 df       	rcall	.-212    	; 0x11ba <ioport_configure_port_pin>
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	58 e1       	ldi	r21, 0x18	; 24
    1292:	68 e0       	ldi	r22, 0x08	; 8
    1294:	80 e6       	ldi	r24, 0x60	; 96
    1296:	96 e0       	ldi	r25, 0x06	; 6
    1298:	90 df       	rcall	.-224    	; 0x11ba <ioport_configure_port_pin>
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	58 e1       	ldi	r21, 0x18	; 24
    129e:	60 e1       	ldi	r22, 0x10	; 16
    12a0:	80 e6       	ldi	r24, 0x60	; 96
    12a2:	96 e0       	ldi	r25, 0x06	; 6
    12a4:	8a df       	rcall	.-236    	; 0x11ba <ioport_configure_port_pin>
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	58 e1       	ldi	r21, 0x18	; 24
    12aa:	60 e2       	ldi	r22, 0x20	; 32
    12ac:	80 e6       	ldi	r24, 0x60	; 96
    12ae:	96 e0       	ldi	r25, 0x06	; 6
    12b0:	84 df       	rcall	.-248    	; 0x11ba <ioport_configure_port_pin>
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	58 e1       	ldi	r21, 0x18	; 24
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	80 ee       	ldi	r24, 0xE0	; 224
    12ba:	97 e0       	ldi	r25, 0x07	; 7
    12bc:	7e df       	rcall	.-260    	; 0x11ba <ioport_configure_port_pin>
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	58 e1       	ldi	r21, 0x18	; 24
    12c2:	62 e0       	ldi	r22, 0x02	; 2
    12c4:	80 ee       	ldi	r24, 0xE0	; 224
    12c6:	97 e0       	ldi	r25, 0x07	; 7
    12c8:	78 df       	rcall	.-272    	; 0x11ba <ioport_configure_port_pin>
    12ca:	43 e0       	ldi	r20, 0x03	; 3
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	60 e8       	ldi	r22, 0x80	; 128
    12d0:	80 e4       	ldi	r24, 0x40	; 64
    12d2:	96 e0       	ldi	r25, 0x06	; 6
    12d4:	72 df       	rcall	.-284    	; 0x11ba <ioport_configure_port_pin>
    12d6:	43 e0       	ldi	r20, 0x03	; 3
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	60 e2       	ldi	r22, 0x20	; 32
    12dc:	80 e4       	ldi	r24, 0x40	; 64
    12de:	96 e0       	ldi	r25, 0x06	; 6
    12e0:	6c df       	rcall	.-296    	; 0x11ba <ioport_configure_port_pin>
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	60 e4       	ldi	r22, 0x40	; 64
    12e8:	80 e4       	ldi	r24, 0x40	; 64
    12ea:	96 e0       	ldi	r25, 0x06	; 6
    12ec:	66 df       	rcall	.-308    	; 0x11ba <ioport_configure_port_pin>
    12ee:	43 e0       	ldi	r20, 0x03	; 3
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	68 e0       	ldi	r22, 0x08	; 8
    12f4:	80 ec       	ldi	r24, 0xC0	; 192
    12f6:	97 e0       	ldi	r25, 0x07	; 7
    12f8:	60 df       	rcall	.-320    	; 0x11ba <ioport_configure_port_pin>
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	96 e0       	ldi	r25, 0x06	; 6
    1304:	5a df       	rcall	.-332    	; 0x11ba <ioport_configure_port_pin>
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	64 e0       	ldi	r22, 0x04	; 4
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	96 e0       	ldi	r25, 0x06	; 6
    1310:	54 df       	rcall	.-344    	; 0x11ba <ioport_configure_port_pin>
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	62 e0       	ldi	r22, 0x02	; 2
    1318:	80 e2       	ldi	r24, 0x20	; 32
    131a:	96 e0       	ldi	r25, 0x06	; 6
    131c:	4e df       	rcall	.-356    	; 0x11ba <ioport_configure_port_pin>
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	57 e0       	ldi	r21, 0x07	; 7
    1322:	62 e0       	ldi	r22, 0x02	; 2
    1324:	80 e2       	ldi	r24, 0x20	; 32
    1326:	96 e0       	ldi	r25, 0x06	; 6
    1328:	48 df       	rcall	.-368    	; 0x11ba <ioport_configure_port_pin>
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	57 e0       	ldi	r21, 0x07	; 7
    132e:	61 e0       	ldi	r22, 0x01	; 1
    1330:	80 e2       	ldi	r24, 0x20	; 32
    1332:	96 e0       	ldi	r25, 0x06	; 6
    1334:	42 df       	rcall	.-380    	; 0x11ba <ioport_configure_port_pin>
    1336:	41 e0       	ldi	r20, 0x01	; 1
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	68 e0       	ldi	r22, 0x08	; 8
    133c:	80 e2       	ldi	r24, 0x20	; 32
    133e:	96 e0       	ldi	r25, 0x06	; 6
    1340:	3c df       	rcall	.-392    	; 0x11ba <ioport_configure_port_pin>
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	57 e0       	ldi	r21, 0x07	; 7
    1346:	64 e0       	ldi	r22, 0x04	; 4
    1348:	80 e2       	ldi	r24, 0x20	; 32
    134a:	96 e0       	ldi	r25, 0x06	; 6
    134c:	36 df       	rcall	.-404    	; 0x11ba <ioport_configure_port_pin>
    134e:	43 e0       	ldi	r20, 0x03	; 3
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	68 e0       	ldi	r22, 0x08	; 8
    1354:	80 ec       	ldi	r24, 0xC0	; 192
    1356:	97 e0       	ldi	r25, 0x07	; 7
    1358:	30 df       	rcall	.-416    	; 0x11ba <ioport_configure_port_pin>
    135a:	43 e0       	ldi	r20, 0x03	; 3
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	68 e0       	ldi	r22, 0x08	; 8
    1360:	80 e4       	ldi	r24, 0x40	; 64
    1362:	96 e0       	ldi	r25, 0x06	; 6
    1364:	2a df       	rcall	.-428    	; 0x11ba <ioport_configure_port_pin>
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	64 e0       	ldi	r22, 0x04	; 4
    136c:	80 e4       	ldi	r24, 0x40	; 64
    136e:	96 e0       	ldi	r25, 0x06	; 6
    1370:	24 df       	rcall	.-440    	; 0x11ba <ioport_configure_port_pin>
    1372:	43 e0       	ldi	r20, 0x03	; 3
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	68 e0       	ldi	r22, 0x08	; 8
    1378:	80 e6       	ldi	r24, 0x60	; 96
    137a:	96 e0       	ldi	r25, 0x06	; 6
    137c:	1e df       	rcall	.-452    	; 0x11ba <ioport_configure_port_pin>
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	64 e0       	ldi	r22, 0x04	; 4
    1384:	80 e6       	ldi	r24, 0x60	; 96
    1386:	96 e0       	ldi	r25, 0x06	; 6
    1388:	18 cf       	rjmp	.-464    	; 0x11ba <ioport_configure_port_pin>
    138a:	08 95       	ret

0000138c <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    138c:	1f 92       	push	r1
    138e:	0f 92       	push	r0
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	0f 92       	push	r0
    1394:	11 24       	eor	r1, r1
    1396:	08 b6       	in	r0, 0x38	; 56
    1398:	0f 92       	push	r0
    139a:	18 be       	out	0x38, r1	; 56
    139c:	09 b6       	in	r0, 0x39	; 57
    139e:	0f 92       	push	r0
    13a0:	19 be       	out	0x39, r1	; 57
    13a2:	0b b6       	in	r0, 0x3b	; 59
    13a4:	0f 92       	push	r0
    13a6:	1b be       	out	0x3b, r1	; 59
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    13c0:	40 91 24 02 	lds	r20, 0x0224
    13c4:	50 91 25 02 	lds	r21, 0x0225
    13c8:	e0 91 08 21 	lds	r30, 0x2108
    13cc:	f0 91 09 21 	lds	r31, 0x2109
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	92 e0       	ldi	r25, 0x02	; 2
    13d6:	19 95       	eicall
}
    13d8:	ff 91       	pop	r31
    13da:	ef 91       	pop	r30
    13dc:	bf 91       	pop	r27
    13de:	af 91       	pop	r26
    13e0:	9f 91       	pop	r25
    13e2:	8f 91       	pop	r24
    13e4:	7f 91       	pop	r23
    13e6:	6f 91       	pop	r22
    13e8:	5f 91       	pop	r21
    13ea:	4f 91       	pop	r20
    13ec:	3f 91       	pop	r19
    13ee:	2f 91       	pop	r18
    13f0:	0f 90       	pop	r0
    13f2:	0b be       	out	0x3b, r0	; 59
    13f4:	0f 90       	pop	r0
    13f6:	09 be       	out	0x39, r0	; 57
    13f8:	0f 90       	pop	r0
    13fa:	08 be       	out	0x38, r0	; 56
    13fc:	0f 90       	pop	r0
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	0f 90       	pop	r0
    1402:	1f 90       	pop	r1
    1404:	18 95       	reti

00001406 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1406:	1f 92       	push	r1
    1408:	0f 92       	push	r0
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	0f 92       	push	r0
    140e:	11 24       	eor	r1, r1
    1410:	08 b6       	in	r0, 0x38	; 56
    1412:	0f 92       	push	r0
    1414:	18 be       	out	0x38, r1	; 56
    1416:	09 b6       	in	r0, 0x39	; 57
    1418:	0f 92       	push	r0
    141a:	19 be       	out	0x39, r1	; 57
    141c:	0b b6       	in	r0, 0x3b	; 59
    141e:	0f 92       	push	r0
    1420:	1b be       	out	0x3b, r1	; 59
    1422:	2f 93       	push	r18
    1424:	3f 93       	push	r19
    1426:	4f 93       	push	r20
    1428:	5f 93       	push	r21
    142a:	6f 93       	push	r22
    142c:	7f 93       	push	r23
    142e:	8f 93       	push	r24
    1430:	9f 93       	push	r25
    1432:	af 93       	push	r26
    1434:	bf 93       	push	r27
    1436:	ef 93       	push	r30
    1438:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    143a:	40 91 2c 02 	lds	r20, 0x022C
    143e:	50 91 2d 02 	lds	r21, 0x022D
    1442:	e0 91 08 21 	lds	r30, 0x2108
    1446:	f0 91 09 21 	lds	r31, 0x2109
    144a:	62 e0       	ldi	r22, 0x02	; 2
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	92 e0       	ldi	r25, 0x02	; 2
    1450:	19 95       	eicall
}
    1452:	ff 91       	pop	r31
    1454:	ef 91       	pop	r30
    1456:	bf 91       	pop	r27
    1458:	af 91       	pop	r26
    145a:	9f 91       	pop	r25
    145c:	8f 91       	pop	r24
    145e:	7f 91       	pop	r23
    1460:	6f 91       	pop	r22
    1462:	5f 91       	pop	r21
    1464:	4f 91       	pop	r20
    1466:	3f 91       	pop	r19
    1468:	2f 91       	pop	r18
    146a:	0f 90       	pop	r0
    146c:	0b be       	out	0x3b, r0	; 59
    146e:	0f 90       	pop	r0
    1470:	09 be       	out	0x39, r0	; 57
    1472:	0f 90       	pop	r0
    1474:	08 be       	out	0x38, r0	; 56
    1476:	0f 90       	pop	r0
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	0f 90       	pop	r0
    147c:	1f 90       	pop	r1
    147e:	18 95       	reti

00001480 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    1480:	1f 92       	push	r1
    1482:	0f 92       	push	r0
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	0f 92       	push	r0
    1488:	11 24       	eor	r1, r1
    148a:	08 b6       	in	r0, 0x38	; 56
    148c:	0f 92       	push	r0
    148e:	18 be       	out	0x38, r1	; 56
    1490:	09 b6       	in	r0, 0x39	; 57
    1492:	0f 92       	push	r0
    1494:	19 be       	out	0x39, r1	; 57
    1496:	0b b6       	in	r0, 0x3b	; 59
    1498:	0f 92       	push	r0
    149a:	1b be       	out	0x3b, r1	; 59
    149c:	2f 93       	push	r18
    149e:	3f 93       	push	r19
    14a0:	4f 93       	push	r20
    14a2:	5f 93       	push	r21
    14a4:	6f 93       	push	r22
    14a6:	7f 93       	push	r23
    14a8:	8f 93       	push	r24
    14aa:	9f 93       	push	r25
    14ac:	af 93       	push	r26
    14ae:	bf 93       	push	r27
    14b0:	ef 93       	push	r30
    14b2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    14b4:	40 91 34 02 	lds	r20, 0x0234
    14b8:	50 91 35 02 	lds	r21, 0x0235
    14bc:	e0 91 08 21 	lds	r30, 0x2108
    14c0:	f0 91 09 21 	lds	r31, 0x2109
    14c4:	64 e0       	ldi	r22, 0x04	; 4
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	92 e0       	ldi	r25, 0x02	; 2
    14ca:	19 95       	eicall
}
    14cc:	ff 91       	pop	r31
    14ce:	ef 91       	pop	r30
    14d0:	bf 91       	pop	r27
    14d2:	af 91       	pop	r26
    14d4:	9f 91       	pop	r25
    14d6:	8f 91       	pop	r24
    14d8:	7f 91       	pop	r23
    14da:	6f 91       	pop	r22
    14dc:	5f 91       	pop	r21
    14de:	4f 91       	pop	r20
    14e0:	3f 91       	pop	r19
    14e2:	2f 91       	pop	r18
    14e4:	0f 90       	pop	r0
    14e6:	0b be       	out	0x3b, r0	; 59
    14e8:	0f 90       	pop	r0
    14ea:	09 be       	out	0x39, r0	; 57
    14ec:	0f 90       	pop	r0
    14ee:	08 be       	out	0x38, r0	; 56
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    14fa:	1f 92       	push	r1
    14fc:	0f 92       	push	r0
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1
    1504:	08 b6       	in	r0, 0x38	; 56
    1506:	0f 92       	push	r0
    1508:	18 be       	out	0x38, r1	; 56
    150a:	09 b6       	in	r0, 0x39	; 57
    150c:	0f 92       	push	r0
    150e:	19 be       	out	0x39, r1	; 57
    1510:	0b b6       	in	r0, 0x3b	; 59
    1512:	0f 92       	push	r0
    1514:	1b be       	out	0x3b, r1	; 59
    1516:	2f 93       	push	r18
    1518:	3f 93       	push	r19
    151a:	4f 93       	push	r20
    151c:	5f 93       	push	r21
    151e:	6f 93       	push	r22
    1520:	7f 93       	push	r23
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	af 93       	push	r26
    1528:	bf 93       	push	r27
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    152e:	40 91 3c 02 	lds	r20, 0x023C
    1532:	50 91 3d 02 	lds	r21, 0x023D
    1536:	e0 91 08 21 	lds	r30, 0x2108
    153a:	f0 91 09 21 	lds	r31, 0x2109
    153e:	68 e0       	ldi	r22, 0x08	; 8
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	92 e0       	ldi	r25, 0x02	; 2
    1544:	19 95       	eicall
}
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	bf 91       	pop	r27
    154c:	af 91       	pop	r26
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	7f 91       	pop	r23
    1554:	6f 91       	pop	r22
    1556:	5f 91       	pop	r21
    1558:	4f 91       	pop	r20
    155a:	3f 91       	pop	r19
    155c:	2f 91       	pop	r18
    155e:	0f 90       	pop	r0
    1560:	0b be       	out	0x3b, r0	; 59
    1562:	0f 90       	pop	r0
    1564:	09 be       	out	0x39, r0	; 57
    1566:	0f 90       	pop	r0
    1568:	08 be       	out	0x38, r0	; 56
    156a:	0f 90       	pop	r0
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	0f 90       	pop	r0
    1570:	1f 90       	pop	r1
    1572:	18 95       	reti

00001574 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    1574:	1f 92       	push	r1
    1576:	0f 92       	push	r0
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	0f 92       	push	r0
    157c:	11 24       	eor	r1, r1
    157e:	08 b6       	in	r0, 0x38	; 56
    1580:	0f 92       	push	r0
    1582:	18 be       	out	0x38, r1	; 56
    1584:	09 b6       	in	r0, 0x39	; 57
    1586:	0f 92       	push	r0
    1588:	19 be       	out	0x39, r1	; 57
    158a:	0b b6       	in	r0, 0x3b	; 59
    158c:	0f 92       	push	r0
    158e:	1b be       	out	0x3b, r1	; 59
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	4f 93       	push	r20
    1596:	5f 93       	push	r21
    1598:	6f 93       	push	r22
    159a:	7f 93       	push	r23
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    15a8:	40 91 64 02 	lds	r20, 0x0264
    15ac:	50 91 65 02 	lds	r21, 0x0265
    15b0:	e0 91 06 21 	lds	r30, 0x2106
    15b4:	f0 91 07 21 	lds	r31, 0x2107
    15b8:	61 e0       	ldi	r22, 0x01	; 1
    15ba:	80 e4       	ldi	r24, 0x40	; 64
    15bc:	92 e0       	ldi	r25, 0x02	; 2
    15be:	19 95       	eicall
}
    15c0:	ff 91       	pop	r31
    15c2:	ef 91       	pop	r30
    15c4:	bf 91       	pop	r27
    15c6:	af 91       	pop	r26
    15c8:	9f 91       	pop	r25
    15ca:	8f 91       	pop	r24
    15cc:	7f 91       	pop	r23
    15ce:	6f 91       	pop	r22
    15d0:	5f 91       	pop	r21
    15d2:	4f 91       	pop	r20
    15d4:	3f 91       	pop	r19
    15d6:	2f 91       	pop	r18
    15d8:	0f 90       	pop	r0
    15da:	0b be       	out	0x3b, r0	; 59
    15dc:	0f 90       	pop	r0
    15de:	09 be       	out	0x39, r0	; 57
    15e0:	0f 90       	pop	r0
    15e2:	08 be       	out	0x38, r0	; 56
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	0f 90       	pop	r0
    15ea:	1f 90       	pop	r1
    15ec:	18 95       	reti

000015ee <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    15ee:	1f 92       	push	r1
    15f0:	0f 92       	push	r0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	0f 92       	push	r0
    15f6:	11 24       	eor	r1, r1
    15f8:	08 b6       	in	r0, 0x38	; 56
    15fa:	0f 92       	push	r0
    15fc:	18 be       	out	0x38, r1	; 56
    15fe:	09 b6       	in	r0, 0x39	; 57
    1600:	0f 92       	push	r0
    1602:	19 be       	out	0x39, r1	; 57
    1604:	0b b6       	in	r0, 0x3b	; 59
    1606:	0f 92       	push	r0
    1608:	1b be       	out	0x3b, r1	; 59
    160a:	2f 93       	push	r18
    160c:	3f 93       	push	r19
    160e:	4f 93       	push	r20
    1610:	5f 93       	push	r21
    1612:	6f 93       	push	r22
    1614:	7f 93       	push	r23
    1616:	8f 93       	push	r24
    1618:	9f 93       	push	r25
    161a:	af 93       	push	r26
    161c:	bf 93       	push	r27
    161e:	ef 93       	push	r30
    1620:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1622:	40 91 6c 02 	lds	r20, 0x026C
    1626:	50 91 6d 02 	lds	r21, 0x026D
    162a:	e0 91 06 21 	lds	r30, 0x2106
    162e:	f0 91 07 21 	lds	r31, 0x2107
    1632:	62 e0       	ldi	r22, 0x02	; 2
    1634:	80 e4       	ldi	r24, 0x40	; 64
    1636:	92 e0       	ldi	r25, 0x02	; 2
    1638:	19 95       	eicall
}
    163a:	ff 91       	pop	r31
    163c:	ef 91       	pop	r30
    163e:	bf 91       	pop	r27
    1640:	af 91       	pop	r26
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	7f 91       	pop	r23
    1648:	6f 91       	pop	r22
    164a:	5f 91       	pop	r21
    164c:	4f 91       	pop	r20
    164e:	3f 91       	pop	r19
    1650:	2f 91       	pop	r18
    1652:	0f 90       	pop	r0
    1654:	0b be       	out	0x3b, r0	; 59
    1656:	0f 90       	pop	r0
    1658:	09 be       	out	0x39, r0	; 57
    165a:	0f 90       	pop	r0
    165c:	08 be       	out	0x38, r0	; 56
    165e:	0f 90       	pop	r0
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	0f 90       	pop	r0
    1664:	1f 90       	pop	r1
    1666:	18 95       	reti

00001668 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1668:	1f 92       	push	r1
    166a:	0f 92       	push	r0
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	0f 92       	push	r0
    1670:	11 24       	eor	r1, r1
    1672:	08 b6       	in	r0, 0x38	; 56
    1674:	0f 92       	push	r0
    1676:	18 be       	out	0x38, r1	; 56
    1678:	09 b6       	in	r0, 0x39	; 57
    167a:	0f 92       	push	r0
    167c:	19 be       	out	0x39, r1	; 57
    167e:	0b b6       	in	r0, 0x3b	; 59
    1680:	0f 92       	push	r0
    1682:	1b be       	out	0x3b, r1	; 59
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    169c:	40 91 74 02 	lds	r20, 0x0274
    16a0:	50 91 75 02 	lds	r21, 0x0275
    16a4:	e0 91 06 21 	lds	r30, 0x2106
    16a8:	f0 91 07 21 	lds	r31, 0x2107
    16ac:	64 e0       	ldi	r22, 0x04	; 4
    16ae:	80 e4       	ldi	r24, 0x40	; 64
    16b0:	92 e0       	ldi	r25, 0x02	; 2
    16b2:	19 95       	eicall
}
    16b4:	ff 91       	pop	r31
    16b6:	ef 91       	pop	r30
    16b8:	bf 91       	pop	r27
    16ba:	af 91       	pop	r26
    16bc:	9f 91       	pop	r25
    16be:	8f 91       	pop	r24
    16c0:	7f 91       	pop	r23
    16c2:	6f 91       	pop	r22
    16c4:	5f 91       	pop	r21
    16c6:	4f 91       	pop	r20
    16c8:	3f 91       	pop	r19
    16ca:	2f 91       	pop	r18
    16cc:	0f 90       	pop	r0
    16ce:	0b be       	out	0x3b, r0	; 59
    16d0:	0f 90       	pop	r0
    16d2:	09 be       	out	0x39, r0	; 57
    16d4:	0f 90       	pop	r0
    16d6:	08 be       	out	0x38, r0	; 56
    16d8:	0f 90       	pop	r0
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	0f 90       	pop	r0
    16de:	1f 90       	pop	r1
    16e0:	18 95       	reti

000016e2 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    16e2:	1f 92       	push	r1
    16e4:	0f 92       	push	r0
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	0f 92       	push	r0
    16ea:	11 24       	eor	r1, r1
    16ec:	08 b6       	in	r0, 0x38	; 56
    16ee:	0f 92       	push	r0
    16f0:	18 be       	out	0x38, r1	; 56
    16f2:	09 b6       	in	r0, 0x39	; 57
    16f4:	0f 92       	push	r0
    16f6:	19 be       	out	0x39, r1	; 57
    16f8:	0b b6       	in	r0, 0x3b	; 59
    16fa:	0f 92       	push	r0
    16fc:	1b be       	out	0x3b, r1	; 59
    16fe:	2f 93       	push	r18
    1700:	3f 93       	push	r19
    1702:	4f 93       	push	r20
    1704:	5f 93       	push	r21
    1706:	6f 93       	push	r22
    1708:	7f 93       	push	r23
    170a:	8f 93       	push	r24
    170c:	9f 93       	push	r25
    170e:	af 93       	push	r26
    1710:	bf 93       	push	r27
    1712:	ef 93       	push	r30
    1714:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1716:	40 91 7c 02 	lds	r20, 0x027C
    171a:	50 91 7d 02 	lds	r21, 0x027D
    171e:	e0 91 06 21 	lds	r30, 0x2106
    1722:	f0 91 07 21 	lds	r31, 0x2107
    1726:	68 e0       	ldi	r22, 0x08	; 8
    1728:	80 e4       	ldi	r24, 0x40	; 64
    172a:	92 e0       	ldi	r25, 0x02	; 2
    172c:	19 95       	eicall
}
    172e:	ff 91       	pop	r31
    1730:	ef 91       	pop	r30
    1732:	bf 91       	pop	r27
    1734:	af 91       	pop	r26
    1736:	9f 91       	pop	r25
    1738:	8f 91       	pop	r24
    173a:	7f 91       	pop	r23
    173c:	6f 91       	pop	r22
    173e:	5f 91       	pop	r21
    1740:	4f 91       	pop	r20
    1742:	3f 91       	pop	r19
    1744:	2f 91       	pop	r18
    1746:	0f 90       	pop	r0
    1748:	0b be       	out	0x3b, r0	; 59
    174a:	0f 90       	pop	r0
    174c:	09 be       	out	0x39, r0	; 57
    174e:	0f 90       	pop	r0
    1750:	08 be       	out	0x38, r0	; 56
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	0f 90       	pop	r0
    1758:	1f 90       	pop	r1
    175a:	18 95       	reti

0000175c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    175c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    175e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1760:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1762:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1764:	60 83       	st	Z, r22
	ret                             // Return to caller
    1766:	08 95       	ret

00001768 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1768:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    176c:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    176e:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1770:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1774:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1776:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    177a:	08 95       	ret

0000177c <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    177c:	fc 01       	movw	r30, r24
    177e:	91 81       	ldd	r25, Z+1	; 0x01
    1780:	95 ff       	sbrs	r25, 5
    1782:	fd cf       	rjmp	.-6      	; 0x177e <usart_putchar+0x2>
    1784:	60 83       	st	Z, r22
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	08 95       	ret

0000178c <usart_getchar>:
    178c:	fc 01       	movw	r30, r24
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	99 23       	and	r25, r25
    1792:	ec f7       	brge	.-6      	; 0x178e <usart_getchar+0x2>
    1794:	80 81       	ld	r24, Z
    1796:	08 95       	ret

00001798 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1798:	2f 92       	push	r2
    179a:	3f 92       	push	r3
    179c:	4f 92       	push	r4
    179e:	5f 92       	push	r5
    17a0:	6f 92       	push	r6
    17a2:	7f 92       	push	r7
    17a4:	8f 92       	push	r8
    17a6:	9f 92       	push	r9
    17a8:	af 92       	push	r10
    17aa:	bf 92       	push	r11
    17ac:	cf 92       	push	r12
    17ae:	df 92       	push	r13
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	1c 01       	movw	r2, r24
    17bc:	2a 01       	movw	r4, r20
    17be:	3b 01       	movw	r6, r22
    17c0:	48 01       	movw	r8, r16
    17c2:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    17c4:	d9 01       	movw	r26, r18
    17c6:	c8 01       	movw	r24, r16
    17c8:	68 94       	set
    17ca:	12 f8       	bld	r1, 2
    17cc:	b6 95       	lsr	r27
    17ce:	a7 95       	ror	r26
    17d0:	97 95       	ror	r25
    17d2:	87 95       	ror	r24
    17d4:	16 94       	lsr	r1
    17d6:	d1 f7       	brne	.-12     	; 0x17cc <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    17d8:	b9 01       	movw	r22, r18
    17da:	a8 01       	movw	r20, r16
    17dc:	03 2e       	mov	r0, r19
    17de:	36 e1       	ldi	r19, 0x16	; 22
    17e0:	76 95       	lsr	r23
    17e2:	67 95       	ror	r22
    17e4:	57 95       	ror	r21
    17e6:	47 95       	ror	r20
    17e8:	3a 95       	dec	r19
    17ea:	d1 f7       	brne	.-12     	; 0x17e0 <usart_set_baudrate+0x48>
    17ec:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    17ee:	f1 01       	movw	r30, r2
    17f0:	24 81       	ldd	r18, Z+4	; 0x04
    17f2:	22 fd       	sbrc	r18, 2
    17f4:	08 c0       	rjmp	.+16     	; 0x1806 <usart_set_baudrate+0x6e>
		max_rate /= 2;
    17f6:	b6 95       	lsr	r27
    17f8:	a7 95       	ror	r26
    17fa:	97 95       	ror	r25
    17fc:	87 95       	ror	r24
		min_rate /= 2;
    17fe:	76 95       	lsr	r23
    1800:	67 95       	ror	r22
    1802:	57 95       	ror	r21
    1804:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1806:	84 15       	cp	r24, r4
    1808:	95 05       	cpc	r25, r5
    180a:	a6 05       	cpc	r26, r6
    180c:	b7 05       	cpc	r27, r7
    180e:	08 f4       	brcc	.+2      	; 0x1812 <usart_set_baudrate+0x7a>
    1810:	aa c0       	rjmp	.+340    	; 0x1966 <usart_set_baudrate+0x1ce>
    1812:	44 16       	cp	r4, r20
    1814:	55 06       	cpc	r5, r21
    1816:	66 06       	cpc	r6, r22
    1818:	77 06       	cpc	r7, r23
    181a:	08 f4       	brcc	.+2      	; 0x181e <usart_set_baudrate+0x86>
    181c:	a6 c0       	rjmp	.+332    	; 0x196a <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    181e:	f1 01       	movw	r30, r2
    1820:	84 81       	ldd	r24, Z+4	; 0x04
    1822:	82 fd       	sbrc	r24, 2
    1824:	04 c0       	rjmp	.+8      	; 0x182e <usart_set_baudrate+0x96>
		baud *= 2;
    1826:	44 0c       	add	r4, r4
    1828:	55 1c       	adc	r5, r5
    182a:	66 1c       	adc	r6, r6
    182c:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    182e:	c5 01       	movw	r24, r10
    1830:	b4 01       	movw	r22, r8
    1832:	a3 01       	movw	r20, r6
    1834:	92 01       	movw	r18, r4
    1836:	de d7       	rcall	.+4028   	; 0x27f4 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1838:	2f 3f       	cpi	r18, 0xFF	; 255
    183a:	31 05       	cpc	r19, r1
    183c:	41 05       	cpc	r20, r1
    183e:	51 05       	cpc	r21, r1
    1840:	08 f4       	brcc	.+2      	; 0x1844 <usart_set_baudrate+0xac>
    1842:	95 c0       	rjmp	.+298    	; 0x196e <usart_set_baudrate+0x1d6>
    1844:	c1 2c       	mov	r12, r1
    1846:	d1 2c       	mov	r13, r1
    1848:	76 01       	movw	r14, r12
    184a:	ca 94       	dec	r12
    184c:	c9 ef       	ldi	r28, 0xF9	; 249
    184e:	05 c0       	rjmp	.+10     	; 0x185a <usart_set_baudrate+0xc2>
    1850:	2c 15       	cp	r18, r12
    1852:	3d 05       	cpc	r19, r13
    1854:	4e 05       	cpc	r20, r14
    1856:	5f 05       	cpc	r21, r15
    1858:	68 f0       	brcs	.+26     	; 0x1874 <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
    185a:	cc 0c       	add	r12, r12
    185c:	dd 1c       	adc	r13, r13
    185e:	ee 1c       	adc	r14, r14
    1860:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    1862:	cd 3f       	cpi	r28, 0xFD	; 253
    1864:	14 f4       	brge	.+4      	; 0x186a <usart_set_baudrate+0xd2>
			limit |= 1;
    1866:	68 94       	set
    1868:	c0 f8       	bld	r12, 0
    186a:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    186c:	c7 30       	cpi	r28, 0x07	; 7
    186e:	81 f7       	brne	.-32     	; 0x1850 <usart_set_baudrate+0xb8>
    1870:	8c 2f       	mov	r24, r28
    1872:	54 c0       	rjmp	.+168    	; 0x191c <usart_set_baudrate+0x184>
    1874:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1876:	cc 23       	and	r28, r28
    1878:	0c f0       	brlt	.+2      	; 0x187c <usart_set_baudrate+0xe4>
    187a:	50 c0       	rjmp	.+160    	; 0x191c <usart_set_baudrate+0x184>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    187c:	d3 01       	movw	r26, r6
    187e:	c2 01       	movw	r24, r4
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	aa 1f       	adc	r26, r26
    1886:	bb 1f       	adc	r27, r27
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	aa 1f       	adc	r26, r26
    188e:	bb 1f       	adc	r27, r27
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	aa 1f       	adc	r26, r26
    1896:	bb 1f       	adc	r27, r27
    1898:	85 01       	movw	r16, r10
    189a:	74 01       	movw	r14, r8
    189c:	e8 1a       	sub	r14, r24
    189e:	f9 0a       	sbc	r15, r25
    18a0:	0a 0b       	sbc	r16, r26
    18a2:	1b 0b       	sbc	r17, r27
    18a4:	d8 01       	movw	r26, r16
    18a6:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    18a8:	ce 3f       	cpi	r28, 0xFE	; 254
    18aa:	ec f4       	brge	.+58     	; 0x18e6 <usart_set_baudrate+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    18ac:	2d ef       	ldi	r18, 0xFD	; 253
    18ae:	3f ef       	ldi	r19, 0xFF	; 255
    18b0:	2c 1b       	sub	r18, r28
    18b2:	31 09       	sbc	r19, r1
    18b4:	c7 fd       	sbrc	r28, 7
    18b6:	33 95       	inc	r19
    18b8:	04 c0       	rjmp	.+8      	; 0x18c2 <usart_set_baudrate+0x12a>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	aa 1f       	adc	r26, r26
    18c0:	bb 1f       	adc	r27, r27
    18c2:	2a 95       	dec	r18
    18c4:	d2 f7       	brpl	.-12     	; 0x18ba <usart_set_baudrate+0x122>
    18c6:	73 01       	movw	r14, r6
    18c8:	62 01       	movw	r12, r4
    18ca:	f6 94       	lsr	r15
    18cc:	e7 94       	ror	r14
    18ce:	d7 94       	ror	r13
    18d0:	c7 94       	ror	r12
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	6c 0d       	add	r22, r12
    18d8:	7d 1d       	adc	r23, r13
    18da:	8e 1d       	adc	r24, r14
    18dc:	9f 1d       	adc	r25, r15
    18de:	a3 01       	movw	r20, r6
    18e0:	92 01       	movw	r18, r4
    18e2:	88 d7       	rcall	.+3856   	; 0x27f4 <__udivmodsi4>
    18e4:	36 c0       	rjmp	.+108    	; 0x1952 <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
    18e6:	23 e0       	ldi	r18, 0x03	; 3
    18e8:	2c 0f       	add	r18, r28
    18ea:	83 01       	movw	r16, r6
    18ec:	72 01       	movw	r14, r4
    18ee:	04 c0       	rjmp	.+8      	; 0x18f8 <usart_set_baudrate+0x160>
    18f0:	ee 0c       	add	r14, r14
    18f2:	ff 1c       	adc	r15, r15
    18f4:	00 1f       	adc	r16, r16
    18f6:	11 1f       	adc	r17, r17
    18f8:	2a 95       	dec	r18
    18fa:	d2 f7       	brpl	.-12     	; 0x18f0 <usart_set_baudrate+0x158>
    18fc:	a8 01       	movw	r20, r16
    18fe:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
    1900:	67 01       	movw	r12, r14
    1902:	78 01       	movw	r14, r16
    1904:	f6 94       	lsr	r15
    1906:	e7 94       	ror	r14
    1908:	d7 94       	ror	r13
    190a:	c7 94       	ror	r12
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	6c 0d       	add	r22, r12
    1912:	7d 1d       	adc	r23, r13
    1914:	8e 1d       	adc	r24, r14
    1916:	9f 1d       	adc	r25, r15
    1918:	6d d7       	rcall	.+3802   	; 0x27f4 <__udivmodsi4>
    191a:	1b c0       	rjmp	.+54     	; 0x1952 <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    191c:	8d 5f       	subi	r24, 0xFD	; 253
    191e:	a3 01       	movw	r20, r6
    1920:	92 01       	movw	r18, r4
    1922:	04 c0       	rjmp	.+8      	; 0x192c <usart_set_baudrate+0x194>
    1924:	22 0f       	add	r18, r18
    1926:	33 1f       	adc	r19, r19
    1928:	44 1f       	adc	r20, r20
    192a:	55 1f       	adc	r21, r21
    192c:	8a 95       	dec	r24
    192e:	d2 f7       	brpl	.-12     	; 0x1924 <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
    1930:	da 01       	movw	r26, r20
    1932:	c9 01       	movw	r24, r18
    1934:	b6 95       	lsr	r27
    1936:	a7 95       	ror	r26
    1938:	97 95       	ror	r25
    193a:	87 95       	ror	r24
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	68 0d       	add	r22, r8
    1942:	79 1d       	adc	r23, r9
    1944:	8a 1d       	adc	r24, r10
    1946:	9b 1d       	adc	r25, r11
    1948:	55 d7       	rcall	.+3754   	; 0x27f4 <__udivmodsi4>
    194a:	21 50       	subi	r18, 0x01	; 1
    194c:	31 09       	sbc	r19, r1
    194e:	41 09       	sbc	r20, r1
    1950:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1952:	83 2f       	mov	r24, r19
    1954:	8f 70       	andi	r24, 0x0F	; 15
    1956:	c2 95       	swap	r28
    1958:	c0 7f       	andi	r28, 0xF0	; 240
    195a:	c8 2b       	or	r28, r24
    195c:	f1 01       	movw	r30, r2
    195e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1960:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	1c c0       	rjmp	.+56     	; 0x199e <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	1a c0       	rjmp	.+52     	; 0x199e <usart_set_baudrate+0x206>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	18 c0       	rjmp	.+48     	; 0x199e <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    196e:	d3 01       	movw	r26, r6
    1970:	c2 01       	movw	r24, r4
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	aa 1f       	adc	r26, r26
    1978:	bb 1f       	adc	r27, r27
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	aa 1f       	adc	r26, r26
    1980:	bb 1f       	adc	r27, r27
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	aa 1f       	adc	r26, r26
    1988:	bb 1f       	adc	r27, r27
    198a:	85 01       	movw	r16, r10
    198c:	74 01       	movw	r14, r8
    198e:	e8 1a       	sub	r14, r24
    1990:	f9 0a       	sbc	r15, r25
    1992:	0a 0b       	sbc	r16, r26
    1994:	1b 0b       	sbc	r17, r27
    1996:	d8 01       	movw	r26, r16
    1998:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    199a:	c9 ef       	ldi	r28, 0xF9	; 249
    199c:	87 cf       	rjmp	.-242    	; 0x18ac <usart_set_baudrate+0x114>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	ff 90       	pop	r15
    19a6:	ef 90       	pop	r14
    19a8:	df 90       	pop	r13
    19aa:	cf 90       	pop	r12
    19ac:	bf 90       	pop	r11
    19ae:	af 90       	pop	r10
    19b0:	9f 90       	pop	r9
    19b2:	8f 90       	pop	r8
    19b4:	7f 90       	pop	r7
    19b6:	6f 90       	pop	r6
    19b8:	5f 90       	pop	r5
    19ba:	4f 90       	pop	r4
    19bc:	3f 90       	pop	r3
    19be:	2f 90       	pop	r2
    19c0:	08 95       	ret

000019c2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	ec 01       	movw	r28, r24
    19cc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <usart_init_rs232+0x12>
    19d2:	36 c1       	rjmp	.+620    	; 0x1c40 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    19d4:	80 3c       	cpi	r24, 0xC0	; 192
    19d6:	91 05       	cpc	r25, r1
    19d8:	21 f4       	brne	.+8      	; 0x19e2 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    19da:	60 e1       	ldi	r22, 0x10	; 16
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	e1 db       	rcall	.-2110   	; 0x11a2 <sysclk_enable_module>
    19e0:	2f c1       	rjmp	.+606    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    19e2:	c0 34       	cpi	r28, 0x40	; 64
    19e4:	84 e0       	ldi	r24, 0x04	; 4
    19e6:	d8 07       	cpc	r29, r24
    19e8:	21 f4       	brne	.+8      	; 0x19f2 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    19ea:	68 e0       	ldi	r22, 0x08	; 8
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	d9 db       	rcall	.-2126   	; 0x11a2 <sysclk_enable_module>
    19f0:	27 c1       	rjmp	.+590    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    19f2:	c1 15       	cp	r28, r1
    19f4:	e4 e0       	ldi	r30, 0x04	; 4
    19f6:	de 07       	cpc	r29, r30
    19f8:	21 f4       	brne	.+8      	; 0x1a02 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    19fa:	64 e0       	ldi	r22, 0x04	; 4
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	d1 db       	rcall	.-2142   	; 0x11a2 <sysclk_enable_module>
    1a00:	1f c1       	rjmp	.+574    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1a02:	c0 38       	cpi	r28, 0x80	; 128
    1a04:	f1 e0       	ldi	r31, 0x01	; 1
    1a06:	df 07       	cpc	r29, r31
    1a08:	21 f4       	brne	.+8      	; 0x1a12 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1a0a:	62 e0       	ldi	r22, 0x02	; 2
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	c9 db       	rcall	.-2158   	; 0x11a2 <sysclk_enable_module>
    1a10:	17 c1       	rjmp	.+558    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1a12:	c1 15       	cp	r28, r1
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	d8 07       	cpc	r29, r24
    1a18:	21 f4       	brne	.+8      	; 0x1a22 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	c1 db       	rcall	.-2174   	; 0x11a2 <sysclk_enable_module>
    1a20:	0f c1       	rjmp	.+542    	; 0x1c40 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1a22:	c0 38       	cpi	r28, 0x80	; 128
    1a24:	e3 e0       	ldi	r30, 0x03	; 3
    1a26:	de 07       	cpc	r29, r30
    1a28:	21 f4       	brne	.+8      	; 0x1a32 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1a2a:	61 e0       	ldi	r22, 0x01	; 1
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	b9 db       	rcall	.-2190   	; 0x11a2 <sysclk_enable_module>
    1a30:	07 c1       	rjmp	.+526    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1a32:	c0 39       	cpi	r28, 0x90	; 144
    1a34:	f3 e0       	ldi	r31, 0x03	; 3
    1a36:	df 07       	cpc	r29, r31
    1a38:	21 f4       	brne	.+8      	; 0x1a42 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1a3a:	61 e0       	ldi	r22, 0x01	; 1
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	b1 db       	rcall	.-2206   	; 0x11a2 <sysclk_enable_module>
    1a40:	ff c0       	rjmp	.+510    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1a42:	c1 15       	cp	r28, r1
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	d8 07       	cpc	r29, r24
    1a48:	21 f4       	brne	.+8      	; 0x1a52 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	a9 db       	rcall	.-2222   	; 0x11a2 <sysclk_enable_module>
    1a50:	f7 c0       	rjmp	.+494    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1a52:	c0 34       	cpi	r28, 0x40	; 64
    1a54:	e2 e0       	ldi	r30, 0x02	; 2
    1a56:	de 07       	cpc	r29, r30
    1a58:	21 f4       	brne	.+8      	; 0x1a62 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1a5a:	62 e0       	ldi	r22, 0x02	; 2
    1a5c:	82 e0       	ldi	r24, 0x02	; 2
    1a5e:	a1 db       	rcall	.-2238   	; 0x11a2 <sysclk_enable_module>
    1a60:	ef c0       	rjmp	.+478    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1a62:	c1 15       	cp	r28, r1
    1a64:	f3 e0       	ldi	r31, 0x03	; 3
    1a66:	df 07       	cpc	r29, r31
    1a68:	21 f4       	brne	.+8      	; 0x1a72 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1a6a:	64 e0       	ldi	r22, 0x04	; 4
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	99 db       	rcall	.-2254   	; 0x11a2 <sysclk_enable_module>
    1a70:	e7 c0       	rjmp	.+462    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1a72:	c0 32       	cpi	r28, 0x20	; 32
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	d8 07       	cpc	r29, r24
    1a78:	21 f4       	brne	.+8      	; 0x1a82 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1a7a:	64 e0       	ldi	r22, 0x04	; 4
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	91 db       	rcall	.-2270   	; 0x11a2 <sysclk_enable_module>
    1a80:	df c0       	rjmp	.+446    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1a82:	c1 15       	cp	r28, r1
    1a84:	e8 e0       	ldi	r30, 0x08	; 8
    1a86:	de 07       	cpc	r29, r30
    1a88:	21 f4       	brne	.+8      	; 0x1a92 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1a8a:	61 e0       	ldi	r22, 0x01	; 1
    1a8c:	83 e0       	ldi	r24, 0x03	; 3
    1a8e:	89 db       	rcall	.-2286   	; 0x11a2 <sysclk_enable_module>
    1a90:	d7 c0       	rjmp	.+430    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1a92:	c1 15       	cp	r28, r1
    1a94:	f9 e0       	ldi	r31, 0x09	; 9
    1a96:	df 07       	cpc	r29, r31
    1a98:	21 f4       	brne	.+8      	; 0x1aa2 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	84 e0       	ldi	r24, 0x04	; 4
    1a9e:	81 db       	rcall	.-2302   	; 0x11a2 <sysclk_enable_module>
    1aa0:	cf c0       	rjmp	.+414    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1aa2:	c1 15       	cp	r28, r1
    1aa4:	8a e0       	ldi	r24, 0x0A	; 10
    1aa6:	d8 07       	cpc	r29, r24
    1aa8:	21 f4       	brne	.+8      	; 0x1ab2 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1aaa:	61 e0       	ldi	r22, 0x01	; 1
    1aac:	85 e0       	ldi	r24, 0x05	; 5
    1aae:	79 db       	rcall	.-2318   	; 0x11a2 <sysclk_enable_module>
    1ab0:	c7 c0       	rjmp	.+398    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1ab2:	c1 15       	cp	r28, r1
    1ab4:	eb e0       	ldi	r30, 0x0B	; 11
    1ab6:	de 07       	cpc	r29, r30
    1ab8:	21 f4       	brne	.+8      	; 0x1ac2 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	86 e0       	ldi	r24, 0x06	; 6
    1abe:	71 db       	rcall	.-2334   	; 0x11a2 <sysclk_enable_module>
    1ac0:	bf c0       	rjmp	.+382    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1ac2:	c0 34       	cpi	r28, 0x40	; 64
    1ac4:	f8 e0       	ldi	r31, 0x08	; 8
    1ac6:	df 07       	cpc	r29, r31
    1ac8:	21 f4       	brne	.+8      	; 0x1ad2 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1aca:	62 e0       	ldi	r22, 0x02	; 2
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	69 db       	rcall	.-2350   	; 0x11a2 <sysclk_enable_module>
    1ad0:	b7 c0       	rjmp	.+366    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1ad2:	c0 34       	cpi	r28, 0x40	; 64
    1ad4:	89 e0       	ldi	r24, 0x09	; 9
    1ad6:	d8 07       	cpc	r29, r24
    1ad8:	21 f4       	brne	.+8      	; 0x1ae2 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1ada:	62 e0       	ldi	r22, 0x02	; 2
    1adc:	84 e0       	ldi	r24, 0x04	; 4
    1ade:	61 db       	rcall	.-2366   	; 0x11a2 <sysclk_enable_module>
    1ae0:	af c0       	rjmp	.+350    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1ae2:	c0 34       	cpi	r28, 0x40	; 64
    1ae4:	ea e0       	ldi	r30, 0x0A	; 10
    1ae6:	de 07       	cpc	r29, r30
    1ae8:	21 f4       	brne	.+8      	; 0x1af2 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1aea:	62 e0       	ldi	r22, 0x02	; 2
    1aec:	85 e0       	ldi	r24, 0x05	; 5
    1aee:	59 db       	rcall	.-2382   	; 0x11a2 <sysclk_enable_module>
    1af0:	a7 c0       	rjmp	.+334    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1af2:	c0 34       	cpi	r28, 0x40	; 64
    1af4:	fb e0       	ldi	r31, 0x0B	; 11
    1af6:	df 07       	cpc	r29, r31
    1af8:	21 f4       	brne	.+8      	; 0x1b02 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1afa:	62 e0       	ldi	r22, 0x02	; 2
    1afc:	86 e0       	ldi	r24, 0x06	; 6
    1afe:	51 db       	rcall	.-2398   	; 0x11a2 <sysclk_enable_module>
    1b00:	9f c0       	rjmp	.+318    	; 0x1c40 <usart_init_rs232+0x27e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1b02:	c0 39       	cpi	r28, 0x90	; 144
    1b04:	88 e0       	ldi	r24, 0x08	; 8
    1b06:	d8 07       	cpc	r29, r24
    1b08:	21 f4       	brne	.+8      	; 0x1b12 <usart_init_rs232+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1b0a:	64 e0       	ldi	r22, 0x04	; 4
    1b0c:	83 e0       	ldi	r24, 0x03	; 3
    1b0e:	49 db       	rcall	.-2414   	; 0x11a2 <sysclk_enable_module>
    1b10:	97 c0       	rjmp	.+302    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1b12:	c0 39       	cpi	r28, 0x90	; 144
    1b14:	e9 e0       	ldi	r30, 0x09	; 9
    1b16:	de 07       	cpc	r29, r30
    1b18:	21 f4       	brne	.+8      	; 0x1b22 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b1a:	64 e0       	ldi	r22, 0x04	; 4
    1b1c:	84 e0       	ldi	r24, 0x04	; 4
    1b1e:	41 db       	rcall	.-2430   	; 0x11a2 <sysclk_enable_module>
    1b20:	8f c0       	rjmp	.+286    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1b22:	c0 39       	cpi	r28, 0x90	; 144
    1b24:	fa e0       	ldi	r31, 0x0A	; 10
    1b26:	df 07       	cpc	r29, r31
    1b28:	21 f4       	brne	.+8      	; 0x1b32 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1b2a:	64 e0       	ldi	r22, 0x04	; 4
    1b2c:	85 e0       	ldi	r24, 0x05	; 5
    1b2e:	39 db       	rcall	.-2446   	; 0x11a2 <sysclk_enable_module>
    1b30:	87 c0       	rjmp	.+270    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1b32:	c0 39       	cpi	r28, 0x90	; 144
    1b34:	8b e0       	ldi	r24, 0x0B	; 11
    1b36:	d8 07       	cpc	r29, r24
    1b38:	21 f4       	brne	.+8      	; 0x1b42 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1b3a:	64 e0       	ldi	r22, 0x04	; 4
    1b3c:	86 e0       	ldi	r24, 0x06	; 6
    1b3e:	31 db       	rcall	.-2462   	; 0x11a2 <sysclk_enable_module>
    1b40:	7f c0       	rjmp	.+254    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1b42:	c0 3c       	cpi	r28, 0xC0	; 192
    1b44:	e8 e0       	ldi	r30, 0x08	; 8
    1b46:	de 07       	cpc	r29, r30
    1b48:	21 f4       	brne	.+8      	; 0x1b52 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1b4a:	68 e0       	ldi	r22, 0x08	; 8
    1b4c:	83 e0       	ldi	r24, 0x03	; 3
    1b4e:	29 db       	rcall	.-2478   	; 0x11a2 <sysclk_enable_module>
    1b50:	77 c0       	rjmp	.+238    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1b52:	c0 3c       	cpi	r28, 0xC0	; 192
    1b54:	f9 e0       	ldi	r31, 0x09	; 9
    1b56:	df 07       	cpc	r29, r31
    1b58:	21 f4       	brne	.+8      	; 0x1b62 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1b5a:	68 e0       	ldi	r22, 0x08	; 8
    1b5c:	84 e0       	ldi	r24, 0x04	; 4
    1b5e:	21 db       	rcall	.-2494   	; 0x11a2 <sysclk_enable_module>
    1b60:	6f c0       	rjmp	.+222    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1b62:	c0 3c       	cpi	r28, 0xC0	; 192
    1b64:	8a e0       	ldi	r24, 0x0A	; 10
    1b66:	d8 07       	cpc	r29, r24
    1b68:	21 f4       	brne	.+8      	; 0x1b72 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1b6a:	68 e0       	ldi	r22, 0x08	; 8
    1b6c:	85 e0       	ldi	r24, 0x05	; 5
    1b6e:	19 db       	rcall	.-2510   	; 0x11a2 <sysclk_enable_module>
    1b70:	67 c0       	rjmp	.+206    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1b72:	c0 3c       	cpi	r28, 0xC0	; 192
    1b74:	eb e0       	ldi	r30, 0x0B	; 11
    1b76:	de 07       	cpc	r29, r30
    1b78:	21 f4       	brne	.+8      	; 0x1b82 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1b7a:	68 e0       	ldi	r22, 0x08	; 8
    1b7c:	86 e0       	ldi	r24, 0x06	; 6
    1b7e:	11 db       	rcall	.-2526   	; 0x11a2 <sysclk_enable_module>
    1b80:	5f c0       	rjmp	.+190    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1b82:	c0 3a       	cpi	r28, 0xA0	; 160
    1b84:	f8 e0       	ldi	r31, 0x08	; 8
    1b86:	df 07       	cpc	r29, r31
    1b88:	21 f4       	brne	.+8      	; 0x1b92 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1b8a:	60 e1       	ldi	r22, 0x10	; 16
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	09 db       	rcall	.-2542   	; 0x11a2 <sysclk_enable_module>
    1b90:	57 c0       	rjmp	.+174    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1b92:	c0 3a       	cpi	r28, 0xA0	; 160
    1b94:	89 e0       	ldi	r24, 0x09	; 9
    1b96:	d8 07       	cpc	r29, r24
    1b98:	21 f4       	brne	.+8      	; 0x1ba2 <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1b9a:	60 e1       	ldi	r22, 0x10	; 16
    1b9c:	84 e0       	ldi	r24, 0x04	; 4
    1b9e:	01 db       	rcall	.-2558   	; 0x11a2 <sysclk_enable_module>
    1ba0:	4f c0       	rjmp	.+158    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1ba2:	c0 3a       	cpi	r28, 0xA0	; 160
    1ba4:	ea e0       	ldi	r30, 0x0A	; 10
    1ba6:	de 07       	cpc	r29, r30
    1ba8:	21 f4       	brne	.+8      	; 0x1bb2 <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1baa:	60 e1       	ldi	r22, 0x10	; 16
    1bac:	85 e0       	ldi	r24, 0x05	; 5
    1bae:	f9 da       	rcall	.-2574   	; 0x11a2 <sysclk_enable_module>
    1bb0:	47 c0       	rjmp	.+142    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1bb2:	c0 3a       	cpi	r28, 0xA0	; 160
    1bb4:	fb e0       	ldi	r31, 0x0B	; 11
    1bb6:	df 07       	cpc	r29, r31
    1bb8:	21 f4       	brne	.+8      	; 0x1bc2 <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1bba:	60 e1       	ldi	r22, 0x10	; 16
    1bbc:	86 e0       	ldi	r24, 0x06	; 6
    1bbe:	f1 da       	rcall	.-2590   	; 0x11a2 <sysclk_enable_module>
    1bc0:	3f c0       	rjmp	.+126    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1bc2:	c0 3b       	cpi	r28, 0xB0	; 176
    1bc4:	88 e0       	ldi	r24, 0x08	; 8
    1bc6:	d8 07       	cpc	r29, r24
    1bc8:	21 f4       	brne	.+8      	; 0x1bd2 <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1bca:	60 e2       	ldi	r22, 0x20	; 32
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	e9 da       	rcall	.-2606   	; 0x11a2 <sysclk_enable_module>
    1bd0:	37 c0       	rjmp	.+110    	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1bd2:	c0 3b       	cpi	r28, 0xB0	; 176
    1bd4:	e9 e0       	ldi	r30, 0x09	; 9
    1bd6:	de 07       	cpc	r29, r30
    1bd8:	21 f4       	brne	.+8      	; 0x1be2 <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1bda:	60 e2       	ldi	r22, 0x20	; 32
    1bdc:	84 e0       	ldi	r24, 0x04	; 4
    1bde:	e1 da       	rcall	.-2622   	; 0x11a2 <sysclk_enable_module>
    1be0:	2f c0       	rjmp	.+94     	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1be2:	c0 3b       	cpi	r28, 0xB0	; 176
    1be4:	fa e0       	ldi	r31, 0x0A	; 10
    1be6:	df 07       	cpc	r29, r31
    1be8:	21 f4       	brne	.+8      	; 0x1bf2 <usart_init_rs232+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1bea:	60 e2       	ldi	r22, 0x20	; 32
    1bec:	85 e0       	ldi	r24, 0x05	; 5
    1bee:	d9 da       	rcall	.-2638   	; 0x11a2 <sysclk_enable_module>
    1bf0:	27 c0       	rjmp	.+78     	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1bf2:	c0 3b       	cpi	r28, 0xB0	; 176
    1bf4:	8b e0       	ldi	r24, 0x0B	; 11
    1bf6:	d8 07       	cpc	r29, r24
    1bf8:	21 f4       	brne	.+8      	; 0x1c02 <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1bfa:	60 e2       	ldi	r22, 0x20	; 32
    1bfc:	86 e0       	ldi	r24, 0x06	; 6
    1bfe:	d1 da       	rcall	.-2654   	; 0x11a2 <sysclk_enable_module>
    1c00:	1f c0       	rjmp	.+62     	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1c02:	c0 38       	cpi	r28, 0x80	; 128
    1c04:	e4 e0       	ldi	r30, 0x04	; 4
    1c06:	de 07       	cpc	r29, r30
    1c08:	21 f4       	brne	.+8      	; 0x1c12 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1c0a:	60 e4       	ldi	r22, 0x40	; 64
    1c0c:	83 e0       	ldi	r24, 0x03	; 3
    1c0e:	c9 da       	rcall	.-2670   	; 0x11a2 <sysclk_enable_module>
    1c10:	17 c0       	rjmp	.+46     	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1c12:	c0 39       	cpi	r28, 0x90	; 144
    1c14:	f4 e0       	ldi	r31, 0x04	; 4
    1c16:	df 07       	cpc	r29, r31
    1c18:	21 f4       	brne	.+8      	; 0x1c22 <usart_init_rs232+0x260>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1c1a:	60 e4       	ldi	r22, 0x40	; 64
    1c1c:	84 e0       	ldi	r24, 0x04	; 4
    1c1e:	c1 da       	rcall	.-2686   	; 0x11a2 <sysclk_enable_module>
    1c20:	0f c0       	rjmp	.+30     	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1c22:	c0 3a       	cpi	r28, 0xA0	; 160
    1c24:	84 e0       	ldi	r24, 0x04	; 4
    1c26:	d8 07       	cpc	r29, r24
    1c28:	21 f4       	brne	.+8      	; 0x1c32 <usart_init_rs232+0x270>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1c2a:	60 e4       	ldi	r22, 0x40	; 64
    1c2c:	85 e0       	ldi	r24, 0x05	; 5
    1c2e:	b9 da       	rcall	.-2702   	; 0x11a2 <sysclk_enable_module>
    1c30:	07 c0       	rjmp	.+14     	; 0x1c40 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1c32:	c0 3b       	cpi	r28, 0xB0	; 176
    1c34:	e4 e0       	ldi	r30, 0x04	; 4
    1c36:	de 07       	cpc	r29, r30
    1c38:	19 f4       	brne	.+6      	; 0x1c40 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1c3a:	60 e4       	ldi	r22, 0x40	; 64
    1c3c:	86 e0       	ldi	r24, 0x06	; 6
    1c3e:	b1 da       	rcall	.-2718   	; 0x11a2 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	8f 73       	andi	r24, 0x3F	; 63
    1c44:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1c46:	f8 01       	movw	r30, r16
    1c48:	94 81       	ldd	r25, Z+4	; 0x04
    1c4a:	85 81       	ldd	r24, Z+5	; 0x05
    1c4c:	89 2b       	or	r24, r25
    1c4e:	96 81       	ldd	r25, Z+6	; 0x06
    1c50:	91 11       	cpse	r25, r1
    1c52:	98 e0       	ldi	r25, 0x08	; 8
    1c54:	89 2b       	or	r24, r25
    1c56:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1c58:	f8 01       	movw	r30, r16
    1c5a:	40 81       	ld	r20, Z
    1c5c:	51 81       	ldd	r21, Z+1	; 0x01
    1c5e:	62 81       	ldd	r22, Z+2	; 0x02
    1c60:	73 81       	ldd	r23, Z+3	; 0x03
    1c62:	00 e0       	ldi	r16, 0x00	; 0
    1c64:	18 e4       	ldi	r17, 0x48	; 72
    1c66:	28 ee       	ldi	r18, 0xE8	; 232
    1c68:	31 e0       	ldi	r19, 0x01	; 1
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	95 dd       	rcall	.-1238   	; 0x1798 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	98 60       	ori	r25, 0x08	; 8
    1c72:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	90 61       	ori	r25, 0x10	; 16
    1c78:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	08 95       	ret

00001c84 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    1c8a:	80 dd       	rcall	.-1280   	; 0x178c <usart_getchar>
    1c8c:	88 83       	st	Y, r24
}
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	08 95       	ret

00001c94 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1c94:	73 cd       	rjmp	.-1306   	; 0x177c <usart_putchar>
}
    1c96:	08 95       	ret

00001c98 <UART_Comms_Init>:
/* Global Variables */

 /*******************************************************************************************/
								/* Initialization methods */
/* Method to initialize UART communications */
void UART_Comms_Init(void){
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	27 97       	sbiw	r28, 0x07	; 7
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	de bf       	out	0x3e, r29	; 62
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	//Must set TX pin as output
	PORTC.DIRSET=0b00001000;
    1ca6:	e0 e4       	ldi	r30, 0x40	; 64
    1ca8:	f6 e0       	ldi	r31, 0x06	; 6
    1caa:	88 e0       	ldi	r24, 0x08	; 8
    1cac:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET=0b00001000;
    1cae:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUT=0xFF;
    1cb0:	8f ef       	ldi	r24, 0xFF	; 255
    1cb2:	84 83       	std	Z+4, r24	; 0x04
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1cb4:	80 ea       	ldi	r24, 0xA0	; 160
    1cb6:	98 e0       	ldi	r25, 0x08	; 8
    1cb8:	80 93 f8 20 	sts	0x20F8, r24
    1cbc:	90 93 f9 20 	sts	0x20F9, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1cc0:	8a e4       	ldi	r24, 0x4A	; 74
    1cc2:	9e e0       	ldi	r25, 0x0E	; 14
    1cc4:	80 93 f6 20 	sts	0x20F6, r24
    1cc8:	90 93 f7 20 	sts	0x20F7, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1ccc:	82 e4       	ldi	r24, 0x42	; 66
    1cce:	9e e0       	ldi	r25, 0x0E	; 14
    1cd0:	80 93 f4 20 	sts	0x20F4, r24
    1cd4:	90 93 f5 20 	sts	0x20F5, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1cd8:	e6 e0       	ldi	r30, 0x06	; 6
    1cda:	f0 e2       	ldi	r31, 0x20	; 32
    1cdc:	84 81       	ldd	r24, Z+4	; 0x04
    1cde:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1ce0:	85 81       	ldd	r24, Z+5	; 0x05
    1ce2:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1ce4:	86 81       	ldd	r24, Z+6	; 0x06
    1ce6:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	a2 81       	ldd	r26, Z+2	; 0x02
    1cee:	b3 81       	ldd	r27, Z+3	; 0x03
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	9a 83       	std	Y+2, r25	; 0x02
    1cf4:	ab 83       	std	Y+3, r26	; 0x03
    1cf6:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    1cf8:	60 e1       	ldi	r22, 0x10	; 16
    1cfa:	83 e0       	ldi	r24, 0x03	; 3
    1cfc:	52 da       	rcall	.-2908   	; 0x11a2 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1cfe:	be 01       	movw	r22, r28
    1d00:	6f 5f       	subi	r22, 0xFF	; 255
    1d02:	7f 4f       	sbci	r23, 0xFF	; 255
    1d04:	80 ea       	ldi	r24, 0xA0	; 160
    1d06:	98 e0       	ldi	r25, 0x08	; 8
    1d08:	5c de       	rcall	.-840    	; 0x19c2 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1d0a:	6e e4       	ldi	r22, 0x4E	; 78
    1d0c:	71 e0       	ldi	r23, 0x01	; 1
    1d0e:	87 e6       	ldi	r24, 0x67	; 103
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	4a d7       	rcall	.+3732   	; 0x2ba8 <fdevopen>

	stdio_serial_init(&USARTC0, &usart_options); //ASF function that initializes the UART peripheral
    1d14:	27 96       	adiw	r28, 0x07	; 7
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	08 95       	ret

00001d20 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <sysclk_enable_peripheral_clock+0x6>
    1d24:	35 c1       	rjmp	.+618    	; 0x1f90 <sysclk_enable_peripheral_clock+0x270>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1d26:	80 3c       	cpi	r24, 0xC0	; 192
    1d28:	91 05       	cpc	r25, r1
    1d2a:	21 f4       	brne	.+8      	; 0x1d34 <sysclk_enable_peripheral_clock+0x14>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1d2c:	60 e1       	ldi	r22, 0x10	; 16
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	38 ca       	rjmp	.-2960   	; 0x11a2 <sysclk_enable_module>
    1d32:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1d34:	80 34       	cpi	r24, 0x40	; 64
    1d36:	24 e0       	ldi	r18, 0x04	; 4
    1d38:	92 07       	cpc	r25, r18
    1d3a:	21 f4       	brne	.+8      	; 0x1d44 <sysclk_enable_peripheral_clock+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1d3c:	68 e0       	ldi	r22, 0x08	; 8
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	30 ca       	rjmp	.-2976   	; 0x11a2 <sysclk_enable_module>
    1d42:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1d44:	81 15       	cp	r24, r1
    1d46:	24 e0       	ldi	r18, 0x04	; 4
    1d48:	92 07       	cpc	r25, r18
    1d4a:	21 f4       	brne	.+8      	; 0x1d54 <sysclk_enable_peripheral_clock+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1d4c:	64 e0       	ldi	r22, 0x04	; 4
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	28 ca       	rjmp	.-2992   	; 0x11a2 <sysclk_enable_module>
    1d52:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1d54:	80 38       	cpi	r24, 0x80	; 128
    1d56:	21 e0       	ldi	r18, 0x01	; 1
    1d58:	92 07       	cpc	r25, r18
    1d5a:	21 f4       	brne	.+8      	; 0x1d64 <sysclk_enable_peripheral_clock+0x44>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1d5c:	62 e0       	ldi	r22, 0x02	; 2
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	20 ca       	rjmp	.-3008   	; 0x11a2 <sysclk_enable_module>
    1d62:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1d64:	81 15       	cp	r24, r1
    1d66:	21 e0       	ldi	r18, 0x01	; 1
    1d68:	92 07       	cpc	r25, r18
    1d6a:	21 f4       	brne	.+8      	; 0x1d74 <sysclk_enable_peripheral_clock+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1d6c:	61 e0       	ldi	r22, 0x01	; 1
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	18 ca       	rjmp	.-3024   	; 0x11a2 <sysclk_enable_module>
    1d72:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1d74:	80 38       	cpi	r24, 0x80	; 128
    1d76:	23 e0       	ldi	r18, 0x03	; 3
    1d78:	92 07       	cpc	r25, r18
    1d7a:	21 f4       	brne	.+8      	; 0x1d84 <sysclk_enable_peripheral_clock+0x64>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	10 ca       	rjmp	.-3040   	; 0x11a2 <sysclk_enable_module>
    1d82:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1d84:	80 39       	cpi	r24, 0x90	; 144
    1d86:	23 e0       	ldi	r18, 0x03	; 3
    1d88:	92 07       	cpc	r25, r18
    1d8a:	21 f4       	brne	.+8      	; 0x1d94 <sysclk_enable_peripheral_clock+0x74>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	08 ca       	rjmp	.-3056   	; 0x11a2 <sysclk_enable_module>
    1d92:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1d94:	81 15       	cp	r24, r1
    1d96:	22 e0       	ldi	r18, 0x02	; 2
    1d98:	92 07       	cpc	r25, r18
    1d9a:	21 f4       	brne	.+8      	; 0x1da4 <sysclk_enable_peripheral_clock+0x84>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1d9c:	62 e0       	ldi	r22, 0x02	; 2
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	00 ca       	rjmp	.-3072   	; 0x11a2 <sysclk_enable_module>
    1da2:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1da4:	80 34       	cpi	r24, 0x40	; 64
    1da6:	22 e0       	ldi	r18, 0x02	; 2
    1da8:	92 07       	cpc	r25, r18
    1daa:	21 f4       	brne	.+8      	; 0x1db4 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1dac:	62 e0       	ldi	r22, 0x02	; 2
    1dae:	82 e0       	ldi	r24, 0x02	; 2
    1db0:	f8 c9       	rjmp	.-3088   	; 0x11a2 <sysclk_enable_module>
    1db2:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1db4:	81 15       	cp	r24, r1
    1db6:	23 e0       	ldi	r18, 0x03	; 3
    1db8:	92 07       	cpc	r25, r18
    1dba:	21 f4       	brne	.+8      	; 0x1dc4 <sysclk_enable_peripheral_clock+0xa4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1dbc:	64 e0       	ldi	r22, 0x04	; 4
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	f0 c9       	rjmp	.-3104   	; 0x11a2 <sysclk_enable_module>
    1dc2:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1dc4:	80 32       	cpi	r24, 0x20	; 32
    1dc6:	23 e0       	ldi	r18, 0x03	; 3
    1dc8:	92 07       	cpc	r25, r18
    1dca:	21 f4       	brne	.+8      	; 0x1dd4 <sysclk_enable_peripheral_clock+0xb4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1dcc:	64 e0       	ldi	r22, 0x04	; 4
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	e8 c9       	rjmp	.-3120   	; 0x11a2 <sysclk_enable_module>
    1dd2:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1dd4:	81 15       	cp	r24, r1
    1dd6:	28 e0       	ldi	r18, 0x08	; 8
    1dd8:	92 07       	cpc	r25, r18
    1dda:	21 f4       	brne	.+8      	; 0x1de4 <sysclk_enable_peripheral_clock+0xc4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1ddc:	61 e0       	ldi	r22, 0x01	; 1
    1dde:	83 e0       	ldi	r24, 0x03	; 3
    1de0:	e0 c9       	rjmp	.-3136   	; 0x11a2 <sysclk_enable_module>
    1de2:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1de4:	81 15       	cp	r24, r1
    1de6:	29 e0       	ldi	r18, 0x09	; 9
    1de8:	92 07       	cpc	r25, r18
    1dea:	21 f4       	brne	.+8      	; 0x1df4 <sysclk_enable_peripheral_clock+0xd4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	84 e0       	ldi	r24, 0x04	; 4
    1df0:	d8 c9       	rjmp	.-3152   	; 0x11a2 <sysclk_enable_module>
    1df2:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1df4:	81 15       	cp	r24, r1
    1df6:	2a e0       	ldi	r18, 0x0A	; 10
    1df8:	92 07       	cpc	r25, r18
    1dfa:	21 f4       	brne	.+8      	; 0x1e04 <sysclk_enable_peripheral_clock+0xe4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1dfc:	61 e0       	ldi	r22, 0x01	; 1
    1dfe:	85 e0       	ldi	r24, 0x05	; 5
    1e00:	d0 c9       	rjmp	.-3168   	; 0x11a2 <sysclk_enable_module>
    1e02:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1e04:	81 15       	cp	r24, r1
    1e06:	2b e0       	ldi	r18, 0x0B	; 11
    1e08:	92 07       	cpc	r25, r18
    1e0a:	21 f4       	brne	.+8      	; 0x1e14 <sysclk_enable_peripheral_clock+0xf4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1e0c:	61 e0       	ldi	r22, 0x01	; 1
    1e0e:	86 e0       	ldi	r24, 0x06	; 6
    1e10:	c8 c9       	rjmp	.-3184   	; 0x11a2 <sysclk_enable_module>
    1e12:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1e14:	80 34       	cpi	r24, 0x40	; 64
    1e16:	28 e0       	ldi	r18, 0x08	; 8
    1e18:	92 07       	cpc	r25, r18
    1e1a:	21 f4       	brne	.+8      	; 0x1e24 <sysclk_enable_peripheral_clock+0x104>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1e1c:	62 e0       	ldi	r22, 0x02	; 2
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	c0 c9       	rjmp	.-3200   	; 0x11a2 <sysclk_enable_module>
    1e22:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1e24:	80 34       	cpi	r24, 0x40	; 64
    1e26:	29 e0       	ldi	r18, 0x09	; 9
    1e28:	92 07       	cpc	r25, r18
    1e2a:	21 f4       	brne	.+8      	; 0x1e34 <sysclk_enable_peripheral_clock+0x114>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1e2c:	62 e0       	ldi	r22, 0x02	; 2
    1e2e:	84 e0       	ldi	r24, 0x04	; 4
    1e30:	b8 c9       	rjmp	.-3216   	; 0x11a2 <sysclk_enable_module>
    1e32:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1e34:	80 34       	cpi	r24, 0x40	; 64
    1e36:	2a e0       	ldi	r18, 0x0A	; 10
    1e38:	92 07       	cpc	r25, r18
    1e3a:	21 f4       	brne	.+8      	; 0x1e44 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1e3c:	62 e0       	ldi	r22, 0x02	; 2
    1e3e:	85 e0       	ldi	r24, 0x05	; 5
    1e40:	b0 c9       	rjmp	.-3232   	; 0x11a2 <sysclk_enable_module>
    1e42:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1e44:	80 34       	cpi	r24, 0x40	; 64
    1e46:	2b e0       	ldi	r18, 0x0B	; 11
    1e48:	92 07       	cpc	r25, r18
    1e4a:	21 f4       	brne	.+8      	; 0x1e54 <sysclk_enable_peripheral_clock+0x134>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1e4c:	62 e0       	ldi	r22, 0x02	; 2
    1e4e:	86 e0       	ldi	r24, 0x06	; 6
    1e50:	a8 c9       	rjmp	.-3248   	; 0x11a2 <sysclk_enable_module>
    1e52:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1e54:	80 39       	cpi	r24, 0x90	; 144
    1e56:	28 e0       	ldi	r18, 0x08	; 8
    1e58:	92 07       	cpc	r25, r18
    1e5a:	21 f4       	brne	.+8      	; 0x1e64 <sysclk_enable_peripheral_clock+0x144>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1e5c:	64 e0       	ldi	r22, 0x04	; 4
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	a0 c9       	rjmp	.-3264   	; 0x11a2 <sysclk_enable_module>
    1e62:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1e64:	80 39       	cpi	r24, 0x90	; 144
    1e66:	29 e0       	ldi	r18, 0x09	; 9
    1e68:	92 07       	cpc	r25, r18
    1e6a:	21 f4       	brne	.+8      	; 0x1e74 <sysclk_enable_peripheral_clock+0x154>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1e6c:	64 e0       	ldi	r22, 0x04	; 4
    1e6e:	84 e0       	ldi	r24, 0x04	; 4
    1e70:	98 c9       	rjmp	.-3280   	; 0x11a2 <sysclk_enable_module>
    1e72:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1e74:	80 39       	cpi	r24, 0x90	; 144
    1e76:	2a e0       	ldi	r18, 0x0A	; 10
    1e78:	92 07       	cpc	r25, r18
    1e7a:	21 f4       	brne	.+8      	; 0x1e84 <sysclk_enable_peripheral_clock+0x164>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1e7c:	64 e0       	ldi	r22, 0x04	; 4
    1e7e:	85 e0       	ldi	r24, 0x05	; 5
    1e80:	90 c9       	rjmp	.-3296   	; 0x11a2 <sysclk_enable_module>
    1e82:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1e84:	80 39       	cpi	r24, 0x90	; 144
    1e86:	2b e0       	ldi	r18, 0x0B	; 11
    1e88:	92 07       	cpc	r25, r18
    1e8a:	21 f4       	brne	.+8      	; 0x1e94 <sysclk_enable_peripheral_clock+0x174>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1e8c:	64 e0       	ldi	r22, 0x04	; 4
    1e8e:	86 e0       	ldi	r24, 0x06	; 6
    1e90:	88 c9       	rjmp	.-3312   	; 0x11a2 <sysclk_enable_module>
    1e92:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1e94:	80 3c       	cpi	r24, 0xC0	; 192
    1e96:	28 e0       	ldi	r18, 0x08	; 8
    1e98:	92 07       	cpc	r25, r18
    1e9a:	21 f4       	brne	.+8      	; 0x1ea4 <sysclk_enable_peripheral_clock+0x184>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1e9c:	68 e0       	ldi	r22, 0x08	; 8
    1e9e:	83 e0       	ldi	r24, 0x03	; 3
    1ea0:	80 c9       	rjmp	.-3328   	; 0x11a2 <sysclk_enable_module>
    1ea2:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1ea4:	80 3c       	cpi	r24, 0xC0	; 192
    1ea6:	29 e0       	ldi	r18, 0x09	; 9
    1ea8:	92 07       	cpc	r25, r18
    1eaa:	21 f4       	brne	.+8      	; 0x1eb4 <sysclk_enable_peripheral_clock+0x194>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1eac:	68 e0       	ldi	r22, 0x08	; 8
    1eae:	84 e0       	ldi	r24, 0x04	; 4
    1eb0:	78 c9       	rjmp	.-3344   	; 0x11a2 <sysclk_enable_module>
    1eb2:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1eb4:	80 3c       	cpi	r24, 0xC0	; 192
    1eb6:	2a e0       	ldi	r18, 0x0A	; 10
    1eb8:	92 07       	cpc	r25, r18
    1eba:	21 f4       	brne	.+8      	; 0x1ec4 <sysclk_enable_peripheral_clock+0x1a4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1ebc:	68 e0       	ldi	r22, 0x08	; 8
    1ebe:	85 e0       	ldi	r24, 0x05	; 5
    1ec0:	70 c9       	rjmp	.-3360   	; 0x11a2 <sysclk_enable_module>
    1ec2:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1ec4:	80 3c       	cpi	r24, 0xC0	; 192
    1ec6:	2b e0       	ldi	r18, 0x0B	; 11
    1ec8:	92 07       	cpc	r25, r18
    1eca:	21 f4       	brne	.+8      	; 0x1ed4 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1ecc:	68 e0       	ldi	r22, 0x08	; 8
    1ece:	86 e0       	ldi	r24, 0x06	; 6
    1ed0:	68 c9       	rjmp	.-3376   	; 0x11a2 <sysclk_enable_module>
    1ed2:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1ed4:	80 3a       	cpi	r24, 0xA0	; 160
    1ed6:	28 e0       	ldi	r18, 0x08	; 8
    1ed8:	92 07       	cpc	r25, r18
    1eda:	21 f4       	brne	.+8      	; 0x1ee4 <sysclk_enable_peripheral_clock+0x1c4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1edc:	60 e1       	ldi	r22, 0x10	; 16
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	60 c9       	rjmp	.-3392   	; 0x11a2 <sysclk_enable_module>
    1ee2:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1ee4:	80 3a       	cpi	r24, 0xA0	; 160
    1ee6:	29 e0       	ldi	r18, 0x09	; 9
    1ee8:	92 07       	cpc	r25, r18
    1eea:	21 f4       	brne	.+8      	; 0x1ef4 <sysclk_enable_peripheral_clock+0x1d4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1eec:	60 e1       	ldi	r22, 0x10	; 16
    1eee:	84 e0       	ldi	r24, 0x04	; 4
    1ef0:	58 c9       	rjmp	.-3408   	; 0x11a2 <sysclk_enable_module>
    1ef2:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1ef4:	80 3a       	cpi	r24, 0xA0	; 160
    1ef6:	2a e0       	ldi	r18, 0x0A	; 10
    1ef8:	92 07       	cpc	r25, r18
    1efa:	21 f4       	brne	.+8      	; 0x1f04 <sysclk_enable_peripheral_clock+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1efc:	60 e1       	ldi	r22, 0x10	; 16
    1efe:	85 e0       	ldi	r24, 0x05	; 5
    1f00:	50 c9       	rjmp	.-3424   	; 0x11a2 <sysclk_enable_module>
    1f02:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1f04:	80 3a       	cpi	r24, 0xA0	; 160
    1f06:	2b e0       	ldi	r18, 0x0B	; 11
    1f08:	92 07       	cpc	r25, r18
    1f0a:	21 f4       	brne	.+8      	; 0x1f14 <sysclk_enable_peripheral_clock+0x1f4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1f0c:	60 e1       	ldi	r22, 0x10	; 16
    1f0e:	86 e0       	ldi	r24, 0x06	; 6
    1f10:	48 c9       	rjmp	.-3440   	; 0x11a2 <sysclk_enable_module>
    1f12:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1f14:	80 3b       	cpi	r24, 0xB0	; 176
    1f16:	28 e0       	ldi	r18, 0x08	; 8
    1f18:	92 07       	cpc	r25, r18
    1f1a:	21 f4       	brne	.+8      	; 0x1f24 <sysclk_enable_peripheral_clock+0x204>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1f1c:	60 e2       	ldi	r22, 0x20	; 32
    1f1e:	83 e0       	ldi	r24, 0x03	; 3
    1f20:	40 c9       	rjmp	.-3456   	; 0x11a2 <sysclk_enable_module>
    1f22:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1f24:	80 3b       	cpi	r24, 0xB0	; 176
    1f26:	29 e0       	ldi	r18, 0x09	; 9
    1f28:	92 07       	cpc	r25, r18
    1f2a:	21 f4       	brne	.+8      	; 0x1f34 <sysclk_enable_peripheral_clock+0x214>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1f2c:	60 e2       	ldi	r22, 0x20	; 32
    1f2e:	84 e0       	ldi	r24, 0x04	; 4
    1f30:	38 c9       	rjmp	.-3472   	; 0x11a2 <sysclk_enable_module>
    1f32:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1f34:	80 3b       	cpi	r24, 0xB0	; 176
    1f36:	2a e0       	ldi	r18, 0x0A	; 10
    1f38:	92 07       	cpc	r25, r18
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <sysclk_enable_peripheral_clock+0x224>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1f3c:	60 e2       	ldi	r22, 0x20	; 32
    1f3e:	85 e0       	ldi	r24, 0x05	; 5
    1f40:	30 c9       	rjmp	.-3488   	; 0x11a2 <sysclk_enable_module>
    1f42:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1f44:	80 3b       	cpi	r24, 0xB0	; 176
    1f46:	2b e0       	ldi	r18, 0x0B	; 11
    1f48:	92 07       	cpc	r25, r18
    1f4a:	21 f4       	brne	.+8      	; 0x1f54 <sysclk_enable_peripheral_clock+0x234>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1f4c:	60 e2       	ldi	r22, 0x20	; 32
    1f4e:	86 e0       	ldi	r24, 0x06	; 6
    1f50:	28 c9       	rjmp	.-3504   	; 0x11a2 <sysclk_enable_module>
    1f52:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1f54:	80 38       	cpi	r24, 0x80	; 128
    1f56:	24 e0       	ldi	r18, 0x04	; 4
    1f58:	92 07       	cpc	r25, r18
    1f5a:	21 f4       	brne	.+8      	; 0x1f64 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1f5c:	60 e4       	ldi	r22, 0x40	; 64
    1f5e:	83 e0       	ldi	r24, 0x03	; 3
    1f60:	20 c9       	rjmp	.-3520   	; 0x11a2 <sysclk_enable_module>
    1f62:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1f64:	80 39       	cpi	r24, 0x90	; 144
    1f66:	24 e0       	ldi	r18, 0x04	; 4
    1f68:	92 07       	cpc	r25, r18
    1f6a:	21 f4       	brne	.+8      	; 0x1f74 <sysclk_enable_peripheral_clock+0x254>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1f6c:	60 e4       	ldi	r22, 0x40	; 64
    1f6e:	84 e0       	ldi	r24, 0x04	; 4
    1f70:	18 c9       	rjmp	.-3536   	; 0x11a2 <sysclk_enable_module>
    1f72:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1f74:	80 3a       	cpi	r24, 0xA0	; 160
    1f76:	24 e0       	ldi	r18, 0x04	; 4
    1f78:	92 07       	cpc	r25, r18
    1f7a:	21 f4       	brne	.+8      	; 0x1f84 <sysclk_enable_peripheral_clock+0x264>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1f7c:	60 e4       	ldi	r22, 0x40	; 64
    1f7e:	85 e0       	ldi	r24, 0x05	; 5
    1f80:	10 c9       	rjmp	.-3552   	; 0x11a2 <sysclk_enable_module>
    1f82:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1f84:	80 3b       	cpi	r24, 0xB0	; 176
    1f86:	94 40       	sbci	r25, 0x04	; 4
    1f88:	19 f4       	brne	.+6      	; 0x1f90 <sysclk_enable_peripheral_clock+0x270>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1f8a:	60 e4       	ldi	r22, 0x40	; 64
    1f8c:	86 e0       	ldi	r24, 0x06	; 6
    1f8e:	09 c9       	rjmp	.-3566   	; 0x11a2 <sysclk_enable_module>
    1f90:	08 95       	ret

00001f92 <main>:


/*******************************************************************************************/
										/* Main method */
int main (void){
	board_init();
    1f92:	3b d9       	rcall	.-3466   	; 0x120a <board_init>
	sysclk_init(); //Initializes the system clock to 32MHz, also turns off all peripheral clocks.
    1f94:	df d8       	rcall	.-3650   	; 0x1154 <sysclk_init>
	
	/* Peripheral Clock Initializations */
	sysclk_enable_peripheral_clock(&ADCA); //USART comms clock init for SD reader.
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	92 e0       	ldi	r25, 0x02	; 2
    1f9a:	c2 de       	rcall	.-636    	; 0x1d20 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTC0);//If this fixes it imma shit myself it didnt my underwar is speared for another day
    1f9c:	80 ea       	ldi	r24, 0xA0	; 160
    1f9e:	98 e0       	ldi	r25, 0x08	; 8
    1fa0:	bf de       	rcall	.-642    	; 0x1d20 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCE0); //LED timer counter, needs to be changed.
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	9a e0       	ldi	r25, 0x0A	; 10
    1fa6:	bc de       	rcall	.-648    	; 0x1d20 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&SPIC); //SPI init for pressure sensor.
    1fa8:	80 ec       	ldi	r24, 0xC0	; 192
    1faa:	98 e0       	ldi	r25, 0x08	; 8
    1fac:	b9 de       	rcall	.-654    	; 0x1d20 <sysclk_enable_peripheral_clock>
	
	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES); //LED timer counter, again needs to be changed.
    1fae:	64 e0       	ldi	r22, 0x04	; 4
    1fb0:	85 e0       	ldi	r24, 0x05	; 5
    1fb2:	f7 d8       	rcall	.-3602   	; 0x11a2 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
    1fb4:	68 e0       	ldi	r22, 0x08	; 8
    1fb6:	83 e0       	ldi	r24, 0x03	; 3
    1fb8:	f4 d8       	rcall	.-3608   	; 0x11a2 <sysclk_enable_module>
	
	UART_Comms_Init();
    1fba:	6e de       	rcall	.-804    	; 0x1c98 <UART_Comms_Init>
	//data_Init();
	ADCinit();
    1fbc:	6c d8       	rcall	.-3880   	; 0x1096 <ADCinit>
    1fbe:	8a ea       	ldi	r24, 0xAA	; 170
    1fc0:	90 eb       	ldi	r25, 0xB0	; 176
    1fc2:	a8 e2       	ldi	r26, 0x28	; 40
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	a1 09       	sbc	r26, r1
    1fca:	b1 09       	sbc	r27, r1
    1fcc:	e1 f7       	brne	.-8      	; 0x1fc6 <main+0x34>

	//blinkLED();
	 
	//delay_ms(500);
	delay_ms(500);
	printf("Setup finished\n");
    1fce:	87 eb       	ldi	r24, 0xB7	; 183
    1fd0:	90 e2       	ldi	r25, 0x20	; 32
    1fd2:	47 d6       	rcall	.+3214   	; 0x2c62 <puts>
	spi_init();
    1fd4:	53 d8       	rcall	.-3930   	; 0x107c <spi_init>
	//printf("%u\n", time1);
	
	//printf("test2\n");
	/* Insert application code here, after the board has been initialized. */
	while(1){
		printf("%" PRId16 "\n", getTemperature());
    1fd6:	c6 ec       	ldi	r28, 0xC6	; 198
    1fd8:	d0 e2       	ldi	r29, 0x20	; 32
    1fda:	0f 2e       	mov	r0, r31
    1fdc:	f4 e5       	ldi	r31, 0x54	; 84
    1fde:	ef 2e       	mov	r14, r31
    1fe0:	f0 2d       	mov	r31, r0
    1fe2:	0f 2e       	mov	r0, r31
    1fe4:	fd ec       	ldi	r31, 0xCD	; 205
    1fe6:	ff 2e       	mov	r15, r31
    1fe8:	f0 2d       	mov	r31, r0
    1fea:	0d e2       	ldi	r16, 0x2D	; 45
    1fec:	13 e0       	ldi	r17, 0x03	; 3
    1fee:	7b d8       	rcall	.-3850   	; 0x10e6 <getTemperature>
    1ff0:	9f 93       	push	r25
    1ff2:	8f 93       	push	r24
    1ff4:	7f 93       	push	r23
    1ff6:	6f 93       	push	r22
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	1f d6       	rcall	.+3134   	; 0x2c3c <printf>
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	8e 2d       	mov	r24, r14
    200c:	9f 2d       	mov	r25, r15
    200e:	a0 2f       	mov	r26, r16
    2010:	b1 2f       	mov	r27, r17
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	a1 09       	sbc	r26, r1
    2016:	b1 09       	sbc	r27, r1
    2018:	e1 f7       	brne	.-8      	; 0x2012 <main+0x80>
		delay_s(10);
		printf("Test\n");
    201a:	8a ec       	ldi	r24, 0xCA	; 202
    201c:	90 e2       	ldi	r25, 0x20	; 32
    201e:	21 d6       	rcall	.+3138   	; 0x2c62 <puts>
		//printf("HEY\n");
		
		
#endif
	//printf("HOLY FUCK\n");
	}
    2020:	e6 cf       	rjmp	.-52     	; 0x1fee <main+0x5c>

00002022 <__vector_53>:
}

ISR(TCE1_OVF_vect){ //Each second throw the interrupt and do this function
    2022:	1f 92       	push	r1
    2024:	0f 92       	push	r0
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	0f 92       	push	r0
    202a:	11 24       	eor	r1, r1
    202c:	08 b6       	in	r0, 0x38	; 56
    202e:	0f 92       	push	r0
    2030:	18 be       	out	0x38, r1	; 56
    2032:	09 b6       	in	r0, 0x39	; 57
    2034:	0f 92       	push	r0
    2036:	19 be       	out	0x39, r1	; 57
    2038:	0b b6       	in	r0, 0x3b	; 59
    203a:	0f 92       	push	r0
    203c:	1b be       	out	0x3b, r1	; 59
    203e:	cf 92       	push	r12
    2040:	df 92       	push	r13
    2042:	ef 92       	push	r14
    2044:	ff 92       	push	r15
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	2f 93       	push	r18
    204c:	3f 93       	push	r19
    204e:	4f 93       	push	r20
    2050:	5f 93       	push	r21
    2052:	6f 93       	push	r22
    2054:	7f 93       	push	r23
    2056:	8f 93       	push	r24
    2058:	9f 93       	push	r25
    205a:	af 93       	push	r26
    205c:	bf 93       	push	r27
    205e:	cf 93       	push	r28
    2060:	ef 93       	push	r30
    2062:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2064:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2066:	f8 94       	cli
		time++; //time in seconds
    2068:	80 91 f3 20 	lds	r24, 0x20F3
    206c:	8f 5f       	subi	r24, 0xFF	; 255
    206e:	80 93 f3 20 	sts	0x20F3, r24
#ifdef DEBUG_TIMEINT
		test = 1;
		//printf("%u, %u, %u, ", ABG_geiger,BG_geiger,gamma_geiger);
#endif
		
		saveData(time, ABG_geiger, BG_geiger, gamma_geiger,getAltitude(getTemperature(),getPressure())); //sava data packet containing time, alpha, beta, gamma and altitude readings.
    2072:	0e 94 0a 06 	call	0xc14	; 0xc14 <getPressure>
    2076:	6b 01       	movw	r12, r22
    2078:	7c 01       	movw	r14, r24
    207a:	35 d8       	rcall	.-3990   	; 0x10e6 <getTemperature>
    207c:	a7 01       	movw	r20, r14
    207e:	96 01       	movw	r18, r12
    2080:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <getAltitude>
    2084:	6b 01       	movw	r12, r22
    2086:	7c 01       	movw	r14, r24
    2088:	00 91 ed 20 	lds	r16, 0x20ED
    208c:	10 91 ee 20 	lds	r17, 0x20EE
    2090:	20 91 ef 20 	lds	r18, 0x20EF
    2094:	30 91 f0 20 	lds	r19, 0x20F0
    2098:	40 91 f1 20 	lds	r20, 0x20F1
    209c:	50 91 f2 20 	lds	r21, 0x20F2
    20a0:	80 91 f3 20 	lds	r24, 0x20F3
    20a4:	68 2f       	mov	r22, r24
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0e 94 ad 04 	call	0x95a	; 0x95a <saveData>
		ABG_geiger = 0;//reset geiger counter readings to zero
    20b0:	10 92 f1 20 	sts	0x20F1, r1
    20b4:	10 92 f2 20 	sts	0x20F2, r1
		BG_geiger = 0;
    20b8:	10 92 ef 20 	sts	0x20EF, r1
    20bc:	10 92 f0 20 	sts	0x20F0, r1
		gamma_geiger = 0;
    20c0:	10 92 ed 20 	sts	0x20ED, r1
    20c4:	10 92 ee 20 	sts	0x20EE, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    20c8:	cf bf       	out	0x3f, r28	; 63
		

	}
}
    20ca:	ff 91       	pop	r31
    20cc:	ef 91       	pop	r30
    20ce:	cf 91       	pop	r28
    20d0:	bf 91       	pop	r27
    20d2:	af 91       	pop	r26
    20d4:	9f 91       	pop	r25
    20d6:	8f 91       	pop	r24
    20d8:	7f 91       	pop	r23
    20da:	6f 91       	pop	r22
    20dc:	5f 91       	pop	r21
    20de:	4f 91       	pop	r20
    20e0:	3f 91       	pop	r19
    20e2:	2f 91       	pop	r18
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	ff 90       	pop	r15
    20ea:	ef 90       	pop	r14
    20ec:	df 90       	pop	r13
    20ee:	cf 90       	pop	r12
    20f0:	0f 90       	pop	r0
    20f2:	0b be       	out	0x3b, r0	; 59
    20f4:	0f 90       	pop	r0
    20f6:	09 be       	out	0x39, r0	; 57
    20f8:	0f 90       	pop	r0
    20fa:	08 be       	out	0x38, r0	; 56
    20fc:	0f 90       	pop	r0
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	0f 90       	pop	r0
    2102:	1f 90       	pop	r1
    2104:	18 95       	reti

00002106 <__vector_64>:

ISR(PORTD_INT0_vect){ //Every time alpha geiger sends us a ping, throw this interrupt 
    2106:	1f 92       	push	r1
    2108:	0f 92       	push	r0
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	0f 92       	push	r0
    210e:	11 24       	eor	r1, r1
    2110:	08 b6       	in	r0, 0x38	; 56
    2112:	0f 92       	push	r0
    2114:	18 be       	out	0x38, r1	; 56
    2116:	09 b6       	in	r0, 0x39	; 57
    2118:	0f 92       	push	r0
    211a:	19 be       	out	0x39, r1	; 57
    211c:	0b b6       	in	r0, 0x3b	; 59
    211e:	0f 92       	push	r0
    2120:	1b be       	out	0x3b, r1	; 59
    2122:	2f 93       	push	r18
    2124:	3f 93       	push	r19
    2126:	4f 93       	push	r20
    2128:	5f 93       	push	r21
    212a:	6f 93       	push	r22
    212c:	7f 93       	push	r23
    212e:	8f 93       	push	r24
    2130:	9f 93       	push	r25
    2132:	af 93       	push	r26
    2134:	bf 93       	push	r27
    2136:	cf 93       	push	r28
    2138:	ef 93       	push	r30
    213a:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    213c:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    213e:	f8 94       	cli
		printf("alpha!\n");
    2140:	8f ec       	ldi	r24, 0xCF	; 207
    2142:	90 e2       	ldi	r25, 0x20	; 32
    2144:	8e d5       	rcall	.+2844   	; 0x2c62 <puts>
		ABG_geiger++; //advance the count for this counter by one.
    2146:	80 91 f1 20 	lds	r24, 0x20F1
    214a:	90 91 f2 20 	lds	r25, 0x20F2
    214e:	01 96       	adiw	r24, 0x01	; 1
    2150:	80 93 f1 20 	sts	0x20F1, r24
    2154:	90 93 f2 20 	sts	0x20F2, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2158:	cf bf       	out	0x3f, r28	; 63
#ifdef DEBUG_GEIGERINT
		//lightChase(50);
#endif
	}
}
    215a:	ff 91       	pop	r31
    215c:	ef 91       	pop	r30
    215e:	cf 91       	pop	r28
    2160:	bf 91       	pop	r27
    2162:	af 91       	pop	r26
    2164:	9f 91       	pop	r25
    2166:	8f 91       	pop	r24
    2168:	7f 91       	pop	r23
    216a:	6f 91       	pop	r22
    216c:	5f 91       	pop	r21
    216e:	4f 91       	pop	r20
    2170:	3f 91       	pop	r19
    2172:	2f 91       	pop	r18
    2174:	0f 90       	pop	r0
    2176:	0b be       	out	0x3b, r0	; 59
    2178:	0f 90       	pop	r0
    217a:	09 be       	out	0x39, r0	; 57
    217c:	0f 90       	pop	r0
    217e:	08 be       	out	0x38, r0	; 56
    2180:	0f 90       	pop	r0
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	0f 90       	pop	r0
    2186:	1f 90       	pop	r1
    2188:	18 95       	reti

0000218a <__vector_65>:

ISR(PORTD_INT1_vect){ //Every time beta geiger sends us a ping, throw this interrupt
    218a:	1f 92       	push	r1
    218c:	0f 92       	push	r0
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	0f 92       	push	r0
    2192:	11 24       	eor	r1, r1
    2194:	08 b6       	in	r0, 0x38	; 56
    2196:	0f 92       	push	r0
    2198:	18 be       	out	0x38, r1	; 56
    219a:	09 b6       	in	r0, 0x39	; 57
    219c:	0f 92       	push	r0
    219e:	19 be       	out	0x39, r1	; 57
    21a0:	0b b6       	in	r0, 0x3b	; 59
    21a2:	0f 92       	push	r0
    21a4:	1b be       	out	0x3b, r1	; 59
    21a6:	2f 93       	push	r18
    21a8:	3f 93       	push	r19
    21aa:	4f 93       	push	r20
    21ac:	5f 93       	push	r21
    21ae:	6f 93       	push	r22
    21b0:	7f 93       	push	r23
    21b2:	8f 93       	push	r24
    21b4:	9f 93       	push	r25
    21b6:	af 93       	push	r26
    21b8:	bf 93       	push	r27
    21ba:	cf 93       	push	r28
    21bc:	ef 93       	push	r30
    21be:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    21c0:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    21c2:	f8 94       	cli
		printf("beta!\n");
    21c4:	86 ed       	ldi	r24, 0xD6	; 214
    21c6:	90 e2       	ldi	r25, 0x20	; 32
    21c8:	4c d5       	rcall	.+2712   	; 0x2c62 <puts>
		BG_geiger++;
    21ca:	80 91 ef 20 	lds	r24, 0x20EF
    21ce:	90 91 f0 20 	lds	r25, 0x20F0
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	80 93 ef 20 	sts	0x20EF, r24
    21d8:	90 93 f0 20 	sts	0x20F0, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    21dc:	cf bf       	out	0x3f, r28	; 63
#ifdef DEBUG_GEIGERINT
		//lightChase(50); 
#endif
	}
}
    21de:	ff 91       	pop	r31
    21e0:	ef 91       	pop	r30
    21e2:	cf 91       	pop	r28
    21e4:	bf 91       	pop	r27
    21e6:	af 91       	pop	r26
    21e8:	9f 91       	pop	r25
    21ea:	8f 91       	pop	r24
    21ec:	7f 91       	pop	r23
    21ee:	6f 91       	pop	r22
    21f0:	5f 91       	pop	r21
    21f2:	4f 91       	pop	r20
    21f4:	3f 91       	pop	r19
    21f6:	2f 91       	pop	r18
    21f8:	0f 90       	pop	r0
    21fa:	0b be       	out	0x3b, r0	; 59
    21fc:	0f 90       	pop	r0
    21fe:	09 be       	out	0x39, r0	; 57
    2200:	0f 90       	pop	r0
    2202:	08 be       	out	0x38, r0	; 56
    2204:	0f 90       	pop	r0
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	0f 90       	pop	r0
    220a:	1f 90       	pop	r1
    220c:	18 95       	reti

0000220e <__subsf3>:
    220e:	50 58       	subi	r21, 0x80	; 128

00002210 <__addsf3>:
    2210:	bb 27       	eor	r27, r27
    2212:	aa 27       	eor	r26, r26
    2214:	0e d0       	rcall	.+28     	; 0x2232 <__addsf3x>
    2216:	d9 c1       	rjmp	.+946    	; 0x25ca <__fp_round>
    2218:	ca d1       	rcall	.+916    	; 0x25ae <__fp_pscA>
    221a:	30 f0       	brcs	.+12     	; 0x2228 <__addsf3+0x18>
    221c:	cf d1       	rcall	.+926    	; 0x25bc <__fp_pscB>
    221e:	20 f0       	brcs	.+8      	; 0x2228 <__addsf3+0x18>
    2220:	31 f4       	brne	.+12     	; 0x222e <__addsf3+0x1e>
    2222:	9f 3f       	cpi	r25, 0xFF	; 255
    2224:	11 f4       	brne	.+4      	; 0x222a <__addsf3+0x1a>
    2226:	1e f4       	brtc	.+6      	; 0x222e <__addsf3+0x1e>
    2228:	af c1       	rjmp	.+862    	; 0x2588 <__fp_nan>
    222a:	0e f4       	brtc	.+2      	; 0x222e <__addsf3+0x1e>
    222c:	e0 95       	com	r30
    222e:	e7 fb       	bst	r30, 7
    2230:	a5 c1       	rjmp	.+842    	; 0x257c <__fp_inf>

00002232 <__addsf3x>:
    2232:	e9 2f       	mov	r30, r25
    2234:	db d1       	rcall	.+950    	; 0x25ec <__fp_split3>
    2236:	80 f3       	brcs	.-32     	; 0x2218 <__addsf3+0x8>
    2238:	ba 17       	cp	r27, r26
    223a:	62 07       	cpc	r22, r18
    223c:	73 07       	cpc	r23, r19
    223e:	84 07       	cpc	r24, r20
    2240:	95 07       	cpc	r25, r21
    2242:	18 f0       	brcs	.+6      	; 0x224a <__addsf3x+0x18>
    2244:	71 f4       	brne	.+28     	; 0x2262 <__addsf3x+0x30>
    2246:	9e f5       	brtc	.+102    	; 0x22ae <__addsf3x+0x7c>
    2248:	f3 c1       	rjmp	.+998    	; 0x2630 <__fp_zero>
    224a:	0e f4       	brtc	.+2      	; 0x224e <__addsf3x+0x1c>
    224c:	e0 95       	com	r30
    224e:	0b 2e       	mov	r0, r27
    2250:	ba 2f       	mov	r27, r26
    2252:	a0 2d       	mov	r26, r0
    2254:	0b 01       	movw	r0, r22
    2256:	b9 01       	movw	r22, r18
    2258:	90 01       	movw	r18, r0
    225a:	0c 01       	movw	r0, r24
    225c:	ca 01       	movw	r24, r20
    225e:	a0 01       	movw	r20, r0
    2260:	11 24       	eor	r1, r1
    2262:	ff 27       	eor	r31, r31
    2264:	59 1b       	sub	r21, r25
    2266:	99 f0       	breq	.+38     	; 0x228e <__addsf3x+0x5c>
    2268:	59 3f       	cpi	r21, 0xF9	; 249
    226a:	50 f4       	brcc	.+20     	; 0x2280 <__addsf3x+0x4e>
    226c:	50 3e       	cpi	r21, 0xE0	; 224
    226e:	68 f1       	brcs	.+90     	; 0x22ca <__addsf3x+0x98>
    2270:	1a 16       	cp	r1, r26
    2272:	f0 40       	sbci	r31, 0x00	; 0
    2274:	a2 2f       	mov	r26, r18
    2276:	23 2f       	mov	r18, r19
    2278:	34 2f       	mov	r19, r20
    227a:	44 27       	eor	r20, r20
    227c:	58 5f       	subi	r21, 0xF8	; 248
    227e:	f3 cf       	rjmp	.-26     	; 0x2266 <__addsf3x+0x34>
    2280:	46 95       	lsr	r20
    2282:	37 95       	ror	r19
    2284:	27 95       	ror	r18
    2286:	a7 95       	ror	r26
    2288:	f0 40       	sbci	r31, 0x00	; 0
    228a:	53 95       	inc	r21
    228c:	c9 f7       	brne	.-14     	; 0x2280 <__addsf3x+0x4e>
    228e:	7e f4       	brtc	.+30     	; 0x22ae <__addsf3x+0x7c>
    2290:	1f 16       	cp	r1, r31
    2292:	ba 0b       	sbc	r27, r26
    2294:	62 0b       	sbc	r22, r18
    2296:	73 0b       	sbc	r23, r19
    2298:	84 0b       	sbc	r24, r20
    229a:	ba f0       	brmi	.+46     	; 0x22ca <__addsf3x+0x98>
    229c:	91 50       	subi	r25, 0x01	; 1
    229e:	a1 f0       	breq	.+40     	; 0x22c8 <__addsf3x+0x96>
    22a0:	ff 0f       	add	r31, r31
    22a2:	bb 1f       	adc	r27, r27
    22a4:	66 1f       	adc	r22, r22
    22a6:	77 1f       	adc	r23, r23
    22a8:	88 1f       	adc	r24, r24
    22aa:	c2 f7       	brpl	.-16     	; 0x229c <__addsf3x+0x6a>
    22ac:	0e c0       	rjmp	.+28     	; 0x22ca <__addsf3x+0x98>
    22ae:	ba 0f       	add	r27, r26
    22b0:	62 1f       	adc	r22, r18
    22b2:	73 1f       	adc	r23, r19
    22b4:	84 1f       	adc	r24, r20
    22b6:	48 f4       	brcc	.+18     	; 0x22ca <__addsf3x+0x98>
    22b8:	87 95       	ror	r24
    22ba:	77 95       	ror	r23
    22bc:	67 95       	ror	r22
    22be:	b7 95       	ror	r27
    22c0:	f7 95       	ror	r31
    22c2:	9e 3f       	cpi	r25, 0xFE	; 254
    22c4:	08 f0       	brcs	.+2      	; 0x22c8 <__addsf3x+0x96>
    22c6:	b3 cf       	rjmp	.-154    	; 0x222e <__addsf3+0x1e>
    22c8:	93 95       	inc	r25
    22ca:	88 0f       	add	r24, r24
    22cc:	08 f0       	brcs	.+2      	; 0x22d0 <__addsf3x+0x9e>
    22ce:	99 27       	eor	r25, r25
    22d0:	ee 0f       	add	r30, r30
    22d2:	97 95       	ror	r25
    22d4:	87 95       	ror	r24
    22d6:	08 95       	ret

000022d8 <__divsf3>:
    22d8:	0c d0       	rcall	.+24     	; 0x22f2 <__divsf3x>
    22da:	77 c1       	rjmp	.+750    	; 0x25ca <__fp_round>
    22dc:	6f d1       	rcall	.+734    	; 0x25bc <__fp_pscB>
    22de:	40 f0       	brcs	.+16     	; 0x22f0 <__divsf3+0x18>
    22e0:	66 d1       	rcall	.+716    	; 0x25ae <__fp_pscA>
    22e2:	30 f0       	brcs	.+12     	; 0x22f0 <__divsf3+0x18>
    22e4:	21 f4       	brne	.+8      	; 0x22ee <__divsf3+0x16>
    22e6:	5f 3f       	cpi	r21, 0xFF	; 255
    22e8:	19 f0       	breq	.+6      	; 0x22f0 <__divsf3+0x18>
    22ea:	48 c1       	rjmp	.+656    	; 0x257c <__fp_inf>
    22ec:	51 11       	cpse	r21, r1
    22ee:	a1 c1       	rjmp	.+834    	; 0x2632 <__fp_szero>
    22f0:	4b c1       	rjmp	.+662    	; 0x2588 <__fp_nan>

000022f2 <__divsf3x>:
    22f2:	7c d1       	rcall	.+760    	; 0x25ec <__fp_split3>
    22f4:	98 f3       	brcs	.-26     	; 0x22dc <__divsf3+0x4>

000022f6 <__divsf3_pse>:
    22f6:	99 23       	and	r25, r25
    22f8:	c9 f3       	breq	.-14     	; 0x22ec <__divsf3+0x14>
    22fa:	55 23       	and	r21, r21
    22fc:	b1 f3       	breq	.-20     	; 0x22ea <__divsf3+0x12>
    22fe:	95 1b       	sub	r25, r21
    2300:	55 0b       	sbc	r21, r21
    2302:	bb 27       	eor	r27, r27
    2304:	aa 27       	eor	r26, r26
    2306:	62 17       	cp	r22, r18
    2308:	73 07       	cpc	r23, r19
    230a:	84 07       	cpc	r24, r20
    230c:	38 f0       	brcs	.+14     	; 0x231c <__divsf3_pse+0x26>
    230e:	9f 5f       	subi	r25, 0xFF	; 255
    2310:	5f 4f       	sbci	r21, 0xFF	; 255
    2312:	22 0f       	add	r18, r18
    2314:	33 1f       	adc	r19, r19
    2316:	44 1f       	adc	r20, r20
    2318:	aa 1f       	adc	r26, r26
    231a:	a9 f3       	breq	.-22     	; 0x2306 <__divsf3_pse+0x10>
    231c:	33 d0       	rcall	.+102    	; 0x2384 <__divsf3_pse+0x8e>
    231e:	0e 2e       	mov	r0, r30
    2320:	3a f0       	brmi	.+14     	; 0x2330 <__divsf3_pse+0x3a>
    2322:	e0 e8       	ldi	r30, 0x80	; 128
    2324:	30 d0       	rcall	.+96     	; 0x2386 <__divsf3_pse+0x90>
    2326:	91 50       	subi	r25, 0x01	; 1
    2328:	50 40       	sbci	r21, 0x00	; 0
    232a:	e6 95       	lsr	r30
    232c:	00 1c       	adc	r0, r0
    232e:	ca f7       	brpl	.-14     	; 0x2322 <__divsf3_pse+0x2c>
    2330:	29 d0       	rcall	.+82     	; 0x2384 <__divsf3_pse+0x8e>
    2332:	fe 2f       	mov	r31, r30
    2334:	27 d0       	rcall	.+78     	; 0x2384 <__divsf3_pse+0x8e>
    2336:	66 0f       	add	r22, r22
    2338:	77 1f       	adc	r23, r23
    233a:	88 1f       	adc	r24, r24
    233c:	bb 1f       	adc	r27, r27
    233e:	26 17       	cp	r18, r22
    2340:	37 07       	cpc	r19, r23
    2342:	48 07       	cpc	r20, r24
    2344:	ab 07       	cpc	r26, r27
    2346:	b0 e8       	ldi	r27, 0x80	; 128
    2348:	09 f0       	breq	.+2      	; 0x234c <__divsf3_pse+0x56>
    234a:	bb 0b       	sbc	r27, r27
    234c:	80 2d       	mov	r24, r0
    234e:	bf 01       	movw	r22, r30
    2350:	ff 27       	eor	r31, r31
    2352:	93 58       	subi	r25, 0x83	; 131
    2354:	5f 4f       	sbci	r21, 0xFF	; 255
    2356:	2a f0       	brmi	.+10     	; 0x2362 <__divsf3_pse+0x6c>
    2358:	9e 3f       	cpi	r25, 0xFE	; 254
    235a:	51 05       	cpc	r21, r1
    235c:	68 f0       	brcs	.+26     	; 0x2378 <__divsf3_pse+0x82>
    235e:	0e c1       	rjmp	.+540    	; 0x257c <__fp_inf>
    2360:	68 c1       	rjmp	.+720    	; 0x2632 <__fp_szero>
    2362:	5f 3f       	cpi	r21, 0xFF	; 255
    2364:	ec f3       	brlt	.-6      	; 0x2360 <__divsf3_pse+0x6a>
    2366:	98 3e       	cpi	r25, 0xE8	; 232
    2368:	dc f3       	brlt	.-10     	; 0x2360 <__divsf3_pse+0x6a>
    236a:	86 95       	lsr	r24
    236c:	77 95       	ror	r23
    236e:	67 95       	ror	r22
    2370:	b7 95       	ror	r27
    2372:	f7 95       	ror	r31
    2374:	9f 5f       	subi	r25, 0xFF	; 255
    2376:	c9 f7       	brne	.-14     	; 0x236a <__divsf3_pse+0x74>
    2378:	88 0f       	add	r24, r24
    237a:	91 1d       	adc	r25, r1
    237c:	96 95       	lsr	r25
    237e:	87 95       	ror	r24
    2380:	97 f9       	bld	r25, 7
    2382:	08 95       	ret
    2384:	e1 e0       	ldi	r30, 0x01	; 1
    2386:	66 0f       	add	r22, r22
    2388:	77 1f       	adc	r23, r23
    238a:	88 1f       	adc	r24, r24
    238c:	bb 1f       	adc	r27, r27
    238e:	62 17       	cp	r22, r18
    2390:	73 07       	cpc	r23, r19
    2392:	84 07       	cpc	r24, r20
    2394:	ba 07       	cpc	r27, r26
    2396:	20 f0       	brcs	.+8      	; 0x23a0 <__divsf3_pse+0xaa>
    2398:	62 1b       	sub	r22, r18
    239a:	73 0b       	sbc	r23, r19
    239c:	84 0b       	sbc	r24, r20
    239e:	ba 0b       	sbc	r27, r26
    23a0:	ee 1f       	adc	r30, r30
    23a2:	88 f7       	brcc	.-30     	; 0x2386 <__divsf3_pse+0x90>
    23a4:	e0 95       	com	r30
    23a6:	08 95       	ret

000023a8 <__fixsfdi>:
    23a8:	be e3       	ldi	r27, 0x3E	; 62
    23aa:	04 d0       	rcall	.+8      	; 0x23b4 <__fixunssfdi+0x2>
    23ac:	08 f4       	brcc	.+2      	; 0x23b0 <__fixsfdi+0x8>
    23ae:	90 e8       	ldi	r25, 0x80	; 128
    23b0:	08 95       	ret

000023b2 <__fixunssfdi>:
    23b2:	bf e3       	ldi	r27, 0x3F	; 63
    23b4:	22 27       	eor	r18, r18
    23b6:	33 27       	eor	r19, r19
    23b8:	a9 01       	movw	r20, r18
    23ba:	20 d1       	rcall	.+576    	; 0x25fc <__fp_splitA>
    23bc:	58 f1       	brcs	.+86     	; 0x2414 <__fixunssfdi+0x62>
    23be:	9f 57       	subi	r25, 0x7F	; 127
    23c0:	40 f1       	brcs	.+80     	; 0x2412 <__fixunssfdi+0x60>
    23c2:	b9 17       	cp	r27, r25
    23c4:	38 f1       	brcs	.+78     	; 0x2414 <__fixunssfdi+0x62>
    23c6:	bf e3       	ldi	r27, 0x3F	; 63
    23c8:	b9 1b       	sub	r27, r25
    23ca:	99 27       	eor	r25, r25
    23cc:	b8 50       	subi	r27, 0x08	; 8
    23ce:	3a f4       	brpl	.+14     	; 0x23de <__fixunssfdi+0x2c>
    23d0:	66 0f       	add	r22, r22
    23d2:	77 1f       	adc	r23, r23
    23d4:	88 1f       	adc	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	b3 95       	inc	r27
    23da:	d2 f3       	brmi	.-12     	; 0x23d0 <__fixunssfdi+0x1e>
    23dc:	16 c0       	rjmp	.+44     	; 0x240a <__fixunssfdi+0x58>
    23de:	b8 50       	subi	r27, 0x08	; 8
    23e0:	4a f0       	brmi	.+18     	; 0x23f4 <__fixunssfdi+0x42>
    23e2:	23 2f       	mov	r18, r19
    23e4:	34 2f       	mov	r19, r20
    23e6:	45 2f       	mov	r20, r21
    23e8:	56 2f       	mov	r21, r22
    23ea:	67 2f       	mov	r22, r23
    23ec:	78 2f       	mov	r23, r24
    23ee:	88 27       	eor	r24, r24
    23f0:	b8 50       	subi	r27, 0x08	; 8
    23f2:	ba f7       	brpl	.-18     	; 0x23e2 <__fixunssfdi+0x30>
    23f4:	b8 5f       	subi	r27, 0xF8	; 248
    23f6:	49 f0       	breq	.+18     	; 0x240a <__fixunssfdi+0x58>
    23f8:	86 95       	lsr	r24
    23fa:	77 95       	ror	r23
    23fc:	67 95       	ror	r22
    23fe:	57 95       	ror	r21
    2400:	47 95       	ror	r20
    2402:	37 95       	ror	r19
    2404:	27 95       	ror	r18
    2406:	ba 95       	dec	r27
    2408:	b9 f7       	brne	.-18     	; 0x23f8 <__fixunssfdi+0x46>
    240a:	0e f4       	brtc	.+2      	; 0x240e <__fixunssfdi+0x5c>
    240c:	c0 d0       	rcall	.+384    	; 0x258e <__fp_negdi>
    240e:	88 94       	clc
    2410:	08 95       	ret
    2412:	88 94       	clc
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	70 e0       	ldi	r23, 0x00	; 0
    2418:	cb 01       	movw	r24, r22
    241a:	08 95       	ret

0000241c <__fixsfsi>:
    241c:	04 d0       	rcall	.+8      	; 0x2426 <__fixunssfsi>
    241e:	68 94       	set
    2420:	b1 11       	cpse	r27, r1
    2422:	07 c1       	rjmp	.+526    	; 0x2632 <__fp_szero>
    2424:	08 95       	ret

00002426 <__fixunssfsi>:
    2426:	ea d0       	rcall	.+468    	; 0x25fc <__fp_splitA>
    2428:	88 f0       	brcs	.+34     	; 0x244c <__fixunssfsi+0x26>
    242a:	9f 57       	subi	r25, 0x7F	; 127
    242c:	90 f0       	brcs	.+36     	; 0x2452 <__fixunssfsi+0x2c>
    242e:	b9 2f       	mov	r27, r25
    2430:	99 27       	eor	r25, r25
    2432:	b7 51       	subi	r27, 0x17	; 23
    2434:	a0 f0       	brcs	.+40     	; 0x245e <__fixunssfsi+0x38>
    2436:	d1 f0       	breq	.+52     	; 0x246c <__fixunssfsi+0x46>
    2438:	66 0f       	add	r22, r22
    243a:	77 1f       	adc	r23, r23
    243c:	88 1f       	adc	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	1a f0       	brmi	.+6      	; 0x2448 <__fixunssfsi+0x22>
    2442:	ba 95       	dec	r27
    2444:	c9 f7       	brne	.-14     	; 0x2438 <__fixunssfsi+0x12>
    2446:	12 c0       	rjmp	.+36     	; 0x246c <__fixunssfsi+0x46>
    2448:	b1 30       	cpi	r27, 0x01	; 1
    244a:	81 f0       	breq	.+32     	; 0x246c <__fixunssfsi+0x46>
    244c:	f1 d0       	rcall	.+482    	; 0x2630 <__fp_zero>
    244e:	b1 e0       	ldi	r27, 0x01	; 1
    2450:	08 95       	ret
    2452:	ee c0       	rjmp	.+476    	; 0x2630 <__fp_zero>
    2454:	67 2f       	mov	r22, r23
    2456:	78 2f       	mov	r23, r24
    2458:	88 27       	eor	r24, r24
    245a:	b8 5f       	subi	r27, 0xF8	; 248
    245c:	39 f0       	breq	.+14     	; 0x246c <__fixunssfsi+0x46>
    245e:	b9 3f       	cpi	r27, 0xF9	; 249
    2460:	cc f3       	brlt	.-14     	; 0x2454 <__fixunssfsi+0x2e>
    2462:	86 95       	lsr	r24
    2464:	77 95       	ror	r23
    2466:	67 95       	ror	r22
    2468:	b3 95       	inc	r27
    246a:	d9 f7       	brne	.-10     	; 0x2462 <__fixunssfsi+0x3c>
    246c:	3e f4       	brtc	.+14     	; 0x247c <__fixunssfsi+0x56>
    246e:	90 95       	com	r25
    2470:	80 95       	com	r24
    2472:	70 95       	com	r23
    2474:	61 95       	neg	r22
    2476:	7f 4f       	sbci	r23, 0xFF	; 255
    2478:	8f 4f       	sbci	r24, 0xFF	; 255
    247a:	9f 4f       	sbci	r25, 0xFF	; 255
    247c:	08 95       	ret

0000247e <__floatdisf>:
    247e:	97 fb       	bst	r25, 7
    2480:	0e f4       	brtc	.+2      	; 0x2484 <__floatdisf+0x6>
    2482:	85 d0       	rcall	.+266    	; 0x258e <__fp_negdi>
    2484:	3e c0       	rjmp	.+124    	; 0x2502 <__fp_di2sf>

00002486 <__floatunsisf>:
    2486:	e8 94       	clt
    2488:	09 c0       	rjmp	.+18     	; 0x249c <__floatsisf+0x12>

0000248a <__floatsisf>:
    248a:	97 fb       	bst	r25, 7
    248c:	3e f4       	brtc	.+14     	; 0x249c <__floatsisf+0x12>
    248e:	90 95       	com	r25
    2490:	80 95       	com	r24
    2492:	70 95       	com	r23
    2494:	61 95       	neg	r22
    2496:	7f 4f       	sbci	r23, 0xFF	; 255
    2498:	8f 4f       	sbci	r24, 0xFF	; 255
    249a:	9f 4f       	sbci	r25, 0xFF	; 255
    249c:	99 23       	and	r25, r25
    249e:	a9 f0       	breq	.+42     	; 0x24ca <__floatsisf+0x40>
    24a0:	f9 2f       	mov	r31, r25
    24a2:	96 e9       	ldi	r25, 0x96	; 150
    24a4:	bb 27       	eor	r27, r27
    24a6:	93 95       	inc	r25
    24a8:	f6 95       	lsr	r31
    24aa:	87 95       	ror	r24
    24ac:	77 95       	ror	r23
    24ae:	67 95       	ror	r22
    24b0:	b7 95       	ror	r27
    24b2:	f1 11       	cpse	r31, r1
    24b4:	f8 cf       	rjmp	.-16     	; 0x24a6 <__floatsisf+0x1c>
    24b6:	fa f4       	brpl	.+62     	; 0x24f6 <__floatsisf+0x6c>
    24b8:	bb 0f       	add	r27, r27
    24ba:	11 f4       	brne	.+4      	; 0x24c0 <__floatsisf+0x36>
    24bc:	60 ff       	sbrs	r22, 0
    24be:	1b c0       	rjmp	.+54     	; 0x24f6 <__floatsisf+0x6c>
    24c0:	6f 5f       	subi	r22, 0xFF	; 255
    24c2:	7f 4f       	sbci	r23, 0xFF	; 255
    24c4:	8f 4f       	sbci	r24, 0xFF	; 255
    24c6:	9f 4f       	sbci	r25, 0xFF	; 255
    24c8:	16 c0       	rjmp	.+44     	; 0x24f6 <__floatsisf+0x6c>
    24ca:	88 23       	and	r24, r24
    24cc:	11 f0       	breq	.+4      	; 0x24d2 <__floatsisf+0x48>
    24ce:	96 e9       	ldi	r25, 0x96	; 150
    24d0:	11 c0       	rjmp	.+34     	; 0x24f4 <__floatsisf+0x6a>
    24d2:	77 23       	and	r23, r23
    24d4:	21 f0       	breq	.+8      	; 0x24de <__floatsisf+0x54>
    24d6:	9e e8       	ldi	r25, 0x8E	; 142
    24d8:	87 2f       	mov	r24, r23
    24da:	76 2f       	mov	r23, r22
    24dc:	05 c0       	rjmp	.+10     	; 0x24e8 <__floatsisf+0x5e>
    24de:	66 23       	and	r22, r22
    24e0:	71 f0       	breq	.+28     	; 0x24fe <__floatsisf+0x74>
    24e2:	96 e8       	ldi	r25, 0x86	; 134
    24e4:	86 2f       	mov	r24, r22
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	2a f0       	brmi	.+10     	; 0x24f6 <__floatsisf+0x6c>
    24ec:	9a 95       	dec	r25
    24ee:	66 0f       	add	r22, r22
    24f0:	77 1f       	adc	r23, r23
    24f2:	88 1f       	adc	r24, r24
    24f4:	da f7       	brpl	.-10     	; 0x24ec <__floatsisf+0x62>
    24f6:	88 0f       	add	r24, r24
    24f8:	96 95       	lsr	r25
    24fa:	87 95       	ror	r24
    24fc:	97 f9       	bld	r25, 7
    24fe:	08 95       	ret

00002500 <__floatundisf>:
    2500:	e8 94       	clt

00002502 <__fp_di2sf>:
    2502:	f9 2f       	mov	r31, r25
    2504:	96 eb       	ldi	r25, 0xB6	; 182
    2506:	ff 23       	and	r31, r31
    2508:	81 f0       	breq	.+32     	; 0x252a <__fp_di2sf+0x28>
    250a:	12 16       	cp	r1, r18
    250c:	13 06       	cpc	r1, r19
    250e:	14 06       	cpc	r1, r20
    2510:	44 0b       	sbc	r20, r20
    2512:	93 95       	inc	r25
    2514:	f6 95       	lsr	r31
    2516:	87 95       	ror	r24
    2518:	77 95       	ror	r23
    251a:	67 95       	ror	r22
    251c:	57 95       	ror	r21
    251e:	40 40       	sbci	r20, 0x00	; 0
    2520:	ff 23       	and	r31, r31
    2522:	b9 f7       	brne	.-18     	; 0x2512 <__fp_di2sf+0x10>
    2524:	1b c0       	rjmp	.+54     	; 0x255c <__fp_di2sf+0x5a>
    2526:	99 27       	eor	r25, r25
    2528:	08 95       	ret
    252a:	88 23       	and	r24, r24
    252c:	51 f4       	brne	.+20     	; 0x2542 <__fp_di2sf+0x40>
    252e:	98 50       	subi	r25, 0x08	; 8
    2530:	d2 f7       	brpl	.-12     	; 0x2526 <__fp_di2sf+0x24>
    2532:	87 2b       	or	r24, r23
    2534:	76 2f       	mov	r23, r22
    2536:	65 2f       	mov	r22, r21
    2538:	54 2f       	mov	r21, r20
    253a:	43 2f       	mov	r20, r19
    253c:	32 2f       	mov	r19, r18
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	b1 f3       	breq	.-20     	; 0x252e <__fp_di2sf+0x2c>
    2542:	12 16       	cp	r1, r18
    2544:	13 06       	cpc	r1, r19
    2546:	14 06       	cpc	r1, r20
    2548:	44 0b       	sbc	r20, r20
    254a:	88 23       	and	r24, r24
    254c:	3a f0       	brmi	.+14     	; 0x255c <__fp_di2sf+0x5a>
    254e:	9a 95       	dec	r25
    2550:	44 0f       	add	r20, r20
    2552:	55 1f       	adc	r21, r21
    2554:	66 1f       	adc	r22, r22
    2556:	77 1f       	adc	r23, r23
    2558:	88 1f       	adc	r24, r24
    255a:	ca f7       	brpl	.-14     	; 0x254e <__fp_di2sf+0x4c>
    255c:	55 23       	and	r21, r21
    255e:	4a f4       	brpl	.+18     	; 0x2572 <__fp_di2sf+0x70>
    2560:	44 0f       	add	r20, r20
    2562:	55 1f       	adc	r21, r21
    2564:	11 f4       	brne	.+4      	; 0x256a <__fp_di2sf+0x68>
    2566:	60 ff       	sbrs	r22, 0
    2568:	04 c0       	rjmp	.+8      	; 0x2572 <__fp_di2sf+0x70>
    256a:	6f 5f       	subi	r22, 0xFF	; 255
    256c:	7f 4f       	sbci	r23, 0xFF	; 255
    256e:	8f 4f       	sbci	r24, 0xFF	; 255
    2570:	9f 4f       	sbci	r25, 0xFF	; 255
    2572:	88 0f       	add	r24, r24
    2574:	96 95       	lsr	r25
    2576:	87 95       	ror	r24
    2578:	97 f9       	bld	r25, 7
    257a:	08 95       	ret

0000257c <__fp_inf>:
    257c:	97 f9       	bld	r25, 7
    257e:	9f 67       	ori	r25, 0x7F	; 127
    2580:	80 e8       	ldi	r24, 0x80	; 128
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	08 95       	ret

00002588 <__fp_nan>:
    2588:	9f ef       	ldi	r25, 0xFF	; 255
    258a:	80 ec       	ldi	r24, 0xC0	; 192
    258c:	08 95       	ret

0000258e <__fp_negdi>:
    258e:	90 95       	com	r25
    2590:	80 95       	com	r24
    2592:	70 95       	com	r23
    2594:	60 95       	com	r22
    2596:	50 95       	com	r21
    2598:	40 95       	com	r20
    259a:	30 95       	com	r19
    259c:	21 95       	neg	r18
    259e:	3f 4f       	sbci	r19, 0xFF	; 255
    25a0:	4f 4f       	sbci	r20, 0xFF	; 255
    25a2:	5f 4f       	sbci	r21, 0xFF	; 255
    25a4:	6f 4f       	sbci	r22, 0xFF	; 255
    25a6:	7f 4f       	sbci	r23, 0xFF	; 255
    25a8:	8f 4f       	sbci	r24, 0xFF	; 255
    25aa:	9f 4f       	sbci	r25, 0xFF	; 255
    25ac:	08 95       	ret

000025ae <__fp_pscA>:
    25ae:	00 24       	eor	r0, r0
    25b0:	0a 94       	dec	r0
    25b2:	16 16       	cp	r1, r22
    25b4:	17 06       	cpc	r1, r23
    25b6:	18 06       	cpc	r1, r24
    25b8:	09 06       	cpc	r0, r25
    25ba:	08 95       	ret

000025bc <__fp_pscB>:
    25bc:	00 24       	eor	r0, r0
    25be:	0a 94       	dec	r0
    25c0:	12 16       	cp	r1, r18
    25c2:	13 06       	cpc	r1, r19
    25c4:	14 06       	cpc	r1, r20
    25c6:	05 06       	cpc	r0, r21
    25c8:	08 95       	ret

000025ca <__fp_round>:
    25ca:	09 2e       	mov	r0, r25
    25cc:	03 94       	inc	r0
    25ce:	00 0c       	add	r0, r0
    25d0:	11 f4       	brne	.+4      	; 0x25d6 <__fp_round+0xc>
    25d2:	88 23       	and	r24, r24
    25d4:	52 f0       	brmi	.+20     	; 0x25ea <__fp_round+0x20>
    25d6:	bb 0f       	add	r27, r27
    25d8:	40 f4       	brcc	.+16     	; 0x25ea <__fp_round+0x20>
    25da:	bf 2b       	or	r27, r31
    25dc:	11 f4       	brne	.+4      	; 0x25e2 <__fp_round+0x18>
    25de:	60 ff       	sbrs	r22, 0
    25e0:	04 c0       	rjmp	.+8      	; 0x25ea <__fp_round+0x20>
    25e2:	6f 5f       	subi	r22, 0xFF	; 255
    25e4:	7f 4f       	sbci	r23, 0xFF	; 255
    25e6:	8f 4f       	sbci	r24, 0xFF	; 255
    25e8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ea:	08 95       	ret

000025ec <__fp_split3>:
    25ec:	57 fd       	sbrc	r21, 7
    25ee:	90 58       	subi	r25, 0x80	; 128
    25f0:	44 0f       	add	r20, r20
    25f2:	55 1f       	adc	r21, r21
    25f4:	59 f0       	breq	.+22     	; 0x260c <__fp_splitA+0x10>
    25f6:	5f 3f       	cpi	r21, 0xFF	; 255
    25f8:	71 f0       	breq	.+28     	; 0x2616 <__fp_splitA+0x1a>
    25fa:	47 95       	ror	r20

000025fc <__fp_splitA>:
    25fc:	88 0f       	add	r24, r24
    25fe:	97 fb       	bst	r25, 7
    2600:	99 1f       	adc	r25, r25
    2602:	61 f0       	breq	.+24     	; 0x261c <__fp_splitA+0x20>
    2604:	9f 3f       	cpi	r25, 0xFF	; 255
    2606:	79 f0       	breq	.+30     	; 0x2626 <__fp_splitA+0x2a>
    2608:	87 95       	ror	r24
    260a:	08 95       	ret
    260c:	12 16       	cp	r1, r18
    260e:	13 06       	cpc	r1, r19
    2610:	14 06       	cpc	r1, r20
    2612:	55 1f       	adc	r21, r21
    2614:	f2 cf       	rjmp	.-28     	; 0x25fa <__fp_split3+0xe>
    2616:	46 95       	lsr	r20
    2618:	f1 df       	rcall	.-30     	; 0x25fc <__fp_splitA>
    261a:	08 c0       	rjmp	.+16     	; 0x262c <__fp_splitA+0x30>
    261c:	16 16       	cp	r1, r22
    261e:	17 06       	cpc	r1, r23
    2620:	18 06       	cpc	r1, r24
    2622:	99 1f       	adc	r25, r25
    2624:	f1 cf       	rjmp	.-30     	; 0x2608 <__fp_splitA+0xc>
    2626:	86 95       	lsr	r24
    2628:	71 05       	cpc	r23, r1
    262a:	61 05       	cpc	r22, r1
    262c:	08 94       	sec
    262e:	08 95       	ret

00002630 <__fp_zero>:
    2630:	e8 94       	clt

00002632 <__fp_szero>:
    2632:	bb 27       	eor	r27, r27
    2634:	66 27       	eor	r22, r22
    2636:	77 27       	eor	r23, r23
    2638:	cb 01       	movw	r24, r22
    263a:	97 f9       	bld	r25, 7
    263c:	08 95       	ret
    263e:	0e f0       	brts	.+2      	; 0x2642 <__fp_szero+0x10>
    2640:	a6 c0       	rjmp	.+332    	; 0x278e <__fp_mpack>
    2642:	a2 cf       	rjmp	.-188    	; 0x2588 <__fp_nan>
    2644:	68 94       	set
    2646:	9a cf       	rjmp	.-204    	; 0x257c <__fp_inf>

00002648 <log>:
    2648:	d9 df       	rcall	.-78     	; 0x25fc <__fp_splitA>
    264a:	c8 f3       	brcs	.-14     	; 0x263e <__fp_szero+0xc>
    264c:	99 23       	and	r25, r25
    264e:	d1 f3       	breq	.-12     	; 0x2644 <__fp_szero+0x12>
    2650:	c6 f3       	brts	.-16     	; 0x2642 <__fp_szero+0x10>
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	1f 93       	push	r17
    2658:	0f 93       	push	r16
    265a:	ff 92       	push	r15
    265c:	c9 2f       	mov	r28, r25
    265e:	dd 27       	eor	r29, r29
    2660:	88 23       	and	r24, r24
    2662:	2a f0       	brmi	.+10     	; 0x266e <log+0x26>
    2664:	21 97       	sbiw	r28, 0x01	; 1
    2666:	66 0f       	add	r22, r22
    2668:	77 1f       	adc	r23, r23
    266a:	88 1f       	adc	r24, r24
    266c:	da f7       	brpl	.-10     	; 0x2664 <log+0x1c>
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e8       	ldi	r20, 0x80	; 128
    2674:	5f eb       	ldi	r21, 0xBF	; 191
    2676:	9f e3       	ldi	r25, 0x3F	; 63
    2678:	88 39       	cpi	r24, 0x98	; 152
    267a:	20 f0       	brcs	.+8      	; 0x2684 <log+0x3c>
    267c:	80 3e       	cpi	r24, 0xE0	; 224
    267e:	30 f0       	brcs	.+12     	; 0x268c <log+0x44>
    2680:	21 96       	adiw	r28, 0x01	; 1
    2682:	8f 77       	andi	r24, 0x7F	; 127
    2684:	c5 dd       	rcall	.-1142   	; 0x2210 <__addsf3>
    2686:	e4 ef       	ldi	r30, 0xF4	; 244
    2688:	f1 e0       	ldi	r31, 0x01	; 1
    268a:	03 c0       	rjmp	.+6      	; 0x2692 <log+0x4a>
    268c:	c1 dd       	rcall	.-1150   	; 0x2210 <__addsf3>
    268e:	e1 e2       	ldi	r30, 0x21	; 33
    2690:	f2 e0       	ldi	r31, 0x02	; 2
    2692:	8b d0       	rcall	.+278    	; 0x27aa <__fp_powser>
    2694:	8b 01       	movw	r16, r22
    2696:	be 01       	movw	r22, r28
    2698:	ec 01       	movw	r28, r24
    269a:	fb 2e       	mov	r15, r27
    269c:	6f 57       	subi	r22, 0x7F	; 127
    269e:	71 09       	sbc	r23, r1
    26a0:	75 95       	asr	r23
    26a2:	77 1f       	adc	r23, r23
    26a4:	88 0b       	sbc	r24, r24
    26a6:	99 0b       	sbc	r25, r25
    26a8:	f0 de       	rcall	.-544    	; 0x248a <__floatsisf>
    26aa:	28 e1       	ldi	r18, 0x18	; 24
    26ac:	32 e7       	ldi	r19, 0x72	; 114
    26ae:	41 e3       	ldi	r20, 0x31	; 49
    26b0:	5f e3       	ldi	r21, 0x3F	; 63
    26b2:	16 d0       	rcall	.+44     	; 0x26e0 <__mulsf3x>
    26b4:	af 2d       	mov	r26, r15
    26b6:	98 01       	movw	r18, r16
    26b8:	ae 01       	movw	r20, r28
    26ba:	ff 90       	pop	r15
    26bc:	0f 91       	pop	r16
    26be:	1f 91       	pop	r17
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	b6 dd       	rcall	.-1172   	; 0x2232 <__addsf3x>
    26c6:	81 cf       	rjmp	.-254    	; 0x25ca <__fp_round>

000026c8 <__mulsf3>:
    26c8:	0b d0       	rcall	.+22     	; 0x26e0 <__mulsf3x>
    26ca:	7f cf       	rjmp	.-258    	; 0x25ca <__fp_round>
    26cc:	70 df       	rcall	.-288    	; 0x25ae <__fp_pscA>
    26ce:	28 f0       	brcs	.+10     	; 0x26da <__mulsf3+0x12>
    26d0:	75 df       	rcall	.-278    	; 0x25bc <__fp_pscB>
    26d2:	18 f0       	brcs	.+6      	; 0x26da <__mulsf3+0x12>
    26d4:	95 23       	and	r25, r21
    26d6:	09 f0       	breq	.+2      	; 0x26da <__mulsf3+0x12>
    26d8:	51 cf       	rjmp	.-350    	; 0x257c <__fp_inf>
    26da:	56 cf       	rjmp	.-340    	; 0x2588 <__fp_nan>
    26dc:	11 24       	eor	r1, r1
    26de:	a9 cf       	rjmp	.-174    	; 0x2632 <__fp_szero>

000026e0 <__mulsf3x>:
    26e0:	85 df       	rcall	.-246    	; 0x25ec <__fp_split3>
    26e2:	a0 f3       	brcs	.-24     	; 0x26cc <__mulsf3+0x4>

000026e4 <__mulsf3_pse>:
    26e4:	95 9f       	mul	r25, r21
    26e6:	d1 f3       	breq	.-12     	; 0x26dc <__mulsf3+0x14>
    26e8:	95 0f       	add	r25, r21
    26ea:	50 e0       	ldi	r21, 0x00	; 0
    26ec:	55 1f       	adc	r21, r21
    26ee:	62 9f       	mul	r22, r18
    26f0:	f0 01       	movw	r30, r0
    26f2:	72 9f       	mul	r23, r18
    26f4:	bb 27       	eor	r27, r27
    26f6:	f0 0d       	add	r31, r0
    26f8:	b1 1d       	adc	r27, r1
    26fa:	63 9f       	mul	r22, r19
    26fc:	aa 27       	eor	r26, r26
    26fe:	f0 0d       	add	r31, r0
    2700:	b1 1d       	adc	r27, r1
    2702:	aa 1f       	adc	r26, r26
    2704:	64 9f       	mul	r22, r20
    2706:	66 27       	eor	r22, r22
    2708:	b0 0d       	add	r27, r0
    270a:	a1 1d       	adc	r26, r1
    270c:	66 1f       	adc	r22, r22
    270e:	82 9f       	mul	r24, r18
    2710:	22 27       	eor	r18, r18
    2712:	b0 0d       	add	r27, r0
    2714:	a1 1d       	adc	r26, r1
    2716:	62 1f       	adc	r22, r18
    2718:	73 9f       	mul	r23, r19
    271a:	b0 0d       	add	r27, r0
    271c:	a1 1d       	adc	r26, r1
    271e:	62 1f       	adc	r22, r18
    2720:	83 9f       	mul	r24, r19
    2722:	a0 0d       	add	r26, r0
    2724:	61 1d       	adc	r22, r1
    2726:	22 1f       	adc	r18, r18
    2728:	74 9f       	mul	r23, r20
    272a:	33 27       	eor	r19, r19
    272c:	a0 0d       	add	r26, r0
    272e:	61 1d       	adc	r22, r1
    2730:	23 1f       	adc	r18, r19
    2732:	84 9f       	mul	r24, r20
    2734:	60 0d       	add	r22, r0
    2736:	21 1d       	adc	r18, r1
    2738:	82 2f       	mov	r24, r18
    273a:	76 2f       	mov	r23, r22
    273c:	6a 2f       	mov	r22, r26
    273e:	11 24       	eor	r1, r1
    2740:	9f 57       	subi	r25, 0x7F	; 127
    2742:	50 40       	sbci	r21, 0x00	; 0
    2744:	8a f0       	brmi	.+34     	; 0x2768 <__mulsf3_pse+0x84>
    2746:	e1 f0       	breq	.+56     	; 0x2780 <__mulsf3_pse+0x9c>
    2748:	88 23       	and	r24, r24
    274a:	4a f0       	brmi	.+18     	; 0x275e <__mulsf3_pse+0x7a>
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	bb 1f       	adc	r27, r27
    2752:	66 1f       	adc	r22, r22
    2754:	77 1f       	adc	r23, r23
    2756:	88 1f       	adc	r24, r24
    2758:	91 50       	subi	r25, 0x01	; 1
    275a:	50 40       	sbci	r21, 0x00	; 0
    275c:	a9 f7       	brne	.-22     	; 0x2748 <__mulsf3_pse+0x64>
    275e:	9e 3f       	cpi	r25, 0xFE	; 254
    2760:	51 05       	cpc	r21, r1
    2762:	70 f0       	brcs	.+28     	; 0x2780 <__mulsf3_pse+0x9c>
    2764:	0b cf       	rjmp	.-490    	; 0x257c <__fp_inf>
    2766:	65 cf       	rjmp	.-310    	; 0x2632 <__fp_szero>
    2768:	5f 3f       	cpi	r21, 0xFF	; 255
    276a:	ec f3       	brlt	.-6      	; 0x2766 <__mulsf3_pse+0x82>
    276c:	98 3e       	cpi	r25, 0xE8	; 232
    276e:	dc f3       	brlt	.-10     	; 0x2766 <__mulsf3_pse+0x82>
    2770:	86 95       	lsr	r24
    2772:	77 95       	ror	r23
    2774:	67 95       	ror	r22
    2776:	b7 95       	ror	r27
    2778:	f7 95       	ror	r31
    277a:	e7 95       	ror	r30
    277c:	9f 5f       	subi	r25, 0xFF	; 255
    277e:	c1 f7       	brne	.-16     	; 0x2770 <__mulsf3_pse+0x8c>
    2780:	fe 2b       	or	r31, r30
    2782:	88 0f       	add	r24, r24
    2784:	91 1d       	adc	r25, r1
    2786:	96 95       	lsr	r25
    2788:	87 95       	ror	r24
    278a:	97 f9       	bld	r25, 7
    278c:	08 95       	ret

0000278e <__fp_mpack>:
    278e:	9f 3f       	cpi	r25, 0xFF	; 255
    2790:	31 f0       	breq	.+12     	; 0x279e <__fp_mpack_finite+0xc>

00002792 <__fp_mpack_finite>:
    2792:	91 50       	subi	r25, 0x01	; 1
    2794:	20 f4       	brcc	.+8      	; 0x279e <__fp_mpack_finite+0xc>
    2796:	87 95       	ror	r24
    2798:	77 95       	ror	r23
    279a:	67 95       	ror	r22
    279c:	b7 95       	ror	r27
    279e:	88 0f       	add	r24, r24
    27a0:	91 1d       	adc	r25, r1
    27a2:	96 95       	lsr	r25
    27a4:	87 95       	ror	r24
    27a6:	97 f9       	bld	r25, 7
    27a8:	08 95       	ret

000027aa <__fp_powser>:
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	1f 93       	push	r17
    27b0:	0f 93       	push	r16
    27b2:	ff 92       	push	r15
    27b4:	ef 92       	push	r14
    27b6:	df 92       	push	r13
    27b8:	7b 01       	movw	r14, r22
    27ba:	8c 01       	movw	r16, r24
    27bc:	68 94       	set
    27be:	05 c0       	rjmp	.+10     	; 0x27ca <__fp_powser+0x20>
    27c0:	da 2e       	mov	r13, r26
    27c2:	ef 01       	movw	r28, r30
    27c4:	8d df       	rcall	.-230    	; 0x26e0 <__mulsf3x>
    27c6:	fe 01       	movw	r30, r28
    27c8:	e8 94       	clt
    27ca:	a5 91       	lpm	r26, Z+
    27cc:	25 91       	lpm	r18, Z+
    27ce:	35 91       	lpm	r19, Z+
    27d0:	45 91       	lpm	r20, Z+
    27d2:	55 91       	lpm	r21, Z+
    27d4:	ae f3       	brts	.-22     	; 0x27c0 <__fp_powser+0x16>
    27d6:	ef 01       	movw	r28, r30
    27d8:	2c dd       	rcall	.-1448   	; 0x2232 <__addsf3x>
    27da:	fe 01       	movw	r30, r28
    27dc:	97 01       	movw	r18, r14
    27de:	a8 01       	movw	r20, r16
    27e0:	da 94       	dec	r13
    27e2:	79 f7       	brne	.-34     	; 0x27c2 <__fp_powser+0x18>
    27e4:	df 90       	pop	r13
    27e6:	ef 90       	pop	r14
    27e8:	ff 90       	pop	r15
    27ea:	0f 91       	pop	r16
    27ec:	1f 91       	pop	r17
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <__udivmodsi4>:
    27f4:	a1 e2       	ldi	r26, 0x21	; 33
    27f6:	1a 2e       	mov	r1, r26
    27f8:	aa 1b       	sub	r26, r26
    27fa:	bb 1b       	sub	r27, r27
    27fc:	fd 01       	movw	r30, r26
    27fe:	0d c0       	rjmp	.+26     	; 0x281a <__udivmodsi4_ep>

00002800 <__udivmodsi4_loop>:
    2800:	aa 1f       	adc	r26, r26
    2802:	bb 1f       	adc	r27, r27
    2804:	ee 1f       	adc	r30, r30
    2806:	ff 1f       	adc	r31, r31
    2808:	a2 17       	cp	r26, r18
    280a:	b3 07       	cpc	r27, r19
    280c:	e4 07       	cpc	r30, r20
    280e:	f5 07       	cpc	r31, r21
    2810:	20 f0       	brcs	.+8      	; 0x281a <__udivmodsi4_ep>
    2812:	a2 1b       	sub	r26, r18
    2814:	b3 0b       	sbc	r27, r19
    2816:	e4 0b       	sbc	r30, r20
    2818:	f5 0b       	sbc	r31, r21

0000281a <__udivmodsi4_ep>:
    281a:	66 1f       	adc	r22, r22
    281c:	77 1f       	adc	r23, r23
    281e:	88 1f       	adc	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	1a 94       	dec	r1
    2824:	69 f7       	brne	.-38     	; 0x2800 <__udivmodsi4_loop>
    2826:	60 95       	com	r22
    2828:	70 95       	com	r23
    282a:	80 95       	com	r24
    282c:	90 95       	com	r25
    282e:	9b 01       	movw	r18, r22
    2830:	ac 01       	movw	r20, r24
    2832:	bd 01       	movw	r22, r26
    2834:	cf 01       	movw	r24, r30
    2836:	08 95       	ret

00002838 <__muluhisi3>:
    2838:	5a d0       	rcall	.+180    	; 0x28ee <__umulhisi3>
    283a:	a5 9f       	mul	r26, r21
    283c:	90 0d       	add	r25, r0
    283e:	b4 9f       	mul	r27, r20
    2840:	90 0d       	add	r25, r0
    2842:	a4 9f       	mul	r26, r20
    2844:	80 0d       	add	r24, r0
    2846:	91 1d       	adc	r25, r1
    2848:	11 24       	eor	r1, r1
    284a:	08 95       	ret

0000284c <__muldi3>:
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	1f 93       	push	r17
    2852:	0f 93       	push	r16
    2854:	9a 9d       	mul	r25, r10
    2856:	f0 2d       	mov	r31, r0
    2858:	21 9f       	mul	r18, r17
    285a:	f0 0d       	add	r31, r0
    285c:	8b 9d       	mul	r24, r11
    285e:	f0 0d       	add	r31, r0
    2860:	8a 9d       	mul	r24, r10
    2862:	e0 2d       	mov	r30, r0
    2864:	f1 0d       	add	r31, r1
    2866:	03 9f       	mul	r16, r19
    2868:	f0 0d       	add	r31, r0
    286a:	02 9f       	mul	r16, r18
    286c:	e0 0d       	add	r30, r0
    286e:	f1 1d       	adc	r31, r1
    2870:	4e 9d       	mul	r20, r14
    2872:	e0 0d       	add	r30, r0
    2874:	f1 1d       	adc	r31, r1
    2876:	5e 9d       	mul	r21, r14
    2878:	f0 0d       	add	r31, r0
    287a:	4f 9d       	mul	r20, r15
    287c:	f0 0d       	add	r31, r0
    287e:	7f 93       	push	r23
    2880:	6f 93       	push	r22
    2882:	bf 92       	push	r11
    2884:	af 92       	push	r10
    2886:	5f 93       	push	r21
    2888:	4f 93       	push	r20
    288a:	d5 01       	movw	r26, r10
    288c:	30 d0       	rcall	.+96     	; 0x28ee <__umulhisi3>
    288e:	8b 01       	movw	r16, r22
    2890:	ac 01       	movw	r20, r24
    2892:	d7 01       	movw	r26, r14
    2894:	2c d0       	rcall	.+88     	; 0x28ee <__umulhisi3>
    2896:	eb 01       	movw	r28, r22
    2898:	e8 0f       	add	r30, r24
    289a:	f9 1f       	adc	r31, r25
    289c:	d6 01       	movw	r26, r12
    289e:	1f d0       	rcall	.+62     	; 0x28de <__muldi3_6>
    28a0:	2f 91       	pop	r18
    28a2:	3f 91       	pop	r19
    28a4:	d6 01       	movw	r26, r12
    28a6:	23 d0       	rcall	.+70     	; 0x28ee <__umulhisi3>
    28a8:	c6 0f       	add	r28, r22
    28aa:	d7 1f       	adc	r29, r23
    28ac:	e8 1f       	adc	r30, r24
    28ae:	f9 1f       	adc	r31, r25
    28b0:	af 91       	pop	r26
    28b2:	bf 91       	pop	r27
    28b4:	14 d0       	rcall	.+40     	; 0x28de <__muldi3_6>
    28b6:	2f 91       	pop	r18
    28b8:	3f 91       	pop	r19
    28ba:	19 d0       	rcall	.+50     	; 0x28ee <__umulhisi3>
    28bc:	c6 0f       	add	r28, r22
    28be:	d7 1f       	adc	r29, r23
    28c0:	e8 1f       	adc	r30, r24
    28c2:	f9 1f       	adc	r31, r25
    28c4:	d6 01       	movw	r26, r12
    28c6:	13 d0       	rcall	.+38     	; 0x28ee <__umulhisi3>
    28c8:	e6 0f       	add	r30, r22
    28ca:	f7 1f       	adc	r31, r23
    28cc:	98 01       	movw	r18, r16
    28ce:	be 01       	movw	r22, r28
    28d0:	cf 01       	movw	r24, r30
    28d2:	11 24       	eor	r1, r1
    28d4:	0f 91       	pop	r16
    28d6:	1f 91       	pop	r17
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <__muldi3_6>:
    28de:	07 d0       	rcall	.+14     	; 0x28ee <__umulhisi3>
    28e0:	46 0f       	add	r20, r22
    28e2:	57 1f       	adc	r21, r23
    28e4:	c8 1f       	adc	r28, r24
    28e6:	d9 1f       	adc	r29, r25
    28e8:	08 f4       	brcc	.+2      	; 0x28ec <__muldi3_6+0xe>
    28ea:	31 96       	adiw	r30, 0x01	; 1
    28ec:	08 95       	ret

000028ee <__umulhisi3>:
    28ee:	a2 9f       	mul	r26, r18
    28f0:	b0 01       	movw	r22, r0
    28f2:	b3 9f       	mul	r27, r19
    28f4:	c0 01       	movw	r24, r0
    28f6:	a3 9f       	mul	r26, r19
    28f8:	70 0d       	add	r23, r0
    28fa:	81 1d       	adc	r24, r1
    28fc:	11 24       	eor	r1, r1
    28fe:	91 1d       	adc	r25, r1
    2900:	b2 9f       	mul	r27, r18
    2902:	70 0d       	add	r23, r0
    2904:	81 1d       	adc	r24, r1
    2906:	11 24       	eor	r1, r1
    2908:	91 1d       	adc	r25, r1
    290a:	08 95       	ret

0000290c <calloc>:
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	86 9f       	mul	r24, r22
    2916:	80 01       	movw	r16, r0
    2918:	87 9f       	mul	r24, r23
    291a:	10 0d       	add	r17, r0
    291c:	96 9f       	mul	r25, r22
    291e:	10 0d       	add	r17, r0
    2920:	11 24       	eor	r1, r1
    2922:	c8 01       	movw	r24, r16
    2924:	0d d0       	rcall	.+26     	; 0x2940 <malloc>
    2926:	ec 01       	movw	r28, r24
    2928:	00 97       	sbiw	r24, 0x00	; 0
    292a:	21 f0       	breq	.+8      	; 0x2934 <calloc+0x28>
    292c:	a8 01       	movw	r20, r16
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	33 d1       	rcall	.+614    	; 0x2b9a <memset>
    2934:	ce 01       	movw	r24, r28
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	08 95       	ret

00002940 <malloc>:
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	82 30       	cpi	r24, 0x02	; 2
    2946:	91 05       	cpc	r25, r1
    2948:	10 f4       	brcc	.+4      	; 0x294e <malloc+0xe>
    294a:	82 e0       	ldi	r24, 0x02	; 2
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	e0 91 0c 21 	lds	r30, 0x210C
    2952:	f0 91 0d 21 	lds	r31, 0x210D
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	c0 e0       	ldi	r28, 0x00	; 0
    295c:	d0 e0       	ldi	r29, 0x00	; 0
    295e:	30 97       	sbiw	r30, 0x00	; 0
    2960:	11 f1       	breq	.+68     	; 0x29a6 <malloc+0x66>
    2962:	40 81       	ld	r20, Z
    2964:	51 81       	ldd	r21, Z+1	; 0x01
    2966:	48 17       	cp	r20, r24
    2968:	59 07       	cpc	r21, r25
    296a:	c0 f0       	brcs	.+48     	; 0x299c <malloc+0x5c>
    296c:	48 17       	cp	r20, r24
    296e:	59 07       	cpc	r21, r25
    2970:	61 f4       	brne	.+24     	; 0x298a <malloc+0x4a>
    2972:	82 81       	ldd	r24, Z+2	; 0x02
    2974:	93 81       	ldd	r25, Z+3	; 0x03
    2976:	20 97       	sbiw	r28, 0x00	; 0
    2978:	19 f0       	breq	.+6      	; 0x2980 <malloc+0x40>
    297a:	8a 83       	std	Y+2, r24	; 0x02
    297c:	9b 83       	std	Y+3, r25	; 0x03
    297e:	2b c0       	rjmp	.+86     	; 0x29d6 <malloc+0x96>
    2980:	80 93 0c 21 	sts	0x210C, r24
    2984:	90 93 0d 21 	sts	0x210D, r25
    2988:	26 c0       	rjmp	.+76     	; 0x29d6 <malloc+0x96>
    298a:	21 15       	cp	r18, r1
    298c:	31 05       	cpc	r19, r1
    298e:	19 f0       	breq	.+6      	; 0x2996 <malloc+0x56>
    2990:	42 17       	cp	r20, r18
    2992:	53 07       	cpc	r21, r19
    2994:	18 f4       	brcc	.+6      	; 0x299c <malloc+0x5c>
    2996:	9a 01       	movw	r18, r20
    2998:	be 01       	movw	r22, r28
    299a:	df 01       	movw	r26, r30
    299c:	ef 01       	movw	r28, r30
    299e:	02 80       	ldd	r0, Z+2	; 0x02
    29a0:	f3 81       	ldd	r31, Z+3	; 0x03
    29a2:	e0 2d       	mov	r30, r0
    29a4:	dc cf       	rjmp	.-72     	; 0x295e <malloc+0x1e>
    29a6:	21 15       	cp	r18, r1
    29a8:	31 05       	cpc	r19, r1
    29aa:	09 f1       	breq	.+66     	; 0x29ee <malloc+0xae>
    29ac:	28 1b       	sub	r18, r24
    29ae:	39 0b       	sbc	r19, r25
    29b0:	24 30       	cpi	r18, 0x04	; 4
    29b2:	31 05       	cpc	r19, r1
    29b4:	90 f4       	brcc	.+36     	; 0x29da <malloc+0x9a>
    29b6:	12 96       	adiw	r26, 0x02	; 2
    29b8:	8d 91       	ld	r24, X+
    29ba:	9c 91       	ld	r25, X
    29bc:	13 97       	sbiw	r26, 0x03	; 3
    29be:	61 15       	cp	r22, r1
    29c0:	71 05       	cpc	r23, r1
    29c2:	21 f0       	breq	.+8      	; 0x29cc <malloc+0x8c>
    29c4:	fb 01       	movw	r30, r22
    29c6:	82 83       	std	Z+2, r24	; 0x02
    29c8:	93 83       	std	Z+3, r25	; 0x03
    29ca:	04 c0       	rjmp	.+8      	; 0x29d4 <malloc+0x94>
    29cc:	80 93 0c 21 	sts	0x210C, r24
    29d0:	90 93 0d 21 	sts	0x210D, r25
    29d4:	fd 01       	movw	r30, r26
    29d6:	32 96       	adiw	r30, 0x02	; 2
    29d8:	44 c0       	rjmp	.+136    	; 0x2a62 <malloc+0x122>
    29da:	fd 01       	movw	r30, r26
    29dc:	e2 0f       	add	r30, r18
    29de:	f3 1f       	adc	r31, r19
    29e0:	81 93       	st	Z+, r24
    29e2:	91 93       	st	Z+, r25
    29e4:	22 50       	subi	r18, 0x02	; 2
    29e6:	31 09       	sbc	r19, r1
    29e8:	2d 93       	st	X+, r18
    29ea:	3c 93       	st	X, r19
    29ec:	3a c0       	rjmp	.+116    	; 0x2a62 <malloc+0x122>
    29ee:	20 91 0a 21 	lds	r18, 0x210A
    29f2:	30 91 0b 21 	lds	r19, 0x210B
    29f6:	23 2b       	or	r18, r19
    29f8:	41 f4       	brne	.+16     	; 0x2a0a <malloc+0xca>
    29fa:	20 91 02 20 	lds	r18, 0x2002
    29fe:	30 91 03 20 	lds	r19, 0x2003
    2a02:	20 93 0a 21 	sts	0x210A, r18
    2a06:	30 93 0b 21 	sts	0x210B, r19
    2a0a:	20 91 00 20 	lds	r18, 0x2000
    2a0e:	30 91 01 20 	lds	r19, 0x2001
    2a12:	21 15       	cp	r18, r1
    2a14:	31 05       	cpc	r19, r1
    2a16:	41 f4       	brne	.+16     	; 0x2a28 <malloc+0xe8>
    2a18:	2d b7       	in	r18, 0x3d	; 61
    2a1a:	3e b7       	in	r19, 0x3e	; 62
    2a1c:	40 91 04 20 	lds	r20, 0x2004
    2a20:	50 91 05 20 	lds	r21, 0x2005
    2a24:	24 1b       	sub	r18, r20
    2a26:	35 0b       	sbc	r19, r21
    2a28:	e0 91 0a 21 	lds	r30, 0x210A
    2a2c:	f0 91 0b 21 	lds	r31, 0x210B
    2a30:	e2 17       	cp	r30, r18
    2a32:	f3 07       	cpc	r31, r19
    2a34:	a0 f4       	brcc	.+40     	; 0x2a5e <malloc+0x11e>
    2a36:	2e 1b       	sub	r18, r30
    2a38:	3f 0b       	sbc	r19, r31
    2a3a:	28 17       	cp	r18, r24
    2a3c:	39 07       	cpc	r19, r25
    2a3e:	78 f0       	brcs	.+30     	; 0x2a5e <malloc+0x11e>
    2a40:	ac 01       	movw	r20, r24
    2a42:	4e 5f       	subi	r20, 0xFE	; 254
    2a44:	5f 4f       	sbci	r21, 0xFF	; 255
    2a46:	24 17       	cp	r18, r20
    2a48:	35 07       	cpc	r19, r21
    2a4a:	48 f0       	brcs	.+18     	; 0x2a5e <malloc+0x11e>
    2a4c:	4e 0f       	add	r20, r30
    2a4e:	5f 1f       	adc	r21, r31
    2a50:	40 93 0a 21 	sts	0x210A, r20
    2a54:	50 93 0b 21 	sts	0x210B, r21
    2a58:	81 93       	st	Z+, r24
    2a5a:	91 93       	st	Z+, r25
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <malloc+0x122>
    2a5e:	e0 e0       	ldi	r30, 0x00	; 0
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	cf 01       	movw	r24, r30
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	08 95       	ret

00002a6a <free>:
    2a6a:	0f 93       	push	r16
    2a6c:	1f 93       	push	r17
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	00 97       	sbiw	r24, 0x00	; 0
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <free+0xe>
    2a76:	8c c0       	rjmp	.+280    	; 0x2b90 <free+0x126>
    2a78:	fc 01       	movw	r30, r24
    2a7a:	32 97       	sbiw	r30, 0x02	; 2
    2a7c:	12 82       	std	Z+2, r1	; 0x02
    2a7e:	13 82       	std	Z+3, r1	; 0x03
    2a80:	00 91 0c 21 	lds	r16, 0x210C
    2a84:	10 91 0d 21 	lds	r17, 0x210D
    2a88:	01 15       	cp	r16, r1
    2a8a:	11 05       	cpc	r17, r1
    2a8c:	81 f4       	brne	.+32     	; 0x2aae <free+0x44>
    2a8e:	20 81       	ld	r18, Z
    2a90:	31 81       	ldd	r19, Z+1	; 0x01
    2a92:	82 0f       	add	r24, r18
    2a94:	93 1f       	adc	r25, r19
    2a96:	20 91 0a 21 	lds	r18, 0x210A
    2a9a:	30 91 0b 21 	lds	r19, 0x210B
    2a9e:	28 17       	cp	r18, r24
    2aa0:	39 07       	cpc	r19, r25
    2aa2:	79 f5       	brne	.+94     	; 0x2b02 <free+0x98>
    2aa4:	e0 93 0a 21 	sts	0x210A, r30
    2aa8:	f0 93 0b 21 	sts	0x210B, r31
    2aac:	71 c0       	rjmp	.+226    	; 0x2b90 <free+0x126>
    2aae:	d8 01       	movw	r26, r16
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	ae 17       	cp	r26, r30
    2ab6:	bf 07       	cpc	r27, r31
    2ab8:	50 f4       	brcc	.+20     	; 0x2ace <free+0x64>
    2aba:	12 96       	adiw	r26, 0x02	; 2
    2abc:	2d 91       	ld	r18, X+
    2abe:	3c 91       	ld	r19, X
    2ac0:	13 97       	sbiw	r26, 0x03	; 3
    2ac2:	ad 01       	movw	r20, r26
    2ac4:	21 15       	cp	r18, r1
    2ac6:	31 05       	cpc	r19, r1
    2ac8:	09 f1       	breq	.+66     	; 0x2b0c <free+0xa2>
    2aca:	d9 01       	movw	r26, r18
    2acc:	f3 cf       	rjmp	.-26     	; 0x2ab4 <free+0x4a>
    2ace:	9d 01       	movw	r18, r26
    2ad0:	da 01       	movw	r26, r20
    2ad2:	22 83       	std	Z+2, r18	; 0x02
    2ad4:	33 83       	std	Z+3, r19	; 0x03
    2ad6:	60 81       	ld	r22, Z
    2ad8:	71 81       	ldd	r23, Z+1	; 0x01
    2ada:	86 0f       	add	r24, r22
    2adc:	97 1f       	adc	r25, r23
    2ade:	82 17       	cp	r24, r18
    2ae0:	93 07       	cpc	r25, r19
    2ae2:	69 f4       	brne	.+26     	; 0x2afe <free+0x94>
    2ae4:	ec 01       	movw	r28, r24
    2ae6:	28 81       	ld	r18, Y
    2ae8:	39 81       	ldd	r19, Y+1	; 0x01
    2aea:	26 0f       	add	r18, r22
    2aec:	37 1f       	adc	r19, r23
    2aee:	2e 5f       	subi	r18, 0xFE	; 254
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	20 83       	st	Z, r18
    2af4:	31 83       	std	Z+1, r19	; 0x01
    2af6:	8a 81       	ldd	r24, Y+2	; 0x02
    2af8:	9b 81       	ldd	r25, Y+3	; 0x03
    2afa:	82 83       	std	Z+2, r24	; 0x02
    2afc:	93 83       	std	Z+3, r25	; 0x03
    2afe:	45 2b       	or	r20, r21
    2b00:	29 f4       	brne	.+10     	; 0x2b0c <free+0xa2>
    2b02:	e0 93 0c 21 	sts	0x210C, r30
    2b06:	f0 93 0d 21 	sts	0x210D, r31
    2b0a:	42 c0       	rjmp	.+132    	; 0x2b90 <free+0x126>
    2b0c:	12 96       	adiw	r26, 0x02	; 2
    2b0e:	ed 93       	st	X+, r30
    2b10:	fc 93       	st	X, r31
    2b12:	13 97       	sbiw	r26, 0x03	; 3
    2b14:	ed 01       	movw	r28, r26
    2b16:	49 91       	ld	r20, Y+
    2b18:	59 91       	ld	r21, Y+
    2b1a:	9e 01       	movw	r18, r28
    2b1c:	24 0f       	add	r18, r20
    2b1e:	35 1f       	adc	r19, r21
    2b20:	e2 17       	cp	r30, r18
    2b22:	f3 07       	cpc	r31, r19
    2b24:	71 f4       	brne	.+28     	; 0x2b42 <free+0xd8>
    2b26:	80 81       	ld	r24, Z
    2b28:	91 81       	ldd	r25, Z+1	; 0x01
    2b2a:	84 0f       	add	r24, r20
    2b2c:	95 1f       	adc	r25, r21
    2b2e:	02 96       	adiw	r24, 0x02	; 2
    2b30:	8d 93       	st	X+, r24
    2b32:	9c 93       	st	X, r25
    2b34:	11 97       	sbiw	r26, 0x01	; 1
    2b36:	82 81       	ldd	r24, Z+2	; 0x02
    2b38:	93 81       	ldd	r25, Z+3	; 0x03
    2b3a:	12 96       	adiw	r26, 0x02	; 2
    2b3c:	8d 93       	st	X+, r24
    2b3e:	9c 93       	st	X, r25
    2b40:	13 97       	sbiw	r26, 0x03	; 3
    2b42:	e0 e0       	ldi	r30, 0x00	; 0
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	d8 01       	movw	r26, r16
    2b48:	12 96       	adiw	r26, 0x02	; 2
    2b4a:	8d 91       	ld	r24, X+
    2b4c:	9c 91       	ld	r25, X
    2b4e:	13 97       	sbiw	r26, 0x03	; 3
    2b50:	00 97       	sbiw	r24, 0x00	; 0
    2b52:	19 f0       	breq	.+6      	; 0x2b5a <free+0xf0>
    2b54:	f8 01       	movw	r30, r16
    2b56:	8c 01       	movw	r16, r24
    2b58:	f6 cf       	rjmp	.-20     	; 0x2b46 <free+0xdc>
    2b5a:	8d 91       	ld	r24, X+
    2b5c:	9c 91       	ld	r25, X
    2b5e:	98 01       	movw	r18, r16
    2b60:	2e 5f       	subi	r18, 0xFE	; 254
    2b62:	3f 4f       	sbci	r19, 0xFF	; 255
    2b64:	82 0f       	add	r24, r18
    2b66:	93 1f       	adc	r25, r19
    2b68:	20 91 0a 21 	lds	r18, 0x210A
    2b6c:	30 91 0b 21 	lds	r19, 0x210B
    2b70:	28 17       	cp	r18, r24
    2b72:	39 07       	cpc	r19, r25
    2b74:	69 f4       	brne	.+26     	; 0x2b90 <free+0x126>
    2b76:	30 97       	sbiw	r30, 0x00	; 0
    2b78:	29 f4       	brne	.+10     	; 0x2b84 <free+0x11a>
    2b7a:	10 92 0c 21 	sts	0x210C, r1
    2b7e:	10 92 0d 21 	sts	0x210D, r1
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <free+0x11e>
    2b84:	12 82       	std	Z+2, r1	; 0x02
    2b86:	13 82       	std	Z+3, r1	; 0x03
    2b88:	00 93 0a 21 	sts	0x210A, r16
    2b8c:	10 93 0b 21 	sts	0x210B, r17
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	1f 91       	pop	r17
    2b96:	0f 91       	pop	r16
    2b98:	08 95       	ret

00002b9a <memset>:
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	01 c0       	rjmp	.+2      	; 0x2ba0 <memset+0x6>
    2b9e:	6d 93       	st	X+, r22
    2ba0:	41 50       	subi	r20, 0x01	; 1
    2ba2:	50 40       	sbci	r21, 0x00	; 0
    2ba4:	e0 f7       	brcc	.-8      	; 0x2b9e <memset+0x4>
    2ba6:	08 95       	ret

00002ba8 <fdevopen>:
    2ba8:	0f 93       	push	r16
    2baa:	1f 93       	push	r17
    2bac:	cf 93       	push	r28
    2bae:	df 93       	push	r29
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	31 f4       	brne	.+12     	; 0x2bc0 <fdevopen+0x18>
    2bb4:	61 15       	cp	r22, r1
    2bb6:	71 05       	cpc	r23, r1
    2bb8:	19 f4       	brne	.+6      	; 0x2bc0 <fdevopen+0x18>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	39 c0       	rjmp	.+114    	; 0x2c32 <fdevopen+0x8a>
    2bc0:	8b 01       	movw	r16, r22
    2bc2:	ec 01       	movw	r28, r24
    2bc4:	6e e0       	ldi	r22, 0x0E	; 14
    2bc6:	70 e0       	ldi	r23, 0x00	; 0
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	9f de       	rcall	.-706    	; 0x290c <calloc>
    2bce:	fc 01       	movw	r30, r24
    2bd0:	89 2b       	or	r24, r25
    2bd2:	99 f3       	breq	.-26     	; 0x2bba <fdevopen+0x12>
    2bd4:	80 e8       	ldi	r24, 0x80	; 128
    2bd6:	83 83       	std	Z+3, r24	; 0x03
    2bd8:	01 15       	cp	r16, r1
    2bda:	11 05       	cpc	r17, r1
    2bdc:	71 f0       	breq	.+28     	; 0x2bfa <fdevopen+0x52>
    2bde:	02 87       	std	Z+10, r16	; 0x0a
    2be0:	13 87       	std	Z+11, r17	; 0x0b
    2be2:	81 e8       	ldi	r24, 0x81	; 129
    2be4:	83 83       	std	Z+3, r24	; 0x03
    2be6:	80 91 0e 21 	lds	r24, 0x210E
    2bea:	90 91 0f 21 	lds	r25, 0x210F
    2bee:	89 2b       	or	r24, r25
    2bf0:	21 f4       	brne	.+8      	; 0x2bfa <fdevopen+0x52>
    2bf2:	e0 93 0e 21 	sts	0x210E, r30
    2bf6:	f0 93 0f 21 	sts	0x210F, r31
    2bfa:	20 97       	sbiw	r28, 0x00	; 0
    2bfc:	c9 f0       	breq	.+50     	; 0x2c30 <fdevopen+0x88>
    2bfe:	c0 87       	std	Z+8, r28	; 0x08
    2c00:	d1 87       	std	Z+9, r29	; 0x09
    2c02:	83 81       	ldd	r24, Z+3	; 0x03
    2c04:	82 60       	ori	r24, 0x02	; 2
    2c06:	83 83       	std	Z+3, r24	; 0x03
    2c08:	80 91 10 21 	lds	r24, 0x2110
    2c0c:	90 91 11 21 	lds	r25, 0x2111
    2c10:	89 2b       	or	r24, r25
    2c12:	71 f4       	brne	.+28     	; 0x2c30 <fdevopen+0x88>
    2c14:	e0 93 10 21 	sts	0x2110, r30
    2c18:	f0 93 11 21 	sts	0x2111, r31
    2c1c:	80 91 12 21 	lds	r24, 0x2112
    2c20:	90 91 13 21 	lds	r25, 0x2113
    2c24:	89 2b       	or	r24, r25
    2c26:	21 f4       	brne	.+8      	; 0x2c30 <fdevopen+0x88>
    2c28:	e0 93 12 21 	sts	0x2112, r30
    2c2c:	f0 93 13 21 	sts	0x2113, r31
    2c30:	cf 01       	movw	r24, r30
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	1f 91       	pop	r17
    2c38:	0f 91       	pop	r16
    2c3a:	08 95       	ret

00002c3c <printf>:
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	ae 01       	movw	r20, r28
    2c46:	4a 5f       	subi	r20, 0xFA	; 250
    2c48:	5f 4f       	sbci	r21, 0xFF	; 255
    2c4a:	fa 01       	movw	r30, r20
    2c4c:	61 91       	ld	r22, Z+
    2c4e:	71 91       	ld	r23, Z+
    2c50:	af 01       	movw	r20, r30
    2c52:	80 91 10 21 	lds	r24, 0x2110
    2c56:	90 91 11 21 	lds	r25, 0x2111
    2c5a:	5c d0       	rcall	.+184    	; 0x2d14 <vfprintf>
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	08 95       	ret

00002c62 <puts>:
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	e0 91 10 21 	lds	r30, 0x2110
    2c6e:	f0 91 11 21 	lds	r31, 0x2111
    2c72:	23 81       	ldd	r18, Z+3	; 0x03
    2c74:	21 ff       	sbrs	r18, 1
    2c76:	1b c0       	rjmp	.+54     	; 0x2cae <puts+0x4c>
    2c78:	8c 01       	movw	r16, r24
    2c7a:	d0 e0       	ldi	r29, 0x00	; 0
    2c7c:	c0 e0       	ldi	r28, 0x00	; 0
    2c7e:	f8 01       	movw	r30, r16
    2c80:	81 91       	ld	r24, Z+
    2c82:	8f 01       	movw	r16, r30
    2c84:	60 91 10 21 	lds	r22, 0x2110
    2c88:	70 91 11 21 	lds	r23, 0x2111
    2c8c:	db 01       	movw	r26, r22
    2c8e:	18 96       	adiw	r26, 0x08	; 8
    2c90:	ed 91       	ld	r30, X+
    2c92:	fc 91       	ld	r31, X
    2c94:	19 97       	sbiw	r26, 0x09	; 9
    2c96:	88 23       	and	r24, r24
    2c98:	31 f0       	breq	.+12     	; 0x2ca6 <puts+0x44>
    2c9a:	19 95       	eicall
    2c9c:	89 2b       	or	r24, r25
    2c9e:	79 f3       	breq	.-34     	; 0x2c7e <puts+0x1c>
    2ca0:	df ef       	ldi	r29, 0xFF	; 255
    2ca2:	cf ef       	ldi	r28, 0xFF	; 255
    2ca4:	ec cf       	rjmp	.-40     	; 0x2c7e <puts+0x1c>
    2ca6:	8a e0       	ldi	r24, 0x0A	; 10
    2ca8:	19 95       	eicall
    2caa:	89 2b       	or	r24, r25
    2cac:	19 f0       	breq	.+6      	; 0x2cb4 <puts+0x52>
    2cae:	8f ef       	ldi	r24, 0xFF	; 255
    2cb0:	9f ef       	ldi	r25, 0xFF	; 255
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <puts+0x56>
    2cb4:	8d 2f       	mov	r24, r29
    2cb6:	9c 2f       	mov	r25, r28
    2cb8:	df 91       	pop	r29
    2cba:	cf 91       	pop	r28
    2cbc:	1f 91       	pop	r17
    2cbe:	0f 91       	pop	r16
    2cc0:	08 95       	ret

00002cc2 <sprintf>:
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	2e 97       	sbiw	r28, 0x0e	; 14
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0e 89       	ldd	r16, Y+22	; 0x16
    2cd6:	1f 89       	ldd	r17, Y+23	; 0x17
    2cd8:	86 e0       	ldi	r24, 0x06	; 6
    2cda:	8c 83       	std	Y+4, r24	; 0x04
    2cdc:	09 83       	std	Y+1, r16	; 0x01
    2cde:	1a 83       	std	Y+2, r17	; 0x02
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	9f e7       	ldi	r25, 0x7F	; 127
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	ae 01       	movw	r20, r28
    2cea:	46 5e       	subi	r20, 0xE6	; 230
    2cec:	5f 4f       	sbci	r21, 0xFF	; 255
    2cee:	68 8d       	ldd	r22, Y+24	; 0x18
    2cf0:	79 8d       	ldd	r23, Y+25	; 0x19
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	01 96       	adiw	r24, 0x01	; 1
    2cf6:	0e d0       	rcall	.+28     	; 0x2d14 <vfprintf>
    2cf8:	2f 81       	ldd	r18, Y+7	; 0x07
    2cfa:	38 85       	ldd	r19, Y+8	; 0x08
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	e2 0f       	add	r30, r18
    2d00:	f3 1f       	adc	r31, r19
    2d02:	10 82       	st	Z, r1
    2d04:	2e 96       	adiw	r28, 0x0e	; 14
    2d06:	cd bf       	out	0x3d, r28	; 61
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	1f 91       	pop	r17
    2d10:	0f 91       	pop	r16
    2d12:	08 95       	ret

00002d14 <vfprintf>:
    2d14:	2f 92       	push	r2
    2d16:	3f 92       	push	r3
    2d18:	4f 92       	push	r4
    2d1a:	5f 92       	push	r5
    2d1c:	6f 92       	push	r6
    2d1e:	7f 92       	push	r7
    2d20:	8f 92       	push	r8
    2d22:	9f 92       	push	r9
    2d24:	af 92       	push	r10
    2d26:	bf 92       	push	r11
    2d28:	cf 92       	push	r12
    2d2a:	df 92       	push	r13
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	0f 93       	push	r16
    2d32:	1f 93       	push	r17
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	2c 97       	sbiw	r28, 0x0c	; 12
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	7c 01       	movw	r14, r24
    2d44:	6b 01       	movw	r12, r22
    2d46:	8a 01       	movw	r16, r20
    2d48:	fc 01       	movw	r30, r24
    2d4a:	16 82       	std	Z+6, r1	; 0x06
    2d4c:	17 82       	std	Z+7, r1	; 0x07
    2d4e:	83 81       	ldd	r24, Z+3	; 0x03
    2d50:	81 ff       	sbrs	r24, 1
    2d52:	b0 c1       	rjmp	.+864    	; 0x30b4 <vfprintf+0x3a0>
    2d54:	ce 01       	movw	r24, r28
    2d56:	01 96       	adiw	r24, 0x01	; 1
    2d58:	4c 01       	movw	r8, r24
    2d5a:	f7 01       	movw	r30, r14
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	f6 01       	movw	r30, r12
    2d60:	93 fd       	sbrc	r25, 3
    2d62:	85 91       	lpm	r24, Z+
    2d64:	93 ff       	sbrs	r25, 3
    2d66:	81 91       	ld	r24, Z+
    2d68:	6f 01       	movw	r12, r30
    2d6a:	88 23       	and	r24, r24
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <vfprintf+0x5c>
    2d6e:	9e c1       	rjmp	.+828    	; 0x30ac <vfprintf+0x398>
    2d70:	85 32       	cpi	r24, 0x25	; 37
    2d72:	39 f4       	brne	.+14     	; 0x2d82 <vfprintf+0x6e>
    2d74:	93 fd       	sbrc	r25, 3
    2d76:	85 91       	lpm	r24, Z+
    2d78:	93 ff       	sbrs	r25, 3
    2d7a:	81 91       	ld	r24, Z+
    2d7c:	6f 01       	movw	r12, r30
    2d7e:	85 32       	cpi	r24, 0x25	; 37
    2d80:	21 f4       	brne	.+8      	; 0x2d8a <vfprintf+0x76>
    2d82:	b7 01       	movw	r22, r14
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	c4 d1       	rcall	.+904    	; 0x3110 <fputc>
    2d88:	e8 cf       	rjmp	.-48     	; 0x2d5a <vfprintf+0x46>
    2d8a:	51 2c       	mov	r5, r1
    2d8c:	31 2c       	mov	r3, r1
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	20 32       	cpi	r18, 0x20	; 32
    2d92:	a0 f4       	brcc	.+40     	; 0x2dbc <vfprintf+0xa8>
    2d94:	8b 32       	cpi	r24, 0x2B	; 43
    2d96:	69 f0       	breq	.+26     	; 0x2db2 <vfprintf+0x9e>
    2d98:	30 f4       	brcc	.+12     	; 0x2da6 <vfprintf+0x92>
    2d9a:	80 32       	cpi	r24, 0x20	; 32
    2d9c:	59 f0       	breq	.+22     	; 0x2db4 <vfprintf+0xa0>
    2d9e:	83 32       	cpi	r24, 0x23	; 35
    2da0:	69 f4       	brne	.+26     	; 0x2dbc <vfprintf+0xa8>
    2da2:	20 61       	ori	r18, 0x10	; 16
    2da4:	2c c0       	rjmp	.+88     	; 0x2dfe <vfprintf+0xea>
    2da6:	8d 32       	cpi	r24, 0x2D	; 45
    2da8:	39 f0       	breq	.+14     	; 0x2db8 <vfprintf+0xa4>
    2daa:	80 33       	cpi	r24, 0x30	; 48
    2dac:	39 f4       	brne	.+14     	; 0x2dbc <vfprintf+0xa8>
    2dae:	21 60       	ori	r18, 0x01	; 1
    2db0:	26 c0       	rjmp	.+76     	; 0x2dfe <vfprintf+0xea>
    2db2:	22 60       	ori	r18, 0x02	; 2
    2db4:	24 60       	ori	r18, 0x04	; 4
    2db6:	23 c0       	rjmp	.+70     	; 0x2dfe <vfprintf+0xea>
    2db8:	28 60       	ori	r18, 0x08	; 8
    2dba:	21 c0       	rjmp	.+66     	; 0x2dfe <vfprintf+0xea>
    2dbc:	27 fd       	sbrc	r18, 7
    2dbe:	27 c0       	rjmp	.+78     	; 0x2e0e <vfprintf+0xfa>
    2dc0:	30 ed       	ldi	r19, 0xD0	; 208
    2dc2:	38 0f       	add	r19, r24
    2dc4:	3a 30       	cpi	r19, 0x0A	; 10
    2dc6:	78 f4       	brcc	.+30     	; 0x2de6 <vfprintf+0xd2>
    2dc8:	26 ff       	sbrs	r18, 6
    2dca:	06 c0       	rjmp	.+12     	; 0x2dd8 <vfprintf+0xc4>
    2dcc:	fa e0       	ldi	r31, 0x0A	; 10
    2dce:	5f 9e       	mul	r5, r31
    2dd0:	30 0d       	add	r19, r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	53 2e       	mov	r5, r19
    2dd6:	13 c0       	rjmp	.+38     	; 0x2dfe <vfprintf+0xea>
    2dd8:	8a e0       	ldi	r24, 0x0A	; 10
    2dda:	38 9e       	mul	r3, r24
    2ddc:	30 0d       	add	r19, r0
    2dde:	11 24       	eor	r1, r1
    2de0:	33 2e       	mov	r3, r19
    2de2:	20 62       	ori	r18, 0x20	; 32
    2de4:	0c c0       	rjmp	.+24     	; 0x2dfe <vfprintf+0xea>
    2de6:	8e 32       	cpi	r24, 0x2E	; 46
    2de8:	21 f4       	brne	.+8      	; 0x2df2 <vfprintf+0xde>
    2dea:	26 fd       	sbrc	r18, 6
    2dec:	5f c1       	rjmp	.+702    	; 0x30ac <vfprintf+0x398>
    2dee:	20 64       	ori	r18, 0x40	; 64
    2df0:	06 c0       	rjmp	.+12     	; 0x2dfe <vfprintf+0xea>
    2df2:	8c 36       	cpi	r24, 0x6C	; 108
    2df4:	11 f4       	brne	.+4      	; 0x2dfa <vfprintf+0xe6>
    2df6:	20 68       	ori	r18, 0x80	; 128
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <vfprintf+0xea>
    2dfa:	88 36       	cpi	r24, 0x68	; 104
    2dfc:	41 f4       	brne	.+16     	; 0x2e0e <vfprintf+0xfa>
    2dfe:	f6 01       	movw	r30, r12
    2e00:	93 fd       	sbrc	r25, 3
    2e02:	85 91       	lpm	r24, Z+
    2e04:	93 ff       	sbrs	r25, 3
    2e06:	81 91       	ld	r24, Z+
    2e08:	6f 01       	movw	r12, r30
    2e0a:	81 11       	cpse	r24, r1
    2e0c:	c1 cf       	rjmp	.-126    	; 0x2d90 <vfprintf+0x7c>
    2e0e:	98 2f       	mov	r25, r24
    2e10:	9f 7d       	andi	r25, 0xDF	; 223
    2e12:	95 54       	subi	r25, 0x45	; 69
    2e14:	93 30       	cpi	r25, 0x03	; 3
    2e16:	28 f4       	brcc	.+10     	; 0x2e22 <vfprintf+0x10e>
    2e18:	0c 5f       	subi	r16, 0xFC	; 252
    2e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1c:	ff e3       	ldi	r31, 0x3F	; 63
    2e1e:	f9 83       	std	Y+1, r31	; 0x01
    2e20:	0d c0       	rjmp	.+26     	; 0x2e3c <vfprintf+0x128>
    2e22:	83 36       	cpi	r24, 0x63	; 99
    2e24:	31 f0       	breq	.+12     	; 0x2e32 <vfprintf+0x11e>
    2e26:	83 37       	cpi	r24, 0x73	; 115
    2e28:	71 f0       	breq	.+28     	; 0x2e46 <vfprintf+0x132>
    2e2a:	83 35       	cpi	r24, 0x53	; 83
    2e2c:	09 f0       	breq	.+2      	; 0x2e30 <vfprintf+0x11c>
    2e2e:	57 c0       	rjmp	.+174    	; 0x2ede <vfprintf+0x1ca>
    2e30:	21 c0       	rjmp	.+66     	; 0x2e74 <vfprintf+0x160>
    2e32:	f8 01       	movw	r30, r16
    2e34:	80 81       	ld	r24, Z
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	0e 5f       	subi	r16, 0xFE	; 254
    2e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3c:	44 24       	eor	r4, r4
    2e3e:	43 94       	inc	r4
    2e40:	51 2c       	mov	r5, r1
    2e42:	54 01       	movw	r10, r8
    2e44:	14 c0       	rjmp	.+40     	; 0x2e6e <vfprintf+0x15a>
    2e46:	38 01       	movw	r6, r16
    2e48:	f2 e0       	ldi	r31, 0x02	; 2
    2e4a:	6f 0e       	add	r6, r31
    2e4c:	71 1c       	adc	r7, r1
    2e4e:	f8 01       	movw	r30, r16
    2e50:	a0 80       	ld	r10, Z
    2e52:	b1 80       	ldd	r11, Z+1	; 0x01
    2e54:	26 ff       	sbrs	r18, 6
    2e56:	03 c0       	rjmp	.+6      	; 0x2e5e <vfprintf+0x14a>
    2e58:	65 2d       	mov	r22, r5
    2e5a:	70 e0       	ldi	r23, 0x00	; 0
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <vfprintf+0x14e>
    2e5e:	6f ef       	ldi	r22, 0xFF	; 255
    2e60:	7f ef       	ldi	r23, 0xFF	; 255
    2e62:	c5 01       	movw	r24, r10
    2e64:	2c 87       	std	Y+12, r18	; 0x0c
    2e66:	49 d1       	rcall	.+658    	; 0x30fa <strnlen>
    2e68:	2c 01       	movw	r4, r24
    2e6a:	83 01       	movw	r16, r6
    2e6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e6e:	2f 77       	andi	r18, 0x7F	; 127
    2e70:	22 2e       	mov	r2, r18
    2e72:	16 c0       	rjmp	.+44     	; 0x2ea0 <vfprintf+0x18c>
    2e74:	38 01       	movw	r6, r16
    2e76:	f2 e0       	ldi	r31, 0x02	; 2
    2e78:	6f 0e       	add	r6, r31
    2e7a:	71 1c       	adc	r7, r1
    2e7c:	f8 01       	movw	r30, r16
    2e7e:	a0 80       	ld	r10, Z
    2e80:	b1 80       	ldd	r11, Z+1	; 0x01
    2e82:	26 ff       	sbrs	r18, 6
    2e84:	03 c0       	rjmp	.+6      	; 0x2e8c <vfprintf+0x178>
    2e86:	65 2d       	mov	r22, r5
    2e88:	70 e0       	ldi	r23, 0x00	; 0
    2e8a:	02 c0       	rjmp	.+4      	; 0x2e90 <vfprintf+0x17c>
    2e8c:	6f ef       	ldi	r22, 0xFF	; 255
    2e8e:	7f ef       	ldi	r23, 0xFF	; 255
    2e90:	c5 01       	movw	r24, r10
    2e92:	2c 87       	std	Y+12, r18	; 0x0c
    2e94:	27 d1       	rcall	.+590    	; 0x30e4 <strnlen_P>
    2e96:	2c 01       	movw	r4, r24
    2e98:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e9a:	20 68       	ori	r18, 0x80	; 128
    2e9c:	22 2e       	mov	r2, r18
    2e9e:	83 01       	movw	r16, r6
    2ea0:	23 fc       	sbrc	r2, 3
    2ea2:	19 c0       	rjmp	.+50     	; 0x2ed6 <vfprintf+0x1c2>
    2ea4:	83 2d       	mov	r24, r3
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	48 16       	cp	r4, r24
    2eaa:	59 06       	cpc	r5, r25
    2eac:	a0 f4       	brcc	.+40     	; 0x2ed6 <vfprintf+0x1c2>
    2eae:	b7 01       	movw	r22, r14
    2eb0:	80 e2       	ldi	r24, 0x20	; 32
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	2d d1       	rcall	.+602    	; 0x3110 <fputc>
    2eb6:	3a 94       	dec	r3
    2eb8:	f5 cf       	rjmp	.-22     	; 0x2ea4 <vfprintf+0x190>
    2eba:	f5 01       	movw	r30, r10
    2ebc:	27 fc       	sbrc	r2, 7
    2ebe:	85 91       	lpm	r24, Z+
    2ec0:	27 fe       	sbrs	r2, 7
    2ec2:	81 91       	ld	r24, Z+
    2ec4:	5f 01       	movw	r10, r30
    2ec6:	b7 01       	movw	r22, r14
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	22 d1       	rcall	.+580    	; 0x3110 <fputc>
    2ecc:	31 10       	cpse	r3, r1
    2ece:	3a 94       	dec	r3
    2ed0:	f1 e0       	ldi	r31, 0x01	; 1
    2ed2:	4f 1a       	sub	r4, r31
    2ed4:	51 08       	sbc	r5, r1
    2ed6:	41 14       	cp	r4, r1
    2ed8:	51 04       	cpc	r5, r1
    2eda:	79 f7       	brne	.-34     	; 0x2eba <vfprintf+0x1a6>
    2edc:	de c0       	rjmp	.+444    	; 0x309a <vfprintf+0x386>
    2ede:	84 36       	cpi	r24, 0x64	; 100
    2ee0:	11 f0       	breq	.+4      	; 0x2ee6 <vfprintf+0x1d2>
    2ee2:	89 36       	cpi	r24, 0x69	; 105
    2ee4:	31 f5       	brne	.+76     	; 0x2f32 <vfprintf+0x21e>
    2ee6:	f8 01       	movw	r30, r16
    2ee8:	27 ff       	sbrs	r18, 7
    2eea:	07 c0       	rjmp	.+14     	; 0x2efa <vfprintf+0x1e6>
    2eec:	60 81       	ld	r22, Z
    2eee:	71 81       	ldd	r23, Z+1	; 0x01
    2ef0:	82 81       	ldd	r24, Z+2	; 0x02
    2ef2:	93 81       	ldd	r25, Z+3	; 0x03
    2ef4:	0c 5f       	subi	r16, 0xFC	; 252
    2ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef8:	08 c0       	rjmp	.+16     	; 0x2f0a <vfprintf+0x1f6>
    2efa:	60 81       	ld	r22, Z
    2efc:	71 81       	ldd	r23, Z+1	; 0x01
    2efe:	07 2e       	mov	r0, r23
    2f00:	00 0c       	add	r0, r0
    2f02:	88 0b       	sbc	r24, r24
    2f04:	99 0b       	sbc	r25, r25
    2f06:	0e 5f       	subi	r16, 0xFE	; 254
    2f08:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0a:	2f 76       	andi	r18, 0x6F	; 111
    2f0c:	72 2e       	mov	r7, r18
    2f0e:	97 ff       	sbrs	r25, 7
    2f10:	09 c0       	rjmp	.+18     	; 0x2f24 <vfprintf+0x210>
    2f12:	90 95       	com	r25
    2f14:	80 95       	com	r24
    2f16:	70 95       	com	r23
    2f18:	61 95       	neg	r22
    2f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f20:	20 68       	ori	r18, 0x80	; 128
    2f22:	72 2e       	mov	r7, r18
    2f24:	2a e0       	ldi	r18, 0x0A	; 10
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	a4 01       	movw	r20, r8
    2f2a:	2a d1       	rcall	.+596    	; 0x3180 <__ultoa_invert>
    2f2c:	a8 2e       	mov	r10, r24
    2f2e:	a8 18       	sub	r10, r8
    2f30:	43 c0       	rjmp	.+134    	; 0x2fb8 <vfprintf+0x2a4>
    2f32:	85 37       	cpi	r24, 0x75	; 117
    2f34:	29 f4       	brne	.+10     	; 0x2f40 <vfprintf+0x22c>
    2f36:	2f 7e       	andi	r18, 0xEF	; 239
    2f38:	b2 2e       	mov	r11, r18
    2f3a:	2a e0       	ldi	r18, 0x0A	; 10
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	25 c0       	rjmp	.+74     	; 0x2f8a <vfprintf+0x276>
    2f40:	f2 2f       	mov	r31, r18
    2f42:	f9 7f       	andi	r31, 0xF9	; 249
    2f44:	bf 2e       	mov	r11, r31
    2f46:	8f 36       	cpi	r24, 0x6F	; 111
    2f48:	c1 f0       	breq	.+48     	; 0x2f7a <vfprintf+0x266>
    2f4a:	18 f4       	brcc	.+6      	; 0x2f52 <vfprintf+0x23e>
    2f4c:	88 35       	cpi	r24, 0x58	; 88
    2f4e:	79 f0       	breq	.+30     	; 0x2f6e <vfprintf+0x25a>
    2f50:	ad c0       	rjmp	.+346    	; 0x30ac <vfprintf+0x398>
    2f52:	80 37       	cpi	r24, 0x70	; 112
    2f54:	19 f0       	breq	.+6      	; 0x2f5c <vfprintf+0x248>
    2f56:	88 37       	cpi	r24, 0x78	; 120
    2f58:	21 f0       	breq	.+8      	; 0x2f62 <vfprintf+0x24e>
    2f5a:	a8 c0       	rjmp	.+336    	; 0x30ac <vfprintf+0x398>
    2f5c:	2f 2f       	mov	r18, r31
    2f5e:	20 61       	ori	r18, 0x10	; 16
    2f60:	b2 2e       	mov	r11, r18
    2f62:	b4 fe       	sbrs	r11, 4
    2f64:	0d c0       	rjmp	.+26     	; 0x2f80 <vfprintf+0x26c>
    2f66:	8b 2d       	mov	r24, r11
    2f68:	84 60       	ori	r24, 0x04	; 4
    2f6a:	b8 2e       	mov	r11, r24
    2f6c:	09 c0       	rjmp	.+18     	; 0x2f80 <vfprintf+0x26c>
    2f6e:	24 ff       	sbrs	r18, 4
    2f70:	0a c0       	rjmp	.+20     	; 0x2f86 <vfprintf+0x272>
    2f72:	9f 2f       	mov	r25, r31
    2f74:	96 60       	ori	r25, 0x06	; 6
    2f76:	b9 2e       	mov	r11, r25
    2f78:	06 c0       	rjmp	.+12     	; 0x2f86 <vfprintf+0x272>
    2f7a:	28 e0       	ldi	r18, 0x08	; 8
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	05 c0       	rjmp	.+10     	; 0x2f8a <vfprintf+0x276>
    2f80:	20 e1       	ldi	r18, 0x10	; 16
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <vfprintf+0x276>
    2f86:	20 e1       	ldi	r18, 0x10	; 16
    2f88:	32 e0       	ldi	r19, 0x02	; 2
    2f8a:	f8 01       	movw	r30, r16
    2f8c:	b7 fe       	sbrs	r11, 7
    2f8e:	07 c0       	rjmp	.+14     	; 0x2f9e <vfprintf+0x28a>
    2f90:	60 81       	ld	r22, Z
    2f92:	71 81       	ldd	r23, Z+1	; 0x01
    2f94:	82 81       	ldd	r24, Z+2	; 0x02
    2f96:	93 81       	ldd	r25, Z+3	; 0x03
    2f98:	0c 5f       	subi	r16, 0xFC	; 252
    2f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f9c:	06 c0       	rjmp	.+12     	; 0x2faa <vfprintf+0x296>
    2f9e:	60 81       	ld	r22, Z
    2fa0:	71 81       	ldd	r23, Z+1	; 0x01
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	0e 5f       	subi	r16, 0xFE	; 254
    2fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    2faa:	a4 01       	movw	r20, r8
    2fac:	e9 d0       	rcall	.+466    	; 0x3180 <__ultoa_invert>
    2fae:	a8 2e       	mov	r10, r24
    2fb0:	a8 18       	sub	r10, r8
    2fb2:	fb 2d       	mov	r31, r11
    2fb4:	ff 77       	andi	r31, 0x7F	; 127
    2fb6:	7f 2e       	mov	r7, r31
    2fb8:	76 fe       	sbrs	r7, 6
    2fba:	0b c0       	rjmp	.+22     	; 0x2fd2 <vfprintf+0x2be>
    2fbc:	37 2d       	mov	r19, r7
    2fbe:	3e 7f       	andi	r19, 0xFE	; 254
    2fc0:	a5 14       	cp	r10, r5
    2fc2:	50 f4       	brcc	.+20     	; 0x2fd8 <vfprintf+0x2c4>
    2fc4:	74 fe       	sbrs	r7, 4
    2fc6:	0a c0       	rjmp	.+20     	; 0x2fdc <vfprintf+0x2c8>
    2fc8:	72 fc       	sbrc	r7, 2
    2fca:	08 c0       	rjmp	.+16     	; 0x2fdc <vfprintf+0x2c8>
    2fcc:	37 2d       	mov	r19, r7
    2fce:	3e 7e       	andi	r19, 0xEE	; 238
    2fd0:	05 c0       	rjmp	.+10     	; 0x2fdc <vfprintf+0x2c8>
    2fd2:	ba 2c       	mov	r11, r10
    2fd4:	37 2d       	mov	r19, r7
    2fd6:	03 c0       	rjmp	.+6      	; 0x2fde <vfprintf+0x2ca>
    2fd8:	ba 2c       	mov	r11, r10
    2fda:	01 c0       	rjmp	.+2      	; 0x2fde <vfprintf+0x2ca>
    2fdc:	b5 2c       	mov	r11, r5
    2fde:	34 ff       	sbrs	r19, 4
    2fe0:	0d c0       	rjmp	.+26     	; 0x2ffc <vfprintf+0x2e8>
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	ea 0d       	add	r30, r10
    2fe6:	f1 1d       	adc	r31, r1
    2fe8:	80 81       	ld	r24, Z
    2fea:	80 33       	cpi	r24, 0x30	; 48
    2fec:	11 f4       	brne	.+4      	; 0x2ff2 <vfprintf+0x2de>
    2fee:	39 7e       	andi	r19, 0xE9	; 233
    2ff0:	09 c0       	rjmp	.+18     	; 0x3004 <vfprintf+0x2f0>
    2ff2:	32 ff       	sbrs	r19, 2
    2ff4:	06 c0       	rjmp	.+12     	; 0x3002 <vfprintf+0x2ee>
    2ff6:	b3 94       	inc	r11
    2ff8:	b3 94       	inc	r11
    2ffa:	04 c0       	rjmp	.+8      	; 0x3004 <vfprintf+0x2f0>
    2ffc:	83 2f       	mov	r24, r19
    2ffe:	86 78       	andi	r24, 0x86	; 134
    3000:	09 f0       	breq	.+2      	; 0x3004 <vfprintf+0x2f0>
    3002:	b3 94       	inc	r11
    3004:	33 fd       	sbrc	r19, 3
    3006:	12 c0       	rjmp	.+36     	; 0x302c <vfprintf+0x318>
    3008:	30 ff       	sbrs	r19, 0
    300a:	06 c0       	rjmp	.+12     	; 0x3018 <vfprintf+0x304>
    300c:	5a 2c       	mov	r5, r10
    300e:	b3 14       	cp	r11, r3
    3010:	18 f4       	brcc	.+6      	; 0x3018 <vfprintf+0x304>
    3012:	53 0c       	add	r5, r3
    3014:	5b 18       	sub	r5, r11
    3016:	b3 2c       	mov	r11, r3
    3018:	b3 14       	cp	r11, r3
    301a:	60 f4       	brcc	.+24     	; 0x3034 <vfprintf+0x320>
    301c:	b7 01       	movw	r22, r14
    301e:	80 e2       	ldi	r24, 0x20	; 32
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	3c 87       	std	Y+12, r19	; 0x0c
    3024:	75 d0       	rcall	.+234    	; 0x3110 <fputc>
    3026:	b3 94       	inc	r11
    3028:	3c 85       	ldd	r19, Y+12	; 0x0c
    302a:	f6 cf       	rjmp	.-20     	; 0x3018 <vfprintf+0x304>
    302c:	b3 14       	cp	r11, r3
    302e:	10 f4       	brcc	.+4      	; 0x3034 <vfprintf+0x320>
    3030:	3b 18       	sub	r3, r11
    3032:	01 c0       	rjmp	.+2      	; 0x3036 <vfprintf+0x322>
    3034:	31 2c       	mov	r3, r1
    3036:	34 ff       	sbrs	r19, 4
    3038:	11 c0       	rjmp	.+34     	; 0x305c <vfprintf+0x348>
    303a:	b7 01       	movw	r22, r14
    303c:	80 e3       	ldi	r24, 0x30	; 48
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	3c 87       	std	Y+12, r19	; 0x0c
    3042:	66 d0       	rcall	.+204    	; 0x3110 <fputc>
    3044:	3c 85       	ldd	r19, Y+12	; 0x0c
    3046:	32 ff       	sbrs	r19, 2
    3048:	16 c0       	rjmp	.+44     	; 0x3076 <vfprintf+0x362>
    304a:	31 fd       	sbrc	r19, 1
    304c:	03 c0       	rjmp	.+6      	; 0x3054 <vfprintf+0x340>
    304e:	88 e7       	ldi	r24, 0x78	; 120
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <vfprintf+0x344>
    3054:	88 e5       	ldi	r24, 0x58	; 88
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	b7 01       	movw	r22, r14
    305a:	0c c0       	rjmp	.+24     	; 0x3074 <vfprintf+0x360>
    305c:	83 2f       	mov	r24, r19
    305e:	86 78       	andi	r24, 0x86	; 134
    3060:	51 f0       	breq	.+20     	; 0x3076 <vfprintf+0x362>
    3062:	31 ff       	sbrs	r19, 1
    3064:	02 c0       	rjmp	.+4      	; 0x306a <vfprintf+0x356>
    3066:	8b e2       	ldi	r24, 0x2B	; 43
    3068:	01 c0       	rjmp	.+2      	; 0x306c <vfprintf+0x358>
    306a:	80 e2       	ldi	r24, 0x20	; 32
    306c:	37 fd       	sbrc	r19, 7
    306e:	8d e2       	ldi	r24, 0x2D	; 45
    3070:	b7 01       	movw	r22, r14
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	4d d0       	rcall	.+154    	; 0x3110 <fputc>
    3076:	a5 14       	cp	r10, r5
    3078:	30 f4       	brcc	.+12     	; 0x3086 <vfprintf+0x372>
    307a:	b7 01       	movw	r22, r14
    307c:	80 e3       	ldi	r24, 0x30	; 48
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	47 d0       	rcall	.+142    	; 0x3110 <fputc>
    3082:	5a 94       	dec	r5
    3084:	f8 cf       	rjmp	.-16     	; 0x3076 <vfprintf+0x362>
    3086:	aa 94       	dec	r10
    3088:	f4 01       	movw	r30, r8
    308a:	ea 0d       	add	r30, r10
    308c:	f1 1d       	adc	r31, r1
    308e:	80 81       	ld	r24, Z
    3090:	b7 01       	movw	r22, r14
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	3d d0       	rcall	.+122    	; 0x3110 <fputc>
    3096:	a1 10       	cpse	r10, r1
    3098:	f6 cf       	rjmp	.-20     	; 0x3086 <vfprintf+0x372>
    309a:	33 20       	and	r3, r3
    309c:	09 f4       	brne	.+2      	; 0x30a0 <vfprintf+0x38c>
    309e:	5d ce       	rjmp	.-838    	; 0x2d5a <vfprintf+0x46>
    30a0:	b7 01       	movw	r22, r14
    30a2:	80 e2       	ldi	r24, 0x20	; 32
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	34 d0       	rcall	.+104    	; 0x3110 <fputc>
    30a8:	3a 94       	dec	r3
    30aa:	f7 cf       	rjmp	.-18     	; 0x309a <vfprintf+0x386>
    30ac:	f7 01       	movw	r30, r14
    30ae:	86 81       	ldd	r24, Z+6	; 0x06
    30b0:	97 81       	ldd	r25, Z+7	; 0x07
    30b2:	02 c0       	rjmp	.+4      	; 0x30b8 <vfprintf+0x3a4>
    30b4:	8f ef       	ldi	r24, 0xFF	; 255
    30b6:	9f ef       	ldi	r25, 0xFF	; 255
    30b8:	2c 96       	adiw	r28, 0x0c	; 12
    30ba:	cd bf       	out	0x3d, r28	; 61
    30bc:	de bf       	out	0x3e, r29	; 62
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	1f 91       	pop	r17
    30c4:	0f 91       	pop	r16
    30c6:	ff 90       	pop	r15
    30c8:	ef 90       	pop	r14
    30ca:	df 90       	pop	r13
    30cc:	cf 90       	pop	r12
    30ce:	bf 90       	pop	r11
    30d0:	af 90       	pop	r10
    30d2:	9f 90       	pop	r9
    30d4:	8f 90       	pop	r8
    30d6:	7f 90       	pop	r7
    30d8:	6f 90       	pop	r6
    30da:	5f 90       	pop	r5
    30dc:	4f 90       	pop	r4
    30de:	3f 90       	pop	r3
    30e0:	2f 90       	pop	r2
    30e2:	08 95       	ret

000030e4 <strnlen_P>:
    30e4:	fc 01       	movw	r30, r24
    30e6:	05 90       	lpm	r0, Z+
    30e8:	61 50       	subi	r22, 0x01	; 1
    30ea:	70 40       	sbci	r23, 0x00	; 0
    30ec:	01 10       	cpse	r0, r1
    30ee:	d8 f7       	brcc	.-10     	; 0x30e6 <strnlen_P+0x2>
    30f0:	80 95       	com	r24
    30f2:	90 95       	com	r25
    30f4:	8e 0f       	add	r24, r30
    30f6:	9f 1f       	adc	r25, r31
    30f8:	08 95       	ret

000030fa <strnlen>:
    30fa:	fc 01       	movw	r30, r24
    30fc:	61 50       	subi	r22, 0x01	; 1
    30fe:	70 40       	sbci	r23, 0x00	; 0
    3100:	01 90       	ld	r0, Z+
    3102:	01 10       	cpse	r0, r1
    3104:	d8 f7       	brcc	.-10     	; 0x30fc <strnlen+0x2>
    3106:	80 95       	com	r24
    3108:	90 95       	com	r25
    310a:	8e 0f       	add	r24, r30
    310c:	9f 1f       	adc	r25, r31
    310e:	08 95       	ret

00003110 <fputc>:
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	fb 01       	movw	r30, r22
    311a:	23 81       	ldd	r18, Z+3	; 0x03
    311c:	21 fd       	sbrc	r18, 1
    311e:	03 c0       	rjmp	.+6      	; 0x3126 <fputc+0x16>
    3120:	8f ef       	ldi	r24, 0xFF	; 255
    3122:	9f ef       	ldi	r25, 0xFF	; 255
    3124:	28 c0       	rjmp	.+80     	; 0x3176 <fputc+0x66>
    3126:	22 ff       	sbrs	r18, 2
    3128:	16 c0       	rjmp	.+44     	; 0x3156 <fputc+0x46>
    312a:	46 81       	ldd	r20, Z+6	; 0x06
    312c:	57 81       	ldd	r21, Z+7	; 0x07
    312e:	24 81       	ldd	r18, Z+4	; 0x04
    3130:	35 81       	ldd	r19, Z+5	; 0x05
    3132:	42 17       	cp	r20, r18
    3134:	53 07       	cpc	r21, r19
    3136:	44 f4       	brge	.+16     	; 0x3148 <fputc+0x38>
    3138:	a0 81       	ld	r26, Z
    313a:	b1 81       	ldd	r27, Z+1	; 0x01
    313c:	9d 01       	movw	r18, r26
    313e:	2f 5f       	subi	r18, 0xFF	; 255
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	20 83       	st	Z, r18
    3144:	31 83       	std	Z+1, r19	; 0x01
    3146:	8c 93       	st	X, r24
    3148:	26 81       	ldd	r18, Z+6	; 0x06
    314a:	37 81       	ldd	r19, Z+7	; 0x07
    314c:	2f 5f       	subi	r18, 0xFF	; 255
    314e:	3f 4f       	sbci	r19, 0xFF	; 255
    3150:	26 83       	std	Z+6, r18	; 0x06
    3152:	37 83       	std	Z+7, r19	; 0x07
    3154:	10 c0       	rjmp	.+32     	; 0x3176 <fputc+0x66>
    3156:	eb 01       	movw	r28, r22
    3158:	09 2f       	mov	r16, r25
    315a:	18 2f       	mov	r17, r24
    315c:	00 84       	ldd	r0, Z+8	; 0x08
    315e:	f1 85       	ldd	r31, Z+9	; 0x09
    3160:	e0 2d       	mov	r30, r0
    3162:	19 95       	eicall
    3164:	89 2b       	or	r24, r25
    3166:	e1 f6       	brne	.-72     	; 0x3120 <fputc+0x10>
    3168:	8e 81       	ldd	r24, Y+6	; 0x06
    316a:	9f 81       	ldd	r25, Y+7	; 0x07
    316c:	01 96       	adiw	r24, 0x01	; 1
    316e:	8e 83       	std	Y+6, r24	; 0x06
    3170:	9f 83       	std	Y+7, r25	; 0x07
    3172:	81 2f       	mov	r24, r17
    3174:	90 2f       	mov	r25, r16
    3176:	df 91       	pop	r29
    3178:	cf 91       	pop	r28
    317a:	1f 91       	pop	r17
    317c:	0f 91       	pop	r16
    317e:	08 95       	ret

00003180 <__ultoa_invert>:
    3180:	fa 01       	movw	r30, r20
    3182:	aa 27       	eor	r26, r26
    3184:	28 30       	cpi	r18, 0x08	; 8
    3186:	51 f1       	breq	.+84     	; 0x31dc <__ultoa_invert+0x5c>
    3188:	20 31       	cpi	r18, 0x10	; 16
    318a:	81 f1       	breq	.+96     	; 0x31ec <__ultoa_invert+0x6c>
    318c:	e8 94       	clt
    318e:	6f 93       	push	r22
    3190:	6e 7f       	andi	r22, 0xFE	; 254
    3192:	6e 5f       	subi	r22, 0xFE	; 254
    3194:	7f 4f       	sbci	r23, 0xFF	; 255
    3196:	8f 4f       	sbci	r24, 0xFF	; 255
    3198:	9f 4f       	sbci	r25, 0xFF	; 255
    319a:	af 4f       	sbci	r26, 0xFF	; 255
    319c:	b1 e0       	ldi	r27, 0x01	; 1
    319e:	3e d0       	rcall	.+124    	; 0x321c <__ultoa_invert+0x9c>
    31a0:	b4 e0       	ldi	r27, 0x04	; 4
    31a2:	3c d0       	rcall	.+120    	; 0x321c <__ultoa_invert+0x9c>
    31a4:	67 0f       	add	r22, r23
    31a6:	78 1f       	adc	r23, r24
    31a8:	89 1f       	adc	r24, r25
    31aa:	9a 1f       	adc	r25, r26
    31ac:	a1 1d       	adc	r26, r1
    31ae:	68 0f       	add	r22, r24
    31b0:	79 1f       	adc	r23, r25
    31b2:	8a 1f       	adc	r24, r26
    31b4:	91 1d       	adc	r25, r1
    31b6:	a1 1d       	adc	r26, r1
    31b8:	6a 0f       	add	r22, r26
    31ba:	71 1d       	adc	r23, r1
    31bc:	81 1d       	adc	r24, r1
    31be:	91 1d       	adc	r25, r1
    31c0:	a1 1d       	adc	r26, r1
    31c2:	20 d0       	rcall	.+64     	; 0x3204 <__ultoa_invert+0x84>
    31c4:	09 f4       	brne	.+2      	; 0x31c8 <__ultoa_invert+0x48>
    31c6:	68 94       	set
    31c8:	3f 91       	pop	r19
    31ca:	2a e0       	ldi	r18, 0x0A	; 10
    31cc:	26 9f       	mul	r18, r22
    31ce:	11 24       	eor	r1, r1
    31d0:	30 19       	sub	r19, r0
    31d2:	30 5d       	subi	r19, 0xD0	; 208
    31d4:	31 93       	st	Z+, r19
    31d6:	de f6       	brtc	.-74     	; 0x318e <__ultoa_invert+0xe>
    31d8:	cf 01       	movw	r24, r30
    31da:	08 95       	ret
    31dc:	46 2f       	mov	r20, r22
    31de:	47 70       	andi	r20, 0x07	; 7
    31e0:	40 5d       	subi	r20, 0xD0	; 208
    31e2:	41 93       	st	Z+, r20
    31e4:	b3 e0       	ldi	r27, 0x03	; 3
    31e6:	0f d0       	rcall	.+30     	; 0x3206 <__ultoa_invert+0x86>
    31e8:	c9 f7       	brne	.-14     	; 0x31dc <__ultoa_invert+0x5c>
    31ea:	f6 cf       	rjmp	.-20     	; 0x31d8 <__ultoa_invert+0x58>
    31ec:	46 2f       	mov	r20, r22
    31ee:	4f 70       	andi	r20, 0x0F	; 15
    31f0:	40 5d       	subi	r20, 0xD0	; 208
    31f2:	4a 33       	cpi	r20, 0x3A	; 58
    31f4:	18 f0       	brcs	.+6      	; 0x31fc <__ultoa_invert+0x7c>
    31f6:	49 5d       	subi	r20, 0xD9	; 217
    31f8:	31 fd       	sbrc	r19, 1
    31fa:	40 52       	subi	r20, 0x20	; 32
    31fc:	41 93       	st	Z+, r20
    31fe:	02 d0       	rcall	.+4      	; 0x3204 <__ultoa_invert+0x84>
    3200:	a9 f7       	brne	.-22     	; 0x31ec <__ultoa_invert+0x6c>
    3202:	ea cf       	rjmp	.-44     	; 0x31d8 <__ultoa_invert+0x58>
    3204:	b4 e0       	ldi	r27, 0x04	; 4
    3206:	a6 95       	lsr	r26
    3208:	97 95       	ror	r25
    320a:	87 95       	ror	r24
    320c:	77 95       	ror	r23
    320e:	67 95       	ror	r22
    3210:	ba 95       	dec	r27
    3212:	c9 f7       	brne	.-14     	; 0x3206 <__ultoa_invert+0x86>
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	61 05       	cpc	r22, r1
    3218:	71 05       	cpc	r23, r1
    321a:	08 95       	ret
    321c:	9b 01       	movw	r18, r22
    321e:	ac 01       	movw	r20, r24
    3220:	0a 2e       	mov	r0, r26
    3222:	06 94       	lsr	r0
    3224:	57 95       	ror	r21
    3226:	47 95       	ror	r20
    3228:	37 95       	ror	r19
    322a:	27 95       	ror	r18
    322c:	ba 95       	dec	r27
    322e:	c9 f7       	brne	.-14     	; 0x3222 <__ultoa_invert+0xa2>
    3230:	62 0f       	add	r22, r18
    3232:	73 1f       	adc	r23, r19
    3234:	84 1f       	adc	r24, r20
    3236:	95 1f       	adc	r25, r21
    3238:	a0 1d       	adc	r26, r0
    323a:	08 95       	ret

0000323c <_exit>:
    323c:	f8 94       	cli

0000323e <__stop_program>:
    323e:	ff cf       	rjmp	.-2      	; 0x323e <__stop_program>
